package ID.ID.ID.ID.ID.ID;

import ID.ID.ID;

import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.ID;
import ID.ID.ID.ID.ID.ID.*;


public class ID{
  private static void ID(IDID, IDID, IDID) throws ID, ID{
                                                                             
    if (ID.ID.ID() == ID)
      throw new ID(ID);
    else {
      IDID= ID;
      if (!ID.ID.ID()) ID= ID.ID.ID(ID);
      ID.ID(ID.ID);
      ID.ID(ID.ID.ID(ID), null);
      ID.ID(ID, false);
    }
  }

  public static void ID(final ID[] ID) throws ID, ID{
    try {
      IDID= new ID();

                             
      if (ID.ID== ID) throw new ID(ID.ID);
      for (IDID: ID)
        if (ID.ID(ID) == ID)
          throw new ID(ID+ ID+ ID+ ID.ID);
        else if (ID.ID(ID) == ID) {
          if (ID.ID() == ID) throw new ID(ID);
          if (ID.ID(ID) == ID) {
            if (ID.ID() == ID) throw new ID(ID);
            ID.ID(ID.ID(ID));                      
          } else
            ID.ID(ID+ ID.ID(ID));                     
        } else
          ID.ID(ID.ID(ID));                           

                                                                              
        
                                                             

      switch (ID.ID.ID) {
      case ID:

                                                                                                     
        IDID= ID.ID(ID, ID.ID(), false, ID.ID);
                                                                                                                         

        IDID= new ID(ID, ID.ID);

                                                                        
        IDID= new ID();
        IDID= new ID(ID);

        ID.ID(ID);
        ID.ID(ID.ID.ID, ID.ID.ID+ ID,
            ID.ID()                                );

        ID.ID();
        ID.ID(ID);
        ID.ID(ID.ID.ID, ID.ID.ID+ ID, ID.ID());
        break;

      case ID:
        IDID= new ID(
            ID.ID(ID, ID.ID(), true, ID.ID));
                                                                                                            
        if (ID.ID.ID.ID()) throw new ID(ID);
        ID.ID(ID.ID.ID.ID(ID));
        ID.ID();
        ID.ID();
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(ID.ID(ID, ID.ID(), true, ID.ID)));
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(ID.ID(ID, ID.ID(), true, ID.ID)));
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(ID.ID(ID, ID.ID(), true, ID.ID)));
        break;

      case ID:
        ID(ID, ID.ID, new ID(
            new ID(ID.ID(ID, ID.ID(), true, ID.ID))));
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(ID.ID(ID, ID.ID(), true, ID.ID)));
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(ID.ID(ID, ID.ID(), true, ID.ID)));
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(ID.ID(ID, ID.ID(), true, ID.ID)));
        break;

      case ID:

                                                                                                     
        IDID= ID.ID(ID, ID.ID(), false, ID.ID);

        IDID= new ID(ID, ID.ID);

                                                                        
        ID= new ID();
        ID= new ID(ID);

        ID.ID(ID);
        ID.ID(ID.ID.ID, ID.ID.ID+ ID,
            ID.ID()                                );

        ID.ID();
        ID.ID(ID.ID.ID, ID.ID.ID+ ID,
            ID+ ID.ID.ID+ ID);

        break;

      case ID:
        ID(ID, ID.ID,
            new ID(ID.ID(ID, ID.ID(), true, ID.ID)));
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(new ID(ID.ID(ID, ID.ID(), true, ID.ID))));
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(new ID(ID.ID(ID, ID.ID(), true, ID.ID))));
        break;

      case ID:
        ID(ID, ID.ID,
            new ID(ID.ID(ID, ID.ID(), true, ID.ID)));
        break;

      default:
        throw new ID(ID+ ID.ID.ID);
      }
    } catch (IDID) {
      ID.ID(ID.ID());
    }
  }
}




public class IDextends ID{

     
    
     
  private static final long ID= ID;

  public void ID(int... ID) {
    for (int ID: ID)
      ID(ID);
  }

}







public class ID{

  private final IDID;
  private IDID= null;
  private final int ID= ID;
  private final boolean ID= true;

  public ID(IDID, IDID) throws ID{
    ID= new ID(ID);
                                                      
  }

  public void ID(IDID) throws ID{
                                                 
    ID= ID;

                                 
    ID<ID> ID= new ID<>();

    int ID= ID;
    int ID= ID.ID;

    while (++ID< ID.ID) {
      if (++ID> ID) {                                                                 
        while (ID.ID[--ID] != ID)
          ;
        ID.ID(ID);
        ID= ID;
      }
    }
    ID.ID(ID.ID);

                                                             

                                                                     
    ID.ID(ID+ ID+ ID+ ID);

    ID.ID(ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID.ID+ ID+ ID+ ID.ID+ ID+ ID+ ID.ID+ ID);

    for (int ID= ID; ID.ID[ID.ID][ID] != ID; ID++)
      ID.ID(ID.ID[ID.ID][ID] + ID);
    ID.ID(ID);

    ID.ID(ID+ ID+ ID+ ID);

    ID.ID(ID);
    ID.ID(ID+ ID.ID+ ID);
    int ID= ID;
    for (int ID= ID; ID< ID.ID; ID++) {
      if (ID> ID.ID(ID)) {
        ID.ID(ID+ (ID+ ID) + ID+ (ID+ ID) + ID);
        ID++;
      }
      ID.ID(ID+ ID+ ID+ ID.ID[ID] + ID);
    }
    ID.ID(ID);

    ID.ID(ID);
    ID.ID(ID+ ID.ID.ID+ ID);
    for (int ID= ID; ID< ID.ID.ID; ID++)
      if (ID.ID[ID] != null) ID.ID(ID+ ID+ ID);
    ID.ID(ID);

    for (int ID= ID; ID< ID.ID.ID; ID++) {
      if (ID.ID[ID] != null) {
        ID.ID(ID+ ID+ ID);
        ID.ID(ID+ ID+ ID);
        ID.ID(ID+ ID+ ID+ ID+ ID+ ID.ID[ID].ID+ ID);
        for (int ID= ID; ID< ID.ID[ID].ID; ID++)
          if (ID.ID[ID][ID]) ID.ID(ID+ ID+ ID+ ID+ ID);
        ID.ID(ID);
      }
    }

    ID.ID(ID+ ID.ID+ ID);
    for (int ID= ID.ID+ ID; ID< ID.ID; ID++) {
      ID.ID(ID+ ID+ ID);
      for (int ID= ID; ID.ID[ID] != null && ID< ID.ID[ID].ID- ID; ID++)
        ID.ID(ID.ID[ID][ID] + ID+ ID);

      ID.ID(ID+ ID+ ID.ID[ID] + ID);
      for (int ID= ID; ID.ID[ID] != null && ID< ID.ID[ID].ID- ID; ID++)
        ID.ID(ID.ID[ID.ID[ID][ID] + ID] + ID);
      ID.ID(ID);
    }
    ID.ID(ID);

    ID.ID(ID+ ID.ID+ ID);
    for (int ID= ID.ID; ID< ID.ID; ID++)
      if (ID.ID[ID] != ID) ID.ID(ID+ ID+ ID+ ID.ID[ID] + ID+ ID.ID[ID] + ID+ ID.ID(ID.ID[ID.ID[ID]]));
    ID.ID(ID);

    ID.ID(ID+ ID.ID+ ID);
    for (int ID= ID.ID+ ID; ID< ID.ID; ID++)
      ID.ID(ID+ ID+ ID+ ID.ID[ID] + ID+ ID.ID[ID] + ID+ ID.ID(ID.ID[ID.ID[ID]]));
    ID.ID(ID);

    ID.ID(ID);
    ID.ID(ID+ ID.ID+ ID);
    ID.ID(ID+ ID.ID+ ID);
    ID.ID(ID+ ID.ID+ ID);
    ID.ID(ID+ ID.ID+ ID);
    ID.ID(ID+ ID.ID+ ID);

    ID= ID;
    for (int ID= ID.ID; ID< ID.ID; ID++) {
      if (ID> ID.ID(ID)) {
        ID.ID(ID+ (ID+ ID) + ID+ (ID+ ID) + ID);
        ID++;
      }

      ID.ID(ID+ ID.ID[ID]);
      ID.ID(ID+ ID+ ID+ ID.ID[ID] + ID+ ID.ID[ID.ID[ID]]);
      ID.ID(ID+ ID+ ID+ ID.ID(ID) + ID+ ID.ID[ID.ID(ID)]);
      ID.ID(ID+ ID+ ID+ ID.ID[ID] + ID);
      ID.ID(ID+ ID+ ID+ ID.ID[ID] + ID+ ID.ID[ID.ID[ID]]);
      ID.ID(ID+ ID+ ID+ ID.ID(ID) + ID);
    }
    ID.ID(ID);

    ID.ID(ID);

    for (int ID= ID.ID() - ID; ID>= ID; ID--)
      ID.ID(ID+ ID.ID(ID) + ID+ (ID+ ID) + ID);

    int ID= ID;

    ID.ID(ID);
    for (int ID= ID.ID; ID< ID.ID; ID++) {
      if (ID> ID.ID(ID)) ID.ID(ID+ (ID+ ID++) + ID);
      if (ID.ID(ID) && ID< ID.ID- ID&& !ID.ID(ID+ ID)) continue;

      ID.ID(ID+ ID+ ID+ ID+ ID.ID[ID] + (ID? ID: ID));

      if (ID.ID(ID))
        ID.ID(ID+ ID.ID(ID) + ID+ ID+ ID+ ID+ ID.ID[ID.ID[ID]] + ID+ ID+ ID.ID[ID] + ID+ ID);
      else {
        if (ID.ID(ID- ID)) {                                        
          if (ID.ID(ID)) {

            ID.ID(ID+ (ID+ ID) + ID+ ID);
          } else if (ID.ID(ID)) {
            ID.ID(ID+ (ID+ ID) + ID);
          }
          if (ID.ID(ID)) {
            ID.ID(ID+ ID.ID[ID.ID[ID]] + ID+ ID+ ID.ID[ID]
                + ID+ ID);
          }
          continue;
        } else {
          if (ID.ID(ID)) {
            ID.ID(ID+ ID.ID[ID] + ID+ ID.ID[ID] + ID+ ID.ID[ID.ID[ID]] + ID);
            ID.ID(ID+ (ID+ ID) + ID+ ID);
          } else if (ID.ID(ID)) {
            ID.ID(ID+ ID.ID[ID] + ID+ ID.ID[ID] + ID+ ID.ID[ID.ID[ID]] + ID);
            ID.ID(ID+ (ID+ ID) + ID);
          }
          if (ID.ID(ID)) {
            ID.ID(ID+ ID.ID[ID.ID[ID]] + ID+ ID+ ID.ID[ID] + ID+ ID);
          }
        }
      }
    }

    ID.ID(
        ID+ ID);
    ID.ID(ID);
    ID.ID(ID);

  }
}


@ID(ID)
public class IDextends ID{
  public ID(IDID) {
    super(ID);
  }
}








public class IDextends ID{

  public static void ID(final ID[] ID) throws ID, ID{
    ID.ID(ID);
  }

  @IDpublic void ID(final IDID) throws ID, ID{
    new ID().ID(ID, ID);
  }
}



                                                                                                                              
public class ID{

  IDID;

  public ID(IDID, IDID, IDID, IDID, IDID, double ID,
      double ID, double ID, double ID) throws ID{

    this.ID= ID;
    IDID= this;                                                                                              
    IDID;
    IDID;
    IDID;

                              
    IDID= new ID(ID.ID());
    IDID= new ID(ID.ID());
    ID.ID(true);

    IDID= new ID();
    ID.ID(ID);
    IDID= new ID(ID);
    ID.ID(ID-> {
      ID.ID.ID(ID);
      ID.ID().ID();
      ID.ID().ID();
      ID.ID();
      ID.ID(() -> ID.ID(new ID()));

    });
    ID.ID(new ID(ID));
    ID.ID(ID);

    IDID= new ID(ID);
    ID.ID(ID-> {
      ID.ID.ID(ID);
    });
    ID.ID(new ID(ID));
    ID.ID(ID);

    IDID= new ID(ID);
    ID.ID(ID-> {
      ID.ID();
      ID.ID(ID);
    });
    ID.ID(new ID(ID));
    ID.ID(ID);

    ID.ID().ID(ID, ID, ID);

    IDID= new ID(ID.ID(ID));
    ID.ID(ID);
    ID.ID(ID);
    IDID= new ID(ID.ID(ID));
    ID.ID(ID);
    ID.ID(ID);

    IDID= new ID(ID);
    ID.ID(true);
                                             
    IDID= new ID(ID);
    ID.ID(true);
                                           

    IDID= new ID();
    ID.ID().ID(ID, ID, ID);

    IDID= new ID();

    ID.ID().ID(ID, ID);

    ID= ID.ID().ID();
    ID= new ID();
    ID.ID(
        ID+ ID== null ? ID: ID+ ID+ ID== null ? ID: ID);
    ID.ID(ID.ID() * ID);
    ID.ID(ID.ID() * ID);
    ID.ID(ID.ID() * ID);
    ID.ID(ID.ID() * ID);
    ID.ID(new ID<ID>() {
      @IDpublic void ID(IDID) {
        ID.ID();
        ID.ID(ID);
      }
    });

               
    ID= new ID(ID);
    ID.ID(ID);
    ID.ID();

                        
    new ID(ID.ID(), false);

  }

}





















public class ID{
  private final IDID= new ID();
  private final IDID= new ID();
  IDID= new ID();
  private final IDID= new ID(true);
  private final IDID= new ID();
  private final IDID= new ID();
  private final IDID= new ID();
  private final double ID= ID;

  private double ID;
  private double ID;
  private double ID;
  private double ID;
  private double ID;
  private double ID;

  private final IDID= new ID();
  private final IDID= new ID();
  private final IDID= new ID();
  private final IDID= new ID();

                                 
  private final IDID;
  private final boolean ID;
  private final double ID= ID;                                       
  private final double ID= ID/ ID;                                                  
  private final double ID= ID/ ID;                                                  
  private final double ID= ID;                                     
  private final double ID= ID/ ID;                                                  
  private final double ID= ID/ ID;                                                  
  private final double ID= ID;
  private final double ID= ID/ ID;
  private final double ID= ID;
  private final double ID= ID;
  private final double ID= ID* ID;
  private final double ID= ID;
  private final double ID= ID;
  private final double ID= ID+ ID;
  private final IDID;

                                                                                                                      
  private int ID, ID;
  private final ID<ID, ID> ID= new ID<ID, ID>();
  private final ID<ID, ID> ID= new ID<ID, ID>();

  public ID(IDID, boolean ID) {
                                               
    this.ID= ID;
    this.ID= ID;
    ID= ID? ID: ID;
    final IDID= new ID();
    ID(ID);
    ID.ID().ID(ID);
                                                      

                          
    ID.ID(ID.ID);
    ID.ID(ID.ID);

    ID.ID(ID.ID);
    ID.ID(ID.ID);

    ID.ID(ID.ID);
    ID.ID(ID.ID);

    ID.ID(ID.ID);
    ID.ID(ID.ID);

    ID.ID().ID(ID);

    ID();
    IDID= new ID(ID, ID, ID, true, ID.ID);
    ID.ID(ID.ID);
    ID(ID, ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID();
  }

  private void ID() {
    ID.ID().ID(ID);
    ID.ID().ID(ID);
    ID.ID().ID(ID);
    ID.ID().ID(ID);
    ID.ID(           ID);                                                                                                 

    ID.ID(ID);
    ID.ID(ID);
    ID.ID(-ID);
    ID.ID.ID(ID);
    ID.ID.ID(ID);
  }

  private void ID(IDID, final IDID) {
    ID.ID(new ID<ID>() {
      @IDpublic void ID(IDID) {
        ID= ID.ID();
        ID= ID.ID();
        ID= ID.ID();
        ID= ID.ID();
      }
    });
    ID.ID(new ID<ID>() {
      @IDpublic void ID(IDID) {
        ID= ID;
        ID= ID;
        ID= ID.ID();
        ID= ID.ID();
        ID= (ID- ID);
        ID= (ID- ID);

        if (ID.ID() && (ID.ID() || ID.ID())) {
          double ID= ID.ID();
          double ID= ID+ ID;
          ID.ID(ID);
        } else if (ID.ID()) {
          ID.ID.ID(ID.ID.ID() + ID);
          ID.ID.ID(ID.ID.ID() - ID);
        } else if (ID.ID()) {
          ID.ID.ID(ID.ID.ID() - ID);
          ID.ID.ID(ID.ID.ID() - ID);
        }
      }
    });
  }

                                                                                                        
  private int ID(int ID, int ID, int ID) {
    int ID= ID;
                                                                                                                               
                                                                      
    IDID= new ID(ID.ID[ID.ID(ID)]).ID();
    double ID= ID.ID() + ID;
    double ID= ID.ID();

    if (ID.ID(ID) == null || ID> ID.ID(ID)) ID.ID(ID, ID);
    if (ID.ID(ID) == null || ID> ID.ID(ID)) ID.ID(ID, ID);

                                                  
    for (int ID= ID.ID(ID); ID!= ID; ID= ID.ID(ID)) {
      if (ID.ID(ID) != ID) {
        int ID= ID(ID.ID(ID), ID, ID+ ID);
        ID= ID(ID.ID(ID), ID+ ID, ID+ ID);
      } else
        ID= ID(ID.ID(ID), ID, ID+ ID);
    }
    return ID;
  }

                                                                                                              
  private void ID(IDID, int ID, int ID, int ID, int ID, int ID, boolean ID, boolean ID, boolean ID,
      boolean ID) {
                                                                                                        
    if (!ID) ID= ID;
                               
    double ID= ID.ID(ID);
    double ID= ID.ID(ID);
    double ID= ID.ID(ID+ ID) - ID- ID;
    double ID= ID.ID(ID+ ID) - ID- ID;
    double ID= ID/ ID;
    double ID= ID/ ID;

                                         
    IDID= new ID(ID, ID);
    ID.ID().ID(ID.ID[ID.ID(ID)], ID, ID);

                               
    final IDID= new ID(ID+ ID, ID, ID);
    ID.ID(ID);
    ID.ID(ID/ ID);
    final IDID= new ID(ID, ID, ID);
    ID.ID(ID);
    ID.ID(ID);
    final IDID= new ID(ID, ID, ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    final IDID= new ID(ID+ ID, ID, ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);

    IDID= null, ID= null;
    if (ID) {
      if (ID) {
        ID= new ID(ID, ID, ID);
        ID.ID(ID);
        ID.ID(-ID);
      } else {
        ID= new ID(ID, ID, ID);
        ID.ID(ID);
        ID.ID(-ID);
      }
      ID.ID(ID);
    }

    if (ID) {
      if (ID) {
        ID= new ID(ID, ID, ID);
        ID.ID(ID);
        ID.ID(ID+ ID);
      } else {
        ID= new ID(ID, ID, ID);
        ID.ID(ID);
        ID.ID(ID+ ID);
      }
      ID.ID(ID);
    }
    IDID= null;
    if (ID) {
      double ID= (ID- ID) * ID;
      ID= new ID(ID, ID, ID);
      ID.ID(ID);
      ID.ID(ID);
      ID.ID(-ID);
      ID.ID(-(ID/ ID));
    }
                                            
    IDID= new ID();
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID* ID);
    ID.ID().ID(ID, ID, ID, ID, ID);
    if (ID) ID.ID().ID(ID);
    if (ID) ID.ID().ID(ID);
    if (ID) ID.ID().ID(ID);

    ID.ID().ID(ID);
  }

  int ID= ID;

                                                                         
  private int ID(IDID, int ID, int ID, int ID, int ID, int ID, boolean ID, boolean ID) {
    int ID= ID;
    int ID= ID;

                                                                                                                                                              

                                                  
    int ID= ID;
    for (int ID= ID.ID(ID); ID!= ID; ID= ID.ID(ID)) {
      if (ID.ID(ID) != ID) {
        ID= ID(ID, ID.ID(ID), ID, ID, ID+ ID, ID, true, ID!= ID);
        ID= ID(ID, ID.ID(ID), ID, ID+ ID, ID+ ID, ID, true, false);
      } else
        ID= ID(ID, ID.ID(ID), ID, ID, ID+ ID, ID, true, ID!= ID);

      if (ID.ID(ID) != ID) ID++;
    }

    ID(ID, ID, ID, ID, ID, ID, ID.ID(ID) != ID, ID, ID>= ID, ID);

    final IDID;
    if (ID!= ID&& ID!= ID) {
      if (ID) {
        double ID= ID.ID(ID);
        ID= new ID(ID, ID+ ID, ID);
        ID.ID(ID.ID(ID) + ID+ ID/ ID);
        ID.ID(ID.ID(ID) - ID);
      } else {
        double ID= ID.ID(ID) - ID.ID(ID);
        ID= new ID(ID+ ID, ID, ID);
        ID.ID(ID.ID(ID) + ID+ ID/ ID);
        ID.ID(ID.ID(ID) - ID);
        ID.ID(ID* ID);
      }
      ID.ID(ID);
      ID.ID().ID(ID);
    }
    return ID;
  }

  private void ID(IDID) {
                                                  
    ID(ID.ID(), ID, ID);

                               
    ID= ID= ID;
    for (int ID: ID.ID())
      if (ID> ID) ID= ID;
    for (int ID: ID.ID())
      if (ID> ID) ID= ID;

                                                                       
    double ID= ID;
    for (int ID= ID; ID<= ID; ID++) {
      IDID= ID.ID(ID);
      ID.ID(ID, ID);
      ID+= ID+ ID;
    }
    ID.ID(ID+ ID, ID);

    ID= ID;
    for (int ID= ID; ID<= ID; ID++) {
      IDID= ID.ID(ID);
      ID.ID(ID, ID);
      ID+= ID+ ID;
    }
    ID.ID(ID+ ID, ID);

                                                    
                                                    
                          
    ID(ID, ID.ID(), -ID, ID, ID, ID, false, false);

                                              
    ID.ID(-ID.ID(ID) / ID);
    ID.ID(-ID.ID(ID) / ID);
  }
}









class ID{
  final IDID;
  final double ID= ID;                                       
  final double ID= ID;                                     
  final double ID= ID/ ID;                                                  
  final double ID= ID;                                                       
  final double ID= ID* ID;                                                                                                         
  final double ID= ID;                                                   
  final double ID= new ID(ID).ID().ID() - ID;

  int ID, ID;
  ID<ID, ID> ID= new ID<ID, ID>();
  ID<ID, ID> ID= new ID<ID, ID>();
  private final IDID;

  private double ID(IDID) {
    return new ID(ID.ID()).ID().ID() + ID;
  }

  private void ID(IDID, IDID, int ID, int ID, boolean ID, boolean ID) {
    double ID= ID.ID(ID);
    double ID= ID.ID(ID);
    double ID= ID.ID(ID+ ID) - ID- ID+ ID;
    double ID= ID.ID(ID+ ID) - ID- ID+ ID;

    ID.ID(ID, ID, ID, ID, ID, ID);
    ID.ID(ID.ID(), ID+ ID, ID+ ID);                       
    ID.ID(ID+ (ID? ID: ID), ID, ID+ ID, ID- ID+ ID);
    if (ID) ID.ID(ID+ ID, ID+ ID, ID+ ID, ID+ ID+ ID);
                                                                                                                                                       
  }

  private void ID(IDID, int ID, int ID) {
                                                                                              
    if (ID> ID) ID= ID;
    if (ID> ID) ID= ID;
    IDID= new ID(ID.ID()).ID();

    double ID= ID.ID();
    double ID= ID.ID();
    if (ID.ID(ID) == null || ID> ID.ID(ID)) ID.ID(ID, ID);
    if (ID.ID(ID) == null || ID> ID.ID(ID)) ID.ID(ID, ID);
    if (ID.ID() != null) ID(ID.ID(), ID, ID+ ID);
    if (ID.ID() != null) ID(ID.ID(), ID+ ID, ID);
  }

  private void ID(IDID, IDID, int ID, int ID, int ID, boolean ID) {
                                                                                                                 
    if (ID> ID) ID= ID;
    if (ID> ID) ID= ID;
                             
    int ID= ID;
    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID++;

    boolean ID= ID!= ID;
    if (ID== ID)                                            
      ID= ID;

    ID(ID, ID, ID, ID, ID, ID);

    if (ID.ID() != null) ID(ID.ID(), ID, ID, ID, ID+ ID, true);
    if (ID.ID() != null)
      ID(ID.ID(), ID, ID, ID+ ID, ID, false);
    else                                                  
    if (ID!= ID&& ID!= ID)
      ID.ID(ID.ID(ID) + ID, ID.ID(ID) - ID, ID.ID(ID) + ID, ID.ID(ID) - ID);
  }

  ID(IDID) {
    this.ID= ID;

                        
    ID= ID= ID;
    ID(ID.ID(), ID, ID);

                                                             
    double ID= ID;
    for (int ID= ID; ID<= ID; ID++) {
      IDID= ID.ID(ID);
      ID.ID(ID, ID);
      ID+= ID+ ID;
    }
    ID.ID(ID+ ID, ID);
                                                                  

    ID= ID;
    for (int ID= ID; ID<= ID; ID++) {
      IDID= ID.ID(ID);
      ID.ID(ID, ID);
      ID+= ID+ ID;
    }
    ID.ID(ID+ ID, ID);
                                                                  

                              
    ID= new ID(ID.ID(ID+ ID), ID.ID(ID+ ID));
    IDID= ID.ID();
    ID.ID(ID.ID);

    IDID= new ID(ID);
    ID.ID(true);
    ID.ID(true);
    ID.ID(true);

                     
    ID= ID= ID;
    ID(ID.ID(), ID, -ID, ID, ID, false);
  }

  public IDID() {
    return ID;
  }
}






















public class ID{
  private final IDID= new ID();
  private final IDID= new ID();
  IDID= new ID();
  private final IDID= new ID(true);
  private final IDID= new ID();
  private final IDID= new ID();
  private final IDID= new ID();
  private final double ID= ID;

  private double ID;
  private double ID;
  private double ID;
  private double ID;
  private double ID;
  private double ID;

  private final IDID= new ID();
  private final IDID= new ID();
  private final IDID= new ID();
  private final IDID= new ID();

                                 
  private final IDID;
  private final boolean ID;
  private final double ID= ID;                                       
  private final double ID= ID/ ID;                                                  
  private final double ID= ID/ ID;                                                  
  private final double ID= ID;                                     
  private final double ID= ID/ ID;                                                  
  private final double ID= ID/ ID;                                                  
  private final double ID= ID;
  private final double ID= ID;
  private final double ID= ID* ID;
  private final double ID= ID;
  private final double ID= ID;
  private final double ID= ID+ ID;
  private final IDID;

                                                                                                                      
  private int ID= ID, ID= ID;                                                                                      
  private final ID<ID, ID> ID= new ID<ID, ID>();
  private final ID<ID, ID> ID= new ID<ID, ID>();

  public ID(IDID, boolean ID) {
                                               
    this.ID= ID;
    this.ID= ID;
    ID= ID? ID: ID;
    final IDID= new ID();
    ID(ID);
    ID.ID().ID(ID);
                                                      

                          
    ID.ID(ID.ID);
    ID.ID(ID.ID);

    ID.ID(ID.ID);
    ID.ID(ID.ID);

    ID.ID(ID.ID);
    ID.ID(ID.ID);

    ID.ID(ID.ID);
    ID.ID(ID.ID);

    ID.ID().ID(ID);

    ID();
    IDID= new ID(ID, ID, ID, true, ID.ID);
    ID.ID(ID.ID);
    ID(ID, ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID();
  }

  private void ID() {
    ID.ID().ID(ID);
    ID.ID().ID(ID);
    ID.ID().ID(ID);
    ID.ID().ID(ID);
    ID.ID(           ID);                                                                                                 

    ID.ID(ID);
    ID.ID(ID);
    ID.ID(-ID);
    ID.ID.ID(ID);
    ID.ID.ID(ID);
  }

  private void ID(IDID, final IDID) {
    ID.ID(new ID<ID>() {
      @IDpublic void ID(IDID) {
        ID= ID.ID();
        ID= ID.ID();
        ID= ID.ID();
        ID= ID.ID();
      }
    });
    ID.ID(new ID<ID>() {
      @IDpublic void ID(IDID) {
        ID= ID;
        ID= ID;
        ID= ID.ID();
        ID= ID.ID();
        ID= (ID- ID);
        ID= (ID- ID);

        if (ID.ID()) {
          ID.ID.ID(ID.ID.ID() + ID);
          ID.ID.ID(ID.ID.ID() - ID);
        } else if (ID.ID()) {
          double ID= ID.ID();
          double ID= ID+ ID;
          ID.ID(ID);
        } else if (ID.ID()) {
          ID.ID.ID(ID.ID.ID() - ID);
          ID.ID.ID(ID.ID.ID() - ID);
        }
      }
    });
  }

  private void ID(IDID, int ID, int ID) {
                                                                                                           
    if (ID> ID) ID= ID;
    if (ID> ID) ID= ID;
    IDID= new ID(ID.ID()).ID();

    double ID= ID.ID() + ID;
    double ID= ID.ID();
    if (ID.ID(ID) == null || ID> ID.ID(ID)) ID.ID(ID, ID);
    if (ID.ID(ID) == null || ID> ID.ID(ID)) ID.ID(ID, ID);

    if (ID.ID() != null) ID(ID.ID(), ID? ID+ ID: ID, ID? ID: ID+ ID);
    if (ID.ID() != null) ID(ID.ID(), ID? ID: ID+ ID, ID? ID+ ID: ID);
  }

                                                                                                              
  private void ID(IDID, IDID, int ID, int ID, boolean ID, boolean ID, boolean ID) {
                                                                                           
                               
    double ID= ID.ID(ID);
    double ID= ID.ID(ID);
    double ID= ID.ID(ID+ ID) - ID- ID;
    double ID= ID.ID(ID+ ID) - ID- ID;
    double ID= ID/ ID;
    double ID= ID/ ID;

                                         
    IDID= new ID(ID, ID);
    ID.ID().ID(ID.ID(), ID, ID);

                               
    final IDID= new ID(ID, ID, ID);
    ID.ID(ID);
    ID.ID(ID/ ID);
    final IDID= new ID(ID, ID, ID);
    ID.ID(ID);
    ID.ID(ID);
    final IDID= new ID(ID, ID, ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    final IDID= new ID(ID, ID, ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);

    final IDID, ID;
    if (ID) {
      if (ID) {
        ID= new ID(ID, ID, ID);
        ID.ID(ID);
        ID.ID(-ID);
      } else {
        ID= new ID(ID, ID, ID);
        ID.ID(ID);
        ID.ID(-ID);
      }
      ID.ID(ID);
    } else
      ID= null;

    if (ID) {
      if (ID) {
        ID= new ID(ID, ID, ID);
        ID.ID(ID);
        ID.ID(ID+ ID);
      } else {
        ID= new ID(ID, ID, ID);
        ID.ID(ID);
        ID.ID(ID+ ID);
      }
      ID.ID(ID);
    } else
      ID= null;

                                            
    IDID= new ID();
    ID.ID(ID);
    ID.ID(ID);
    ID.ID().ID(ID, ID, ID, ID, ID);
    if (ID) ID.ID().ID(ID);
    if (ID) ID.ID().ID(ID);

    ID.ID().ID(ID);
  }

  private void ID(IDID, IDID, int ID, int ID, int ID, boolean ID) {
    if (ID> ID) ID= ID;
    if (ID> ID) ID= ID;
                             
    int ID= ID;
    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID++;

    boolean ID= ID!= ID;
    if (ID== ID)                                            
      ID= ID;

    ID(ID, ID, ID, ID, ID, ID, ID>= ID);

    if (ID.ID() != null)
      ID(ID, ID.ID(), ID? ID: ID, ID? ID+ ID: ID, ID? ID: ID+ ID, true);
    if (ID.ID() != null)
      ID(ID, ID.ID(), ID, ID? ID: ID+ ID, ID? ID+ ID: ID, false);
    else {                                                 
      final IDID;
      if (ID!= ID&& ID!= ID) {
        if (ID) {
          double ID= ID.ID(ID) - ID.ID(ID);
          ID= new ID(ID, ID, ID);
          ID.ID(ID.ID(ID) + ID+ ID/ ID);
          ID.ID(ID.ID(ID) - ID);
        } else {
          double ID= ID.ID(ID) - ID.ID(ID);
          ID= new ID(ID, ID, ID);
          ID.ID(ID.ID(ID) + ID+ ID/ ID);
          ID.ID(ID.ID(ID) - ID);
        }
        ID.ID(ID);
        ID.ID().ID(ID);
      }
    }
  }

  private void ID(IDID) {
                        
    ID= ID= ID;
    ID(ID.ID(), ID, ID);

                                                             
    double ID= ID;
    for (int ID= ID; ID<= ID; ID++) {
      IDID= ID.ID(ID);
      ID.ID(ID, ID);
      ID+= ID+ ID;
    }
    ID.ID(ID+ ID, ID);

    ID= ID;
    for (int ID= ID; ID<= ID; ID++) {
      IDID= ID.ID(ID);
      ID.ID(ID, ID);
      ID+= ID+ ID;
    }
    ID.ID(ID+ ID, ID);

                                                    
                                                    
                          
    ID= ID= ID;
    ID(ID, ID.ID(), -ID, ID, ID, false);

                                              
    ID.ID(-ID.ID(ID) / ID);
    ID.ID(-ID.ID(ID) / ID);
  }
}


public enum ID{
  ID, ID, ID, ID, ID;

  @IDpublic IDID() {
    switch (this) {
    case ID:
      return ID;
    case ID:
      return ID;
    case ID:
      return ID;
    case ID:
      return ID;
    case ID:
      return ID;
    default:
      return ID;
    }
  }
}




public class ID{
  boolean ID= false;

  IDID;
  IDID;
  IDID;

  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;
  int ID= ID;

  private IDID;

  public ID(IDID, IDID) throws ID{
    this.ID= ID;
    this.ID= ID;
  }

  public void ID(IDID) throws ID{
                                                                                                                                                             
                                                                                                                       
    ID(new ID(new ID()));
    ID(ID);
  }

  private void ID(IDID) throws ID{
    ID= new ID(ID);
    ID.ID(ID);
    ID.ID(ID.ID+ ID, ID.ID);
    for (IDID: ID.ID())
      ID.ID().ID(ID, ID);
    ID.ID(ID.ID, ID);
    ID.ID();
    ID();
    ID();
    ID();
    ID();
    ID(ID.ID());
    ID();
    ID(ID.ID);
    if (ID.ID().ID(ID) && ID.ID== ID.ID) {                                           
                                                                                                                           
                    
      ID.ID();
      ID.ID().ID(ID);
      ID.ID();
      ID.ID().ID(ID);
      if (!ID.ID) for (IDID: ID.ID())
        ID.ID().ID(ID, ID);
      ID();
    }
    ID.ID();
    ID.ID(ID.ID);
    ID.ID(ID.ID+ ID, ID.ID);
  }

  public void ID(IDID) {
    ID= new ID(ID);
    ID.ID(ID);
    ID.ID(ID.ID+ ID, ID.ID);
    ID.ID(ID.ID, ID);

    ID();
    ID();
    ID.ID(ID.ID);
    ID.ID(ID.ID+ ID, ID.ID);
  }

  IDID() {
    if (ID.ID)
      return ID;
    else
      return ID;
  }

  void ID(IDID, IDID) throws ID{
    if (ID!= null) {
      ID.ID();
      ID.ID(ID);
    }
    switch (ID.ID) {
    case ID:
    case ID:
      ID.ID(ID);
      break;

    case ID:
    case ID:
      ID.ID(ID, true);
      break;

    default:
      throw new ID(ID);
    }
  }

  void ID(IDID) throws ID{
    switch (ID.ID) {
    case ID:
      ID.ID(ID);
      break;
    case ID:
      ID.ID(ID);
      break;
    case ID:
      ID.ID(ID);
      break;
    case ID:
      ID.ID(ID);
      break;
    default:
      throw new ID(ID);
    }
  }

  void ID(IDID) {
    if (ID.ID)
      ID.ID(ID, ID, ID, ID(), ID);
    else if (ID.ID)
      ID.ID(ID, ID, ID(), ID);
    else
      ID.ID(ID, ID, ID(), ID);
  }

  IDID() {
                                                      
    if (ID.ID)
      return ID;
    else
      return ID;
  }

  IDID() {
    if (ID.ID)
      return ID;
    else if (ID.ID)
      return ID;
    else
      return ID;
  }

  IDID() {
    if (ID.ID)
      return ID;
    else
      return ID;                                                             
  }

  IDID() {
    if (ID.ID)
      return ID;
    else
      return ID;
  }

  IDID() {
    if (ID.ID== ID.ID)
      return ID.ID();
    else
      return ID;
  }

  void ID(IDID) {
                                                                                                    
    if (ID.ID|| ID.ID|| ID.ID|| ID.ID) {
                                          
      if (ID.ID!= ID) ID.ID.ID= true;

      if (ID.ID!= ID) ID.ID.ID= true;
    }

    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID);
  }

  void ID(IDID) throws ID{
                                                                                                          
    if (ID.ID) {
      ID.ID(ID.ID(ID), true);
      ID(ID.ID(ID));
    }

    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID);
  }

  void ID() throws ID{
    ID.ID(ID);
    ID.ID(ID);
    ID((ID) ID.ID().ID());
    ID.ID(ID, true);
    ID(ID);
    ID.ID();
    ID.ID(ID);
    ID.ID(ID, true);
  }

  void ID(IDID, IDID) throws ID{
                                                                           

                                                                                                                            
    if (IDinstanceof ID)
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID(ID, null);

      
                                                                       
      
                                                                                                                                                         
               
      
                                                                                                                                                            
                          
       
    else if (IDinstanceof ID) {
      if (ID.ID== ID.ID) {
        ID.ID(ID.ID(ID));
        ID.ID(ID);
        ID.ID();
      }

      ID++;
      ID.ID= true;
      ID(ID.ID(ID), ID+ ID.ID() + ID);

                                   
      for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {
        IDID= ID.ID();

        if (!ID.ID) {
          ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
          ID.ID();
          ID.ID();
        }
        ID.ID(ID(), ID.ID.ID(ID), ID, ID(), ID);
        if (!ID.ID) ID.ID();
        ID.ID.ID= true;
      }
      ID.ID();
      ID(ID);

                             
      for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {

        ID.ID.ID= true;
        ID(ID.ID.ID(ID), ID+ ID.ID().ID() + ID);

        ID(ID, ID);                    

        if (!(ID.ID&& ID.ID)) {
          if (!ID.ID) {
            ID.ID(ID+ ID.ID().ID(ID.ID), ID.ID());
            ID(ID);
          }

          ID(ID.ID(ID));
          ID.ID();
          ID(ID);
        }
      }
      if (ID.ID== ID.ID) {
        ID.ID(ID, true);
        ID.ID(ID.ID(ID));
        ID.ID();
      }
    }

      
                                                      
      
                                                                                                    
       
    else if (IDinstanceof ID) {
      ID++;
      ID.ID();
      ID.ID(ID);
      ID.ID(ID, ID, ID);
      ID.ID.ID= true;
      ID.ID(ID, ID, ID.ID.ID(ID), ID, ID);
      ID.ID();
      ID.ID(ID);
    }

      
                                                                                                                         
       
    else if (IDinstanceof ID) {
                                                                                                                                                      
                                     

      ID++;
      ID.ID();
      ID.ID(ID);

      if (ID.ID) {                 
        ID.ID();
        ID.ID();
        ID.ID(ID+ ID.ID().ID(ID.ID.ID()), ID.ID());
        ID.ID();
        ID.ID();
        ID.ID();

        ID.ID= true;
        ID.ID(ID, ID, ID.ID().ID(null),
            ID, ID.ID());
        ID.ID.ID= true;
        ID.ID(ID, ID, ID.ID.ID(ID), ID, ID);

        ID.ID.ID= true;
        ID.ID(ID(), ID.ID.ID(ID), ID, ID.ID(), ID);

        ID.ID();
        ID.ID();
        ID.ID();
        ID.ID();

        ID.ID();
        ID(ID);

        ID.ID();
        ID.ID();

        ID(ID.ID.ID(ID), null);
      } else {
        ID.ID= true;
                                                                                                                                         
                                
        ID.ID(ID, ID.ID());
        ID.ID(ID, ID, ID.ID().ID(null),
            ID, ID.ID());
        ID.ID(ID, ID.ID());

        ID.ID.ID= true;
        ID.ID(ID, ID, ID.ID.ID(ID), ID, ID);
      }
      ID.ID();
      ID.ID(ID);
    }

      
                                                                                                      
       
    else if (IDinstanceof ID) {
      ID++;
      ID.ID();
      ID.ID(ID);

      ID.ID.ID= true;
      ID.ID(ID, ID(), ID.ID.ID(ID), ID, ID,
          ID);

      ID.ID();
      ID(((ID) ID.ID()).ID.ID(ID));

      ID.ID.ID= true;

      ID(ID.ID.ID(ID), null);
      ID.ID();
      ID.ID(ID);
    }

      
                                                                                   
       
    else if (IDinstanceof ID) {
      ID.ID();
      ID.ID(ID);
      ID++;
      ID(ID.ID(), ID);
      ID.ID();
      ID.ID(ID);
    }

      
                                                                                           
      
                                                                                                                                                        
                                                                      
      
                    
      
                                                                                                                                                             
                                                                                                                                            
      
                                                                                                                                                                
                                                                      
      
       
    else if (IDinstanceof ID) {
      IDID= ID.ID();

      if (ID.ID.ID(ID.ID())) {
        ID++;

        boolean ID= true;
        if (ID) {
                                                    
                                                                         

          ID.ID();
          ID.ID(ID);
          ID.ID(ID+ ID.ID().ID(ID.ID().ID()), ID.ID());
          ID.ID();
          ID.ID.ID(ID);

                                                       
                                                                                                                                                  
                                                                    

          ID.ID(ID, ID, ID);
          ID.ID.ID= true;
          ID.ID(ID, ID, ID.ID.ID(ID), ID, ID);

          ID.ID(ID(), ID.ID.ID(ID), ID, ID, ID);
          ID.ID= true;
          ID.ID(ID, ID.ID(ID), ID, ID, ID);
          ID.ID= true;
          ID.ID();

          ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
          ID(ID);

          ID(ID, ID);

          if (!ID.ID) {
            ID.ID= true;
            ID.ID(ID.ID(ID), ID, ID, ID);
            ID.ID= true;
            ID(ID);
          }
          ID.ID.ID= true;

          ID(ID.ID.ID(ID), null);

          ID.ID();
          ID.ID(ID);
                                              
        } else {
          ID.ID();
          ID.ID(ID);
          ID.ID(ID+ ID.ID().ID(ID.ID().ID()), ID.ID());
          ID.ID();
          ID.ID(ID, ID, ID);
          ID.ID.ID= true;
          ID.ID(ID, ID, ID.ID.ID(ID), ID, ID);
          ID.ID(ID(), ID.ID.ID(ID), ID, ID, ID);
          if (!ID.ID) {
            ID.ID= true;
            ID.ID(ID.ID(ID), ID, ID, ID);
            ID(ID);
          }
          ID.ID();

          ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
          ID(ID);

          ID(ID, ID);

          if (!ID.ID) {
            ID.ID= true;
            ID.ID(ID.ID(ID), ID, ID, ID);
            ID(ID);
          }
          ID.ID.ID= true;

          ID(ID.ID.ID(ID), null);

          ID.ID();
          ID.ID(ID);
        }
      }
        
                                                                                                                                                   
                                                                                                                                                   
        
                           
        
                                                                                                                                                               
                                                                                                                
        
         
      else {
        ID++;

        ID.ID();
        ID.ID(ID);
        ID.ID(ID+ ID.ID().ID(ID.ID().ID()), ID.ID());
        ID.ID();
        ID.ID(ID, ID, ID);
        ID.ID.ID= true;
        ID.ID(ID, ID, ID.ID.ID(ID), ID, ID);
        ID.ID(ID(), ID.ID.ID(ID), ID, ID, ID);
        ID.ID();
        ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
        ID(ID);
        ID(ID, ID);
        ID.ID.ID= true;

        ID(ID.ID.ID(ID), null);
        ID.ID();
        ID.ID(ID);
      }
    }

      
                                                                                                                                                          
                                                                                                                                          
      
                                                                                                                                                              
                                                                                                                       
       
    else if (IDinstanceof ID) {
      IDID= ID.ID();
      if (!ID.ID.ID(ID.ID())) {
        ID++;

        ID.ID();
        ID.ID(ID);

        ID.ID.ID= true;
        ID.ID(ID, ID(), ID.ID.ID(ID), ID, ID,
            ID);
        ID.ID(ID, ID);
        ID(ID.ID(ID), null);
        ID.ID= true;
        if (!ID.ID.ID(ID.ID())) {
          ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
          ID(ID);
          ID(ID, ID);
          ID.ID(ID+ ID.ID().ID(ID.ID().ID()), ID.ID());
          ID(ID);
          ID.ID();
          ID(ID.ID(ID));
          ID.ID.ID= true;
        }

        ID(ID.ID.ID(ID), null);

        ID.ID();
        ID.ID(ID);
      }
        
                                                                                                                                                               
                                                                                                                                                      
        
         
      else {
        ID++;

        ID.ID();
        ID.ID(ID);

                                                        
        ID.ID.ID= true;
        ID.ID(ID, ID(), ID.ID.ID(ID), ID, ID,
            ID);

                           
        ID.ID(ID, ID);

               
        ID(ID.ID(ID), null);
        ID.ID= true;

                                                          
        ID.ID= true;
        ID.ID(ID.ID(ID), ID, ID, ID);
        ID(ID);

                                                       
        ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
        ID(ID);

                  
        ID(ID, ID);

                                                        
                   
        ID.ID(ID+ ID.ID().ID(ID.ID().ID()), ID.ID());
        ID(ID);
        ID.ID();
        ID(ID.ID(ID));
        ID.ID.ID= true;

               
        ID(ID.ID.ID(ID), null);

        ID.ID();
        ID.ID(ID);
      }
    }

      
                                                                                  
      
                                                
      
                                                                                   
      
                       
      
                                                                                   
      
                                                                       
      
                             
      
                                                                                                                      
      
                                                                                                   
      
                                                                
      
                                                                  
      
       
    else if (IDinstanceof ID)

    {
      IDID= ID.ID();
      if (!ID.ID.ID(ID.ID())) {
        ID++;

        ID.ID();
        ID.ID(ID);

        ID.ID.ID= true;
        ID.ID(ID, ID(), ID.ID.ID(ID), ID, ID,
            ID);
        ID.ID(ID+ ID.ID().ID(ID.ID().ID()), ID.ID());
        ID.ID();
        ID.ID(ID, ID, ID);
        ID(ID);
        ID.ID();
        ID.ID(ID, ID);
        ID(ID.ID(ID), ID);
        ID.ID= true;
        ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
        ID(ID);
        ID(ID, ID);
        ID.ID(ID+ ID.ID().ID(ID.ID().ID()), ID.ID());
        ID(ID);
        ID.ID();
        ID(ID.ID(ID));
        ID.ID.ID= true;
        ID(ID.ID.ID(ID), null);

        ID.ID();
        ID.ID(ID);

      }
        
                                                                                                                                                                
                                                                                                                                                             
                                                                                                          
        
                                                                                                                                                               
                                                                                                                                                                
                      
         
      else {
        ID++;

        ID.ID();
        ID.ID(ID);
                                                        
        ID.ID.ID= true;
        ID.ID(ID, ID(), ID.ID.ID(ID), ID, ID,
            ID);

                                                       
        ID.ID(ID, ID, ID.ID.ID(ID), ID.ID.ID(ID),
            ID);

               
        ID(ID.ID(ID), null);
        ID.ID= true;

                                                          
        ID.ID= true;
        ID.ID(ID.ID(ID), ID, ID, ID);
        ID(ID);

                                                       
        ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
        ID(ID);

                  
        ID(ID, ID);

                                                        
        ID.ID(ID+ ID.ID().ID(ID.ID().ID()), ID.ID());
        ID(ID);

                   
        ID.ID();
        ID(ID.ID(ID));
        ID.ID= true;

               
        ID(ID.ID.ID(ID), null);

        ID.ID();
        ID.ID(ID);

      }
    }

      
                                                                                                                                                        
                                                                                                              
       
    else if (IDinstanceof ID) {
      ID++;

      ID.ID();
      ID.ID(ID);

      for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {
        if (ID.ID&& ID.ID) {
          if (!ID.ID) {
            ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
            ID(ID);
          }

          ID(ID.ID(ID));
          ID.ID();
          ID(ID);
        } else
          ID(ID, ID);
                                         
      }
      ID.ID();
      ID.ID(ID);
    }

      
                                                                                                                                                             
                                                                                                    
      
                                                                                                                                                                
               
       
    else if (IDinstanceof ID) {
      ID++;

      ID.ID();
      ID.ID(ID);

      for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {
        IDID= ID.ID(ID);

        ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
        ID.ID(ID(), ID.ID(ID), ID, ID, ID);
        ID.ID= ID.ID= true;                                           
      }

      ID.ID();
      ID(ID);

      for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {
        IDID= ID.ID(ID);

        ID.ID= true;
        ID(ID.ID(ID), null);
        ID(ID, ID);
        if (!(ID.ID&& ID.ID)) {
          ID.ID();
          ID(ID.ID(ID));
          ID.ID= true;
        }
      }

      if (!(ID.ID&& ID.ID)) {                                                        
        ID.ID= true;
        ID(ID.ID(ID), null);
        if (!ID.ID) {
          ID.ID(ID.ID(ID), ID, ID, ID);
          ID(ID);
        }
      }
      ID.ID();
      ID.ID(ID);
    }

    else if (IDinstanceof ID) {
      if (ID.ID) {

        ID.ID(ID+ ID.ID().ID(ID.ID()), ID.ID());
        ID(ID);
      }
    }

    else {
      throw new ID(ID+ ID+ ID);
    }
  }

  void ID() {
    if (ID.ID> ID) ID.ID.ID(
        ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID,
        ID, ID, ID, ID, ID, ID,
        ID, ID, ID, ID, ID,
        ID, ID);
  }

  void ID() {
    ID[] ID= ID.ID().ID().ID();
    ID.ID.ID.ID(ID);

    for (int ID= ID; ID< ID.ID; ID++)
      ID.ID(ID+ ID[ID]);
  }

  void ID(IDID, boolean ID) {
    if (ID== null) return;
                                                                          

                                                                     

                                              
    if (ID) {
      if (ID.ID) ID.ID(ID.ID(ID));
    } else {
      if (ID.ID|| ID.ID|| ID.ID|| ID.ID|| ID.ID)
        if (!ID.ID) ID.ID(ID.ID(ID));

      if (ID.ID) ID.ID(ID.ID(ID));

      if (ID.ID) ID.ID(ID.ID(ID));

      if (ID.ID) ID.ID(ID.ID(ID));

      if (ID.ID) ID.ID(ID.ID(ID));
    }

    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID, ID);
  }

  void ID() {
    ID.ID();
    ID.ID(ID);
    ID.ID(ID.ID().ID(ID));

    for (IDID: ID.ID()) {
      if (IDinstanceof ID) {
                                                                                   
        ID.ID(ID.ID(null));
      }
    }

    for (IDID: ID.ID()) {
      if (!(IDinstanceof ID) && !(IDinstanceof ID)) {
                                                                                    
        if (ID== null) ID= ID;
        ID.ID(ID.ID(null));
      }
    }

                                                                

    ID.ID(ID.ID().ID(ID));

                                        
    for (IDID: ID.ID()) {
      if (IDinstanceof ID) {
                                                                                            
        if (ID== null) ID= ID;
        ID.ID(ID.ID(null));
      }
    }

    for (IDID: ID.ID()) {
                                                                                    
      ID.ID(ID.ID(null));
    }

    for (IDID: ID.ID())
                                                                             
      ID.ID(ID.ID(ID));

    for (IDID: ID.ID()) {
      for (IDID: ID.ID()) {
        ID(ID, true);                                                   
        ID(ID, false);                                                          
      }
    }
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
  }

  void ID() {
                           
    ID.ID();
    ID.ID(ID);
    ID.ID(ID);
                                                                              
                                               
                                                                  
    ID.ID(ID);
    ID.ID(ID);
  }

  void ID() {
    ID.ID(ID);
    for (IDID: ID.ID())
      if (IDinstanceof ID) ID.ID(ID.ID(), ID.ID+ ID+ ID.ID(null));
    ID.ID(ID);
    ID.ID();
  }

  void ID() {
    ID.ID(ID);
    for (IDID: ID.ID())
      if (IDinstanceof ID) ID.ID(ID.ID());

    ID.ID(ID);
    ID.ID();
  }

  void ID() throws ID{
    for (IDID: ID.ID())
      ID(ID.ID, null);
  }

  void ID() throws ID{
    if (ID.ID== ID.ID) {
                                            
      for (IDID: ID.ID())
        ID.ID(ID+ ID.ID());

                                    
      ID();
    }

    ID.ID(ID, ID.ID(), ID, ID.ID(), ID);

    ID.ID(ID, ID);

    ID.ID(ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID);

    ID.ID(ID, ID, ID, ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID(), ID, ID(), ID, ID());
    ID.ID(ID, ID());
    if (ID.ID) ID.ID(ID);

                                                                                                                     
                     
                                                                                                                                         
    if (ID.ID== ID.ID|| ID.ID== ID.ID|| ID.ID== ID.ID) {
      if (ID.ID)
        ID.ID(ID, ID);
      else
        ID.ID(ID, ID);
    }
    ID.ID(ID, ID);
    ID.ID(ID, ID);

    ID.ID().ID.ID= true;
    if (ID.ID== ID.ID) {
      ID.ID();
      ID(ID);
      ID.ID();
    }

    if (ID.ID== ID.ID) {
      ID.ID();
      ID(ID.ID().ID.ID(ID));
      ID.ID();
    }

    if (ID.ID== ID.ID) {
      ID.ID(ID);
      ID.ID(ID.ID== ID.ID? ID: ID);
      ID.ID();
    }

    if (ID.ID== ID.ID) {
      ID.ID(null);
      ID.ID(ID.ID== ID.ID? ID: ID);
      ID.ID();
      for (IDID: ID.ID())
        if (ID.ID!= null) {
          ID(ID.ID.ID(ID), null);
          ID.ID(ID.ID(ID));
          ID.ID();
        }
    } else
      ID();

    ID(ID, null);
    ID.ID(ID);
    ID.ID();
    ID.ID();
    ID.ID();
    ID.ID(ID);
    ID.ID(ID, ID);

    ID.ID();
    ID.ID();
    ID.ID();
    ID.ID();
    if (ID.ID)
      ID.ID(ID);
    else
      ID.ID(ID);

    if (ID.ID== ID.ID) ID();

    if (ID.ID== ID.ID|| ID.ID== ID.ID) {
      ID.ID(ID, true);
    }

    ID.ID();
    ID.ID(ID);
    ID.ID();
  }

  void ID(ID<ID<ID>, ID> ID) {
    for (ID<ID> ID: ID.ID()) {
                                                                                              
      ID.ID(ID+ ID.ID(ID) + ID);

      ID.ID(ID+ ID.ID(ID), ID);
      ID.ID(ID, ID+ ID.ID(ID), ID, ID, ID);

      for (IDID: ID)
        if (IDinstanceof ID)                                                                                         
                                                                            
          if (ID.ID(ID.ID()))
          ID.ID(ID+ ID.ID(ID), ((ID) ID).ID(ID), ID);
          else
          ID.ID(ID+ ID.ID(ID), ((ID) ID).ID(null), ID);

      ID.ID(ID+ ID.ID(ID) + ID);
      ID.ID();
    }

    ID.ID(ID);
    for (ID<ID> ID: ID.ID())
      ID.ID(ID+ ID.ID(ID) + ID);
    ID.ID(ID);
    ID.ID();
  }

  void ID(IDID) {
                                                                                                      

    if (ID.ID|| ID.ID|| ID.ID|| ID.ID) {
      if (ID.ID)
        ID.ID(ID, ID.ID(ID), ID.ID(ID.ID().ID()));
      else
        ID.ID(ID, ID.ID(ID), ID.ID(ID.ID(ID)));

      if (ID.ID)
        ID.ID(ID, ID.ID(ID), ID.ID(ID.ID().ID()));
      else
        ID.ID(ID, ID.ID(ID), ID);

      if (ID.ID) ID.ID(ID, ID.ID(ID), ID.ID(ID));
    }

    if (ID.ID() != ID) if (ID.ID|| ID.ID|| ID.ID|| ID.ID|| ID.ID|| ID.ID|| ID.ID) {
          if (ID.ID)
            ID.ID(ID, ID.ID(ID), ID.ID().ID(ID));

          else if (ID.ID)
            ID.ID(ID, ID.ID(ID), ID.ID().ID(ID));

          else
            ID.ID(ID, ID.ID(ID), ID.ID().ID(ID));
        }

    if (ID.ID== ID.ID)
      if (ID.ID|| ID.ID|| ID.ID|| ID.ID) {
        if (IDinstanceof ID&& ID.ID!= null)
          ID.ID(ID, ID.ID(ID), ID.ID);

        if (IDinstanceof ID&& ID.ID!= ID) {
                                                                                                                                         
          ID.ID(ID, ID.ID(ID),
              ((ID) ID.ID.ID()).ID.ID(ID));
        }

        if (IDinstanceof ID) ID.ID(ID, ID.ID(ID), ID);

        if (IDinstanceof ID) ID.ID(ID, ID.ID(ID), ID);

        if (ID.ID!= ID) ID.ID(ID, ID.ID(ID), ID.ID.ID(ID));

        if (ID.ID!= ID)
          ID.ID(ID, ID.ID(ID), ID.ID!= null ? ID.ID.ID(ID) : ID);

        if (ID.ID) ID.ID(ID, ID.ID(ID), ID);

        if (ID.ID) ID.ID(ID, ID.ID(ID), ID);

        if (ID.ID) {
          ID.ID(ID, ID.ID(ID), ID);

          ID.ID(ID, ID.ID(ID), ID.ID(ID));
        }

        if (ID.ID) ID.ID(ID, ID.ID(ID), ID);

        if (ID.ID.ID) ID.ID(ID, ID.ID(ID), ID);

        if (ID.ID) ID.ID(ID, ID.ID(ID), ID);
      }

    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID);
  }

  void ID() {
    for (IDID: ID.ID()) {
      ID.ID(ID+ ID.ID().ID() + ID+ ID.ID());
      ID(ID.ID);
      ID.ID(ID+ ID.ID().ID() + ID+ ID.ID());
      ID.ID();
    }

                                           
    ID.ID(ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID();
    ID.ID(ID, ID);
    ID.ID(ID, ID, ID, ID, ID);
    ID.ID();
    ID.ID(ID, ID);
    ID.ID(ID, ID, ID, ID, ID);
    ID.ID();
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID();
    ID.ID(ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID();
    ID.ID(ID, ID);
    for (IDID: ID.ID())
      if (IDinstanceof ID)
        ID.ID(ID, ID+ ID.ID(), ID);
    ID.ID();
    ID.ID(ID, ID);
    for (IDID: ID.ID())
      ID.ID(ID, ID.ID(null), ID);

    ID.ID();
    ID.ID(ID, ID);
    for (int ID= ID; ID< ID.ID().ID; ID++)
      for (int ID= ID; ID< ID.ID().ID; ID++)
        if (ID.ID()[ID] != null && ID.ID()[ID].ID(ID)) ID.ID(ID,
            ID.ID().ID(ID).ID(null), ID.ID().ID(ID).ID(null));
    ID.ID(ID, ID);
    for (int ID= ID; ID< ID.ID().ID; ID++)
      for (int ID= ID; ID< ID.ID().ID; ID++)
        if (ID.ID()[ID] != null && ID.ID()[ID].ID(ID)) ID.ID(ID,
            ID.ID().ID(ID).ID(null), ID.ID().ID(ID).ID(null));
    ID.ID();
    if (ID.ID== ID.ID) {
      ID.ID(ID, ID);
      ID.ID(ID, ID, ID, ID, ID.ID());
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID, ID);
      ID.ID(ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID);
      ID.ID(ID, ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID);
      ID.ID(ID, ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID);
      ID.ID(ID, ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID);
      ID.ID(ID, ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID);
      ID.ID(ID, ID, ID, ID, ID);
      ID.ID();
      ID.ID(ID, ID);
      ID.ID(ID, ID, ID, ID, ID);
      ID.ID();
    }

                                                                                           
    for (IDID: ID.ID()) {
      ID.ID(ID, ID.ID(null), ID.ID(ID.ID()));
      ID.ID(ID, ID.ID(null), ID.ID(ID.ID()));

      if (IDinstanceof ID) ID.ID(ID, ID.ID(null), ID);

      if (IDinstanceof ID) ID.ID(ID, ID.ID(null), ID);

      if (IDinstanceof ID)
        ID.ID(ID, ID.ID(null), ID);

      if (IDinstanceof ID)
        ID.ID(ID, ID.ID(null), ID);

      if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID)
        ID.ID(ID, ID.ID(null), ID);

      if (IDinstanceof ID)
        ID.ID(ID, ID.ID(null), ID);
    }
    for (IDID: ID.ID()) {
      ID.ID(ID+ ID.ID().ID() + ID+ ID.ID());
      if (ID.ID) ID.ID(ID, ID.ID(), ID);
    }

    ID.ID(ID);
    ID.ID();
  }

  void ID(IDID) {
    ID.ID(ID, ID, ID);
    ID.ID(ID, ID, ID);
    ID.ID(ID);
    ID.ID();

    ID.ID(ID, ID, ID, ID, ID);
    ID.ID(ID, ID, ID);

                                                                                                              
    ID((ID) ID.ID().ID());

    if (ID== null)
      ID.ID(ID, ID);
    else
      ID.ID(ID, ID.ID(null));
    ID.ID(ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID);
    ID.ID(ID, ID+ ID.ID().ID());

    ID.ID(ID, ID.ID().ID(ID));

    ID.ID(ID, ID.ID(ID.ID()));

    ID.ID(ID, ID.ID? ID: ID);

                        
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID();
  }

  void ID(IDID) {
    if (ID.ID!= null)
      ID.ID.ID(ID, ID.ID);
    else
      ID.ID.ID(ID.ID());
  }

                                                                   
  void ID(IDID, boolean ID, IDID) {
    ID.ID.ID(
        ID,
        ID? ID: ID, ID? ID: ID, ID? ID: ID, ID);
  }

  boolean ID(IDID, boolean ID, boolean ID, boolean ID) throws ID{
                                                                                                                                   
                                                                               
                                                          
    switch (ID.ID) {
    case ID:                              
      return true;
    case ID:                            
      ID.ID();
      if (ID) ID.ID.ID(ID);
      ID.ID.ID(ID);
      ID(ID, ID, ID? ID.ID() : ID);
      ID.ID.ID(ID);
      break;
    case ID: {                                                                       
      ID.ID();
      if (ID) ID.ID.ID(ID);
      ID.ID.ID(ID);
      ID(ID, ID, ID? ID.ID() : ID);
      ID.ID.ID(ID);
    }
      break;
    case ID: {
      ID.ID();
      switch (ID.ID) {
      case ID:
      case ID:
        if (ID) ID.ID.ID(ID);
        ID.ID.ID(ID);
        ID(ID, ID, ID? ID.ID() : ID);
        ID.ID.ID(ID);
        break;

      case ID:
        if (ID) ID.ID.ID(ID);
        return false;

      case ID:
        if (ID) ID.ID.ID(ID);
        ID.ID();
        ID.ID.ID(ID);
        ID(ID, ID, ID? ID.ID() : ID);
        ID.ID.ID(ID);
        break;

      case ID:
        throw new ID(ID);

      default:
        throw new ID(ID);
      }
    }
      break;
    default:
      throw new ID(ID);
    }

    return true;
  }

  void ID(IDID, boolean ID) {
                     
    ID= ID;
    for (IDID: ID.ID())
      ID.ID= ID;

    ID(ID.ID);

    for (IDID: ID.ID())
      for (int ID= ID; ID<= ID.ID; ID++) {
        if (ID)
          ID.ID.ID(ID);
        else
          ID.ID.ID(ID, ID.ID().ID(), ID.ID(), ID.ID(), ID);
      }
  }

  void ID(IDID) {
                     
    ID= ID;
    for (IDID: ID.ID())
      ID.ID= ID;

    ID(ID.ID);

    for (IDID: ID.ID())
      for (int ID= ID; ID<= ID.ID; ID++) {
        ID.ID.ID(ID, ID.ID(), ID);
      }
  }

  void ID(IDID) {
                     
    ID= ID;
    for (IDID: ID.ID())
      ID.ID= ID;

    ID(ID.ID);

    for (IDID: ID.ID())
      for (int ID= ID; ID<= ID.ID; ID++) {
        ID.ID.ID(ID, ID.ID());
      }
  }

  void ID(IDID, int ID) {
    if (!ID.ID.ID() || ID.ID) {
      ID.ID.ID(ID, ID.ID());
      if (ID!= ID) ID.ID.ID(ID, ID);
    }
  }

  void ID(IDID) {
                     
    ID= ID;
    for (IDID: ID.ID())
      ID.ID= ID;

    ID(ID.ID);

    for (IDID: ID.ID())
      for (int ID= ID; ID<= ID.ID; ID++) {
        ID.ID();
        ID.ID.ID(ID, ID.ID(), ID, ID.ID().ID(), ID.ID());
      }
  }

  void ID(IDID, IDID) {
    ID.ID();
    ID.ID.ID(ID, ID.ID(), ID);
    ID(ID, ID);
    ID(ID);
    ID.ID.ID(ID);
  }

  void ID(IDID, IDID, int ID) {
    ID.ID();
    ID.ID.ID(ID, ID.ID(), ID);
    ID(ID, ID);
    ID(ID);
    ID.ID.ID(ID);
  }

  void ID(IDID) {
    ID.ID();
                                                 
                                                             
                                  

    for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {
      if (IDinstanceof ID&& !ID.ID) ID.ID.ID(ID, ID.ID().ID());
    }
  }

  void ID(IDID, boolean ID, IDID) throws ID{
    if (IDinstanceof ID) {
      ID(ID, false, ID, false);
                       
                                                                                           
    } else if (IDinstanceof ID) {
      ID(ID, false, ID, false);
                       
                                                                                                                                                         
                  
    } else if (IDinstanceof ID) {
      IDID= (ID) ID;
      IDID= (ID) ID.ID();
                       
                                                                                                                   
      for (IDID: ID.ID()) {
        if (ID.ID().ID(ID)) {
          ID.ID();
          ID(ID);
          ID.ID.ID(ID,
              ID? ID: ID);
        }
        if (ID.ID().ID(ID)) {
          ID.ID();
          ID(ID);
          ID.ID.ID(ID,
              ID? ID: ID);
        }
      }

      ID(ID, true, ID, !((ID) ID.ID()).ID.ID());
      if (ID.ID) {
        ID.ID();
        ID.ID.ID(ID, ((ID) ID.ID()).ID());
        ID(ID);
        ID.ID.ID(ID,
            ID? ID: ID);
      } else
        ID(ID,
            ID? (ID) ID: (ID) ID,
            ID.ID);
                       
                                                                                                                              
    }
  }

  void ID(IDID, IDID) throws ID{
    if (!ID.ID().ID(ID)) return;

    if (IDinstanceof ID)
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID(ID, (ID) ID.ID());

    else if (IDinstanceof ID)
      ID(ID.ID(), ID);

    else if (IDinstanceof ID)
      ID.ID(ID);

    else if (IDinstanceof ID)
      ID.ID(ID);

    else if (IDinstanceof ID)
      ID.ID(ID);

    else if (IDinstanceof ID) {
               
                                                                                                            
                                                    
                                                                                       
                                                                                   
                                                                                                                             
                                                                                                                                                    

      IDID= null, ID= null, ID= null, ID= null;

      for (ID= ID.ID().ID(); ID!= null; ID= ID.ID()) {

        if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID)
          ID(ID.ID(), ID);
        else if (IDinstanceof ID) if (ID.ID) {
          ID= ID;
          ID= ID;
        } else {
          ID.ID();
          ID.ID(ID.ID(ID));
          ID.ID(ID.ID(ID), false);                                                            
          ID.ID= true;                                                                    

          if (ID.ID() == null) {                                                                                                     
            ID(ID);
            ID((ID) (ID.ID()));
          }

          if (ID!= null) {                                                               
            ID(ID, true, ID.ID());
            ID((ID) ID);
            ID= null;                                          
          } else                                                                             
            ID(ID, ID);

          ID(ID, false, ID.ID());
          ID((ID) ID);

          ID.ID();
          ID.ID();
        }
        ID= ID;                                       
      }
    }

    else if (IDinstanceof ID)
      ID.ID(ID);

    else if (IDinstanceof ID)
      throw new ID(ID);

    else
      throw new ID(ID+ ID);
  }

  int ID;

  void ID(IDID) {
    if (IDinstanceof ID) {
      IDID= ((ID) ID.ID());
      if ((!ID.ID.ID() || ID.ID|| ID.ID) && ID.ID> ID.ID)
        ID.ID= ID.ID;
    }

    if (IDinstanceof ID) {
      if (ID.ID> ID) ID= ID.ID;
    }

    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID);
  }

  void ID(IDID) throws ID{
    ID.ID.ID(
        ID+ ID+ ID);
    ID.ID();
    ID.ID();

    ID(ID.ID, ID);

    if (ID.ID().ID(ID)) ID.ID.ID(ID+ ID+ ID+ ID+ ID, ID+ ID.ID());
    ID.ID();
    ID.ID();
    ID.ID(ID+ ID.ID());
    ID.ID();
  }

  void ID() throws ID{
                                    
    for (IDID: ID.ID()) {
      if (ID.ID|| ID.ID|| !ID.ID.ID()) {
        ID.ID();
        ID.ID.ID(ID, ID.ID().ID(), ID.ID());
        ID.ID();
        for (IDID: ID.ID()) {
          ID.ID();
          ID.ID.ID(ID, ID.ID(), ID.ID());
        }
        for (IDID: ID.ID) {
          ID.ID();
          ID.ID.ID(ID, ID.ID(), ID.ID());
        }

        for (IDID: ID.ID())
          ID.ID= ID;

        ID(ID.ID);

        for (IDID: ID.ID())
          for (int ID= ID; ID<= ID.ID; ID++) {
            ID.ID();
            ID.ID.ID(ID, ID.ID(), ID);
          }

        ID.ID();
        ID.ID.ID(ID);
        ID.ID();
        ID.ID.ID(ID);
        for (IDID: ID.ID) {
          ID.ID();
          ID.ID.ID(ID, ID.ID(), ID.ID());
        }

        ID.ID();
        ID.ID.ID(ID);

        ID.ID();
        ID.ID();
        ID.ID.ID(ID);
      }
    }
                                                                   

                                  
    for (IDID: ID.ID()) {
      if (ID.ID.ID() && !ID.ID) {
        ID.ID();
        ID.ID.ID(ID, ID+ ID.ID());
      } else {
        ID.ID();
        ID.ID.ID(ID, ID+ ID.ID(),
            ID.ID().ID(), ID.ID(), ID.ID());
      }
      ID(ID, false);
      ID.ID.ID(ID);
      ID.ID();
      ID.ID.ID(ID);
      ID(ID);

    }
                                                         
    ID.ID();
    ID.ID.ID(
        ID);
    ID.ID();
    ID.ID();
    ID.ID.ID(ID);
    ID.ID();

    for (IDID: ID.ID()) {
      if (ID.ID.ID() && !ID.ID) {
        ID.ID();
        ID.ID.ID(ID, ID.ID(ID));
        ID.ID.ID(ID, ID+ ID.ID());
      } else {
        ID.ID();
        ID.ID.ID(ID, ID.ID(ID));
        ID.ID.ID(ID, ID+ ID.ID(), ID.ID().ID(),
            ID.ID());
      }
      ID(ID, true);
      ID.ID.ID(ID);
    }

    ID.ID();
    ID.ID();
    ID.ID.ID(ID);
    ID.ID();
    ID.ID();
    ID.ID.ID(ID);

                                               
    if (ID.ID()) {
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID();
      ID.ID.ID(ID);

      ID.ID();
      ID.ID.ID(ID);
      ID.ID(ID);
      return;
    }

    if (ID.ID().ID|| ID.ID().ID|| !ID.ID().ID.ID()) {
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID();
      ID.ID.ID(ID, ID.ID().ID().ID(),
          ID.ID().ID(), ID.ID().ID(), ID.ID().ID().ID(),
          ID.ID().ID());
      ID.ID();
      ID.ID.ID(ID);
      ID.ID(ID, ID.ID().ID() + ID);
      ID.ID(ID);

      ID.ID();
      ID.ID.ID(ID, ID.ID().ID().ID(),
          ID.ID().ID(), ID.ID().ID());
      ID.ID();
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID.ID(
          ID,
          ID.ID().ID());
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID.ID(ID, ID.ID().ID(),
          ID);
      ID.ID();
      ID.ID.ID(ID);
      ID.ID(ID);
    }

    else {
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID.ID(
          ID);
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID.ID(ID);
      ID.ID();
      ID.ID.ID(ID);
      ID.ID(ID, ID);
      ID.ID();
      ID.ID.ID(ID);
      ID.ID(ID);
    }
  }
}

public abstract class ID{
  int ID= ID;

  abstract IDID();

  protected IDID;

  IDID() {
    return ID;
  }

             
  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

                       
  void ID() {
  }

  void ID() {
  }

  void ID(int ID) {
    ID= ID;
  }

  void ID() {
    ID++;
  }

  void ID() {
    if (ID> ID) ID--;
  }

  void ID(IDID) {
  }

                    
  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID, IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID() {
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  IDID() {
    return null;
  }

  void ID(IDID) {
  }

  void ID() {
  }

  void ID() {
  }

  void ID(IDID) {
  }

  void ID(IDID, boolean ID) {
  }

  void ID(IDID) {
  }

  void ID() {
  }

  void ID(IDID, boolean ID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID() {
  }

  void ID() {
  }

                     
  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

                                    
  void ID(IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {

  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID, IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID, IDID, IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID) {
  }

  void ID(IDID, IDID, IDID) {
  }

                             
  void ID(IDID, IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID) {
  }

  void ID(IDID, IDID, IDID, IDID, IDID) {
  }

}




public class IDextends ID{

  public ID(IDID) {
    super();
    this.ID= ID;
  }

  @IDIDID() {
    return ID;
  }

  IDID;

  @IDIDID() {
    return ID;
  }

  @IDIDID() {
    return ID;
  }

  @IDIDID() {
    return ID;
  }

  @IDIDID() {
    return ID;
  }

  @IDIDID() {
    return ID;
  }

  @IDIDID() {
    return ID;
  }

  @IDIDID() {
    return ID;
  }

  @IDIDID() {
    return ID;
  }

  @IDIDID() {
    return ID;
  }

  @IDvoid ID(IDID, IDID) {
    if (ID!= null) ID.ID(ID, ID);

    ID.ID(ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID.ID();
  }

  @IDvoid ID() {
    ID.ID(ID);
  }

  @IDvoid ID() {
    for (int ID= ID; ID< ID; ID++)
      ID.ID(ID);
  }

  @IDvoid ID(IDID) {
    ID.ID(ID, ID);
  }

  @IDvoid ID() {
    ID.ID(ID);
  }

  @IDvoid ID() {
    ID.ID(ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID.ID(ID, ID);
  }

  @IDvoid ID() {
    ID();
    ID.ID(ID);
  }

  @IDvoid ID() {
    ID();
    ID.ID(ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    if (ID!= null) ID.ID(ID, ID);
    ID.ID(ID);
    ID();
  }

  @IDvoid ID() {
    ID();
    ID.ID(
        ID);
    ID();
  }

  @IDIDID() {
    return ID;
  };

  @IDIDID() {
    return ID;
  };

  @IDIDID() {
    return ID;
  };

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
    ID();
  }

  @IDvoid ID(IDID, boolean ID) {
    if (ID) ID();
    ID();
    ID.ID(ID, ID);
    ID();
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID);
    ID();
  }

  @IDvoid ID() {
    ID();
    ID.ID(ID);
    ID();
  }

  @IDvoid ID(IDID, boolean ID) {
    if (ID) ID();
    ID();
    ID();
    ID.ID(ID);
  }

  @IDvoid ID(IDID) {
    ID= ID;
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID= ID;
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID= ID;
    ID.ID(ID, ID, ID, ID);
  }

  @IDvoid ID(IDID) {
    ID.ID(ID);
  }

  int ID;

  @IDvoid ID(IDID) {
    ID();
    ID= ID;
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
                                                          
    ID.ID(ID, ID, ID++);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
    ID();
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
    ID();
  }

  @IDvoid ID(IDID, IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID, ID);
    ID();
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
    ID();
  }

  @IDvoid ID(IDID) {
    ID();
    ID();
    ID.ID(ID);
  }

  @IDvoid ID(IDID) {
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
    ID();
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
    ID();
  }

  @IDvoid ID(IDID, IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID, ID);
    ID();
  }

  @IDvoid ID(IDID, IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID, ID);
    ID();
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
    ID();
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
    ID();
  }

  @IDvoid ID(IDID) {
    ID();
    ID();
    ID.ID(ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID, IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
    ID();
    ID.ID(ID+ ID+ ID+ ID+ ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID, IDID) {
    ID();
    ID.ID(ID, ID, ID, ID);
  }

  @IDvoid ID(IDID, IDID) {
    ID();
    ID.ID(ID, ID);
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }

  @IDvoid ID(IDID) {
    ID();
    ID.ID(ID, ID);
  }


}

public class ID{
  private final IDID;
  private final IDID;
  private final IDID;
  private boolean ID;
  private boolean ID;
  private final IDID;
  private IDID;
  private final ID<ID> ID= new ID<>();
  private final ID<ID> ID= new ID<>();
  private final ID<ID, ID> ID= new ID<>();
  private final ID<ID> ID= new ID<ID>();
  private final ID<ID> ID= new ID<ID>();
  private final ID<ID, ID> ID= new ID<>();
  private final ID<ID, ID> ID= new ID<>();
  private final ID<ID, ID> ID= new ID<>();
  private final ID<ID, ID> ID= new ID<>();
  private final ID<ID, ID> ID= new ID<>();
  private final ID<ID, ID> ID= new ID<>();
  private final ID[] ID;
  private final ID[] ID;

  private final boolean ID= false;
  private boolean ID= true;
  private int ID;
  private int ID;
  private int ID;
  private int ID;
                                                                                                     
  private int ID;

  private final ID<ID> ID= new ID<ID>();
  private final ID<ID> ID= new ID<ID>();

  private final IDID= new ID();
  private final IDID= new ID();

  private IDID;

  private ID<ID> ID= new ID<ID>();

  private IDID;

  private int ID;
  private int ID;
  private int ID;

  ID<ID<ID>, ID> ID= new ID<>();
  private final ID<ID, ID> ID= new ID<>();

  private final ID<ID<ID> > ID= new ID<>();
  private final ID<ID<ID>, ID> ID= new ID<>();
  private int ID= ID;

  public ID(IDID, IDID, IDID, boolean ID, IDID)
      throws ID, ID{
    this(ID, ID, ID, ID.ID(), ID, null, ID);
  }

  public ID(IDID, IDID, IDID, IDID) throws ID, ID{
    this(ID, ID, ID, ID.ID(), false, null, ID);
  }

  public ID(IDID, IDID, IDID, IDID, boolean ID,
      ID<ID, ID<ID> > ID, IDID) throws ID, ID{
    this.ID= ID;
    this.ID= ID;
    this.ID= ID;

    IDID;
    IDID= ID.ID().ID();
    if (ID== null)
      throw new ID(ID+ ID.ID().ID() + ID);
    ID.ID(ID.ID());
    ID.ID(ID.ID());

                                                                                                                      
    for (IDID: ID.ID()) {                                                        
      ID= ID(ID.ID(), ID.ID());
      ID.ID.ID(ID.ID());
    }

                                 
    ID= ID(ID);

                                     
    ID= ID;
    if (ID) {
      ID= ID(ID, ID);
      IDID= new ID(ID++, ID);
      IDID= new ID(ID++);
      IDID= (ID) ID.ID(new ID(ID++));
      IDID= (ID) ID.ID(new ID(ID++, ID));
      IDID= (ID) ID.ID(new ID(ID++));

      ID.ID= ID.ID= ID.ID= ID.ID= ID.ID= ID;
      ID.ID= ID.ID= ID.ID= ID.ID= ID;

      ID.ID= ID;
      ID.ID= ID.ID= ID;

      ID.ID.ID(ID);

      ID= ID;
    }

                                                
    for (IDID: ID.ID()) {
                                                                                                                                       
      ID= ID(ID);

      for (IDID: ID.ID()) {
                                                                                              
        ID(ID, ID, ID);
      }
    }

    if (ID.ID()) throw new ID(ID);

                                                                            
    for (IDID: ID.ID()) {
      ID().ID(ID(ID, ID.ID().ID().ID()));
      ID(ID(ID.ID(), ID.ID().ID().ID()));
    }
                                      
                                                                                                    

                                                                                               
    if (!ID.ID&& !ID.ID(new ID(ID)))
      ID().ID(new ID(ID));

    for (IDID: ID.ID()) {
      if (ID.ID().ID().ID(ID))
        ID().ID(new ID(ID.ID().ID().ID()));
      else if (ID.ID().ID().ID(ID))
        ID()
            .ID(new ID(ID(ID.ID(), ID.ID().ID().ID())));
      else
        throw new ID(ID+ ID);
    }

    ID();

                        
    ID= new ID[ID];
    ID= new ID[ID];
    for (IDID: ID.ID().ID()) {
                                                                                       
      ID(ID, ID, ID, ID.ID().ID(ID));
    }

    for (IDID: ID.ID().ID()) {
                                                                                      
      ID(ID, ID, ID, ID.ID().ID(ID));
    }
                                
  }

  public boolean ID(IDID, IDID, IDID) throws ID{
    boolean ID= ID.ID.ID((ID) ID(ID, ID, new ID(ID), ID, false));
    if (ID) ID= true;
    return ID;
  }

  private void ID(IDID) throws ID{
    if (IDinstanceof ID) {
      ID.ID().ID= true;
      ID(ID.ID());
    } else if (IDinstanceof ID)
      ID(ID.ID());

    else if (IDinstanceof ID)
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID(ID);

    else if (IDinstanceof ID)
      ID(ID.ID().ID());

    else if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID)
      ID.ID().ID= true;
    else
      throw new ID(ID+ ID);
  }

  private void ID(IDID) throws ID{
                                                                                                                                           

    if (IDinstanceof ID) {
                                                                   
      ID(ID.ID());
    }

    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID);
  }

  private void ID(IDID, IDID) {
    if (ID.ID() == ID) ID.ID= ID++;
    if (IDinstanceof ID&& ID.ID== ID)
      ID.ID= ID++;
    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID, ID);
  }

                                                                                  
  private IDID(IDID, IDID, IDID,
      IDID, boolean ID) throws ID{
                                                                                                                              
    IDID= ID;
    boolean ID= false;
    boolean ID= true;

    ID= true;
    if (ID(ID, ID)) {
      if (ID) {
        ID= true;                                                             
        ID= ID;                                        
      } else
        ID= ID.ID(new ID(ID++));

        
                                                                                                                                                                
         
    } else if (ID(ID, ID)) {
      ID= true;
      ID= ID.ID(new ID(ID++));
      if (ID(ID, ID, ID)) return ID;                                                            
    } else if (ID(ID, ID)) {
      ID= true;
      ID= ID.ID(new ID(ID++));
      if (ID(ID, ID, ID)) return ID;                                                            
    } else if (ID(ID, ID)) {
      ID= true;
      ID= ID.ID(new ID(ID++));
      if (ID(ID, ID, ID)) return ID;                                                            
    } else if (ID(ID, ID))
      ID= ID.ID(new ID(ID++));
    else if (ID(ID, ID))
      ID= ID.ID(new ID(ID++));
    else if (ID(ID, ID))
      ID= ID.ID(new ID(ID++));
    else if (ID(ID, ID))
      ID= ID.ID(new ID(ID++));
    else if (ID(ID, ID))
      ID= ID.ID(new ID(ID++));
    else if (ID(ID, ID)) {
      ID= ID.ID(new ID(ID++));
    } else if (ID(ID, ID)) {
      ID= false;
      ID= ID.ID(new ID(ID++));
      ID= ID.ID(new ID(ID++, ((ID) ID.ID().ID()).ID));
    } else {                        
      ID= false;
      if (ID) {
        ID= ID.ID(new ID(ID++));
        ID.ID(new ID(ID++));
      } else {                     
        if (ID(ID, ID))
          ID.ID(new ID(ID++,
              ID(ID, ((ID) ID.ID().ID()).ID)));
        else if (ID(ID, ID))
          ID= ID.ID(
              new ID(ID++, ID(((ID) ID.ID().ID()).ID)));
        else if (ID(ID, ID)) {
          IDID= ((ID) ID.ID().ID()).ID;
          if (ID.ID(ID, ID).ID() != ID.ID())
            throw new ID(ID+ ID.ID() + ID+ ID+ ID);
          ID= ID.ID(new ID(ID++, ID(ID)));
        } else if (ID(ID, ID)) {
          IDID= ((ID) ID.ID().ID()).ID;
          if (ID.ID(ID, ID).ID() != ID.ID())
            throw new ID(ID+ ID.ID() + ID+ ID+ ID);
          ID= ID.ID(new ID(ID++, ID(ID)));
        } else if (ID(ID, ID))
          ID= ID.ID(
              new ID(ID++, ID(((ID) ID.ID().ID()).ID)));
        else if (ID(ID, ID))
          ID= ID.ID(new ID(ID++, ID));
        else
          throw new ID(ID+ ID.ID().ID[ID.ID().ID()]
              + ID);

        ID(ID, ID, ID);
      }
      if (ID) ID.ID(new ID(ID++));

    }

    if (ID) for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID, ID, ID, ID, ID);

    return ID;
  }

                                                                                                                                         
  private void ID(IDID) throws ID, ID{
    boolean ID= true;
                                                                         
    int ID= ID;
    ID= new ID(ID+ ID);
    IDID= new ID(--ID);
    ID.ID(ID);
    for (IDID: ID) {
      ID.ID= new ID(--ID, ID);
      ID.ID.ID= true;
      ID.ID.ID(ID);
      ID.ID(ID.ID);
      for (IDID: ID.ID())
        ID.ID.ID(ID);
    }

                               
    for (IDID: ID)
      for (IDID: ID.ID())
        for (IDID: ID) {                            
          ID= ID= ID;
          ID(ID, ID);
        }

    if (ID().ID> ID) ID.ID(ID);

                                              
    if (ID) {
      for (IDID: ID)
        ID.ID.ID(ID);
    } else
      ID.ID.ID(ID);

                                          
    while (ID) {
      ID= false;
      ID|= (ID((ID) ID.ID(), ID, null, null));
    }

                                   
    ID= true;
                    
    while (ID) {
                
                                                                    
      ID= false;
      ID= null;
      ID|= (ID((ID) ID.ID(), null, null, null, ID));
      ID|= (ID((ID) ID.ID()));
    }

                                
                                                                    
    ID((ID) ID.ID());
    ID((ID) ID.ID());
    ID((ID) ID.ID());

                          
    ID= true;
    ID= false;
                                                               
    for (IDID: ID)
      for (IDID: ID.ID()) {
          
                                                                                                                     
          
                                                                       
          
           
                                                                                            
                                                                                         
                                                                                                                    
        if (ID.ID().ID() instanceof ID) {
          if (ID.ID().ID().ID().ID() != null) ID(ID.ID());
                                                             
        } else
          ID(ID.ID());

      }
                                                                      

                            
    ID= ID;

    ID(ID);

                                      

                                                             
    ID();

    if (ID().ID> ID) ID.ID(ID);

    ID= false;
  }

  public void ID() throws ID, ID{
    boolean ID= false;
    if (ID) {
      for (IDID: ID)
        if (ID.ID().ID()) {
          ID= true;
          throw new ID(ID+ ID.ID() + ID);
        }

      if (ID) throw new ID(ID);
      ID();
      ID(ID);
    }
  }

  private boolean ID(IDID, IDID, IDID,
      IDID, int ID) {
    if (ID== null) return false;
                                                                                                                                                       
                                                                                                                     

    boolean ID= false;

    if (IDinstanceof ID) ID= (ID) ID;
    if (ID== ID) ID= (ID) ID;

    if (!(IDinstanceof ID))                                  
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID|= (ID(ID, ID, ID, ID, ID+ ID));
    else
      ID.ID= ID.ID() != null;

                                                                                                                                                            
             
                                                                                                                     

                      
    if (ID.ID() == null && ID!= null) {
      ID|= (ID.ID() != ID);
      ID.ID= ID;
    }

    ID|= (ID.ID() != ID);
    ID.ID= ID;

    if (ID.ID== null) {
      ID|= (ID.ID!= ID);
      ID.ID= ID;
    }
    if (ID.ID== null) {
      ID|= (ID.ID!= ID);
      ID.ID= ID;
    }                                                                          
                                                 
    if (ID.ID== null) {
      ID|= (ID.ID!= ID);
      ID.ID= ID;
    }

    if (ID.ID== null) {
      ID|= (ID.ID!= ID);
                                                                 
                                
    }
    if (ID.ID== null) {
      ID|= (ID.ID!= ID);
      ID.ID= ID;
    }
    if (ID.ID== null) {
      ID|= (ID.ID!= ID);
      ID.ID= ID;
    }

                                     
          
    ID|= (ID.ID!= (IDinstanceof ID&& ID== ID&& ID.ID() == null));
    ID.ID= (IDinstanceof ID&& ID== ID&& ID.ID() == null);

           
    if (IDinstanceof ID|| IDinstanceof ID) {
      ID|= (ID(ID).ID!= true);
      ID(ID).ID= true;
    }

    if (ID.ID.ID) {
      ID|= (ID.ID!= true);
      ID.ID= true;
    }

          
    if (IDinstanceof ID) {
      ID|= (ID(ID).ID!= true);
      ID(ID).ID= true;
    }

          
    if (IDinstanceof ID) {
      ID|= (ID(ID).ID!= true);
      ID(ID).ID= true;
    }

          
    if (IDinstanceof ID) {
      ID|= (ID(ID).ID!= true);
      ID(ID).ID= true;
    }

          
    if (IDinstanceof ID) {
      ID|= (ID(ID).ID!= true);
      ID(ID).ID= true;
    }

                                                  

          
    if (IDinstanceof ID) {
      ID|= (ID.ID().ID!= ID);
      ID.ID().ID= ID;
    }

         
    if (IDinstanceof ID&& ID!= null) {
      if (ID.ID) {
        ID|= (ID.ID!= ID);
        ID.ID= ID;
      } else {
        ID|= (ID.ID!= ID);
        ID.ID= ID;
      }
      ID= null;
    }

    if (IDinstanceof ID) ID= ID;

         
    if (IDinstanceof ID) {
      IDID= ID(ID);
      for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {
        IDID= ID(ID);

        ID|= (ID.ID!= ID);
        ID.ID= ID;
                                                                                                                                                         
        ID|= (ID.ID!= true);
        ID.ID= true;
      }
    }

            

             
    if (IDinstanceof ID&& ID.ID() == null) {
      ID|= (ID.ID!= true);
      ID.ID= true;
    }

    if (ID.ID() != null && ID.ID().ID&& (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID)) {
      ID|= (ID.ID!= true);
      ID.ID= true;
    }

                     
    if (IDinstanceof ID) if (ID.ID() != ID&& ID.ID() != null) {
      ID|= (ID.ID!= true);
      ID.ID= true;
    }

          
    if (IDinstanceof ID|| (IDinstanceof ID&& ID== ID))
      for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {
        ID|= (ID.ID!= ID(ID));
        ID.ID= ID(ID);
      }
    else if (IDinstanceof ID) if (ID.ID() != null) {
      ID|= (ID.ID().ID!= ID);
      ID.ID().ID= ID;
    } else if (IDinstanceof ID|| IDinstanceof ID) {
      ID|= (ID.ID!= ID(ID));
      ID.ID= ID(ID);
    }

          
    if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID) {
      ID|= (ID.ID!= ID.ID());
      ID.ID= ID.ID();
    }
    if (IDinstanceof ID|| IDinstanceof ID) {
      ID|= (ID.ID!= ID(ID));
      ID.ID= ID(ID);
    }

                                                                                                             

    return ID;
  }

  private void ID(IDID) throws ID{
                                                                                                     

    if (IDinstanceof ID)
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID(ID);
    else if (IDinstanceof ID)
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID(ID);
    else if (IDinstanceof ID)
      ID(ID.ID());
    else if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID)
      ;
    else if (IDinstanceof ID)
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID(ID);

    else if (IDinstanceof ID&& ID.ID().ID().ID().ID() == null)                  
    {
      IDID= ID.ID().ID();
      if (!(IDinstanceof ID|| IDinstanceof ID)) ID(ID);
    }

    else if (IDinstanceof ID)
      ID(ID.ID().ID());

    else if (IDinstanceof ID) {
                                                    
      boolean ID= false;

      if (ID.ID().ID() != null) {
        IDID= ID.ID().ID();
        if (IDinstanceof ID&& ID.ID() == ID.ID()) ID= true;
      }
                          

      if (!(ID&& ID.ID.ID(ID))) ID.ID().ID= true;
    }

    else if (IDinstanceof ID)
      ID.ID().ID= true;

    else if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID)
      ;

    else
      throw new ID(ID+ ID.ID() + ID);

  }

  private void ID(IDID) {
                                                              
    if (ID== null) return;

    if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| (IDinstanceof ID) && !(ID.ID|| ID.ID)) {
                                                
      ID= false;
    }

    if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID) {
                                              
      ID= true;
    }

    ID(ID.ID());
    ID(ID.ID());
  }

  private void ID(IDID) {
    ID(ID.ID);
    ID(ID.ID);
    ID(ID.ID());

    for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID);
  }

  private boolean ID(IDID) {
    if (ID== null) return false;

    boolean ID= false;

    if (!(IDinstanceof ID))                                    
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
      ID(ID);

    ID|= (ID.ID!= ID(ID));
    ID.ID= ID(ID);
                                   
    return ID;
  }

  private void ID(IDID) {
    ID.ID= true;
    if (ID.ID() != null) ID.ID().ID= true;

    if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID)             
               
                 
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID(ID);
    else if (IDinstanceof ID) {                                                                                             
      IDID= null;

      for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {                             
        if (!(IDinstanceof ID)) ID= ID;
      }

      if (IDinstanceof ID)
        ID(ID);
      else
        ID.ID().ID= true;
    }

  }

  private boolean ID(IDID, int ID, IDID, IDID) throws ID{
    boolean ID= false;

    if (ID== null) return ID;

                                                                                                                                                           

    ID|= (ID(ID.ID(), ID, ID, ID));

    IDID= ID;

    if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID)
      ID= ID;

    if (IDinstanceof ID) {
      ;                 
    }

    else if (IDinstanceof ID) {
      ID|= ID.ID.ID(((ID) ID.ID()).ID());
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID|= ID.ID.ID(ID.ID);

      ID|= (((ID) ID.ID()).ID()).ID(ID.ID);
    }

    else if (IDinstanceof ID) {
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID|= ID.ID.ID(ID.ID);
    }

    else if (IDinstanceof ID) {
                                                                                                
      for (IDID= ID.ID().ID(); ID!= null; ID= ID.ID().ID()) {
        ID<ID> ID= new ID<ID>(ID.ID);
        if (ID.ID().ID() != null) ID.ID(ID);

        ID|= ID.ID.ID(ID);
        if (!ID.ID.ID(ID)) break;
      }
    }

    else if (IDinstanceof ID) {
      if (ID.ID() == null) {                     
        if (ID== null)
          ID|= ID.ID.ID(ID);
        else {
          ID|= ID.ID.ID(ID.ID().ID);                                   
          if (IDinstanceof ID|| IDinstanceof ID)
            ID|= ID.ID.ID(ID.ID);
        }
      } else {                                                                                                             
        ID<ID> ID= new ID<ID>(ID.ID().ID);
        ID.ID(ID);

        ID|= ID.ID.ID(ID);

        if (ID.ID().ID.ID(ID)) ID|= ID.ID.ID(ID.ID().ID().ID);                                     
      }

                                        
      ID<ID> ID= new ID<ID>(ID.ID);
      if (ID.ID(ID)) if (ID== null)
        ID.ID(ID.ID);
      else {
        ID.ID(ID.ID().ID());
                                                           
        if (IDinstanceof ID|| IDinstanceof ID)
          ID.ID(ID.ID());
      }

      ID.ID(ID);
      ID|= ID.ID().ID(ID);

      return ID;                                
    }

    else if (IDinstanceof ID) {
      IDID= (ID) ID.ID();

      ID|= ID.ID.ID(ID.ID);

      ID<ID> ID= new ID<ID>();
      ID.ID(ID.ID().ID);
      ID.ID(ID);

      ID|= ID.ID.ID(ID);

      if (ID.ID().ID.ID(ID))                                
        ID|= ID.ID.ID(ID.ID);

      ID|= ID.ID.ID(ID.ID);
    }

    else if (IDinstanceof ID)
      ;                                                                               

    else if (IDinstanceof ID)
      ;                                                                              

    else if (IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID|| IDinstanceof ID) {
      ID|= ID.ID.ID(ID.ID().ID);
      if (IDinstanceof ID|| IDinstanceof ID) ID|= ID.ID.ID(ID);
      if (!(IDinstanceof ID)) {                                                                                       
        ID<ID> ID= new ID<ID>(ID.ID().ID);
        if (ID.ID(ID)) ID.ID(ID.ID().ID());

        ID.ID(ID);
        ID|= ID.ID().ID().ID(ID);

      }
    }

    else
      throw new ID(ID+ ID.ID().ID() + ID);

    ID|= (ID(ID.ID(), ID+ ID, ID== ID? (ID) ID.ID() : ID,
        ID.ID(ID)));
    return ID;
  }

  private void ID() {
                                                      
                                  
    for (IDID: ID) {                               
      for (IDID: ID.ID()) {                                            
        int ID= ID;
        ID<ID> ID= new ID<>();
                                                                              
        for (IDID= ID.ID(); ID!= null; ID= ID.ID()) {                                           
                              
          if (ID.ID() == null)
            ID.ID= ID;
          else if (IDinstanceof ID) {
            ID.ID= ID;
                                                                                                           
            if (ID.ID(ID) == null) ID.ID(new ID<>(ID), (ID) ID);
            ID().ID((ID) ID, ID.ID(ID));
                                                                                                    
          } else {
            ID.ID= ++ID;
            if (!(IDinstanceof ID)) ID.ID(ID.ID());
          }
        }
      }
    }
                                           
  }

  private IDID(IDID, IDID) throws ID{

    int ID= ID(ID, ID);
                                                                                                         
    return ID;
  }

  private IDID(IDID, IDID) throws ID{
    if (((ID) ID.ID()).ID().ID(ID)) {
      IDID= ID().ID(new ID(ID, ID(ID)));
      if (ID== null) ID= ID().ID(ID(ID));
      return (ID== null) ? ID: ID.ID();
    }
    if (((ID) ID.ID()).ID().ID(ID)) {
      IDID= ID.ID(ID(ID));
      return (ID== null) ? ID: ID.ID();
    }
    if (((ID) ID.ID()).ID().ID(ID)) {
      IDID= ID.ID(ID(ID));
      return (ID== null) ? ID: ID.ID();
    }
    if (((ID) ID.ID()).ID().ID(ID)) {
      IDID= ID.ID(ID(ID));
      return (ID== null) ? ID: ID.ID();
    }
    throw new ID(ID+ ID.ID() + ID);
  }

  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (ID== null) return false;
    if (ID() != ID.ID()) return false;
    IDID= (ID) ID;
    if (ID== null) {
      if (ID.ID!= null) return false;
    } else if (!ID.ID(ID.ID)) return false;
    return true;
  }

    
                                            
    
                                                                                                        
    
                                                                                                                                                           
                                                                                                                          
    
     
  private void ID(ID[] ID, IDID, IDID, ID<ID> ID) throws ID{
    if (ID.ID().ID().ID(ID))                                                                   
      for (IDID: ID) {
        if (IDinstanceof ID) ID(ID, ID, ID.ID(), ID);
      }
    else
      ID(ID, ID, ID(ID, ID), ID);

  }

  private void ID(ID[] ID, IDID, int ID, ID<ID> ID) throws ID{
    if (ID== ID) return;                              
    for (IDID: ID)
      if (ID.ID().ID().ID(ID))
        for (IDID: ID) {
          if (IDinstanceof ID) ID(ID, ID, ID.ID());
        }
      else
        ID(ID, ID, ID(ID, ID));
  }

  private void ID(ID[] ID, int ID, int ID) {
                                                            
    if (ID== ID) return;
    if (ID== ID) return;
    if (ID[ID] == null) ID[ID] = new ID();
    ID[ID].ID(ID);
  }

  public IDID(IDID, IDID) {
    return ID(new ID(ID, ID));
  }

  public IDID(IDID) {
    return ID(ID.ID(), ID.ID());
  }

  public IDID(IDID) {
    IDID= ID().ID(ID);
    if (ID== null) {
      ID().ID(ID, ID= new ID(ID));                                                                            
                                                                                           
               
      ID.ID(ID);
      ID= true;
    }
    return ID;
  }

  public IDID(IDID) throws ID{
    IDID= ID.ID(ID);
    if (ID== null) {
      ID.ID(ID, ID= new ID(ID));                                                             
                                                                                                             
               
      ID.ID(ID);
      ID= true;
    }
    return ID;
  }

  public IDID(IDID) {
    IDID= ID.ID(ID);
    if (ID== null) {
      ID.ID(ID, ID= new ID(ID));                                                  
                                                                                                                                        
               
      ID.ID(ID);
      ID= true;
    }
    return ID;
  }

  public IDID(IDID) {
    IDID= ID.ID(ID);
    if (ID== null) {
      ID.ID(ID, ID= new ID(ID));                                                          
                                                                                                                            
               
      ID.ID(ID);
      ID= true;
    }
    return ID;
  }

  public IDID(IDID) {
    IDID= ID.ID(ID);
    if (ID== null) {
      ID.ID(ID, ID= new ID(ID));                                                             
                                                                                                                 
               
      ID.ID(ID);
      ID= true;
    }
    return ID;
  }

  public IDID(IDID, IDID) {
    return ID+ ID+ ID+ ID;
  }

  public IDID(IDID) {
    IDID= ID().ID(ID);
    if (ID== null) {
      ID().ID(ID, ID= new ID(ID));
      ID.ID(ID);
      ID= true;
    }
    return ID;
  }

  public IDID() {
    return ID;
  }

  public IDID(int ID) {
    ;
    return ID.ID(ID);
  }

  public ID<ID, ID> ID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public int ID() {
    return ID;
  }

  public int ID() {
    return ID;
  }

  public IDID() {
    return ID&& !ID? ID.ID: ID? ID.ID: ID.ID;
  }

  public ID[] ID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public int ID() {
    return ID;
  }

  public int ID() {
    return ID;
  }

  public ID[] ID() {
    return ID;
  }

  public ID<ID<ID>, ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID, ID> ID() {
    return ID;
  }

  public ID<ID<ID>, ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  @IDpublic int ID() {
    final int ID= ID;
    int ID= ID;
    ID= ID* ID+ ((ID== null) ? ID: ID.ID());
    return ID;
  }

  public boolean ID() {
    return ID;
  }

  public boolean ID() {
    return ID;
  }

  public boolean ID(int ID) {
    return ID.ID(ID) instanceof ID;
  }

  public boolean ID(int ID) {
    return ID.ID(ID) instanceof ID;
  }

  public boolean ID() {
    return ID;
  }

  public boolean ID(int ID) {
    return ID.ID(ID) instanceof ID;
  }

  public boolean ID(int ID) {
    return ID.ID(ID) == null;
  }

  public boolean ID(int ID) {
    return ID.ID(ID) instanceof ID;
  }

                                                                       
  public IDID(IDID) {
    IDID;

    if (ID.ID() == null || IDinstanceof ID)                                    
      ID= ID;
    else
      ID= ID(ID.ID());

    return ID;
  }

  private void ID(ID<ID> ID) {
    if (ID!= null && !ID.ID(ID)) {
                                                                            
      ID.ID(ID, ID++);
    }
  }

  private void ID() {
    ID().ID();
    int ID= ID;

    ID.ID(ID++);
    ID().ID(ID.ID(), ID);
    ID= ID;
    for (IDID: ID) {
      ID.ID(ID++);
      ID().ID(ID.ID(), ID);
    }
    ID= ID- ID;
    ID.ID(ID++);
    ID().ID(ID.ID(), ID);

                                                                                                                     
    for (IDID: ID()) {
      ID.ID(ID++);
      ID().ID(ID.ID(), ID);
    }

    ID= ID;
    for (IDID: ID) {
      ID.ID(ID++);
      ID().ID(ID.ID(), ID);
    }
    ID= ID- ID;

                                                            
    ID= ID;
                                                                               
  }

  private IDID(IDID) {
                                                                                                                                                               
                
    if (ID.ID&& !(ID.ID|| ID.ID|| ID.ID|| ID.ID)) if (ID.ID== ID)
      return ID;
    else
      return ID(ID.ID);
    if (ID.ID) return ID(ID.ID);
    return ID;
  }

  public void ID() {
    IDID= new ID();

    boolean ID= false;
    for (IDID: ID)
      ID|= IDinstanceof ID;

    if (ID) {
      ID.ID(ID);

      for (IDID: ID)
        if (IDinstanceof ID) ID.ID(ID+ ID.ID());
      ID.ID(ID);
    }

    boolean ID= false;
    for (int ID= ID; ID< ID.ID; ID++) {
      ID|= ID[ID] != null && ID[ID].ID();
      ID|= ID[ID] != null && ID[ID].ID();
    }

    if (ID) {
      ID.ID(ID);
      for (int ID= ID; ID< ID.ID; ID++)
        for (int ID= ID; ID< ID.ID; ID++)
          if (ID[ID].ID(ID)) ID.ID(ID(ID) + ID+ ID(ID));

      for (int ID= ID; ID< ID.ID; ID++)
        for (int ID= ID; ID< ID.ID; ID++)
          if (ID[ID].ID(ID)) ID.ID(ID(ID) + ID+ ID(ID));

      ID.ID();
    }

    ID.ID(ID+ ID);

    for (IDID: ID)
                                                        
      if (ID.ID!= null) ID.ID(ID+ ID+ ID+ ID.ID.ID(null, ID, ID, false));
  }

  private boolean ID(IDID, IDID, IDID) throws ID{
                                                                                               
                                                                                               
    IDID= ID.ID();

    if (ID(ID, ID)) return false;

    ID= ID.ID(new ID(ID++));
    ID.ID(new ID(ID++));
    if (ID(ID, ID))
      ID.ID(
          new ID(ID++, ID(ID, ((ID) ID.ID().ID()).ID)));
    else if (ID(ID, ID))
      ID.ID(
          new ID(ID++, ID(((ID) ID.ID().ID()).ID)));
    else if (ID(ID, ID))
      ID.ID(new ID(ID++,
          ID(((ID) ID.ID().ID()).ID)));
    else if (ID(ID, ID))
      ID.ID(new ID(ID++,
          ID(((ID) ID.ID().ID()).ID)));
    else if (ID(ID, ID))
      ID.ID(
          new ID(ID++, ID(((ID) ID.ID().ID()).ID)));
    else if (ID(ID, ID))
      ID.ID(new ID(ID++, ID));
    else
      throw new ID(ID+ ID.ID());
    ID.ID(new ID(ID++));
    return true;
  }

  private void ID(IDID, IDID, IDID) throws ID{
    if (ID.ID() == null) return;
                                                                                  
    if (!ID(ID.ID(), ID)) throw new ID(ID);
    for (IDID= ID.ID().ID(); ID!= null; ID= ID.ID())
      if (ID(ID, ID)) {
        ID.ID= ((ID) ID.ID().ID().ID).ID;
      } else if (ID(ID, ID)) {
        ID.ID= true;
        if (!(ID.ID() instanceof ID)) throw new ID(ID+ ID+ ID);
        ((ID) ID.ID()).ID= true;
        ID.ID= true;
      } else if (ID(ID, ID)) {
        if (ID.ID!= null) throw new ID(ID+ ID);
        ID.ID= ((ID) ID.ID().ID().ID).ID;
      } else if (ID(ID, ID)) {
        IDID= ID.ID();
        if (ID.ID!= ID.ID)
          ID.ID.ID(ID+ ID+ ID+ ID+ ID+ ID);
        if (ID(ID, ID))
          ID.ID= ID.ID;
        else if (ID(ID, ID))
          ID.ID= ID.ID;
        else if (ID(ID, ID))
          ID.ID= ID.ID;
        else if (ID(ID, ID))
          ID.ID= ID.ID;
        else
          throw new ID(ID+ ID.ID() + ID+ ID+ ID+ ID);
      }
  }

  private IDID(IDID) {
    if (ID== null) return null;
                                                                     
                                                                                
    IDID= null;

    if (ID.ID() == null || IDinstanceof ID)                                    
      ID= ID;
    else
      for (IDID= ID.ID(); ID!= null; ID= ID.ID())
        ID= ID(ID);

    return ID;
  }

  public void ID(ID<ID> ID) {
    this.ID= ID;
  }

  private IDID(IDID) {
    return ID.ID().ID().ID();
  }

  @IDpublic IDID() {
    IDID= new ID();
    ID.ID(ID);
    ID.ID(ID+ ID+ ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID());
    ID.ID(ID);
    ID.ID(ID.ID(ID));
    ID.ID(ID);
    ID.ID(ID.ID(ID));
    return ID.ID();
  }

  private boolean ID(IDID, IDID) {
                                                                              
    return ID.ID().ID[ID.ID().ID()].ID(ID);
  }

  public IDID() {
    return ID;
  }

  public ID<ID, ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID, ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }
}


public abstract class IDimplements ID<ID> {
  private int ID;

  public int ID() {
    return ID;
  }

  public void ID(int ID) {
    this.ID= ID;
  }

  abstract public IDID();

  abstract public IDID(IDID);

                                                                                                                                                     
                                
  final public int ID() {
    return this instanceof ID? ID: this instanceof ID? ID: this instanceof ID? ID: this instanceof ID? ID: this instanceof ID? ID: this instanceof ID? ID: this instanceof ID? ID: this instanceof ID? ID: this instanceof ID? ID: ID;

  }

                                                          
                                                                                                   
                                                                          
  @IDpublic int ID() {
    final int ID= ID;
    return ID* ID();
  }

                                                        
                                                                                                   
                                                                          
  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (ID== null) return false;
    if (ID() != ID.ID()) return false;
    IDID= (ID) ID;
    if (ID() != ID.ID()) return false;
    return true;
  }

  @IDpublic int ID(IDID) {
                                                                     

    int ID= this.ID();
    int ID= ID.ID();

    if (ID> ID) return ID;
    if (ID< ID) return -ID;

    return ID;
  }

}


                                                                                                                                                                       
public class IDextends ID{
  private final IDID;

  public ID(IDID) {
    this.ID= ID;
  }

  @IDpublic IDID() {
    return ID;
  }

  @IDpublic IDID(IDID) {
    return ID;
  }

  @IDpublic IDID() {
    return ID;
  }

}


public class IDextends ID{
  @IDpublic int ID() {
    final int ID= ID;
    int ID= super.ID();
    ID= ID* ID+ ((ID() == null) ? ID: ID().ID());
    ID= ID* ID+ ((ID() == null) ? ID: ID().ID());
    return ID;
  }

  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (!super.ID(ID)) return false;
    if (ID() != ID.ID()) return false;
    IDID= (ID) ID;
    if (ID() == null) {
      if (ID.ID() != null) return false;
    } else if (!ID().ID(ID.ID())) return false;
    if (ID() == null) {
      if (ID.ID() != null) return false;
    } else if (!ID().ID(ID.ID())) return false;
    return true;
  }

  private final IDID;
  private final IDID;

  public ID(IDID, IDID) {
    super();
    this.ID= ID;
    this.ID= ID;
  }

  @IDpublic IDID() {
    return ID() + ID+ ID();
  }

  @IDpublic IDID() {
    return ID();
  }

  @IDpublic IDID(IDID) {
    return ID+ ID+ ID+ ID();
  }

  public IDID() {
    return ID;
  }

  public IDID() {
    return ID;
  }
}


public class IDextends ID{
  public ID() {
    super(ID);
  }

  @IDpublic IDID() {
    return ID;
  }

  @IDpublic IDID() {
    return ID;
  }

  @IDpublic IDID(IDID) {
    return ID+ ID+ ID+ ID();
  }

  @IDpublic int ID() {
    final int ID= ID* ID();
    int ID= ID;
    ID= ID* ID+ ((ID() == null) ? ID: ID().ID());
    return ID;
  }

  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (ID== null) return false;
    if (ID() != ID.ID()) return false;
    return true;
  }

  @IDpublic int ID(IDID) {
                                                                     

    int ID= this.ID();
    int ID= ID.ID();

    if (ID> ID) return ID;
    if (ID< ID) return -ID;

                                               
    return ID;
  }
}


public class IDextends ID{

  @IDpublic IDID() {
    return ID;
  }

  @IDpublic IDID() {
    return ID;
  }

  @IDpublic IDID(IDID) {
    return ID+ ID+ ID+ ID();
  }

  @IDpublic int ID() {
    final int ID= ID* ID();
    int ID= ID;
    ID= ID* ID;
    return ID;
  }

  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (ID== null) return false;
    if (ID() != ID.ID()) return false;
    return true;
  }

  @IDpublic int ID(IDID) {
                                                                     

    int ID= this.ID();
    int ID= ID.ID();

    if (ID> ID) return ID;
    if (ID< ID) return -ID;

                                                   
    return ID;
  }
}





public class IDextends ID{
  private final IDID;
  private final IDID;

                                                                             
  private final ID<ID> ID= new ID<ID>();
  private final ID<ID> ID= new ID<ID>();
  private final ID<ID> ID= new ID<ID>();

  public ID(IDID, IDID) {
    super();
    this.ID= ID;
    this.ID= ID;
  }

  public void ID(IDID) {
                                                                                  
    ID.ID(ID);
  }

  public void ID(IDID, IDID) {
                                                                                                         
    ID.ID(new ID(ID, ID));
  }

  public void ID(IDID) {
    ID.ID(ID);
  }

  @IDpublic IDID() {
    return ID.ID() + ID+ ID;
  }

  public void ID() {
    for (IDID: ID) {
      ID.ID.ID(ID+ ID);
      ID.ID();
      ID.ID.ID(ID);
    }
  }

  public IDID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  @IDpublic IDID() {
    return ID+ ID.ID() + ID+ ID;
  }

  @IDpublic IDID(IDID) {
    return ID+ ID+ ID.ID() + ID+ ID;
  }
}







public class IDextends ID{
  protected IDID;
  protected IDID;

  protected ID<ID> ID= new ID<ID>();
  protected ID<ID> ID= new ID<ID>();

  protected ID<ID> ID= new ID<ID>();
  protected ID<ID> ID= new ID<ID>();

  protected boolean ID= false;
  protected boolean ID= false;
  protected boolean ID= false;
  protected boolean ID= false;
  protected boolean ID= false;
  protected boolean ID= false;
  public IDID;                                             

  public int ID;

  @IDpublic IDID() {
    return ID.ID() + ID+ ID;
  }

  @IDpublic IDID(IDID) {
    if (ID== null)
      return ID+ ID();
    else
      return ID+ ID+ ID+ ID();
  }

  public ID(IDID, IDID) {
    super();
    this.ID= ID;
    this.ID= ID;
  }

  public ID(IDID) {
    this(ID.ID, ID.ID);
  }

  public IDID() {
    return ID;
  }

  public void ID(IDID) {
    this.ID= ID;
  }

  public IDID() {
    return ID;
  }

  public void ID(IDID) {
    this.ID= ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public void ID(ID<ID> ID) {
    this.ID= ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public void ID(ID<ID> ID) {
    this.ID= ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public void ID(ID<ID> ID) {
    this.ID= ID;
  }

  public boolean ID() {
    return ID;
  }

  public void ID(boolean ID) {
    this.ID= ID;
  }

  public boolean ID() {
    return ID;
  }

  public void ID(boolean ID) {
    this.ID= ID;
  }

  public boolean ID() {
    return ID;
  }

  public void ID(boolean ID) {
    this.ID= ID;
  }

  public boolean ID() {
    return ID;
  }

  public void ID(boolean ID) {
    this.ID= ID;
  }

  public boolean ID() {
    return ID;
  }

  public void ID(boolean ID) {
    this.ID= ID;
  }

  public boolean ID() {
    return ID;
  }

  public void ID(boolean ID) {
    this.ID= ID;
  }

  @IDpublic IDID() {
    IDID= ID.ID();
    if (ID.ID(ID))
      return ID;
    else
      return ID+ ID+ ID;
  }

  @IDpublic int ID() {
    final int ID= ID;
    int ID= this.ID();
    ID= ID* ID+ ((ID== null) ? ID: ID.ID());
    ID= ID* ID+ ((ID== null) ? ID: ID.ID());
    return ID;
  }

  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (ID() != ID.ID()) return false;
    IDID= (ID) ID;
    if (ID== null) {
      if (ID.ID!= null) return false;
    } else if (!ID.ID(ID.ID)) return false;
    if (ID== null) {
      if (ID.ID!= null) return false;
    } else if (!ID.ID(ID.ID)) return false;
    return true;
  }

  @IDpublic int ID(IDID) {
                                                                     

    int ID= this.ID();
    int ID= ID.ID();

    if (ID> ID) return ID;
    if (ID< ID) return -ID;

                                                       
    int ID= this.ID.ID().ID(((ID) ID).ID.ID());
    if (ID!= ID) return ID;

    return ID.ID(((ID) ID).ID);
  }
}


public class IDextends ID{
  IDID;

  @IDpublic IDID() {
    return ID;
  }

  @IDpublic IDID() {
    return ID+ ID();
  }

  @IDpublic IDID(IDID) {
    return ID+ ID+ ID+ ID();
  }
}


public abstract class IDextends ID{

  protected final IDID;

  public IDID() {
    return ID;
  }

  public ID(IDID) {
    super();
    this.ID= ID;
  }

  @IDpublic int ID() {
    final int ID= ID* ID();
    int ID= ID;
    ID= ID* ID+ ((ID== null) ? ID: ID.ID());
    return ID;
  }

  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (ID== null) return false;
    if (ID() != ID.ID()) return false;                                       
    IDID= (ID) ID;
    if (ID== null) {
      if (ID.ID!= null) return false;
    } else if (!ID.ID(ID.ID)) return false;
    return true;
  }

  @IDpublic int ID(IDID) {
                                                                     

    int ID= this.ID();
    int ID= ID.ID();

    if (ID> ID) return ID;
    if (ID< ID) return -ID;

                                                    
    return ID.ID(((ID) ID).ID);
  }
}





public class IDextends ID{

  public ID(IDID) throws ID{
    super(ID);
    if (!ID.ID(ID)) throw new ID(ID+ ID);

  }

  @IDpublic IDID() {
    return ID+ ID;
  }

  @IDpublic IDID() {
    return ID.ID(ID);
  }

  @IDpublic IDID(IDID) {
    if (ID== null)
      return ID+ ID();
    else
      return ID+ ID+ ID+ ID();
  }

}




public class IDextends ID{

  public ID(IDID) {
    super(ID);
  }

  @IDpublic IDID() {
    return ID+ ID+ ID;
  }

  @IDpublic IDID() {
    return ID.ID(ID);
  }

  @IDpublic IDID(IDID) {
    if (ID== null)
      return ID+ ID();
    else
      return ID+ ID+ ID+ ID();
  }
}




public class IDextends ID{

  public ID(IDID) {
    super(ID);
  }

  @IDpublic IDID() {
    return ID+ ID+ ID;
  }

  @IDpublic IDID() {
    return ID.ID(ID);
  }

  @IDpublic IDID(IDID) {
    if (ID== null)
      return ID+ ID();
    else
      return ID+ ID+ ID+ ID();
  }
}




public class IDextends ID{

  public ID(IDID) {
    super(ID);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }

  @IDpublic IDID() {
    return ID.ID(ID);
  }

  @IDpublic IDID(IDID) {
    if (ID== null)
      return ID+ ID();
    else
      return ID+ ID+ ID+ ID();
  }
}







public class IDextends ID{
  ID<ID> ID= new ID<>();

  public ID(IDID, IDID) throws ID{
    super(null);
    if (ID.ID() > ID) throw new ID(ID);
    if (ID.ID() > ID) throw new ID(ID);
    char ID= ID.ID(ID), ID= ID.ID(ID);
    for (char ID= ID; ID<= ID; ID++)
      ID.ID(ID);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }

  @IDpublic IDID() {
    return ID.ID(ID.ID());
  }

  @IDpublic IDID(IDID) {
    if (ID== null)
      return ID+ ID();
    else
      return ID+ ID+ ID+ ID();
  }
}




public class IDextends ID{

  public ID(IDID) {
    super(ID);
                                                                                            
  }

  @IDpublic IDID() {
    return ID;
  }

  @IDpublic IDID() {
    return ID.ID(ID);
  }

  @IDpublic IDID(IDID) {
    if (ID== null)
      return ID+ ID();
    else
      return ID+ ID+ ID+ ID();
  }

}




public class IDextends ID{

  public ID(IDID) {
    super(ID);
  }

  @IDpublic IDID() {
    return ID.ID(ID);
  }

  @IDpublic IDID(IDID) {
    if (ID== null)
      return ID+ ID();
    else
      return ID+ ID+ ID+ ID();
  }
}









public class IDextends IDimplements ID<ID> {

  protected final ID<ID> ID= new ID<ID>();
  protected final ID<ID> ID= new ID<ID>();
  private final ID<ID> ID= new ID<ID>();

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public IDID= ID.ID;                                                
  public int ID;                                                                               
  IDID;                                                                            
                                                                        
                                                                                                 
  IDID;                                                                  
  char ID;                                        

  IDID;                                                                             
  IDID;                                                    
  IDID;                                         
  int ID= ID;                                                                        
  IDID;                                                        
  IDID;
  IDID;
  IDID;
  IDID;                
  IDID;                
  IDID;                               

  boolean ID;                                                      
  boolean ID;                                 
  boolean ID;                                                        
  boolean ID;                                                       
  boolean ID;                                                                         
  boolean ID;                                                                      
  boolean ID;                                                                                                               
  boolean ID;                                                     
  boolean ID;                                                            
  boolean ID;                                                      
  boolean ID;                                                            
  boolean ID;                                                                
  boolean ID;                         
  boolean ID;                                              
  boolean ID;                                        
  boolean ID;                                                                  

  boolean ID;                                                                                                                     
  boolean ID;                                        
  boolean ID;                                   
  public boolean ID;                                     
  boolean ID;                                                                                      

  boolean ID;                                     
  boolean ID;                                     
  boolean ID;                                             
  boolean ID;                                           

  public ID(int ID, IDID) {
    super(ID, ID);
                                                                                                
  }

  @IDpublic int ID(IDID) {
    if ((ID) ID== (ID) (ID.ID)) return ID;
    if ((ID) ID< (ID) (ID.ID))
      return -ID;
    else
      return ID;
  }

  @IDpublic IDID() {
    return (ID) ID;
  }

  @IDpublic IDID() {
    return (ID) ID;
  }

  @IDpublic IDID() {
    return (ID) ID;
  }

  @IDpublic IDID() {
    return (ID) ID;
  }

  public int ID() {
    return ID;
  }

  public IDID(IDID) {
    return (ID) super.ID(ID);
  }

  public IDID() {
    IDID= ID;
    IDID= ID().ID();
    IDID= ID.ID(ID.ID(ID) + ID.ID()).ID();

    IDID= ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID()
        + (ID== null ? ID: (this instanceof ID? ID: ID+ ID.ID())) + ID+ (ID== null ? ID: ID+ ID) + (ID== null ? ID: ID+ ID) + ID+ (ID? ID: ID)
        + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID)
        + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID)
        + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID)
        + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID)
        + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID)

        + (ID? ID: ID) + (ID? ID: ID)

        + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID) + (ID? ID: ID)
        + (ID? ID: ID) + ID(ID, ID) + ID(ID(), ID)
        + ID(ID(), ID) + ID+ ID+ ID(ID, ID) + ID(ID, ID)
        + ID(ID, ID) + ID(ID, ID) + ID(ID, ID) + ID(ID, ID) + ID(ID, ID);

    if (!ID.ID()) ID+= ID+ ID;
    if (!ID.ID()) ID+= ID+ ID;
    if (!ID().ID()) ID+= ID+ ID();

    ID+= ID+ (ID== null ? ID: ID.ID());
    ID+= ID+ (ID== null ? ID: ID.ID());
    return ID;
  }

                                                                                         
  IDID(IDID) {
    return ID;
  }

  @IDpublic void ID(IDID, IDID) {
    ID.ID(ID+ ID+ ID+ ID() + ID);
                             
    for (IDID= (ID) ID; ID!= null; ID= (ID) ID.ID) {
      ID.ID(ID+ ID+ ID+ ID.ID() + ID);
      ID.ID(ID, ID);
    }
  }

  public void ID(IDID, int ID) {
    if (ID!= ID) {
      ID.ID(ID+ ID+ ID);
      ID.ID(ID+ ID+ ID+ ID+ ID() + ID);
    }
                             
    for (IDID= (ID) ID; ID!= null; ID= (ID) ID.ID)
      ID.ID(ID, ID+ ID);
    if (ID!= ID) ID.ID(ID+ ID+ ID);
  }

  public IDID() {
    if (ID() == null) return ID;

    return ((ID) ID().ID()).ID().ID() + ID+ ((ID) ID().ID()).ID()
        + (ID? ID: ID+ ID());
  }

  public IDID(IDID) {
    return ID+ ID+ ID+ ID();
  }

  public IDID(IDID, IDID) {
    if (ID== null || ID== this)
      return ID;
    else
      return ID+ ID+ ID+ ID.ID();
  }

  IDID() {
    return this.ID() == null ? ID: ID;
  }

  boolean ID= false;

  protected IDID(IDID, IDID, IDID, boolean ID) {

                       
    if (this instanceof ID) ID+= ID+ ID();

    if (this instanceof ID) ID+= ID().ID() + ID+ ID();

    if (this instanceof ID) ID+= ID().ID() + ID+ ID();

    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();

    if (this instanceof ID) if (this == ID) {
      ID+= ID+ ID+ ID();
      if (ID) {
        ID= true;
        return ID;
      }
    }

    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();

    if (ID) return ID;

                      
    for (IDID= ID(); ID!= null; ID= ID.ID()) {
      ID= ID.ID(ID, ID, ID, ID);

      if (ID.ID() != null) {
        if (this instanceof ID) ID+= ID+ ID();
        if (this instanceof ID) ID+= ID+ ID();
        if (this instanceof ID) ID+= ID+ ID();
        if (this instanceof ID) ID+= ID+ ID();
      }
    }

                        
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();
    if (this instanceof ID) ID+= ID+ ID();

    return ID;
  }

  private boolean ID(IDID) {
    boolean ID= false;

    if (this == ID) return true;

    for (IDID= ID(); ID!= null; ID= ID.ID())
      ID|= ID.ID(ID);

    return ID;
  }

  public IDID() {
    return ID(ID);
  }

  public IDID(IDID) {
    if (this instanceof ID) return ID+ ID.ID();

    ID= false;
    IDID= ID();
    IDID= ID();
    IDID= ID;
    if (ID!= null && ID.ID() != null) ID= ID.ID().ID();
    if (ID!= null)
      return ID.ID(this, ID, ID+ ID, false);
    else
      return ID+ ID+ ID+ ID+ ID;
  }

  public IDID() {
    return ID+ ID;
  }

  public IDID() {
    if (ID!= null)
      return ID;
    else
      return ID();
  }

  public IDID() {                           
    IDID= ID;
    for (IDID= ID().ID(); ID!= this; ID= ID.ID())
      if (!(IDinstanceof ID|| IDinstanceof ID)) ID+= ID.ID+ ID;

    return ID;
  }

  public IDID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public IDID() {
    if (this instanceof ID) return ID;
    if (ID!= null) return ID.ID();
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }

}


public class IDextends ID{
  IDID;

  public ID(int ID, IDID) {
    super(ID, new ID(ID));
    this.ID= ID;
  }

  @IDpublic IDID() {
    return ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID, IDID) {
    super(ID, ID);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID, IDID) {
    super(ID, null);
    ID.ID(ID);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID, IDID) {
    super(ID, ID);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }

}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID, IDID) {
    super(ID, ID);
    ID= true;
    ID= this;
  }

  @IDpublic IDID() {
    return ID+ ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID, IDID) {
    super(ID, ID);
  }

  @IDpublic IDID() {
    return ID+ ID+ ID;
  }

  @IDpublic IDID() {
    return ((ID) ID).ID() + ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }
}


public class IDextends ID{

  public ID(int ID) {
    super(ID, null);
  }

  @IDpublic IDID() {
    return                              ID(ID);
  }

}


public class IDextends ID{

  public ID(int ID, IDID) {
    super(ID, ID);
  }

  @IDpublic IDID() {
    return ID+ ID;
  }

}


public class IDextends ID{

  public ID(int ID, IDID) {
    super(ID, ID);
    ID.ID(ID);                     
  }

  @IDpublic IDID() {
    return ID+ ID+ ID;
  }
}


public class ID{

}


public class IDextends ID{
public void ID() throws ID{
  ID();
  ID(ID.ID);
  ID();
  ID(ID.ID);
  ID();
  ID(ID.ID);
  ID();
  ID(ID.ID);
  ID();
  ID(ID.ID);
  ID();
  ID(ID.ID);
  ID();
  ID(ID.ID);
}

public void ID() throws ID{
  ID();
  ID();
  ID();
}

};








public abstract class ID{

  protected static boolean ID= false;

                          
  protected IDID;

               
  public IDID;                                                                      
  public int ID;                                 
  public int ID;                                                    
  public int ID;                                                         
  public int ID;                                                                 

  public int ID;                                                                           
  private int ID;                                                                                             

          
  public int ID[];                                                                                                     
  public int ID[][];                                                                                                                   
                                             
  public int ID[];                                                                                                             
                                                     
  public int ID[];                                                                 
  public int ID[][];                                                                                                     
  public int ID;                                                                          
  public int ID;                                          

            
  protected ID[][] ID;                                             

     
                               
     
  protected int ID;                                                                                   
  protected int ID;                                                                                                     

  public void ID(IDID) {
    this.ID= ID;
  }

  abstract protected void ID() throws ID;

  abstract protected void ID() throws ID;

  private char ID() {
    if (ID>= ID)
      return ID;
    else
      return ID.ID(ID);
  }

  private char ID() {
    if (ID+ ID>= ID)
      return ID;
    else
      return ID.ID(ID+ ID);
  }

  private char ID() {
                 
                                                                                                                                                            
    if (ID>= ID)
      return ID;
    else
      return ID.ID(ID++);
  }

  protected void ID(int ID) {
    if (ID> ID) {
      ID= ID;
      ID= ID;
    }
    ID= ID;                       
  }

  public int ID() throws ID{
                                                                                                  
                                                                            
                                                                                                                
                                                                                                                                          
                                                                                                                                           
                            
                                                   
    int ID;
    do {
      if (ID() == ID) break;
      ID= ID;

      ID();

    } while (ID!= ID);

                                                                                                                                            
    return -ID;
  }

  public int ID(int ID) throws ID{
    ID= ID;
    ID();
    return ID;
  }

  protected void ID(int ID, int ID) {
    if (ID> ID) {
      ID= ID;
      ID= ID;
    }
  }

  protected void ID() throws ID{
    ID= ID= ID;

    if (ID() == ID) {
      ID= ID;
      ID= ID.ID;
      return;
    }

                                                                                                    
    for (int ID= ID.ID; ID< ID.ID; ID++) {
      if (!ID.ID(ID.ID[ID], ID,
          ID.ID[ID], ID, ID.ID[ID].ID()))
        continue;
      ID= ID+ ID.ID[ID].ID();
      ID= ID;
    }

    ID();
    if (ID== ID) {
      throw new ID(
          ID.ID(ID+ ID.ID(ID) + ID+ (int) ID.ID(ID) + ID, ID, ID));
    }

                                                                  
                                                                              
                                                                                                                   
    ID= ID;
  }

                                           
  protected void ID(IDID) {
    if (!ID.ID()) ID.ID.ID(ID.ID, ID);
  }

  protected class ID{
    protected int ID;
    protected IDID;

    ID(int ID, IDID) {
      this.ID= ID;
      this.ID= ID;
    }
  }

  private boolean ID(int ID, IDID) {
    while (ID!= null)
      if (ID.ID== ID)
        return true;
      else
        ID= ID.ID;
    return false;
  }

  private void ID() throws ID{
    if (ID) ID.ID.ID(ID.ID, ID, ID);

                                                                                                                                                    
                                               
    ID= new ID[ID+ ID][];

    boolean ID= true;
    int ID;

    ID= ID;
    do {
      ID= ID;
      if (ID) ID();
      if (ID) ID.ID.ID(ID.ID, ID, ID,
          ID, ID.ID(ID, ID));
      ID();
      if (ID) ID.ID.ID(ID.ID, ID,
          ID.ID[ID], ID, ID+ ID,
          ID.ID(ID, ID+ ID));
      ID= ID.ID[ID] != ID.ID;
      if (ID[ID] == null) ID[ID] = new ID[ID];
      if (!ID(ID, ID[ID][ID]))
        ID[ID][ID] = new ID(ID, ID[ID][ID]);        
                   
               
    } while (ID!= ID.ID);
    ID= ID- ID;
  }

  private void ID() {
                                                                                                                                                
                                                       
                                                                                                                                  
                                                                                                                                                        
                                                                      
                                                                                                                                                         

                             
    int ID= ID;
    for (int ID= ID; ID< ID+ ID; ID++)
      if (ID[ID] != null) for (int ID= ID; ID< ID; ID++)
        if (ID[ID][ID] != null) ID++;

                                                                                                                       
    ID= new int[ID* ID];
    ID= new int[ID+ ID][];
    ID= new int[ID+ ID];
    ID= new int[ID+ ID][];
    ID= ID;
    for (int ID= ID; ID< ID+ ID; ID++) {
      if (ID[ID] == null) continue;
      ID[ID] = new int[ID];
      ID[ID] = new int[ID];
      ID[ID] = ID;                                                                                  
      for (int ID= ID; ID< ID; ID++) {
        if (ID[ID][ID] == null) continue;                                                              
        ID[ID][ID] = ID;
        ID[ID++] = ID;
        ID[ID++] = ID;
        if (ID) ID.ID.ID(ID, ID.ID[ID], ID,
            ID[ID][ID]);
      }
    }

                                
    int ID= ID;
    if (ID[ID] != null) for (int ID= ID; ID< ID; ID++)
      if (ID[ID][ID] != null) {
        if (ID) ID.ID.ID(ID, ID.ID[ID]);
        ID++;
      }

    ID++;                                        

    if (ID) ID.ID.ID(ID, ID);

                                                           
    for (int ID= ID; ID< ID+ ID; ID++) {
      if (ID[ID] == null) continue;                                                        

      for (int ID= ID; ID< ID; ID++) {
        if (ID[ID][ID] == null) continue;                                                                         

        if (ID) ID.ID.ID(ID, ID.ID[ID], ID);
        ID++;                                        

        for (IDID= ID[ID][ID]; ID!= null; ID= ID.ID) {
          int ID= ID.ID;

          if (ID) ID.ID.ID(ID, ID.ID[ID], ID, ID);

                                                             
          if (ID[ID] != null)                                                                
            for (int ID= ID; ID< ID; ID++) {
              if (ID[ID][ID] == null) continue;
              ID++;
              if (ID) ID.ID.ID(ID, ID.ID[ID], ID,
                  ID.ID[ID], ID);
            }
        }
      }
    }

    if (ID) ID.ID.ID(ID, ID);

                                
    ID= new int[ID];

                                              
    ID= ID;
    if (ID[ID] != null) for (int ID= ID; ID< ID; ID++)
      if (ID[ID][ID] != null) ID[ID++] = ID[ID][ID];

    ID[ID++] = -ID;                           

                                                                    
    for (int ID= ID; ID< ID+ ID; ID++) {
      if (ID[ID] == null) continue;                                                        

      for (int ID= ID; ID< ID; ID++) {
        if (ID[ID][ID] == null) continue;                                                                         

        ID[ID][ID] = ID;

        if (ID)
          ID.ID.ID(ID, ID.ID[ID], ID);

        for (IDID= ID[ID][ID]; ID!= null; ID= ID.ID) {
          int ID= ID.ID;

                                                             
          if (ID[ID] != null)                                                                
            for (int ID= ID; ID< ID; ID++) {
              if (ID[ID][ID] == null) continue;
              ID[ID++] = ID[ID][ID];

              if (ID) ID.ID.ID(ID, ID.ID[ID],
                  ID, ID.ID[ID], ID, ID- ID);
            }
        }
        ID[ID++] = -ID;                           
      }
    }

                           
    if (ID) {
      for (int ID= ID; ID[ID] != -ID; ID++)
        ID.ID.ID(ID, ID, ID.ID[ID[ID[ID]]],
            ID[ID[ID] + ID]);

      for (int ID= ID; ID< ID+ ID; ID++) {
        if (ID[ID] == null) continue;                                                        

        for (int ID= ID; ID< ID; ID++) {
          if (ID[ID][ID] == ID) continue;                                                                         
          for (int ID= ID[ID][ID]; ID[ID] != -ID; ID++)
            ID.ID.ID(ID, ID.ID[ID], ID, ID,
                ID.ID[ID[ID[ID]]], ID[ID[ID] + ID]);
        }
      }
    }
  }

  public void ID(IDID) {                   
    if (ID== null) return;
    for (int ID= ID; ID< ID.ID- ID; ID+= ID)
      ID.ID.ID(ID, ID, ID[ID+ ID], ID.ID[ID[ID]],
          ID.ID(ID[ID+ ID], ID[ID+ ID]).ID());
  }

                                                       
  public void ID(IDID) throws ID{
    this.ID= ID;
    ID= ID.ID();
    ID= ID.ID;
    ID();
    ID();
                                  
  }


  private boolean ID(char ID) {
    return ID.ID(ID);
  }

  private boolean ID(char ID) {
    return ID.ID(ID);
  }

  private boolean ID(char ID) {
    return ID(ID) || (ID>= ID&& ID<= ID) || (ID>= ID&& ID<= ID);
  }

  private boolean ID(char ID) {
    return ID(ID) || ID(ID);
  }

  private boolean ID(char ID) {
    return ID== ID|| ID== ID|| ID== ID|| ID== ID;
  }

  protected void ID() {
    if (!ID(ID())) return;
    while (ID(ID()) || ID() == ID)
      ID();
  }

                                                                                   
  protected void ID() {
    while (ID(ID()))
      ID();
  }

  protected void ID() {
    if (!(ID(ID()) || ID() == ID)) return;
    while (ID(ID()) || ID() == ID|| ID() == ID)
      ID();

    while (ID() == ID)
      ID();
  }

  protected void ID() {
    if (!ID(ID()))                                                    
      return;

                                          
    boolean ID= (ID() == ID&& (ID() == ID|| ID() == ID));

    if (ID) {
      ID();
      ID();                            
      if (!ID(ID())) {
        ID= ID;
        return;
      }
      while (ID(ID()))
        ;
    } else
      while (ID(ID()))
        ID();
  }

  protected void ID() {
    if (!ID(ID()))                                                 
      return;

    while (ID(ID()))
      ID();

                                                                                                                                                        
    if (!(ID() == ID&& ID(ID()))) {
      ID= ID;
      return;
    }

    ID();          

    while (ID(ID()))
      ID();

    if (ID() == ID|| ID() == ID) {
      ID();

      while (ID(ID()))
        ID();
    }
  }

  private void ID() {
    ID();                      
  }

  protected void ID() {
    if (ID() != ID) return;
    ID();                  
    if (ID() == ID) ID();
    if (ID() != ID) {
      ID= ID;
      return;
    }                    
    ID();                  
  }

  protected void ID() {
    if (ID() != ID) return;
    ID();                  
    if (ID() == ID) ID();
  }

  protected void ID() throws ID{
    if (ID() != ID) return;
    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));
      if (ID() == ID) ID();
    } while (ID() != ID);
    ID();                  
  }

  protected void ID() throws ID{
    if (ID() != ID) return;
    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));
      ID();
    } while (ID() != ID);
    ID();                  
  }

  protected void ID() throws ID{
    if (ID() != ID) return;
    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));
      if (ID() == ID) ID();
    } while (ID() != ID);
    ID();                  
  }

  protected void ID() throws ID{
    if (ID() != ID) return;
    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));
      if (ID() == ID) ID();
    } while (ID() != ID);
    ID();                  
  }

  protected void ID() throws ID{
    if (ID() != ID) return;
    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));
      if (ID() == ID) ID();
    } while (ID() != ID);
    ID();                  
  }

  protected void ID() throws ID{
    if (ID() != ID) return;
    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));
      if (ID() == ID) ID();
    } while (ID() != ID);
    ID();                  
  }

  protected void ID() throws ID{
    if (ID() != ID) return;
    int ID= ID;
    do {
      if (ID() == ID) ID++;
      if (ID() == ID) ID--;
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));

      if (ID() == ID) ID();
    } while (ID> ID);
  }

  protected void ID() throws ID{
    if (!((ID() == ID) && (ID() == ID))) return;
    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));
      if (ID() == ID) ID();
    } while (!((ID() == ID) && (ID() == ID)));
    ID();                  
    ID();                  
  }

  public void ID() {
    while (ID(ID()))
      ID();
  }

  public void ID() throws ID{
    if (!(ID() == ID&& ID() == ID)) return;
    int ID= ID;

    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));

      if (ID() == ID&& ID() == ID) {
        ID();
        ID();
        ID++;
      } else if (ID() == ID&& ID() == ID) {
        ID();
        ID();
        ID--;
      } else
        ID();
    } while (ID> ID);
  }

  protected void ID() throws ID{
    if (!((ID() == ID) && (ID() == ID))) return;

    do {
      if (ID() == ID)
        throw new ID(ID.ID(ID+ ID(ID),
            ID(ID), ID));
      ID();
    } while (!(ID() == ID&& ID() == ID));
    ID();
    ID();
  }

  public void ID() {
    if (!((ID() == ID) && (ID() == ID))) return;

    while (ID() != ID&& ID() != ID)                                                       
      ID();
  }
}











   
                                                               
      
                                                                                                                      
  
                                                               
               
  
   

public class ID{
                          
  final IDID= new ID();

  private final IDID;
  private final ID<ID, ID> ID= new ID<ID, ID>();
  private final ID<ID, ID> ID= new ID<ID, ID>();
  private IDID= null;

  public ID() throws ID{
    this(new ID(new ID()));
  }

  public ID(IDID) throws ID{
    ID= new ID(new ID());
  }

  public IDID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public ID<ID, ID> ID() {
    return ID;
  }

  public ID<ID, ID> ID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public IDID(IDID) {
    return ID= ID(ID);
  }

  public IDID(IDID) {
    return this.ID= ID;
  }

  public void ID() {
    ID= null;
  }

  public IDID(IDID) {
    IDID;

    if ((ID= ID.ID(ID)) == null) ID.ID(ID, ID= new ID(this, ID));
    return ID;
  }

  @IDpublic IDID() {
    IDID= new ID();
    for (IDID: ID.ID())
      ID.ID(ID+ ID.ID(ID).ID());

    if (ID.ID())
      ID.ID(ID);
    else
      for (IDID: ID.ID())
        ID.ID(ID+ ID.ID(ID).ID());

    return ID.ID();
  }

  public void ID(IDID, IDID, IDID, IDID) throws ID{
    new ID(this, ID, ID, ID, ID, ID, ID, ID, ID);
  }

  public void ID(IDID, IDID) throws ID, ID{
    IDID= ID(ID.ID(ID));
    ID(ID(ID, ID, false, ID), ID, ID, ID);
  }

  public IDID(IDID) throws ID, ID{
    IDID= new ID();
    ID.ID= this;

    ID.ID(ID);
    if (ID.ID> ID) ID.ID.ID(ID);
    if (!ID.ID) throw new ID(ID);
    if (ID.ID()) throw new ID(ID);
    ID.ID();
    if (ID.ID> ID) ID.ID(ID, ID.ID);
    IDID= ID.ID(ID);
    if (ID.ID> ID) ID.ID(ID);
    return ID;
  }

  public IDID(IDID, IDID, boolean ID, IDID) throws ID, ID{
    IDID= new ID(this, ID, ID, ID, ID);
    ID.ID(ID, ID);
    return ID;
  }

}


public enum ID{
  ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID, ID}


public enum ID{
  ID, ID, ID, ID, ID}


public enum ID{
  ID, ID, ID, ID}


public enum ID{
  ID, ID, ID, ID}


public enum ID{
  ID, ID, ID}















public class ID{
  private final IDID;
  private final IDID;

  private IDID= null;
  private final ID<ID> ID= new ID<ID>();
  private final ID<ID, ID> ID= new ID<ID, ID>();
  private final ID<ID> ID= new ID<ID>();
  private final ID<ID> ID= new ID<>();
  private final ID<ID> ID= new ID<>();
  private final ID<ID, ID<ID> > ID= new ID<>();
  private final ID<ID, ID<ID> > ID= new ID<>();
  private final ID<ID> ID= new ID<ID>();
  private final ID<ID> ID= new ID<ID>();
  public boolean ID= false;

  public IDID() {
    return ID;
  }

  public ID(IDID, IDID) {
    super();
    this.ID= ID;
    this.ID= ID;
  }

  public IDID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public void ID(IDID) {
    ID.ID(ID);
  }

  public IDID(IDID) {
    IDID= ID.ID(ID);

    if (ID== null) {
      ID.ID(ID, ID= new ID(this, ID));
      ID.ID(ID);
    }
    return ID;
  }

  public void ID(IDID, IDID) {
    ID(ID).ID(ID);
  }

  public void ID(IDID, IDID, IDID) {
    ID(ID).ID(ID, ID);
  }

  public void ID(IDID, IDID) {
    ID(ID).ID(ID);
  }

  public void ID(IDID) {
    ID.ID(ID);
  }

  public void ID(IDID) {
    ID.ID(ID);
  }

  public void ID(IDID, IDID) {
    if (ID().ID(ID) == null) ID().ID(ID, new ID<ID>());
    ID().ID(ID).ID(ID);
  }

  public void ID(IDID, IDID) {
    if (ID().ID(ID) == null) ID().ID(ID, new ID<ID>());
    ID().ID(ID).ID(ID);
  }

  public ID<ID, ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public void ID(IDID) {
    this.ID= ID(ID);
  }

  public void ID(IDID) {
    this.ID= ID;
  }

  @IDpublic int ID() {
    final int ID= ID;
    int ID= ID;
    ID= ID* ID+ ((ID== null) ? ID: ID.ID());
    return ID;
  }

  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (ID== null) return false;
    if (ID() != ID.ID()) return false;
    IDID= (ID) ID;
    if (ID== null) {
      if (ID.ID!= null) return false;
    } else if (!ID.ID(ID.ID)) return false;
    return true;
  }

  public void ID(IDID) {
    ID.ID(ID);
  }

  public void ID(IDID) {
    ID().ID(ID);
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public IDID() {
    return ID;
  }

  public void ID(IDID) {
    this.ID= ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  public ID<ID> ID() {
    return ID;
  }

  @IDpublic IDID() {
    return ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID+ ID;
  }

  public ID<ID, ID<ID> > ID() {
    return ID;
  }

  public ID<ID, ID<ID> > ID() {
    return ID;
  }
}


public class ID{
  @IDpublic IDID() {
    return ID+ ID.ID() + ID+ ID+ ID;
  }

  IDID;
  IDID;

  public ID(IDID, IDID) {
    this.ID= ID;
    this.ID= ID;
  }

  public ID(IDID) {
    this(null, ID);
  }

  @IDpublic int ID() {
    final int ID= ID;
    int ID= ID;
    ID= ID* ID+ ((ID== null) ? ID: ID.ID());
    ID= ID* ID+ ((ID== null) ? ID: ID.ID());
    return ID;
  }

  @IDpublic boolean ID(IDID) {
    if (this == ID) return true;
    if (ID== null) return false;
    if (ID() != ID.ID()) return false;
    IDID= (ID) ID;
    if (ID== null) {
      if (ID.ID!= null) return false;
    } else if (!ID.ID(ID.ID)) return false;
    if (ID== null) {
      if (ID.ID!= null) return false;
    } else if (!ID.ID(ID.ID)) return false;
    return true;
  }

  public IDID() {
    return ID;
  }

  public IDID() {
    return ID;
  }
}




public class ID{
                          
  int ID= ID;
  boolean ID= false;
  boolean ID= false;

  ID<ID> ID= new ID<>();
  ID<ID> ID= new ID<>();

                            
  boolean ID= true;
  boolean ID= true;
  boolean ID= true;
  boolean ID= true;
  boolean ID= true;
  boolean ID= true;
  boolean ID= true;
  boolean ID= true;
  boolean ID= true;
  boolean ID= true;

                             
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;

                           
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;

                         
  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= true;

  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;

  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;
  public boolean ID= false;

                             
  IDID= ID;
  IDID= ID;
  IDID= ID;
  IDID= null;

  IDID= ID.ID;
  IDID= ID.ID;
  IDID= ID.ID;

  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;
  boolean ID= false;

                                
  boolean ID= false;
  boolean ID= false;
  IDID= ID.ID;

                        
  int ID= ID;                                                                                                                                      

  static IDID= ID+ ID.ID() + ID+

      ID+ ID+ ID+ ID+ ID;

  @IDpublic IDID() {
    IDID= new ID();
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    ID.ID(ID);
    return ID.ID();
  }

}

