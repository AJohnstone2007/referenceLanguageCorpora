!start CompilationUnit

!paraterminal NullLiteral
!paraterminal CharacterLiteral
!paraterminal TypeIdentifier
!paraterminal TextBlock
!paraterminal FloatingPointLiteral
!paraterminal IntegerLiteral
!paraterminal Identifier
!paraterminal UnqualifiedMethodIdentifier
!paraterminal StringLiteral
!paraterminal BooleanLiteral

// Extracted lexer rules

//§3.1. Unicode 

//§3.2. Lexical Translations

//§3.3. Unicode Escapes 


UnicodeEscape ::=
  `\\ UnicodeMarker HexDigit HexDigit HexDigit HexDigit 

UnicodeMarker ::=
  `u (`u)* 

HexDigit ::=
  `0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 | `a | `b | `c | `d | `e | `f | `A | `B | `C | `D | `E | `F 

//§3.4. Line Terminators

//§3.5. Input Elements and Tokens 

//§3.6. White Space

//§3.7. Comments 


Comment ::=
  TraditionalComment 
| EndOfLineComment 

TraditionalComment ::=
  `/ `* CommentTail 

CommentTail ::=
  `* CommentTailStar 
| NotStar CommentTail 

CommentTailStar ::=
  `/ 
| `* CommentTailStar 
| NotStarNotSlash CommentTail 

EndOfLineComment ::=
  `/ `/ (InputCharacter)* 

//§3.8. Identifiers 


Identifier ::=
  IdentifierChars // but not a Keyword or BooleanLiteral or NullLiteral


IdentifierChars ::=
  JavaLetter (JavaLetterOrDigit)* 

TypeIdentifier ::=
  IdentifierChars // but not permits, record, sealed, var, or yield


UnqualifiedMethodIdentifier ::=
  IdentifierChars // but not yield


//§3.9. Keywords 

Keyword ::=
  ReservedKeyword 
| ContextualKeyword 

ReservedKeyword ::=
  `a`b`s`t`r`a`c`t | `c`o`n`t`i`n`u`e | `f`o`r | `n`e`w | `s`w`i`t`c`h 
| `a`s`s`e`r`t | `d`e`f`a`u`l`t | `i`f | `p`a`c`k`a`g`e | `s`y`n`c`h`r`o`n`i`z`e`d 
| `b`o`o`l`e`a`n | `d`o | `g`o`t`o | `p`r`i`v`a`t`e | `t`h`i`s 
| `b`r`e`a`k | `d`o`u`b`l`e | `i`m`p`l`e`m`e`n`t`s | `p`r`o`t`e`c`t`e`d | `t`h`r`o`w 
| `b`y`t`e | `e`l`s`e | `i`m`p`o`r`t | `p`u`b`l`i`c | `t`h`r`o`w`s 
| `c`a`s`e | `e`n`u`m | `i`n`s`t`a`n`c`e`o`f | `r`e`t`u`r`n | `t`r`a`n`s`i`e`n`t 
| `c`a`t`c`h | `e`x`t`e`n`d`s | `i`n`t | `s`h`o`r`t | `t`r`y 
| `c`h`a`r | `f`i`n`a`l | `i`n`t`e`r`f`a`c`e | `s`t`a`t`i`c | `v`o`i`d 
| `c`l`a`s`s | `f`i`n`a`l`l`y | `l`o`n`g | `s`t`r`i`c`t`f`p | `v`o`l`a`t`i`l`e 
| `c`o`n`s`t | `f`l`o`a`t | `n`a`t`i`v`e | `s`u`p`e`r | `w`h`i`l`e 
| `_ 

ContextualKeyword ::=
  `e`x`p`o`r`t`s | `o`p`e`n`s | `r`e`q`u`i`r`e`s | `u`s`e`s 
| `m`o`d`u`l`e | `p`e`r`m`i`t`s | `s`e`a`l`e`d | `v`a`r 
| `n`o`n`-`s`e`a`l`e`d | `p`r`o`v`i`d`e`s | `t`o | `w`i`t`h 
| `o`p`e`n | `r`e`c`o`r`d | `t`r`a`n`s`i`t`i`v`e | `y`i`e`l`d 

//§3.10.1. Integer Literals 


IntegerLiteral ::=
  DecimalIntegerLiteral 
| HexIntegerLiteral 
| OctalIntegerLiteral 
| BinaryIntegerLiteral 

DecimalIntegerLiteral ::=
  DecimalNumeral (IntegerTypeSuffix)? 

HexIntegerLiteral ::=
  HexNumeral (IntegerTypeSuffix)? 

OctalIntegerLiteral ::=
  OctalNumeral (IntegerTypeSuffix)? 

BinaryIntegerLiteral ::=
  BinaryNumeral (IntegerTypeSuffix)? 

IntegerTypeSuffix ::=
  `l | `L 


DecimalNumeral ::=
  `0 
| NonZeroDigit (Digits)? 
| NonZeroDigit Underscores Digits 

NonZeroDigit ::=
  `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 

Digits ::=
  Digit 
| Digit (DigitsAndUnderscores)? Digit 

Digit ::=
  `0 
| NonZeroDigit 

DigitsAndUnderscores ::=
  DigitOrUnderscore (DigitOrUnderscore)* 

DigitOrUnderscore ::=
  Digit 
| `_ 

Underscores ::=
  `_ (`_)* 


HexNumeral ::=
  `0 `x HexDigits 
| `0 `X HexDigits 

HexDigits ::=
  HexDigit 
| HexDigit (HexDigitsAndUnderscores)? HexDigit 

HexDigitsAndUnderscores ::=
  HexDigitOrUnderscore (HexDigitOrUnderscore)* 

HexDigitOrUnderscore ::=
  HexDigit 
| `_ 


OctalNumeral ::=
  `0 OctalDigits 
| `0 Underscores OctalDigits 

OctalDigits ::=
  OctalDigit 
| OctalDigit (OctalDigitsAndUnderscores)? OctalDigit 

OctalDigit ::=
  `0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 

OctalDigitsAndUnderscores ::=
  OctalDigitOrUnderscore (OctalDigitOrUnderscore)* 

OctalDigitOrUnderscore ::=
  OctalDigit 
| `_ 


BinaryNumeral ::=
  `0 `b BinaryDigits 
| `0 `B BinaryDigits 

BinaryDigits ::=
  BinaryDigit 
| BinaryDigit (BinaryDigitsAndUnderscores)? BinaryDigit 

BinaryDigit ::=
  `0 | `1 

BinaryDigitsAndUnderscores ::=
  BinaryDigitOrUnderscore (BinaryDigitOrUnderscore)* 

BinaryDigitOrUnderscore ::=
  BinaryDigit 
| `_ 

//§3.10.2. Floating-Point Literals 


FloatingPointLiteral ::=
  DecimalFloatingPointLiteral 
| HexadecimalFloatingPointLiteral 

DecimalFloatingPointLiteral ::=
  Digits `. (Digits)? (ExponentPart)? (FloatTypeSuffix)? 
| `. Digits (ExponentPart)? (FloatTypeSuffix)? 
| Digits ExponentPart (FloatTypeSuffix)? 
| Digits (ExponentPart)? FloatTypeSuffix 

ExponentPart ::=
  ExponentIndicator SignedInteger 

ExponentIndicator ::=
  `e | `E 

SignedInteger ::=
  (Sign)? Digits 

Sign ::=
  `+ | `- 

FloatTypeSuffix ::=
  `f | `F | `d | `D 


HexadecimalFloatingPointLiteral ::=
  HexSignificand BinaryExponent (FloatTypeSuffix)? 

HexSignificand ::=
  HexNumeral (`.)? 
| `0 `x (HexDigits)? `. HexDigits 
| `0 `X (HexDigits)? `. HexDigits 

BinaryExponent ::=
  BinaryExponentIndicator SignedInteger 

BinaryExponentIndicator ::=
  `p | `P 

//§3.10.3. Boolean Literals 


BooleanLiteral ::=
  `t`r`u`e | `f`a`l`s`e 

//§3.10.4. Character Literals 


CharacterLiteral ::=
  `' SingleCharacter `' 
| `' EscapeSequence `' 

//§3.10.5. String Literals 


StringLiteral ::=
  `" (StringCharacter)* `" 

//§3.10.6. Text Blocks 


TextBlock ::=
  `" `" `" (TextBlockWhiteSpace)* LineTerminator (TextBlockCharacter)* `" `" `" 

TextBlockWhiteSpace ::=
  WhiteSpace // but not LineTerminator


//§3.10.7. Escape Sequences 


EscapeSequence ::=
  `\\ `b // (backspace BS, Unicode \u0008)

| `\\ `s // (space SP, Unicode \u0020)

| `\\ `t // (horizontal tab HT, Unicode \u0009)

| `\\ `n // (linefeed LF, Unicode \u000a)

| `\\ `f // (form feed FF, Unicode \u000c)

| `\\ `r // (carriage return CR, Unicode \u000d)

| `\\ LineTerminator // (line continuation, no Unicode representation)

| `\\ `" // (double quote ", Unicode \u0022)

| `\\ `' // (single quote ', Unicode \u0027)

| `\\ `\\ // (backslash \, Unicode \u005c)

| OctalEscape // (octal value, Unicode \u0000 to \u00ff)


OctalEscape ::=
  `\\ OctalDigit 
| `\\ OctalDigit OctalDigit 
| `\\ ZeroToThree OctalDigit OctalDigit 

ZeroToThree ::=
  `0 | `1 | `2 | `3 

//§3.10.8. The Null Literal 


NullLiteral ::=
  `n`u`l`l 


//§3.11. Separators 


Separator ::=
  `( | `) | `{ | `} | `[ | `] | `; | `, | `. | `.`.`. | `@ | `:`: 

//§3.12. Operators


Operator ::=
  `= | `> | `< | `! | `~ | `? | `: | `-`> 
| `=`= | `>`= | `<`= | `!`= | `&`& | `|`| | `+`+ | `-`- 
| `+ | `- | `* | `/ | `& | `| | `^ | `% | `<`< | `>`> | `>`>`> 
| `+`= | `-`= | `*`= | `/`= | `&`= | `|`= | `^`= | `%`= | `<`<`= | `>`>`= | `>`>`>`= 


// Extracted parser rules

//Productions from §3 (Lexical Structure) 

Literal ::=
  IntegerLiteral 
| FloatingPointLiteral 
| BooleanLiteral 
| CharacterLiteral 
| StringLiteral 
| TextBlock 
| NullLiteral 

//Productions from §4 (Types, Values, and Variables)

Type ::=
  PrimitiveType 
| ReferenceType 

PrimitiveType ::=
  (Annotation)* NumericType 
| (Annotation)* 'boolean' 

NumericType ::=
  IntegralType 
| FloatingPointType 

IntegralType ::=
  'byte' | 'short' | 'int' | 'long' | 'char' 

FloatingPointType ::=
  'float' | 'double' 

ReferenceType ::=
  ClassOrInterfaceType 
| TypeVariable 
| ArrayType 

ClassOrInterfaceType ::=
  ClassType 
| InterfaceType 

ClassType ::=
  (Annotation)* TypeIdentifier (TypeArguments)? 
| PackageName '.' (Annotation)* TypeIdentifier (TypeArguments)? 
| ClassOrInterfaceType '.' (Annotation)* TypeIdentifier (TypeArguments)? 

InterfaceType ::=
  ClassType 

TypeVariable ::=
  (Annotation)* TypeIdentifier 

ArrayType ::=
  PrimitiveType Dims 
| ClassOrInterfaceType Dims 
| TypeVariable Dims 

Dims ::=
  (Annotation)* '[' ']' ((Annotation)* '[' ']')* 

TypeParameter ::=
  (TypeParameterModifier)* TypeIdentifier (TypeBound)? 

TypeParameterModifier ::=
  Annotation 

TypeBound ::=
  'extends' TypeVariable 
| 'extends' ClassOrInterfaceType (AdditionalBound)* 

AdditionalBound ::=
  '&' InterfaceType 

TypeArguments ::=
  '<' TypeArgumentList '>' 

TypeArgumentList ::=
  TypeArgument (',' TypeArgument)* 

TypeArgument ::=
  ReferenceType 
| Wildcard 

Wildcard ::=
  (Annotation)* '?' (WildcardBounds)? 

WildcardBounds ::=
  'extends' ReferenceType 
| 'super' ReferenceType 

//Productions from §6 (Names)

ModuleName ::=
  Identifier 
| ModuleName '.' Identifier 

PackageName ::=
  Identifier 
| PackageName '.' Identifier 

TypeName ::=
  TypeIdentifier 
| PackageOrTypeName '.' TypeIdentifier 

ExpressionName ::=
  Identifier 
| AmbiguousName '.' Identifier 

MethodName ::=
  UnqualifiedMethodIdentifier 

PackageOrTypeName ::=
  Identifier 
| PackageOrTypeName '.' Identifier 

AmbiguousName ::=
  Identifier 
| AmbiguousName '.' Identifier 

//Productions from §7 (Packages and Modules)

CompilationUnit ::=
  OrdinaryCompilationUnit 
| ModularCompilationUnit 

OrdinaryCompilationUnit ::=
  (PackageDeclaration)? (ImportDeclaration)* (TopLevelClassOrInterfaceDeclaration)* 

ModularCompilationUnit ::=
  (ImportDeclaration)* ModuleDeclaration 

PackageDeclaration ::=
  (PackageModifier)* 'package' Identifier ('.' Identifier)* ';' 

PackageModifier ::=
  Annotation 

ImportDeclaration ::=
  SingleTypeImportDeclaration 
| TypeImportOnDemandDeclaration 
| SingleStaticImportDeclaration 
| StaticImportOnDemandDeclaration 

SingleTypeImportDeclaration ::=
  'import' TypeName ';' 

TypeImportOnDemandDeclaration ::=
  'import' PackageOrTypeName '.' '*' ';' 

SingleStaticImportDeclaration ::=
  'import' 'static' TypeName '.' Identifier ';' 

StaticImportOnDemandDeclaration ::=
  'import' 'static' TypeName '.' '*' ';' 

TopLevelClassOrInterfaceDeclaration ::=
  ClassDeclaration 
| InterfaceDeclaration 
| ';' 

ModuleDeclaration ::=
  (Annotation)* ('open')? 'module' Identifier ('.' Identifier)* '{' (ModuleDirective)* '}' 

ModuleDirective ::=
  'requires' (RequiresModifier)* ModuleName ';' 
| 'exports' PackageName ('to' ModuleName (',' ModuleName)?)* ';' 
| 'opens' PackageName ('to' ModuleName (',' ModuleName)?)* ';' 
| 'uses' TypeName ';' 
| 'provides' TypeName 'with' TypeName (',' TypeName)* ';' 

RequiresModifier ::=
  'transitive' | 'static' 

//Productions from §8 (Classes)

ClassDeclaration ::=
  NormalClassDeclaration 
| EnumDeclaration 
| RecordDeclaration 

NormalClassDeclaration ::=
  (ClassModifier)* 'class' TypeIdentifier (TypeParameters)? (ClassExtends)? (ClassImplements)? (ClassPermits)? ClassBody 

ClassModifier ::=
  Annotation | 'public' | 'protected' | 'private' 
| 'abstract' | 'static' | 'final' | 'sealed' | 'non-sealed' | 'strictfp' 

TypeParameters ::=
  '<' TypeParameterList '>' 

TypeParameterList ::=
  TypeParameter (',' TypeParameter)* 

ClassExtends ::=
  'extends' ClassType 

ClassImplements ::=
  'implements' InterfaceTypeList 

InterfaceTypeList ::=
  InterfaceType (',' InterfaceType)* 

ClassPermits ::=
  'permits' TypeName (',' TypeName)* 

ClassBody ::=
  '{' (ClassBodyDeclaration)* '}' 

ClassBodyDeclaration ::=
  ClassMemberDeclaration 
| InstanceInitializer 
| StaticInitializer 
| ConstructorDeclaration 

ClassMemberDeclaration ::=
  FieldDeclaration 
| MethodDeclaration 
| ClassDeclaration 
| InterfaceDeclaration 
| ';' 

FieldDeclaration ::=
  (FieldModifier)* UnannType VariableDeclaratorList ';' 

FieldModifier ::=
  Annotation | 'public' | 'protected' | 'private' 
| 'static' | 'final' | 'transient' | 'volatile' 

VariableDeclaratorList ::=
  VariableDeclarator (',' VariableDeclarator)* 

VariableDeclarator ::=
  VariableDeclaratorId ('=' VariableInitializer)? 

VariableDeclaratorId ::=
  Identifier (Dims)? 

VariableInitializer ::=
  Expression 
| ArrayInitializer 

UnannType ::=
  UnannPrimitiveType 
| UnannReferenceType 

UnannPrimitiveType ::=
  NumericType 
| 'boolean' 

UnannReferenceType ::=
  UnannClassOrInterfaceType 
| UnannTypeVariable 
| UnannArrayType 

UnannClassOrInterfaceType ::=
  UnannClassType 
| UnannInterfaceType 

UnannClassType ::=
  TypeIdentifier (TypeArguments)? 
| PackageName '.' (Annotation)* TypeIdentifier (TypeArguments)? 
| UnannClassOrInterfaceType '.' (Annotation)* TypeIdentifier (TypeArguments)? 

UnannInterfaceType ::=
  UnannClassType 

UnannTypeVariable ::=
  TypeIdentifier 

UnannArrayType ::=
  UnannPrimitiveType Dims 
| UnannClassOrInterfaceType Dims 
| UnannTypeVariable Dims 

MethodDeclaration ::=
  (MethodModifier)* MethodHeader MethodBody 

MethodModifier ::=
  Annotation | 'public' | 'protected' | 'private' 
| 'abstract' | 'static' | 'final' | 'synchronized' | 'native' | 'strictfp' 

MethodHeader ::=
  Result MethodDeclarator (Throws)? 
| TypeParameters (Annotation)* Result MethodDeclarator (Throws)? 

Result ::=
  UnannType 
| 'void' 

MethodDeclarator ::=
  Identifier '(' (ReceiverParameter ',')? (FormalParameterList)? ')' (Dims)? 

ReceiverParameter ::=
  (Annotation)* UnannType (Identifier '.')? 'this' 

FormalParameterList ::=
  FormalParameter (',' FormalParameter)* 

FormalParameter ::=
  (VariableModifier)* UnannType VariableDeclaratorId 
| VariableArityParameter 

VariableArityParameter ::=
  (VariableModifier)* UnannType (Annotation)* '...' Identifier 

VariableModifier ::=
  Annotation 
| 'final' 

Throws ::=
  'throws' ExceptionTypeList 

ExceptionTypeList ::=
  ExceptionType (',' ExceptionType)* 

ExceptionType ::=
  ClassType 
| TypeVariable 

MethodBody ::=
  Block 
| ';' 

InstanceInitializer ::=
  Block 

StaticInitializer ::=
  'static' Block 

ConstructorDeclaration ::=
  (ConstructorModifier)* ConstructorDeclarator (Throws)? ConstructorBody 

ConstructorModifier ::=
  Annotation | 'public' | 'protected' | 'private' 

ConstructorDeclarator ::=
  (TypeParameters)? SimpleTypeName '(' (ReceiverParameter ',')? (FormalParameterList)? ')' 

SimpleTypeName ::=
  TypeIdentifier 

ConstructorBody ::=
  '{' (ExplicitConstructorInvocation)? (BlockStatements)? '}' 

ExplicitConstructorInvocation ::=
  (TypeArguments)? 'this' '(' (ArgumentList)? ')' ';' 
| (TypeArguments)? 'super' '(' (ArgumentList)? ')' ';' 
| ExpressionName '.' (TypeArguments)? 'super' '(' (ArgumentList)? ')' ';' 
| Primary '.' (TypeArguments)? 'super' '(' (ArgumentList)? ')' ';' 

EnumDeclaration ::=
  (ClassModifier)* 'enum' TypeIdentifier (ClassImplements)? EnumBody 

EnumBody ::=
  '{' (EnumConstantList)? (',')? (EnumBodyDeclarations)? '}' 

EnumConstantList ::=
  EnumConstant (',' EnumConstant)* 

EnumConstant ::=
  (EnumConstantModifier)* Identifier ('(' (ArgumentList)? ')')? (ClassBody)? 

EnumConstantModifier ::=
  Annotation 

EnumBodyDeclarations ::=
  ';' (ClassBodyDeclaration)* 

RecordDeclaration ::=
  (ClassModifier)* 'record' TypeIdentifier (TypeParameters)? RecordHeader (ClassImplements)? RecordBody 

RecordHeader ::=
  '(' (RecordComponentList)? ')' 

RecordComponentList ::=
  RecordComponent (',' RecordComponent)* 

RecordComponent ::=
  (RecordComponentModifier)* UnannType Identifier 
| VariableArityRecordComponent 

VariableArityRecordComponent ::=
  (RecordComponentModifier)* UnannType (Annotation)* '...' Identifier 

RecordComponentModifier ::=
  Annotation 

RecordBody ::=
  '{' (RecordBodyDeclaration)* '}' 

RecordBodyDeclaration ::=
  ClassBodyDeclaration 
| CompactConstructorDeclaration 

CompactConstructorDeclaration ::=
  (ConstructorModifier)* SimpleTypeName ConstructorBody 

//Productions from §9 (Interfaces)

InterfaceDeclaration ::=
  NormalInterfaceDeclaration 
| AnnotationInterfaceDeclaration 

NormalInterfaceDeclaration ::=
  (InterfaceModifier)* 'interface' TypeIdentifier (TypeParameters)? (InterfaceExtends)? (InterfacePermits)? InterfaceBody 

InterfaceModifier ::=
  Annotation | 'public' | 'protected' | 'private' 
| 'abstract' | 'static' | 'sealed' | 'non-sealed' | 'strictfp' 

InterfaceExtends ::=
  'extends' InterfaceTypeList 

InterfacePermits ::=
  'permits' TypeName (',' TypeName)* 

InterfaceBody ::=
  '{' (InterfaceMemberDeclaration)* '}' 

InterfaceMemberDeclaration ::=
  ConstantDeclaration 
| InterfaceMethodDeclaration 
| ClassDeclaration 
| InterfaceDeclaration 
| ';' 

ConstantDeclaration ::=
  (ConstantModifier)* UnannType VariableDeclaratorList ';' 

ConstantModifier ::=
  Annotation | 'public' 
| 'static' | 'final' 

InterfaceMethodDeclaration ::=
  (InterfaceMethodModifier)* MethodHeader MethodBody 

InterfaceMethodModifier ::=
  Annotation | 'public' | 'private' 
| 'abstract' | 'default' | 'static' | 'strictfp' 

AnnotationInterfaceDeclaration ::=
  (InterfaceModifier)* '@' 'interface' TypeIdentifier AnnotationInterfaceBody 

AnnotationInterfaceBody ::=
  '{' (AnnotationInterfaceMemberDeclaration)* '}' 

AnnotationInterfaceMemberDeclaration ::=
  AnnotationInterfaceElementDeclaration 
| ConstantDeclaration 
| ClassDeclaration 
| InterfaceDeclaration 
| ';' 

AnnotationInterfaceElementDeclaration ::=
  (AnnotationInterfaceElementModifier)* UnannType Identifier '(' ')' (Dims)? (DefaultValue)? ';' 

AnnotationInterfaceElementModifier ::=
  Annotation | 'public' 
| 'abstract' 

DefaultValue ::=
  'default' ElementValue 

Annotation ::=
  NormalAnnotation 
| MarkerAnnotation 
| SingleElementAnnotation 

NormalAnnotation ::=
  '@' TypeName '(' (ElementValuePairList)? ')' 

ElementValuePairList ::=
  ElementValuePair (',' ElementValuePair)* 

ElementValuePair ::=
  Identifier '=' ElementValue 

ElementValue ::=
  ConditionalExpression 
| ElementValueArrayInitializer 
| Annotation 

ElementValueArrayInitializer ::=
  '{' (ElementValueList)? (',')? '}' 

ElementValueList ::=
  ElementValue (',' ElementValue)* 

MarkerAnnotation ::=
  '@' TypeName 

SingleElementAnnotation ::=
  '@' TypeName '(' ElementValue ')' 

//Productions from §10 (Arrays)

ArrayInitializer ::=
  '{' (VariableInitializerList)? (',')? '}' 

VariableInitializerList ::=
  VariableInitializer (',' VariableInitializer)* 

//Productions from §14 (Blocks, Statements, and Patterns)

Block ::=
  '{' (BlockStatements)? '}' 

BlockStatements ::=
  BlockStatement (BlockStatement)* 

BlockStatement ::=
  LocalClassOrInterfaceDeclaration 
| LocalVariableDeclarationStatement 
| Statement 

LocalClassOrInterfaceDeclaration ::=
  ClassDeclaration 
| NormalInterfaceDeclaration 

LocalVariableDeclarationStatement ::=
  LocalVariableDeclaration ';' 

LocalVariableDeclaration ::=
  (VariableModifier)* LocalVariableType VariableDeclaratorList 

LocalVariableType ::=
  UnannType 
| 'var' 

Statement ::=
  StatementWithoutTrailingSubstatement 
| LabeledStatement 
| IfThenStatement 
| IfThenElseStatement 
| WhileStatement 
| ForStatement 

StatementNoShortIf ::=
  StatementWithoutTrailingSubstatement 
| LabeledStatementNoShortIf 
| IfThenElseStatementNoShortIf 
| WhileStatementNoShortIf 
| ForStatementNoShortIf 

StatementWithoutTrailingSubstatement ::=
  Block 
| EmptyStatement 
| ExpressionStatement 
| AssertStatement 
| SwitchStatement 
| DoStatement 
| BreakStatement 
| ContinueStatement 
| ReturnStatement 
| SynchronizedStatement 
| ThrowStatement 
| TryStatement 
| YieldStatement 

EmptyStatement ::=
  ';' 

LabeledStatement ::=
  Identifier ':' Statement 

LabeledStatementNoShortIf ::=
  Identifier ':' StatementNoShortIf 

ExpressionStatement ::=
  StatementExpression ';' 

StatementExpression ::=
  Assignment 
| PreIncrementExpression 
| PreDecrementExpression 
| PostIncrementExpression 
| PostDecrementExpression 
| MethodInvocation 
| ClassInstanceCreationExpression 

IfThenStatement ::=
  'if' '(' Expression ')' Statement 

IfThenElseStatement ::=
  'if' '(' Expression ')' StatementNoShortIf 'else' Statement 

IfThenElseStatementNoShortIf ::=
  'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf 

AssertStatement ::=
  'assert' Expression ';' 
| 'assert' Expression ':' Expression ';' 

SwitchStatement ::=
  'switch' '(' Expression ')' SwitchBlock 

SwitchBlock ::=
  '{' SwitchRule (SwitchRule)* '}' 
| '{' (SwitchBlockStatementGroup)* (SwitchLabel ':')* '}' 

SwitchRule ::=
  SwitchLabel '->' Expression ';' 
| SwitchLabel '->' Block 
| SwitchLabel '->' ThrowStatement 

SwitchBlockStatementGroup ::=
  SwitchLabel ':' (SwitchLabel ':')* BlockStatements 

SwitchLabel ::=
  'case' CaseConstant (',' CaseConstant)* 
| 'default' 

CaseConstant ::=
  ConditionalExpression 

WhileStatement ::=
  'while' '(' Expression ')' Statement 

WhileStatementNoShortIf ::=
  'while' '(' Expression ')' StatementNoShortIf 

DoStatement ::=
  'do' Statement 'while' '(' Expression ')' ';' 

ForStatement ::=
  BasicForStatement 
| EnhancedForStatement 

ForStatementNoShortIf ::=
  BasicForStatementNoShortIf 
| EnhancedForStatementNoShortIf 

BasicForStatement ::=
  'for' '(' (ForInit)? ';' (Expression)? ';' (ForUpdate)? ')' Statement 

BasicForStatementNoShortIf ::=
  'for' '(' (ForInit)? ';' (Expression)? ';' (ForUpdate)? ')' StatementNoShortIf 

ForInit ::=
  StatementExpressionList 
| LocalVariableDeclaration 

ForUpdate ::=
  StatementExpressionList 

StatementExpressionList ::=
  StatementExpression (',' StatementExpression)* 

EnhancedForStatement ::=
  'for' '(' LocalVariableDeclaration ':' Expression ')' Statement 

EnhancedForStatementNoShortIf ::=
  'for' '(' LocalVariableDeclaration ':' Expression ')' StatementNoShortIf 

BreakStatement ::=
  'break' (Identifier)? ';' 

YieldStatement ::=
  'yield' Expression ';' 

ContinueStatement ::=
  'continue' (Identifier)? ';' 

ReturnStatement ::=
  'return' (Expression)? ';' 

ThrowStatement ::=
  'throw' Expression ';' 

SynchronizedStatement ::=
  'synchronized' '(' Expression ')' Block 

TryStatement ::=
  'try' Block Catches 
| 'try' Block (Catches)? Finally 
| TryWithResourcesStatement 

Catches ::=
  CatchClause (CatchClause)* 

CatchClause ::=
  'catch' '(' CatchFormalParameter ')' Block 

CatchFormalParameter ::=
  (VariableModifier)* CatchType VariableDeclaratorId 

CatchType ::=
  UnannClassType ('|' ClassType)* 

Finally ::=
  'finally' Block 

TryWithResourcesStatement ::=
  'try' ResourceSpecification Block (Catches)? (Finally)? 

ResourceSpecification ::=
  '(' ResourceList (';')? ')' 

ResourceList ::=
  Resource (';' Resource)* 

Resource ::=
  LocalVariableDeclaration 
| 'VariableAccess' 

Pattern ::=
  TypePattern 

TypePattern ::=
  LocalVariableDeclaration 

//Productions from §15 (Expressions)

Primary ::=
  PrimaryNoNewArray 
| ArrayCreationExpression 

PrimaryNoNewArray ::=
  Literal 
| ClassLiteral 
| 'this' 
| TypeName '.' 'this' 
| '(' Expression ')' 
| ClassInstanceCreationExpression 
| FieldAccess 
| ArrayAccess 
| MethodInvocation 
| MethodReference 

ClassLiteral ::=
  TypeName ('[' ']')* '.' 'class' 
| NumericType ('[' ']')* '.' 'class' 
| 'boolean' ('[' ']')* '.' 'class' 
| 'void' '.' 'class' 

ClassInstanceCreationExpression ::=
  UnqualifiedClassInstanceCreationExpression 
| ExpressionName '.' UnqualifiedClassInstanceCreationExpression 
| Primary '.' UnqualifiedClassInstanceCreationExpression 

UnqualifiedClassInstanceCreationExpression ::=
  'new' (TypeArguments)? ClassOrInterfaceTypeToInstantiate '(' (ArgumentList)? ')' (ClassBody)? 

ClassOrInterfaceTypeToInstantiate ::=
  (Annotation)* Identifier ('.' (Annotation)* Identifier)* (TypeArgumentsOrDiamond)? 

TypeArgumentsOrDiamond ::=
  TypeArguments 
| '<>' 

ArrayCreationExpression ::=
  ArrayCreationExpressionWithoutInitializer 
| ArrayCreationExpressionWithInitializer 

ArrayCreationExpressionWithoutInitializer ::=
  'new' PrimitiveType DimExprs (Dims)? 
| 'new' ClassOrInterfaceType DimExprs (Dims)? 

ArrayCreationExpressionWithInitializer ::=
  'new' PrimitiveType Dims ArrayInitializer 
| 'new' ClassOrInterfaceType Dims ArrayInitializer 

DimExprs ::=
  DimExpr (DimExpr)* 

DimExpr ::=
  (Annotation)* '[' Expression ']' 

ArrayAccess ::=
  ExpressionName '[' Expression ']' 
| PrimaryNoNewArray '[' Expression ']' 
| ArrayCreationExpressionWithInitializer '[' Expression ']' 

FieldAccess ::=
  Primary '.' Identifier 
| 'super' '.' Identifier 
| TypeName '.' 'super' '.' Identifier 

MethodInvocation ::=
  MethodName '(' (ArgumentList)? ')' 
| TypeName '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' 
| ExpressionName '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' 
| Primary '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' 
| 'super' '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' 
| TypeName '.' 'super' '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' 

ArgumentList ::=
  Expression (',' Expression)* 

MethodReference ::=
  ExpressionName '::' (TypeArguments)? Identifier 
| Primary '::' (TypeArguments)? Identifier 
| ReferenceType '::' (TypeArguments)? Identifier 
| 'super' '::' (TypeArguments)? Identifier 
| TypeName '.' 'super' '::' (TypeArguments)? Identifier 
| ClassType '::' (TypeArguments)? 'new' 
| ArrayType '::' 'new' 

Expression ::=
  LambdaExpression 
| AssignmentExpression 

LambdaExpression ::=
  LambdaParameters '->' LambdaBody 

LambdaParameters ::=
  '(' (LambdaParameterList)? ')' 
| Identifier 

LambdaParameterList ::=
  LambdaParameter (',' LambdaParameter)* 
| Identifier (',' Identifier)* 

LambdaParameter ::=
  (VariableModifier)* LambdaParameterType VariableDeclaratorId 
| VariableArityParameter 

LambdaParameterType ::=
  UnannType 
| 'var' 

LambdaBody ::=
  Expression 
| Block 

AssignmentExpression ::=
  ConditionalExpression 
| Assignment 

Assignment ::=
  LeftHandSide AssignmentOperator Expression 

LeftHandSide ::=
  ExpressionName 
| FieldAccess 
| ArrayAccess 

AssignmentOperator ::=
  
'=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' 


ConditionalExpression ::=
  ConditionalOrExpression 
| ConditionalOrExpression '?' Expression ':' ConditionalExpression 
| ConditionalOrExpression '?' Expression ':' LambdaExpression 

ConditionalOrExpression ::=
  ConditionalAndExpression 
| ConditionalOrExpression '||' ConditionalAndExpression 

ConditionalAndExpression ::=
  InclusiveOrExpression 
| ConditionalAndExpression '&&' InclusiveOrExpression 

InclusiveOrExpression ::=
  ExclusiveOrExpression 
| InclusiveOrExpression '|' ExclusiveOrExpression 

ExclusiveOrExpression ::=
  AndExpression 
| ExclusiveOrExpression '^' AndExpression 

AndExpression ::=
  EqualityExpression 
| AndExpression '&' EqualityExpression 

EqualityExpression ::=
  RelationalExpression 
| EqualityExpression '==' RelationalExpression 
| EqualityExpression '!=' RelationalExpression 

RelationalExpression ::=
  ShiftExpression 
| RelationalExpression '<' ShiftExpression 
| RelationalExpression '>' ShiftExpression 
| RelationalExpression '<=' ShiftExpression 
| RelationalExpression '>=' ShiftExpression 
| InstanceofExpression 

InstanceofExpression ::=
  RelationalExpression 'instanceof' ReferenceType 
| RelationalExpression 'instanceof' Pattern 

ShiftExpression ::=
  AdditiveExpression 
| ShiftExpression '<<' AdditiveExpression 
| ShiftExpression '>>' AdditiveExpression 
| ShiftExpression '>>>' AdditiveExpression 

AdditiveExpression ::=
  MultiplicativeExpression 
| AdditiveExpression '+' MultiplicativeExpression 
| AdditiveExpression '-' MultiplicativeExpression 

MultiplicativeExpression ::=
  UnaryExpression 
| MultiplicativeExpression '*' UnaryExpression 
| MultiplicativeExpression '/' UnaryExpression 
| MultiplicativeExpression '%' UnaryExpression 

UnaryExpression ::=
  PreIncrementExpression 
| PreDecrementExpression 
| '+' UnaryExpression 
| '-' UnaryExpression 
| UnaryExpressionNotPlusMinus 

PreIncrementExpression ::=
  '++' UnaryExpression 

PreDecrementExpression ::=
  '--' UnaryExpression 

UnaryExpressionNotPlusMinus ::=
  PostfixExpression 
| '~' UnaryExpression 
| '!' UnaryExpression 
| CastExpression 
| SwitchExpression 

PostfixExpression ::=
  Primary 
| ExpressionName 
| PostIncrementExpression 
| PostDecrementExpression 

PostIncrementExpression ::=
  PostfixExpression '++' 

PostDecrementExpression ::=
  PostfixExpression '--' 

CastExpression ::=
  '(' PrimitiveType ')' UnaryExpression 
| '(' ReferenceType (AdditionalBound)* ')' UnaryExpressionNotPlusMinus 
| '(' ReferenceType (AdditionalBound)* ')' LambdaExpression 

SwitchExpression ::=
  'switch' '(' Expression ')' SwitchBlock 

ConstantExpression ::=
  Expression 

// End of extracted rules
