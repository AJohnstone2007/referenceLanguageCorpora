(***
typename enum

This is based on armCpp.gtb and the ANSI 1998 standard document.
It is a BNF version of Cpp.ebnf and Cpp.bnf
****)

typedef_name  ::= 
    identifier .

namespace_name ::=
    original_namespace_name |
    namespace_alias .

original_namespace_name ::=
    identifier .

namespace_alias ::=
    identifier .

class_name ::= 
    identifier | template_id .

enum_name ::= 
    identifier .

template_name  ::=  
    identifier .

literal ::= 
    integer_constant | 
    character_constant | 
    floating_constant | 
    string_literal |
    boolean_literal .
(* Lexical producions *)
identifier ::= 'ID' .
string_literal ::= 'STRING' | string_literal 'STRING' .
integer_constant ::= 'INTEGER' .
character_constant ::= 'STRING' .
floating_constant ::= 'REAL' .
boolean_literal ::= 'true' | 'false' .


translation_unit ::= declaration_seq | # .

(* r.17.2 Expressions *)

primary_expression ::= 
    literal | 
    'this' | 
    '(' expression ')' | 
    id_expression .

id_expression ::=
    unqualified_id |
    qualified_id .

unqualified_id ::= 
    identifier | 
    operator_function_id | 
    conversion_function_id | 
    '~' class_name | 
    template_id .


qualified_id ::=
    '::' identifier | 
    '::' operator_function_id | 
    '::' template_id | 
    '::' nested_name_specifier 'template' unqualified_id |
    nested_name_specifier 'template' unqualified_id |
    '::' nested_name_specifier unqualified_id |
    nested_name_specifier unqualified_id .


nested_name_specifier ::=
    class_or_namespace_name '::' |
    class_or_namespace_name '::' nested_name_specifier |
    class_or_namespace_name '::' 'template' nested_name_specifier .

class_or_namespace_name ::=
    class_name |
    namespace_name .

postfix_expression ::= 
    primary_expression | 
    postfix_expression     '[' expression ']' | 
    postfix_expression     '(' expression_list ')' | 
    postfix_expression     '(' ')' | 
    simple_type_specifier  '(' expression_list ')' | 
    simple_type_specifier  '(' ')' | 
    'typename' '::' nested_name_specifier identifier '(' expression_list ')' | 
    'typename' nested_name_specifier identifier '(' ')' |
    'typename' '::' nested_name_specifier identifier '(' expression_list ')' | 
    'typename' nested_name_specifier identifier '(' ')' | 
    postfix_expression     '.' 'template' id_expression | 
    postfix_expression     '.'  id_expression | 
    postfix_expression     '->' 'template' id_expression | 
    postfix_expression     '->' id_expression | 
    postfix_expression     '.' pseudo_destructor_name |
    postfix_expression     '->' pseudo_destructor_name |
    postfix_expression     '++' | 
    postfix_expression     '--' |
    'dynamic_cast' '<' type_id '>' '(' expression ')' |
    'static_cast' '<' type_id '>' '(' expression ')' |
    'reinterpret_cast' '<' type_id '>' '(' expression ')' |
    'const_cast' '<' type_id '>' '(' expression ')' |
    'typeid' '(' expression ')' |
    'typeid' '(' type_id ')' .

expression_list ::= 
    assignment_expression | 
    expression_list ',' assignment_expression .

pseudo_destructor_name ::=
    '::' nested_name_specifier type_name '::' '~' type_name |
    nested_name_specifier type_name '::' '~' type_name |
    '::' type_name '::' '~' type_name |
    type_name '::' '~' type_name |
    '::' nested_name_specifier 'template' template_id '::' '~' type_name |
    nested_name_specifier 'template' template_id '::' '~' type_name |
    '::' nested_name_specifier '~' type_name |
    nested_name_specifier '~' type_name |
    '::' '~' type_name |
    '~' type_name .

unary_expression ::= 
    postfix_expression | 
    '++' cast_expression | 
    '--' cast_expression | 
    unary_operator cast_expression | 
    'sizeof'  unary_expression | 
    'sizeof' '(' type_id ')' | 
    new_expression | 
    delete_expression .

unary_operator ::= 
    '*' | 
    '&' | 
    '+' | 
    '-' | 
    '!' | 
    '~' .

new_expression ::= 
    '::' 'new' new_placement new_type_id new_initializer | 
    'new' new_placement new_type_id new_initializer | 
    '::' 'new' new_type_id new_initializer | 
    'new' new_type_id new_initializer | 
    '::' 'new' new_placement new_type_id | 
    'new' new_placement new_type_id | 
    '::' 'new' new_type_id | 
    'new' new_type_id | 
    '::' 'new' new_placement '(' type_id ')' new_initializer | 
    'new' new_placement '(' type_id ')' new_initializer | 
    '::' 'new' '(' type_id ')' new_initializer | 
    'new' '(' type_id ')' new_initializer | 
    '::' 'new' new_placement '(' type_id ')' | 
    'new' new_placement '(' type_id ')' | 
    '::' 'new' '(' type_id ')' | 
    'new' '(' type_id ')' .

new_placement ::= 
    '(' expression_list ')' .


new_type_id ::= 
    type_specifier_seq new_declarator | 
    type_specifier_seq .

new_declarator ::= 
    ptr_operator new_declarator |
    ptr_operator |
    direct_new_declarator .

direct_new_declarator ::=
    '[' expression ']' |
    direct_new_declarator '[' constant_expression ']' .
 

new_initializer ::= 
    '(' expression_list ')' | 
    '(' ')' .

delete_expression ::= 
    '::' 'delete' cast_expression | 
    'delete' cast_expression | 
    '::' 'delete' '[' ']' cast_expression | 
    'delete' '[' ']' cast_expression .

cast_expression ::= 
    unary_expression | 
    '(' type_id ')' cast_expression .

pm_expression ::= 
    cast_expression | 
    pm_expression '.*' cast_expression | 
    pm_expression '->*' cast_expression .


multiplicative_expression ::= 
    pm_expression | 
    multiplicative_expression '*' pm_expression | 
    multiplicative_expression '/' pm_expression | 
    multiplicative_expression '%' pm_expression .


additive_expression ::= 
    multiplicative_expression | 
    additive_expression '+' multiplicative_expression | 
    additive_expression '-' multiplicative_expression .


shift_expression ::= 
    additive_expression | 
    shift_expression '<<' additive_expression | 
    shift_expression '>>' additive_expression .

relational_expression ::= 
    shift_expression | 
    relational_expression '<'  shift_expression | 
    relational_expression '>'  shift_expression | 
    relational_expression '<=' shift_expression | 
    relational_expression '>=' shift_expression .

equality_expression ::= 
    relational_expression |
    equality_expression '==' relational_expression |
    equality_expression '!=' relational_expression .

AND_expression ::= 
    equality_expression |
    AND_expression '&' equality_expression .

exclusive_OR_expression ::= 
    AND_expression |
    exclusive_OR_expression '^' AND_expression .

inclusive_OR_expression ::=
    exclusive_OR_expression |
    inclusive_OR_expression '|' exclusive_OR_expression .

logical_AND_expression ::= 
    inclusive_OR_expression |
    logical_AND_expression '&&' inclusive_OR_expression .

logical_OR_expression ::= 
    logical_AND_expression |
    logical_OR_expression '||' logical_AND_expression .

conditional_expression ::= 
    logical_OR_expression | 
    logical_OR_expression '?' expression ':' conditional_expression .

assignment_expression ::= 
    conditional_expression |
    logical_OR_expression  assignment_operator assignment_expression |
    throw_expression .

assignment_operator ::= 
    '=' |
    '*=' |
    '/=' |
    '%=' |
    '+=' |
    '-=' |
    '<<=' |
    '>>=' |
    '&=' |
    '^=' |
    '|=' .

expression ::= 
    assignment_expression |
    expression ',' assignment_expression .

constant_expression ::= 
    conditional_expression .


(*** # r.17.6 Statements ***)

statement ::= 
    labeled_statement | 
    expression_statement | 
    compound_statement | 
    selection_statement | 
    iteration_statement | 
    jump_statement | 
    declaration_statement | 
    try_block .

labeled_statement ::= 
    identifier ':' statement | 
    'case' constant_expression ':' statement | 
    'default' ':' statement .

expression_statement ::= 
    expression ';' | 
    ';' .

compound_statement ::= 
    '{' statement_seq '}' | 
    '{' '}' .

statement_seq ::= 
    statement | 
    statement_seq statement .

selection_statement ::= 
    'if' '(' condition ')' statement  | 
    'if' '(' condition ')' statement 'else' statement | 
    'switch' '(' condition ')' statement .

condition ::=
    expression |
    type_specifier_seq declarator '=' assignment_expression .

iteration_statement ::= 
    'while' '(' condition ')' statement | 
    'do' statement 'while' '(' condition ')' ';' | 
    'for' '(' for_init_statement condition ';' expression ')' statement | 
    'for' '(' for_init_statement ';' expression ')' statement | 
    'for' '(' for_init_statement condition ';' ')' statement | 
    'for' '(' for_init_statement ';' ')' statement .

for_init_statement ::= 
    expression_statement | 
    simple_declaration .

jump_statement ::= 
    'break' ';' | 
    'continue' ';' | 
    'return' expression ';' | 
    'return' ';' | 
    'goto' identifier ';' .

declaration_statement ::= 
    block_declaration .


(*** # r.17.3 Declarations ****)

declaration_seq ::= 
    declaration | 
    declaration_seq declaration .

declaration ::= 
    block_declaration | 
    function_definition | 
    template_declaration | 
    explicit_instantiation | 
    explicit_specialization | 
    linkage_specification |
    namespace_definition .


block_declaration ::=
    simple_declaration |
    asm_definition |  
    namespace_alias_definition |
    using_declaration |
    using_directive .


simple_declaration ::=    
    decl_specifier_seq init_declarator_list ';' | 
    decl_specifier_seq ';' | 
    init_declarator_list ';' | 
    ';' .

decl_specifier ::= 
    storage_class_specifier | 
    type_specifier | 
    function_specifier | 
    'friend' | 
    'typedef' .

decl_specifier_seq ::= 
    decl_specifier_seq decl_specifier | 
    decl_specifier .

storage_class_specifier ::= 
    'auto' | 
    'register' | 
    'static' | 
    'extern' |
    'mutable' .

function_specifier ::= 
    'inline' | 
    'virtual' |
    'explicit' .

type_specifier ::= 
    simple_type_specifier | 
    class_specifier | 
    enum_specifier | 
    elaborated_type_specifier |
    cv_qualifier .

simple_type_specifier ::= 
    '::' nested_name_specifier type_name |
    nested_name_specifier type_name |
    '::' type_name |
    type_name |
    '::' nested_name_specifier 'template' template_id |
    nested_name_specifier 'template' template_id |
    'char' | 
    'wchar_t' |
    'bool' |
    'short' | 
    'int' | 
    'long' | 
    'signed' | 
    'unsigned' | 
    'float' | 
    'double' | 
    'void' .

type_name ::=
    class_name |
    enum_name |
    typedef_name .

elaborated_type_specifier ::= 
    class_key '::' nested_name_specifier identifier | 
    class_key nested_name_specifier identifier | 
    class_key '::' identifier | 
    class_key identifier | 
    'enum' '::' nested_name_specifier identifier | 
    'enum' nested_name_specifier identifier | 
    'enum' '::' identifier | 
    'enum' identifier | 
    'typename' '::'  identifier | 
    'typename' identifier | 
    'typename' '::' nested_name_specifier 'template' template_id | 
    'typename' nested_name_specifier 'template' template_id |
    'typename' '::' nested_name_specifier template_id | 
    'typename' nested_name_specifier template_id .

enum_specifier ::= 
    'enum' identifier '{' enumerator_list '}' | 
    'enum' '{' enumerator_list '}' | 
    'enum' identifier '{' '}' | 
    'enum' '{' '}' .

enumerator_list ::= 
    enumerator_definition | 
    enumerator_list ',' enumerator_definition .

enumerator_definition ::= 
    enumerator | 
    enumerator '=' constant_expression .

enumerator ::= identifier .

namespace_definition ::= 
    named_namespace_definition |
    unnamed_namespace_definition .

named_namespace_definition ::=
    original_namespace_definition |
    extension_namespace_definition .

original_namespace_definition ::=
    'namespace' identifier '{' namespace_body '}' .

extension_namespace_definition ::=
    'namespace' original_namespace_name '{' namespace_body '}' .

unnamed_namespace_definition ::=
    'namespace' '{' namespace_body '}' .

namespace_body ::= declaration_seq | # .


namespace_alias_definition ::= 
    'namespace' identifier '=' qualified_namespace_specifier ';' .

qualified_namespace_specifier ::=
    '::' nested_name_specifier namespace_name |
    '::' namespace_name |
    nested_name_specifier namespace_name |
    namespace_name .

using_declaration ::=
    'using' 'typename' '::' nested_name_specifier unqualified_id ';' |
    'using' 'typename' nested_name_specifier unqualified_id ';' |
    'using' '::' nested_name_specifier unqualified_id ';' |
    'using' nested_name_specifier unqualified_id ';' |
    'using' '::' unqualified_id ';' .

using_directive ::=
    'using' 'namespace' '::' nested_name_specifier namespace_name ';' |
    'using' 'namespace' '::' namespace_name ';' |
    'using' 'namespace' nested_name_specifier namespace_name ';' |
    'using' 'namespace' namespace_name ';' .

asm_definition ::= 
    'asm' '(' string_literal ')' ';' .


linkage_specification ::= 
    'extern' string_literal '{' declaration_seq '}' | 
    'extern' string_literal '{' '}' | 
    'extern' string_literal declaration .


(* # r.17.4 Declarators *)

init_declarator_list ::= 
    init_declarator | 
    init_declarator_list ',' init_declarator .

init_declarator ::= 
    declarator initializer | 
    declarator .

declarator ::= 
    direct_declarator | 
    ptr_operator declarator .

direct_declarator ::= 
    declarator_id |
    direct_declarator '(' parameter_declaration_clause ')' 
                 cv_qualifier_seq exception_specification | 
    direct_declarator '(' parameter_declaration_clause ')' 
                 cv_qualifier_seq | 
    direct_declarator '(' parameter_declaration_clause ')' 
                 exception_specification | 
    direct_declarator '(' parameter_declaration_clause ')' | 
    direct_declarator '[' constant_expression ']' | 
    direct_declarator '[' ']' | 
    '(' declarator ')' .

ptr_operator ::= 
    '*' cv_qualifier_seq | 
    '*' | 
    '&' | 
    '::' nested_name_specifier '*' cv_qualifier_seq |
    '::' nested_name_specifier '*' |
    nested_name_specifier '*' cv_qualifier_seq |
    nested_name_specifier '*' .


cv_qualifier_seq ::= 
    cv_qualifier cv_qualifier_seq | 
    cv_qualifier .

cv_qualifier ::= 
    'const' | 
    'volatile' . 

(** THIS SEEMS TO CONTAIN AN UNRESOLVALBE AMBIGUITY **)
declarator_id ::= 
    id_expression | 
    '::' nested_name_specifier class_name |
    '::' class_name |
    nested_name_specifier class_name |
    class_name .

type_id ::= 
    type_specifier_seq abstract_declarator | 
    type_specifier_seq .

type_specifier_seq ::= 
    type_specifier type_specifier_seq | 
    type_specifier .

abstract_declarator ::= 
    ptr_operator abstract_declarator | 
    ptr_operator | 
    direct_abstract_declarator .


direct_abstract_declarator ::=
    direct_abstract_declarator '(' parameter_declaration_clause ')' 
                        cv_qualifier_seq | 
    direct_abstract_declarator  '(' parameter_declaration_clause ')' 
                        cv_qualifier_seq exception_specification |  
    direct_abstract_declarator  '(' parameter_declaration_clause ')' 
                        exception_specification |   
    direct_abstract_declarator '(' parameter_declaration_clause ')' | 
    '(' parameter_declaration_clause ')' cv_qualifier_seq | 
    '(' parameter_declaration_clause ')' 
                cv_qualifier_seq exception_specification |  
    '(' parameter_declaration_clause ')' exception_specification |   
    '(' parameter_declaration_clause ')' | 
    direct_abstract_declarator '[' constant_expression ']' | 
    '[' constant_expression ']' | 
    direct_abstract_declarator '[' ']' | 
    '[' ']' | 
    '(' abstract_declarator ')' .

parameter_declaration_clause ::= 
    parameter_declaration_list '...' | 
    '...' | 
    parameter_declaration_list |     (******** EAS INSERTION **********)
    # |     (******** EAS INSERTION **********)
    parameter_declaration_list ',' '...' .

parameter_declaration_list ::= 
    parameter_declaration | 
    parameter_declaration_list ',' parameter_declaration .

parameter_declaration ::= 
    decl_specifier_seq declarator | 
    decl_specifier_seq declarator '=' assignment_expression | 
    decl_specifier_seq abstract_declarator | 
    decl_specifier_seq | 
    decl_specifier_seq abstract_declarator '=' assignment_expression | 
    decl_specifier_seq '=' assignment_expression .

function_definition ::= 
    decl_specifier_seq declarator ctor_initializer function_body | 
    declarator ctor_initializer function_body | 
    decl_specifier_seq declarator function_body | 
    declarator function_body |
    decl_specifier_seq declarator function_try_block | 
    declarator function_try_block .


function_body ::= 
    compound_statement .

initializer ::= 
    '=' initializer_clause |
    '(' expression_list ')' .

initializer_clause ::= 
    assignment_expression | 
    '{' '}' | 
    '{' initializer_list '}' | 
    '{' initializer_list ',' '}' .

initializer_list ::=
    initializer_clause |
    initializer_list ',' initializer_clause .

(***** # r.17.5 Class Declarations *****)

class_specifier  ::= 
    class_head '{' member_specification '}' | 
    class_head '{' '}' .

class_head ::= 
    class_key identifier base_clause | 
    class_key base_clause | 
    class_key identifier | 
    class_key | 
    class_key nested_name_specifier identifier base_clause | 
    class_key nested_name_specifier identifier | 
    class_key nested_name_specifier template_id base_clause |
    class_key  template_id base_clause |
    class_key nested_name_specifier template_id |
    class_key template_id .

class_key ::= 
    'class' | 
    'struct' | 
    'union' .

member_specification ::= 
    member_declaration member_specification | 
    member_declaration | 
    access_specifier ':' member_specification | 
    access_specifier ':' .

member_declaration ::= 
    decl_specifier_seq member_declarator_list ';' | 
    member_declarator_list ';' | 
    decl_specifier_seq ';' | 
    ';' | 
    function_definition ';' | 
    function_definition | 
    '::' nested_name_specifier 'template' unqualified_id ';' |
    '::' nested_name_specifier unqualified_id ';' |
    nested_name_specifier 'template' unqualified_id ';' |
    nested_name_specifier unqualified_id ';' |
    using_declaration |
    template_declaration .

member_declarator_list ::= 
    member_declarator | 
    member_declarator_list ',' member_declarator .

member_declarator ::= 
    declarator pure_specifier | 
    declarator | 
    declarator constant_initializer | 
    (**** declarator |  AMBIGUITY HERE !!!! **)
    identifier ':' constant_expression | 
    ':' constant_expression .

pure_specifier ::= (** needs semantic check for 0 **)
    '=' integer_constant . 

constant_initializer ::= constant_expression .

(* # A.9 Derived classes *)

base_clause ::= 
    ':' base_specifier_list .

base_specifier_list ::= 
    base_specifier | 
    base_specifier_list ',' base_specifier .

base_specifier ::= 
    '::' nested_name_specifier class_name | 
    nested_name_specifier class_name | 
    '::' class_name | 
    class_name | 
    'virtual' access_specifier '::' nested_name_specifier class_name | 
    'virtual' access_specifier '::' class_name | 
    'virtual' access_specifier nested_name_specifier class_name | 
    'virtual' access_specifier class_name | 
    'virtual' '::' nested_name_specifier class_name | 
    'virtual' '::' class_name | 
    'virtual' nested_name_specifier class_name | 
    'virtual' class_name | 
    access_specifier 'virtual' '::' nested_name_specifier class_name | 
    access_specifier 'virtual' '::' class_name | 
    access_specifier 'virtual' nested_name_specifier class_name | 
    access_specifier 'virtual' class_name | 
    access_specifier '::' nested_name_specifier class_name |
    access_specifier '::' class_name |
    access_specifier nested_name_specifier class_name |
    access_specifier class_name .

access_specifier ::= 
    'private' | 
    'protected' | 
    'public' .

(* 2 Special member functions *)

conversion_function_id ::= 
    'operator' conversion_type_id .

conversion_type_id ::= 
    type_specifier_seq conversion_declarator | 
    type_specifier_seq .

conversion_declarator ::=
    ptr_operator conversion_declarator |
    ptr_operator .

ctor_initializer ::= 
    ':' mem_initializer_list .

mem_initializer_list ::= 
    mem_initializer | 
    mem_initializer ',' mem_initializer_list .

mem_initializer ::= 
    mem_initializer_id '(' expression_list ')' | 
    mem_initializer_id '(' ')' .

mem_initializer_id ::= 
    '::' nested_name_specifier class_name |
    '::' class_name |
    nested_name_specifier class_name |
    class_name |
    identifier .


operator_function_id ::= 
    'operator' operator_name .

operator_name ::= 
    'new' | 
    'delete' | 
    '+' | 
    '-' | 
    '*' | 
    '/' | 
    '%' | 
    '^' | 
    '&' | 
    '|' | 
    '~' | 
    '!' | 
    '=' | 
    '<' | 
    '>' | 
    '+=' | 
    '-=' | 
    '*=' | 
    '/=' | 
    '%=' | 
    '^=' | 
    '&=' | 
    '~=' | 
    '<<' | 
    '>>' | 
    '>>=' | 
    '<<=' | 
    '==' | 
    '!=' | 
    '<=' | 
    '>=' | 
    '&&' | 
    '||' | 
    '++' | 
    '--' | 
    ',' | 
    '->*' | 
    '->' | 
    '(' ')' | 
    '[' ']' .


(********** # r.17.8 Templates  ************)

template_declaration ::= 
    'export' 'template' '<' template_argument_list '>' declaration |
    'template' '<' template_argument_list '>' declaration .

template_parameter_list ::= 
    template_parameter | 
    template_parameter_list ',' template_argument .

template_parameter ::= 
    type_parameter | 
    parameter_declaration .

type_parameter ::= 
    'class' identifier |
    'class' |
    'class' identifier '=' type_id |
    'class' '=' type_id |
    'typename' identifier |
    'typename' |
    'typename' identifier '=' type_id |
    'typename' '=' type_id |
    'template' '<' template_parameter_list '>' 'class' identifier |
    'template' '<' template_parameter_list '>' 'class' |
    'template' '<' template_parameter_list '>' 'class' identifier 
                          '=' id_expression |
    'template' '<' template_parameter_list '>' 'class' '=' id_expression .

template_id ::= 
    template_name '<' template_argument_list '>' |
    template_name '<' '>' .

template_argument_list ::= 
    template_argument | 
    template_argument_list ',' template_argument .

template_argument ::= 
    assignment_expression | 
    type_id |
    id_expression .

explicit_instantiation ::=
    'template' declaration .

explicit_specialization ::=
    'template' '<' '>' declaration .


(*******  # r.17.9 Exception Handling  ****)

try_block ::= 
    'try' compound_statement handler_seq .

function_try_block ::=
    'try' ctor_initializer function_body handler_seq |
    'try' function_body handler_seq .

handler_seq ::= 
    handler handler_seq | 
    handler .

handler ::= 
    'catch' '(' exception_declaration ')' compound_statement .

exception_declaration ::= 
    type_specifier_seq declarator | 
    type_specifier_seq abstract_declarator | 
    type_specifier_seq | 
    '...' .

throw_expression ::= 
    'throw' assignment_expression | 
    'throw' .

exception_specification ::= 
    'throw' '(' type_id_list ')' | 
    'throw' '(' ')' .

type_id_list ::= 
    type_id | 
    type_id_list ',' type_id .


(
this_grammar := grammar[translation_unit tilde_enabled] 
