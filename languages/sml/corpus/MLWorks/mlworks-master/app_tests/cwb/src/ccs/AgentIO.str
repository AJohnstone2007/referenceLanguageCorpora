(*
 *
 * $Log: AgentIO.str,v $
 * Revision 1.2  1998/06/02 15:40:04  jont
 * Automatic checkin:
 * changed attribute _comment to ' * '
 *
 *
 *)
RCS "$Id: AgentIO.str,v 1.2 1998/06/02 15:40:04 jont Exp $";
functor AgentIO ( structure Ag : AGENT ) : AGENTIO =
struct
   structure Ag = Ag
   structure A  = Ag.A
   structure V  = Ag.V

   open Ag

   fun prio Nil               = 99
     | prio DNil              = 99
     | prio Bottom            = 99
     | prio (Var _)           = 99
     | prio (Prefix _)        = 50
     | prio (Delta _)         = 50
     | prio (Time _)          = 50
     | prio (WSum [])         = prio Nil
     | prio (WSum [A])        = prio A
     | prio (WSum _)          = 20
     | prio (SSum [])         = prio DNil
     | prio (SSum [A])        = prio A
     | prio (SSum _)          = 30
     | prio (Parallel [])     = prio Nil
     | prio (Parallel [A])    = prio A
     | prio (Parallel _)      = 40
     | prio (SMerge [])       = prio Nil
     | prio (SMerge [(A,_)])  = prio A
     | prio (SMerge _)        = 45
     | prio (Restrict _)      = 60
     | prio (Relabel _)       = 60

   fun makestr mjfmt =
       let val mkstract = if mjfmt then A.mkstr2 else A.mkstr

           val mkstrrel =
               let fun mkstrelt (a,b) = mkstract a^"/"^mkstract b
                in Lib.mkstr mkstrelt ","
               end

           fun mkstr_al (Actlist l) = "{"^(Lib.mkstr A.mkstr "," l) ^ "}"
             | mkstr_al (Actlistvar v) = V.mkstr v

           fun mkstrparam (Actparam a) = mkstract a
	     | mkstrparam (Actlistparam A) = mkstr_al A
             | mkstrparam (Agentparam A) = mstr A
             | mkstrparam (Timeparam t) = makestring t

           and mstr Nil = "0"
             | mstr DNil = "$0"
             | mstr Bottom = "@"
             | mstr (Var(v,[])) = V.mkstr v
             | mstr (Var(v,l)) =
               (V.mkstr v)^"("^(Lib.mkstr mkstrparam "," l)^")"
             | mstr (a as Prefix([ac],a')) =
               mkstract ac ^ (if mjfmt then ":" else ".")
                           ^ (bracket a a')
             | mstr (a as Prefix(l,a')) =
               "(" ^ (Lib.mkstr mkstract "," l) ^ ")"
               ^ (if mjfmt then ":" else ".")
               ^ (bracket a a')
             | mstr (a as Delta(ac,a')) = "$"^(mstr (Prefix([ac],a')))
             | mstr (a as Time(i,a')) =
               makestring i ^ (if mjfmt then ":" else ".")
                              ^ (bracket a a')
             | mstr (WSum []) = mstr Nil
             | mstr (WSum [A]) = mstr A
             | mstr (P as WSum [A,B]) =
               (bracket2 P A) ^ " + " ^ (bracket2 P B)
             | mstr (P as WSum (A::t)) =
               (bracket2 P A) ^ " + " ^ (mstr (WSum t))
             | mstr (SSum []) = mstr DNil
             | mstr (SSum [A]) = mstr A
             | mstr (P as SSum [A,B]) =
               (bracket2 P A) ^ " ++ " ^ (bracket2 P B)
             | mstr (P as SSum (A::t)) =
               (bracket2 P A) ^ " ++ " ^ (mstr (SSum t))
             | mstr (Parallel []) = mstr Nil
             | mstr (Parallel [A]) = mstr A
             | mstr (P as Parallel [A,B]) =
               (bracket2 P A) ^ (if mjfmt then " // " else " | ")
                                    ^ (bracket2 P B)
             | mstr (P as Parallel (A::t)) =
               (bracket2 P A) ^ (if mjfmt then " // " else " | ")
                                    ^ (mstr (Parallel t))
             | mstr (SMerge []) = mstr Nil
             | mstr (SMerge [(A,S)]) = (mstr A) ^ " : " ^ (mkstr_al S)
             | mstr (P as SMerge [A,B]) =
               (bracket3 P A) ^ " || " ^ (bracket3 P B)
             | mstr (P as SMerge (A::t)) =
               (bracket3 P A) ^ " || " ^ (mstr (SMerge t))
             | mstr (P as Restrict(A,Actlist resA)) =
               (bracket P A) ^
               (if mjfmt then
                   let val post = Lib.mkstr A.mkstr2 "\\" resA
                    in if post="" then "" else "\\"^post
                   end
                else if null resA then "\\{}"
                else if null(tl resA) then "\\"^(A.mkstr(hd resA))
                else "\\{"^(Lib.mkstr A.mkstr "," resA)^"}")
             | mstr (P as Restrict(A,Actlistvar v)) =
               (bracket P A)^"\\"^(V.mkstr v)
             | mstr (P as Relabel(A,Relabellist relA)) =
               (bracket P A)^"["^(mkstrrel relA)^"]"
             | mstr (P as Relabel(A,Relabelvar v)) =
               (bracket P A)^"["^(V.mkstr v)^"]"

           and bracket a a' = if prio a <= prio a' then mstr a'
                              else "(" ^ (mstr a') ^")"

           and bracket2 a a' = if prio a < prio a' then mstr a'
                               else "(" ^ (mstr a') ^ ")"

           and bracket3 a (a',s) = 
               if prio a < prio a' then (mstr a')^ " : " ^(mkstr_al s)
               else "(" ^ (mstr a') ^ ") : " ^(mkstr_al s)
        in mstr
       end

   val mkstr = makestr false
   val mkstr2 = makestr true

   exception Parse of string
   exception ActErr of string

   datatype token = Lbrack  | Rbrack  | Lsq   | Rsq
                  | Lset    | Rset    | WPlus | SPlus
                  | Para    | Merge   | Rest  | Repl
                  | Equals  | Point   | Comma | Colon | Semicolon
                  | Bottomt | Deltat  | Nilt  | Eos
                  | Vart of string    | Actt of string | Timet of int
  | Actlistt of string

   fun symbol Lbrack    = "("
     | symbol Rbrack    = ")"
     | symbol Lsq       = "["
     | symbol Rsq       = "]"
     | symbol Lset      = "{"
     | symbol Rset      = "}"
     | symbol WPlus     = "+"
     | symbol SPlus     = "++"
     | symbol Para      = "|"
     | symbol Merge     = "||"
     | symbol Rest      = "\\"
     | symbol Repl      = "/"
     | symbol Equals    = "="
     | symbol Point     = "."
     | symbol Comma     = ","
     | symbol Colon     = ":"
     | symbol Semicolon = ";"
     | symbol Bottomt   = "@"
     | symbol Deltat    = "$"
     | symbol Nilt      = "0"
     | symbol Eos       = "end of input"
     | symbol (Vart v)  = v
     | symbol (Actt a)  = a
     | symbol (Timet t) = makestring t
     | symbol (Actlistt a)  = a

   fun mkagent str =
       let val breaks = ["(" , ")" , "[" , "]" , "{" , "}" ,
                         "+" , "|" , "\\", "/" , "=" , "." , "," ,
			 ":" , ";" ,
                         " " , "\t", "\n", "@" , "$" ]

           fun isbreak e = Lib.member (op =) (e,breaks)

           fun sc "" []            = (Eos,[])
             | sc "" (" "::t)      = sc "" t
             | sc "" ("\t"::t)     = sc "" t
             | sc "" ("\n"::t)     = sc "" t
             | sc "" ("("::t)      = (Lbrack,t)
             | sc "" (")"::t)      = (Rbrack,t)
             | sc "" ("["::t)      = (Lsq,t)
             | sc "" ("]"::t)      = (Rsq,t)
             | sc "" ("{"::t)      = (Lset,t)
             | sc "" ("}"::t)      = (Rset,t)
             | sc "" ("+"::"+"::t) = (SPlus,t)
             | sc "" ("+"::t)      = (WPlus,t)
             | sc "" ("|"::"|"::t) = (Merge,t)
             | sc "" ("|"::t)      = (Para,t)
             | sc "" ("\\"::t)     = (Rest,t)
             | sc "" ("/"::t)      = (Repl,t)
             | sc "" ("="::t)      = (Equals,t)
             | sc "" ("."::t)      = (Point,t)
             | sc "" (","::t)      = (Comma,t)
             | sc "" (":"::t)      = (Colon,t)
             | sc "" (";"::t)      = (Semicolon,t)
             | sc "" ("@"::t)      = (Bottomt,t)
             | sc "" ("$"::t)      = (Deltat,t)
             | sc s l              = if null l orelse isbreak(hd l) then
                                        (if s="0" then Nilt
                                         else if ord s >= ord "A" andalso
                                                 ord s <= ord "Z" then Vart s
                                         else Timet (Lib.atoi s)
                                              handle Lib.AtoI => Actt s,l)
                                     else sc (s^(hd l)) (tl l)

           val scan = sc ""

(*****************************************************************************)
(*                                                                           *)
(*  Recursive descent parser:                                                *)
(*                                                                           *)
(*  AGENT        ::=  WEAKSUM                                                *)
(*                 |  WEAKSUM + AGENT                                        *)
(*                                                                           *)
(*  WEAKSUM      ::=  STRONGSUM                                              *)
(*                 |  STRONGSUM ++ WEAKSUM                                   *)
(*                                                                           *)
(*  STRONGSUM    ::=  PARALLEL                                               *)
(*                 |  PARALLEL | STRONGSUM                                   *)
(*                                                                           *)
(*  PARALLEL     ::=  PREFIX                                                 *)
(*                 |  PREFIX : SORT || MERGE                                 *)
(*                                                                           *)
(*  SORT         ::=  <var>                                                  *)
(*                 |  { }                                                    *)
(*                 |  { ACTLIST }                                            *)
(*                                                                           *)
(*  MERGE        ::=  PREFIX : SORT                                          *)
(*                 |  PREFIX : SORT || MERGE                                 *)
(*                                                                           *)
(*  PREFIX       ::=  <act> . PREFIX                     (act =/= eps)       *)
(*                 |  ( <act> ) . PREFIX                 (act =/= eps)       *)
(*                 |  ( <act> , ACTLIST ) . PREFIX       (act =/= eps)       *)
(*                 |  <time> . PREFIX                                        *)
(*                 |  <Delta> <act> . PREFIX             (act =/= eps)       *)
(*                 |  BASIC POST                                             *)
(*                                                                           *)
(*  BASIC        ::=  <Nil>                                                  *)
(*                 |  <Delta> <Nil>                                          *)
(*                 |  <Bottom>                                               *)
(*                 |  <var>                                                  *)
(*                 |  <var> ( PARAMLIST )                                    *)
(*                 |  ( AGENT )                                              *)
(*                                                                           *)
(*  PARAMLIST    ::=  PARAM                                                  *)
(*                 |  PARAM , PARAMLIST                                      *)
(*                                                                           *)
(*  PARAM        ::=  <act>                              (act =/= eps)       *)
(*                 |  <time>					       *)
(*                 |  <var>                                                 *)
(*                 |  AGENT					       *)
(*                 |  { ACTLIST}                                             *)
(*                                                                           *)
(*  POST         ::=  e                                                      *)
(*                 |  [] POST                                                *)
(*                 |  [ <var> ] POST                                         *)
(*                 |  [ RELABELLIST ] POST                                   *)
(*                 |  \ <act> POST                       (act =/= eps,tau)   *)
(*                 |  \ <var> POST                                           *)
(*                 |  \ { } POST                                             *)
(*                 |  \ { ACTLIST } POST                                     *)
(*                                                                           *)
(*  ACTLIST      ::=  <act>                              (act =/= eps,tau)   *)
(*                 |  <act> , ACTLIST                    (act =/= eps,tau)   *)
(*                                                                           *)
(*  RELABELLIST  ::=  RELABEL                                                *)
(*                 |  RELABEL , RELABELLIST                                  *)
(*                                                                           *)
(*  RELABEL      ::= <act> / <act'>      (act =/= eps;  act' =/= eps,tau)    *)
(*                                                                           *)
(*****************************************************************************)

           fun check (tok,(t,res)) =
               if tok=t then scan res
               else raise Parse("Expected "^symbol tok^" but found "^symbol t)

           fun AGENT s =
               let val (A,s as (tok,res)) = WEAKSUM s
                in if tok=WPlus then
                      let val (B,s) = AGENT(scan res)
                       in case B of
                          (WSum l)  => (WSum (A::l),s)
                        |    _      => (WSum [A,B],s)
                      end
                   else (A,s)
               end

           and WEAKSUM s =
               let val (A,s as (tok,res)) = STRONGSUM s
                in if tok=SPlus then
                      let val (B,s) = WEAKSUM(scan res)
                       in case B of
                          (SSum l)  => (SSum (A::l),s)
                        |    _      => (SSum [A,B],s)
                      end
                   else (A,s)
               end

           and STRONGSUM s =
               let val (A,s as (tok,res)) = PARALLEL s
                in if tok=Para then
                      let val (B,s) = STRONGSUM(scan res)
                       in case B of
                          (Parallel l)  => (Parallel (A::l),s)
                        |        _      => (Parallel [A,B],s)
                      end
                   else (A,s)
               end

           and PARALLEL s =
               let val (A,s as (tok,res)) = PREFIX s
                in if tok=Colon then
                      let val (sort,s as (tok,res)) = SORT(scan res)
                       in if tok=Merge then
                             let val (l,s) = MERGE(scan res)
                              in (SMerge((A,sort)::l),s)
                             end
                          else raise Parse("Expected "^symbol Merge^
                                           " but found "^symbol tok)
                      end
                   else (A,s)
               end

           and SORT (Vart v,res) = (Actlistvar(V.mkvar v),scan res)

             | SORT (Lset,res) =
               let val s as (tok,res) = scan res
                in if tok=Rset then (Actlist [],scan res)
                   else let val (l,s) = ACTLIST s handle ActErr a =>
                                raise Parse("Cannot have "^a^" in the sort")
                         in (Actlist l,check(Rset,s))
                        end
               end

             | SORT (tok,_) =
               raise Parse("Expected { or a variable after : but found "
                           ^symbol tok)

           and MERGE s =
               let val (A,s) = PREFIX s
                   val (sort,s as (tok,res)) = SORT(check(Colon,s))
                in if tok=Merge then
                      let val (l,s) = MERGE(scan res)
                       in ((A,sort)::l,s)
                      end
                   else ([(A,sort)],s)
               end

           and PREFIX (Actt ac,res) =
               let val a = A.mkact ac
                in if A.eq(a,A.eps) then
                      raise Parse("Cannot have "^ac^" as an action prefix")
                   else let val (A,s) = PREFIX(check(Point,scan res))
                         in (Prefix([a],A),s)
                        end
               end

             | PREFIX (s as (Lbrack,res)) =
               let val (s' as (tok,res)) = scan res
                in case tok of Actt ac =>
                     let val (s'' as (tok,res)) = scan res
                      in if tok = Rbrack then
                            PREFIX(Actt ac,res)
                         else if tok = Comma then
                            let val (l,s) = ACTLIST s' handle ActErr a =>
                                            raise Parse("Cannot have "^a
                                                        ^" as an action prefix")
                                val (A,s) = PREFIX(check(Point,check(Rbrack,s)))
                             in (Prefix(l,A),s)
                            end

                         else POST(BASIC s)
                     end
                   | _ => POST(BASIC s)
               end

             | PREFIX (Timet t,res) =
               let val (A,s) = PREFIX(check(Point,scan res))
                in (Time(t,A),s)
               end

             | PREFIX (s as (Deltat,res)) =
               let val s' as (tok,res) = scan res
                in case tok of Actt ac =>
                     let val a = A.mkact ac
                      in if A.eq(a,A.eps) then
                            raise Parse("Cannot have "^ac
                                        ^" as an action prefix")
                         else let val (A,s) = PREFIX(check(Point,scan res))
                               in (Delta(a,A),s)
                              end
                     end

                   | _ => POST(BASIC s)
               end

             | PREFIX s = POST(BASIC s)

           and BASIC (Nilt,res) = (Nil,scan res)

             | BASIC (Deltat,res) = (DNil,check(Nilt,scan res))

             | BASIC (Bottomt,res) = (Bottom,scan res)

             | BASIC (Vart v,res) =
               let val s as (tok,res) = scan res
                in case tok of
                        Lbrack => let val (pl,s) = PARAMLIST(scan res)
                                   in (Var(V.mkvar v,pl),check(Rbrack,s))
                                  end
                      | _ => (Var(V.mkvar v,[]),s)
               end

             | BASIC (Lbrack,res) =
               let val(A,s) = AGENT(scan res)
                in (A,check(Rbrack,s))
               end

             | BASIC (tok,_) =
               raise Parse("Unexpected "^symbol tok)

           and PARAMLIST s =
               let val (p,s as (tok,res)) = PARAM s
                in if tok=Comma then
                      let val (pl,s) = PARAMLIST(scan res)
                       in (p::pl,s)
                      end
                   else ([p],s)
               end

           and PARAM (s as (Actt ac,res)) =
               let val a = A.mkact ac
                   val s' as (tok,res) = scan res
                in if A.eq(a,A.eps) then
                      raise Parse(ac^" cannot be a parameter")
                   else if tok=Point then let val (A,s) = AGENT s
                                           in (Agentparam A,s)
                                          end
                   else (Actparam a,s')
               end

             | PARAM (s as (Timet t,res)) =
               let val s' as (tok,res) = scan res
                in if tok=Point then
                      let val (A,s) = AGENT s
                       in (Agentparam A,s)
                      end
                   else (Timeparam t,s')
               end

(* it's an action set, and we're being given it explicitly as a list *)
	     | PARAM (s as (Lset,res)) =
	       let val s' as (tok, res) = scan res
	       in if tok=Rset then (Actlistparam (Actlist []), scan res)
		  else let val (l,s) = ACTLIST s'
		       in (Actlistparam (Actlist l), check(Rset, s))
		       end
	       end

(* This variable param may actually turn out to be an action set, but  *)
(* we'll handle that in lookupapply. Hack hack! *)
             | PARAM s = let val (A,s) = AGENT s
                          in (Agentparam A,s)
                         end

(* this is an action list with no restrictions on what can be in       *)
(* it. These two should be coalesced. *)
          and PARAMACTLIST (Actt ac,res) =
               let val a = A.mkact ac
                in let val s as (tok,res) = scan res
                        in if tok=Comma then
                              let val (l,s) = PARAMACTLIST(scan res)
                               in (a::l,s)
                              end
                           else ([a],s)
                       end
               end

             | PARAMACTLIST (tok,_) =
               raise Parse("Unexpected "^symbol tok)

           and POST (A,(Lsq,res)) =
               (case scan res of
                    (Rsq,res) => POST(Relabel(A,Relabellist []),scan res)
                  | (Vart v,res) =>
                    POST(Relabel(A,Relabelvar(V.mkvar v)),check(Rsq,scan res))
                  | s =>
                    let val (l,s) = RELABELLIST s
                     in POST(Relabel(A,Relabellist l),check(Rsq,s))
                    end )

             | POST (A,(Rest,res)) =
               (case scan res of
                    (Actt ac,res)
                       => let val a = A.mkact ac
                           in if A.eq(a,A.eps) orelse A.eq(a,A.tau) then
                                 raise Parse(ac^" cannot be restricted")
                              else POST(Restrict(A,Actlist [a]),scan res)
                          end
                  | (Vart v,res) =>
                    POST(Restrict(A,Actlistvar(V.mkvar v)),scan res)
                  | (Lset,res)
                       => (case scan res of
                            (Rset,res) => POST(Restrict(A,Actlist []),scan res)
                          | s => let val (l,s) = ACTLIST s handle ActErr a =>
                                     raise Parse(a^" cannot be in \
                                                 \the restriction set")
                                   in POST(Restrict(A,Actlist l),check(Rset,s))
                                  end )
                  | (tok,_) => raise Parse("Unexpected "^symbol tok) )

             | POST x = x

           and ACTLIST (Actt ac,res) =
               let val a = A.mkact ac
                in if A.eq(a,A.eps) orelse A.eq(a,A.tau) then
                      raise ActErr ac
                  else let val s as (tok,res) = scan res
                        in if tok=Comma then
                              let val (l,s) = ACTLIST(scan res)
                               in (a::l,s)
                              end
                           else ([a],s)
                       end
               end

             | ACTLIST (tok,_) =
               raise Parse("Unexpected "^symbol tok)

           and RELABELLIST s =
               let val (relab,s as (tok,res)) = RELABEL s
                in if tok=Comma then
                      let val (l,s) = RELABELLIST(scan res)
                       in (relab::l,s)
                      end
                   else ([relab],s)
               end

           and RELABEL (Actt ac,res) =
               let val (tok,res) = check(Repl,scan res)
                in case tok of
                      Actt ac' =>
                        let val a = A.mkact ac
                            val b = A.mkact ac'
                         in if A.eq(b,A.tau) then
                               raise Parse(ac'^" cannot be relabelled")
                            else if A.eq(b,A.eps) then
                               raise Parse(ac'^" cannot be relabelled")
                            else if A.eq(a,A.eps) then
                               raise Parse(ac^" cannot be a relabelling")
                            else ((a,b),scan res)
                        end
                    | _      => raise Parse("Unexpected "^symbol tok)
               end

             | RELABEL (tok,_) =
               raise Parse("Unexpected "^symbol tok)

           val (A,(tok,_)) = AGENT(scan(explode str))

        in if tok=Eos then A
           else raise Parse("Extra input")
       end
end

