(*
 *
 * $Log: Agent.str,v $
 * Revision 1.2  1998/06/02 15:46:11  jont
 * Automatic checkin:
 * changed attribute _comment to ' * '
 *
 *
 *)
RCS "$Id: Agent.str,v 1.2 1998/06/02 15:46:11 jont Exp $";
functor Agent ( structure A   : ACT;
                structure V   : VAR ) : AGENT =
struct
   structure A = A
   structure V = V
   structure P = A.P

   datatype relabelling = Relabellist of (A.act * P.part) list
                        | Relabelvar  of V.var

   datatype permission = Permlist of A.P.part list
                       | Actlistvar of V.var

   datatype param = Actparam   of A.act
   | Actlistparam of permission		(* experimental *)
   | Timeparam  of int
   | Agentparam of agent

   and      agent = Nil
                  | Bottom
                  | Var      of V.var * param list
                  | Prefix   of A.act * agent
                  | Delta    of agent
                  | Time     of int * agent
                  | Sum      of agent list
                  | Parallel of agent list
                  | Permit   of agent * permission
                  | Relabel  of agent * relabelling

(* hashing functions basically nicked from the Mobility		       *)
(* Workbench. Caution -- I really don't know anything about how to     *)
(* write hash functions, and need to find out! Even this is a win, though.*)

fun hashval (Nil) = 0
  | hashval (Bottom) = 2
  | hashval (Var(v,pl)) 
    = sxmash (V.hashval v, fold Bits.andb (map phashval pl) 31)	
  | hashval (Prefix(action,P))
    = sxmash(A.hashval action, hashval P)
  | hashval (Delta P) = 1 + hashval P
  | hashval (Time(t,P)) = sxmash(5,hashval P)
  | hashval (Sum(PP)) = fold sxmash (map hashval PP) 7
  | hashval (Parallel(PP)) = fold sxmash (map hashval PP) 13
  | hashval (Permit (agent, perm)) = sxmash (hashval agent, permhashval perm)
  | hashval (Relabel(P,relabelling)) = sxmash (hashval P,rhashval
					       relabelling)
and phashval (Actparam(action)) = A.hashval action
  | phashval (Actlistparam(Actlistvar(v))) = V.hashval v
  | phashval (Actlistparam(Permlist(al))) = 7 (* well, I dunno *)
  | phashval (Timeparam(n)) = n
  | phashval (Agentparam(agent)) = hashval agent
and rhashval (Relabellist(l)) = fold sxmash (map
  (fn (a,b) => Bits.xorb (A.hashval a, P.hashval b)) l) 29
  | rhashval (Relabelvar(v)) = V.hashval v
and permhashval(Permlist(l)) = fold sxmash (map P.hashval l) 29
  | permhashval (Actlistvar(v)) = V.hashval v

   (* from cmulisp *)
and sxmash(place,wth) =
  let val total = 26
    val rotate = 7
  in
    Bits.xorb(Bits.xorb(Bits.rshift(wth,total-rotate),place),
	      Bits.lshift(Bits.andb(wth,
				    Bits.lshift(1,total-rotate)-1),
			  rotate))
  end

   fun permlisteq (Permlist l1,Permlist l2) = Lib.eq P.eq (l1,l2)
     | permlisteq (Actlistvar x,Actlistvar y) = V.eq(x,y)
     | permlisteq _ = false

   fun relabeleq (Relabellist l1,Relabellist l2) =
       Lib.eq (fn ((a,x),(b,y)) => A.eq(a,b) andalso P.eq(x,y)) (l1,l2)
     | relabeleq (Relabelvar x,Relabelvar y) = V.eq(x,y)
     | relabeleq _ = false

   fun parameq (Actparam a,Actparam b) = A.eq(a,b)
     | parameq (Timeparam s,Timeparam t) = s=t
     | parameq (Agentparam x,Agentparam y) = eq(x,y)
     | parameq _ = false

   and eq (Nil,Nil) = true
     | eq (Bottom,Bottom) = true
     | eq (Delta(A),Delta(B)) = eq(A,B)
     | eq (Var(x,xl),Var(y,yl)) =
       V.eq(x,y) andalso Lib.eq parameq (xl,yl)
     | eq (Prefix(a,A),Prefix(b,B)) = A.eq (a,b) andalso eq(A,B)
     | eq (Time(s,A),Time(t,B)) = s=t andalso eq(A,B)
     | eq (Sum L1,Sum L2) = Lib.eq eq (L1,L2)
     | eq (Parallel L1,Parallel L2) = Lib.eq eq (L1,L2)
     | eq (Permit(A,resA),Permit(B,resB)) = 
       eq(A,B) andalso permlisteq(resA,resB)
     | eq (Relabel(A,relA),Relabel(B,relB)) =
       eq(A,B) andalso relabeleq(relA,relB)
     | eq _ = false

   fun place Nil           =  0
     | place Bottom        =  1
     | place (Var _)       =  2
     | place (Prefix _)    =  3
     | place (Delta _)     =  4
     | place (Time _)      =  5
     | place (Sum _)       =  6
     | place (Parallel _)  =  7
     | place (Permit _)    =  8
     | place (Relabel _)   =  9

   fun permlistle (Permlist l1,Permlist l2) = Lib.le P.le (l1,l2)
     | permlistle (Actlistvar x,Actlistvar y) = V.le(x,y)
     | permlistle (Permlist _,Actlistvar _) = true
     | permlistle (Actlistvar _,Permlist _) = false

   fun relabelle (Relabellist l1,Relabellist l2) =
       Lib.le (fn ((a,x),(b,y)) =>
               A.le(a,b) andalso (not(A.le(b,a)) orelse P.le(x,y))) (l1,l2)
     | relabelle (Relabelvar x,Relabelvar y) = V.le(x,y)
     | relabelle (Relabellist _,Relabelvar _) = true
     | relabelle (Relabelvar _,Relabellist _) = false

   fun paramle (Actparam a,Actparam b) = A.le(a,b)
     | paramle (Timeparam s,Timeparam t) = s <= t
     | paramle (Agentparam x,Agentparam y) = le(x,y)
     | paramle (Actparam _,_) = true
     | paramle (_,Agentparam _) = true
     | paramle _ = false

   and le (Nil,Nil) = true
     | le (Bottom,Bottom) = true
     | le (Var(x,xl),Var(y,yl)) =
       V.le(x,y) andalso (not(V.le(y,x)) orelse Lib.le paramle (xl,yl))
     | le (Prefix(a,A),Prefix(b,B)) =
       A.le(a,b) andalso (not(A.le (b,a)) orelse le(A,B))
     | le (Delta(A),Delta(B)) = le(A,B)
     | le (Time(a,A),Time(b,B)) = a<b orelse (a=b andalso le(A,B))
     | le (Sum L1,Sum L2) = Lib.le le (L1,L2)
     | le (Parallel L1,Parallel L2) = Lib.le le (L1,L2)
     | le (Permit(A,resA),Permit(B,resB)) =
       le(A,B) andalso (not(le(B,A)) orelse permlistle(resA,resB))
     | le (Relabel(A,relA),Relabel(B,relB)) =
       le(A,B) andalso (not(le(B,A)) orelse relabelle(relA,relB))
     | le (A,B) = place A < place B
end

