(*
 *
 * $Log: Contract.str,v $
 * Revision 1.2  1998/06/02 15:17:05  jont
 * Automatic checkin:
 * changed attribute _comment to ' * '
 *
 *
 *)
RCS "$Id: Contract.str,v 1.2 1998/06/02 15:17:05 jont Exp $";
functor Contract ( structure PG : POLYGRAPH ) : CONTRACT =
struct
   structure PG = PG

   datatype dblstate =
            SS of {id        : int,
                   strongsuc : (PG.act *(dblstate ref list ref)) list ref,
                   weaksuc   : (PG.act *(dblstate ref list ref)) list ref}

   exception Panic

   fun eqstates(ref(SS{id=id1,...}),ref(SS{id=id2,...})) = id1=id2
   fun rempair((P,Q),[]) = []
     | rempair((P,Q),(P',Q')::t) =
       if eqstates(P,P') andalso eqstates(Q,Q') then t
       else (P',Q')::(rempair((P,Q),t))
   fun StoSS (ref(PG.S{id,...})) =
       ref (SS{id=id,strongsuc=ref nil,weaksuc=ref nil})
   fun findSS(i,[]) = raise Panic
     | findSS(i,(s as ref(SS{id,...}))::t) = if i=id then s else findSS(i,t)
   fun getss (ref(SS{strongsuc,...})) = !strongsuc
   fun getws (ref(SS{weaksuc,...})) = !weaksuc

   fun contrel (ast,bst,agraph,bgraph) =
       let val R = ref (Lib.multiply (fn x => x) agraph bgraph)

           fun are_related(P,Q) =
               exists (fn (P',Q') => eqstates(P,P') andalso
                                         eqstates(Q,Q')) (!R)

           fun getsuc a [] = []
             | getsuc a ((ac,slr)::t) = if PG.act_eq(a,ac) then (!slr)
                                        else getsuc a t

           fun checkL [] Qsuc = true
             | checkL ((a,Pasucref)::t) Qsuc =
               let fun checkLrel PaList QaList =
                       forall(fn P' => exists(fn Q' =>
                                                      are_related(P',Q')
                                                     ) QaList
                                 ) PaList
                in if PG.act_eq(a,PG.tau) then
                      checkLrel (!Pasucref) (getsuc PG.eps Qsuc)
                   else checkLrel (!Pasucref) (getsuc a Qsuc)
               end

           fun checkR P Psuc [] = true
             | checkR P Psuc ((a,Qasucref)::t) =
               let fun checkRrel PaList QaList =
                       forall(fn Q' => exists(fn P' =>
                                                      are_related(P',Q')
                                                     ) PaList
                                 ) QaList
                   fun checkRtaurel P PtList QtList =
                       forall(fn Q' => are_related(P,Q') orelse
                                           exists(fn P' =>
                                                      are_related(P',Q')
                                                     ) PtList
                                 ) QtList
                in if PG.act_eq(a,PG.tau) then
                      checkRtaurel P (getsuc a Psuc) (!Qasucref)
                   else checkRrel (getsuc a Psuc) (!Qasucref)
               end

           fun check(P,Q) =
               let val Pstrongsuc = getss P
                   val Qstrongsuc = getss Q
                   val Qweaksuc = getws Q
                in (checkL Pstrongsuc Qweaksuc) andalso
                   (checkR P Pstrongsuc Qstrongsuc)
               end

           fun checkrel [] = true
             | checkrel ((P,Q)::t) =
               if check(P,Q) then checkrel t
               else if eqstates(P,ast) andalso eqstates(Q,bst) then false
               else ((R := rempair((P,Q),!R)); checkrel(!R))
        in checkrel (!R)
       end

(******************)
(*  contraction   *)
(******************)

   fun contraction((a,agraph),(b,bgraph)) =
       let val newagraph = map StoSS agraph
           val newbgraph = map StoSS bgraph
           val newa = let val PG.S{id,...} = !a
                       in findSS(id,newagraph)
                      end
           val newb = let val PG.S{id,...} = !b
                       in findSS(id,newbgraph)
                      end

           fun translate g suclist =
               let val tr = map (fn (ref (PG.S{id,...})) => findSS(id,g))
                in map (fn (a,ref L) => (a,ref (tr L))) suclist
               end

           fun transtrong g [] [] = ()
	     | transtrong g foo [] = raise Panic (* can't happen! *)
	     | transtrong g [] foo = raise Panic
             | transtrong g ((ref(PG.S{suc,...}))::t1)
                            ((ref(SS{strongsuc,...}))::t2) =
               (strongsuc := translate g (!suc); transtrong g t1 t2)

           fun transweak g [] [] = ()
	     | transweak g foo [] = raise Panic
	     | transweak g [] foo = raise Panic
             | transweak g ((ref(PG.S{suc,...}))::t1)
                           ((ref(SS{weaksuc,...}))::t2) =
               (weaksuc := translate g (!suc); transweak g t1 t2)

        in transtrong newagraph agraph newagraph;
           transtrong newbgraph bgraph newbgraph;
           ignore(PG.obscl(a,agraph));
           ignore(PG.obscl(b,bgraph));
           transweak newagraph agraph newagraph;
           transweak newbgraph bgraph newbgraph;
           contrel(newa,newb,newagraph,newbgraph)
       end
end

