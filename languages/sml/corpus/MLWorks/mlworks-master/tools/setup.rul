/*-----------------------------------------------------------------------------
 *
 *  IIIIIII SSSSSS
 *    II    SS                          InstallSHIELD (R)
 *    II    SSSSSS          (c) 1990-1995, Stirling Technologies, Inc.
 *    II        SS                     All Rights Reserved.
 *  IIIIIII SSSSSS
 *
 *
 *
 *
 *    File Name:  SETUP.RUL
 *
 *  Description:  InstallSHIELD SDK Edition Template One script.
 *		  Modified from Emmo's quick hack to demo Plugin Kit Installer.
 *                Target platforms: Win95, WinNT3.5x
\*----------------------------------------------------------------------------*/


// **** DEBUGGING is 0 for 'release' builds, non-zero for testing. ****
#define DEBUGGING 1

// Size of components. Hint: use DU to check this.
#define DISK_SPACE_REQ          12095000

#define APP_NAME                "Harlequin MLWorks"      // Application name
#define PROGRAM_GROUP_NAME      "MLWorks"                // Program group name for WindowsNT
#define APPBASE_PATH            "\\Program Files\\Harlequin\\MLWorks"              // Default place to put it on disc
#define COMPANY_NAME            "Harlequin"
#define PRODUCT_NAME            "MLWorks"
#define PRODUCT_VERSION         "2.1"
#define PRODUCT_KEY             "Main-Windows.exe"       // Main application is uninstall key file.

// No device drivers to register

#define STR_COMPLETE95 "by clicking on the MLWorks icon.\n\n"
#define STR_COMPLETENT "by clicking on the MLWorks icon.\n\n"


declare

// Add this in the declare section :
#define MAX_PATH_LEN  512

#include "sddialog.h"

        // Global variable declarations.
        STRING  svGrp, szMsg, szFileSet, szTitle, szAppPath, szAppSharedDir;
        STRING  szProgram, szTemp, svUninstLogFile, szRegKey, szGrp;
        STRING  svMainDirectory[ _MAX_STRING ];
	STRING  svSystem ; //Points at windows\system[32]
	STRING  svIcon ; // Build pathlist to icon file
	STRING  svTemp ; // Short-lived odds and others.
        STRING  szLicenseDlgTitle, szLicenseDlgMsg, szLicenseDlgQ; 
        STRING  szLicenseFile;
        // Registration dialog stuff
        STRING  szLRMsg, szLRTitle, szLRField1, szLRField2;
        STRING  svLREdit1, svLREdit2;
        BOOL    bSpaceOk, bReshowSetupType;
        NUMBER  nResult, nStatusId, nType;
	NUMBER  nMajor, nMinor, nWin32s ;

	// Stuff for inserting user-input paths in scripts
	STRING svPervPath[600] ;
	STRING svBatchPath[600] ;
	STRING svImConsPath[600] ;
	STRING svImWinPath[600] ;
	STRING svConsolePath[600] ;
	STRING svLine ;
	NUMBER nvFileHandle, nvLineNumber ;

        BOOL    bIncludeInputs, bIncludeOutputs, bIncludeManual;
        BOOL    bWinNT, bWin95 ;

	// Pop-up messages allowed in debug build
	BOOL	bDebug ;

        // DLL call for license validation and storage
        NUMBER nRegResult;
        STRING szDLL, svNRegResult;
        BOOL bFreeEdition;

        // Function declarations.
        prototype SetupScreen();
        prototype CheckRequirements();
        prototype CheckSpaceRequirements( number, number, number, string );
        prototype CreateRegDBEntries();
	prototype CreateMLWorksRegKey(string);
	prototype CreateMLWorksRegValues(string);

        prototype INT validate_license.validate_and_install_license(STRING,STRING);

program

StartHere:
	bDebug = DEBUGGING ;
        bWinNT = FALSE ;
        bWin95 = FALSE ;
        Disable( BACKGROUND );

        // Set up the installation screen.
        SetupScreen();

        // Set installation info., which is required for registry entries.
        InstallationInfo( COMPANY_NAME, PRODUCT_NAME, PRODUCT_VERSION, PRODUCT_KEY );

        // Test target system proper configuration.
        CheckRequirements();
	// Create the defaults *here*. If they loop back, their
	// former choice should be offered to them for editing.
	TARGETDISK ="C:";
        svGrp = PROGRAM_GROUP_NAME;
	if (bWinNT) then
	   svSystem = WINDIR ^ "System32" ;
	else
	   svSystem = WINDIR ^ "System" ;
	endif ;


// Create a Welcome dialog.
WelcomeDlg:
        Disable( BACKBUTTON );
        Welcome( "Welcome", 0 );
        Enable( BACKBUTTON );

        // Ask user to confirm legal agreement

LicenseAgreement:
       szLicenseDlgTitle = "MLWorks License agreement";
       szLicenseDlgMsg = "Please read the following license agreement.  Scroll down to see the rest of the agreement.";
       szLicenseDlgQ = "Do you accept all the terms of the above license agreement?  If you select No, Setup will end.  To install MLWorks, you must accept this agreement.";

       // get license text from distribution and put in temp dir
       VarSave(SRCTARGETDIR);
       TARGETDIR=SUPPORTDIR;
       CompressGet( "data.z", "license.txt", COMP_NORMAL);
       VarRestore(SRCTARGETDIR);

       szLicenseFile = "license.txt";
       SdLicense( szLicenseDlgTitle, szLicenseDlgMsg, szLicenseDlgQ, szLicenseFile );

        // Registration
Registration:

        szLRMsg = "MLWorks Registration.\n\nEnter the license name and code supplied.  If you are installing MLWorks Personal edition you should leave the fields blank.";
        szLRTitle = "MLWorks Registration";
        szLRField1 = "Name";
        szLRField2 = "Code";
	svLREdit1 = "";
	svLREdit2 = "";
        nRegResult = 0;
        bFreeEdition = FALSE;
        
        VarSave(SRCTARGETDIR);
        TARGETDIR=SUPPORTDIR;
        CompressGet( "data.z", "bin\\validate_license.DLL", COMP_NORMAL);
        VarRestore(SRCTARGETDIR);
	
        szDLL = SUPPORTDIR ^ "validate_license.DLL";
        UseDLL(szDLL);

        while ((nRegResult = 0) && !bFreeEdition) 
          nResult = SdShowDlgEdit2 ( szLRTitle, szLRMsg, szLRField1, szLRField2, svLREdit1, svLREdit2 );

//         MessageBox("svLREdit1 "+svLREdit1,INFORMATION);
//         MessageBox("svLREdit2 "+svLREdit2,INFORMATION);

          if (nResult = NEXT) then
            if ((svLREdit1 = "") && (svLREdit2 = "")) then
               bFreeEdition = TRUE;
//             MessageBox("Installing as FREE",INFORMATION);
            else
               nRegResult = validate_and_install_license(svLREdit1,svLREdit2);
//             NumToStr(svNRegResult,nRegResult);
//             MessageBox("Result of DLL is" + svNRegResult,INFORMATION);
            endif;
          endif;

        endwhile;

        UnUseDLL(SUPPORTDIR ^ "validate_license.DLL");

        // Ask user for a destination location for the installation.
GetTargetDirectory:
        svMainDirectory = TARGETDISK ^ APPBASE_PATH;
        szMsg = "";
        nResult = AskDestPath( "Choose Destination Location", szMsg,
                          svMainDirectory, 0 );
	if (nResult = BACK) then
           goto WelcomeDlg;
        endif;

	// Shared dlls should go in the Windows folder, so that only
	// one set is kept, and those are the most recent ones available.
        szAppSharedDir = svSystem ;

        nType = TYPICAL;
FolderSelection:
	szGrp = svGrp;
        // Allow user to modify folder name.
        if ( SelectFolder( "Folder Selection", szGrp, szGrp ) = BACK ) then
           goto GetTargetDirectory;
        endif;

InitialiseRegistry:
	CreateRegDBEntries();

FileTransferSetup:

        // Prepare InstallSHIELD to record deinstallation information.
	// I/S must create the full pathlist:
        nResult = DeinstallStart( svMainDirectory, svUninstLogFile, PRODUCT_NAME + PRODUCT_VERSION, 0 );
	if (nResult < 0) then
		NumToStr(svTemp, nResult) ;
		svTemp = svTemp + " returned from DeInstallStart! This error means that"+
		                  " the uninstaller may not function correctly. The "+
		                  " returned logfile path was " + svUninstLogFile ;
//		MessageBox (svUninstLogFile, WARNING) ;
	endif ;

        RegDBSetItem( REGDB_UNINSTALL_NAME, APP_NAME );

        // Set registry App Paths key information for the main application.
        szAppPath = svMainDirectory ;
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        szProgram = szAppPath ^ PRODUCT_KEY ;
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szProgram );

        // Define the "General" file set.
        szFileSet = "General";
        TARGETDIR = svMainDirectory;

        FileSetBeginDefine( szFileSet );

          SetStatusWindow( -1, "MLWorks files..." );

          // Always copy README & related files, located at
          // the root level in the DATA.Z library file.
          CompressGet( "data.z", "*.*", COMP_NORMAL | INCLUDE_SUBDIR);

	  // Want a local copy of libmlw.dll

	  CompressGet("data.z","bin\\libmlw.dll", COMP_NORMAL);

	  // Copy DLLs into shared dir and register as SharedDLLs

	  TARGETDIR = szAppSharedDir;
	  CompressGet("data.z","bin\\libmlw.dll", COMP_UPDATE_VERSION | SHAREDFILE);

          TARGETDIR = svMainDirectory;

        FileSetEndDefine( szFileSet );

DoFileTransfer:
        // Set up progress indicator and information gauge.
        Enable( STATUSDLG );
        StatusUpdate( ON, 90 );

        // Perform the file set.
        nResult = FileSetPerformEz( szFileSet, 0 );

        switch (nResult)

        case FS_DONE: // Successful completion.

        case FS_CREATEDIR: // Create directory error.
             MessageBox( "Unable to create a directory under " + TARGETDIR + "."+
                         "Please check write access to this directory.", SEVERE );
             abort;

        default: // Group all other errors under default label.
             NumToStr( szTemp, nResult );
             MessageBox( "General file transfer error."+
                          "Please check your target location and try again."+
                          "\n\n Error Number:"+szTemp, SEVERE );

             abort;
        endswitch;

InstallScripts:
	// MessageBox ("original path is " + szAppPath, WARNING) ; 


        // first preserve the values of SRCDIR and TARGETDIR

        VarSave(SRCTARGETDIR);

        // set SRCDIR and TARGETDIR since these are used by CopyFile

	SRCDIR=szAppPath ^ "\\scripts";
	TARGETDIR=szAppPath ^ "\\bin";

	// copy bodies of scripts to destination

	CopyFile("mlbatch.bat.in","mlbatch.bat");
	CopyFile("mlpervasive.bat.in","mlpervasive.bat");
	CopyFile("mlimage-console.bat.in","mlimage-console.bat");
	CopyFile("mlimage-windows.bat.in","mlimage-windows.bat");
	CopyFile("mlconsole.bat.in","mlconsole.bat");

	// restore values of SRCDIR and TARGETDIR

	VarRestore(SRCTARGETDIR);

	// create customised command lines with user's path
	// for mlpervasive.bat:

	svPervPath = ' "' + szAppPath + '\\bin\\main" -load ' +
            ' "' + szAppPath + '\\images\\basis.img" %MYARGS% ';

	// and mlimage-console.bat:

	svImConsPath = ' "' + szAppPath + 
           '\\bin\\main" -MLWpass MLWargs -load %IMAGE% MLWargs %MYARGS%' ;

	// and mlbatch.bat:

	svBatchPath = ' "' + szAppPath + '\\bin\\main-windows" -MLWpass MLWargs -load %1 MLWargs -pervasive-dir "' + szAppPath + '\\pervasive"' ;

	// and mlimage-windows.bat:

	svImWinPath = ' "' + szAppPath + '\\bin\\main-windows" -MLWpass MLWargs -load %1 MLWargs -pervasive-dir "' + szAppPath + '\\pervasive"' ;

	// and mlconsole.bat:

        svConsolePath = ' "' + szAppPath + '\\bin\\main" -MLWpass MLWargs -load "'+ szAppPath + '\\images\\gui.img" MLWargs -tty -pervasive-dir "' + szAppPath + '\\pervasive" %MYARGS%' ;

//	MessageBox ("svPervPath = " + svPervPath, INFORMATION) ;
//	MessageBox ("svBatchPath = " + svBatchPath, INFORMATION) ;
//	MessageBox ("svImWinPath = " + svImWinPath, INFORMATION) ;
//	MessageBox ("svImConsPath = " + svImConsPath, INFORMATION) ;
//	MessageBox ("svConsolePath = " + svConsolePath, INFORMATION) ;

        // Append path info to end of mlpervasive script:
	// open .bat file and append the customised command line

	OpenFileMode(FILE_MODE_APPEND);
	OpenFile(nvFileHandle,szAppPath ^ "\\bin","mlpervasive.bat");
	WriteLine(nvFileHandle,svPervPath);
	CloseFile(nvFileHandle);

        // Append path info to end of mlbatch script:

	OpenFileMode(FILE_MODE_APPEND);
	OpenFile(nvFileHandle,szAppPath ^ "\\bin","mlbatch.bat");
	WriteLine(nvFileHandle,svBatchPath);
	CloseFile(nvFileHandle);

        // Append path info to mlconsole.bat 

	OpenFileMode(FILE_MODE_APPEND);
	OpenFile(nvFileHandle,szAppPath ^ "\\bin","mlconsole.bat");
	WriteLine(nvFileHandle,svConsolePath);
	CloseFile(nvFileHandle);


        // Add path info to mlimage-console.bat 
	// this is different since the info is not appended but inserted

	VarSave(SRCTARGETDIR);

	SRCDIR = szAppPath ^ "\\bin";

	FileGrep("mlimage-console.bat","CMDLINEINFO",svLine,nvLineNumber,RESTART);
	FileDeleteLine("mlimage-console.bat",nvLineNumber,nvLineNumber);
	FileInsertLine("mlimage-console.bat",svImConsPath,nvLineNumber,BEFORE);

        // Add path info to mlimage-windows.bat 

	FileGrep("mlimage-windows.bat","CMDLINEINFO",svLine,nvLineNumber,RESTART);
	FileDeleteLine("mlimage-windows.bat",nvLineNumber,nvLineNumber);
	FileInsertLine("mlimage-windows.bat",svImWinPath,nvLineNumber,BEFORE);


	VarRestore(SRCTARGETDIR);

CreateFolderIcons:
	// Enable the progress meter, with a 95% setting (almost done)
        SetStatusWindow( 95, "Creating Program Group and Icons...." );

        // Create program groups (folders) and icons.
	ProgDefGroupType( PERSONAL );
        if (CreateProgramFolder( szGrp ) < 0) then
	   MessageBox ("Failed to create program folder!", SEVERE);
	endif;
        ShowProgramFolder( szGrp, SW_SHOW );
        LongPathToShortPath( svMainDirectory );
        Delay(1);

        TARGETDIR = svMainDirectory;
	// Use an external icon for the main executable
	svIcon = TARGETDIR ^ "\\bin\\runtime.ico" ;

	svTemp = TARGETDIR ^ "\\bin";
        AddFolderIcon( szGrp, 
                  PRODUCT_NAME + " " + PRODUCT_VERSION,
		  svTemp + "\\main-windows -MLWpass MLWargs -stack 5 -load ..\\images\\gui.img MLWargs -source-path .. -pervasive-dir ..\\pervasive",
                  TARGETDIR + "\\bin",
                  svIcon, 0, "", REPLACE );
        Delay( 1 );

        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " + Basis",
		  svTemp + "\\main-windows -MLWpass MLWargs -stack 5 -load ..\\images\\guib.img MLWargs -source-path .. -pervasive-dir ..\\pervasive",
                  TARGETDIR + "\\bin",
                  svIcon, 0, "", REPLACE );
        Delay( 1 );

	// Add an icon for documentation entry page
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " Documentation",
		  TARGETDIR ^ "\\documentation\\doc_indx.htm",
                  TARGETDIR + "\\documentation\\",
                  "", 0, "", REPLACE );
        Delay( 1 );

	// Add an icon for the UNinstaller
	svTemp = "unInstall " + PRODUCT_NAME + " " + PRODUCT_VERSION ;
        szProgram = WINDIR ^ "UNINST.EXE";
        LongPathToShortPath( szProgram );

 if (bDebug) then
//   MessageBox (svUninstLogFile, WARNING) ;
 endif ;

        LongPathToShortPath( svUninstLogFile );
 
 if (bDebug) then
//   MessageBox (svUninstLogFile, WARNING) ;
 endif ;

       AddFolderIcon( szGrp, svTemp,
                       szProgram + " -f" + svUninstLogFile,
                       svSystem,
                       "", 0, "", REPLACE );
        Delay( 1 );

	// No devices, so nothing to to register.

        Delay(2);
        Disable( FEEDBACK_FULL );
        Disable( STATUSDLG );

        // Announce setup complete

        SetStatusWindow( 100, "Installation complete." );

        // If shared files could not be installed, then users must restart system.
        if (BATCH_INSTALL = TRUE) then
           szMsg = "Some files could not be installed because they are "+
                   "currently in use by other programs in the system.  "+
                   "To allow for proper operation of the new program you should restart"+
                   "your system at this time.";
           CommitSharedFiles(0);
           RebootDialog( "Restart Windows", szMsg, SYS_BOOTMACHINE );
        else
           szMsg = "Setup is complete.  You may run the installed program ";
           if ( bWinNT ) then
              szMsg = szMsg + STR_COMPLETENT;
           else
              szMsg = szMsg + STR_COMPLETE95;
           endif;

           MessageBeep( 0 );
	   MessageBox( szMsg, INFORMATION );
        endif;

        exit;


/*---------------------------------------------------------------------------*\
 *
 * Function:  SetupScreen
 *
 *  Purpose:  This function will set up the screen look.  This includes
 *            colors, fonts, text to be displayed, etc.
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function SetupScreen()
        begin

          Enable( INDVFILESTATUS );

          SetTitle( APP_NAME + " Installation\n", 28, WHITE );

          SetTitle( "Installing " + APP_NAME, 0, BACKGROUNDCAPTION ); // Caption bar text.

          Enable( BACKGROUND );

        end;


/*---------------------------------------------------------------------------*\
 *
 * Function:  CheckRequirements
 *
 *  Purpose:  This function will check all minimum requirements for the
 *            application being installed.  If any fail, then the user
 *            is informed and the installation is terminated.
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function CheckRequirements()
          number  nvDx, nvDy;
          number nvResult;
          STRING szResult;
	  STRING szMsg[128] ;
        begin

          // Determine if target system uses NT or Windows 95.
          GetSystemInfo( WINMAJOR, nvResult, szResult );
	  nMajor = nvResult ;

if (bDebug) then
 // We'll report OS version in a moment.
 NumToStr(szResult, nMajor) ;
 szMsg = "OS Level " + szResult + ":" ;
endif ;

          GetSystemInfo( WINMINOR, nvResult, szResult );
	  nMinor = nvResult ;
 
 if (bDebug) then
  NumToStr(szResult, nMinor) ;
  szMsg = szMsg + szResult ;
 endif ;

          bWinNT = TRUE;
	  bWin95 = FALSE ;

	  // I don't have a win16 version, so this can only run with WinNT or Win95 -  for now
          if (nMajor = 4) then
             if (nMinor = 0) then
                bWinNT = FALSE; // Running Windows 95.
	        bWin95 = TRUE ;
             endif ;
          endif;

 if (bDebug) then
   if (bWinNT) then
      szMsg = szMsg + " NT assumed" ;
   else
      szMsg = szMsg + " Win95 assumed" ;
   endif ;
// MessageBox (szMsg, WARNING) ;
 endif ;

          // Check screen resolution.
          GetExtents( nvDx, nvDy );
          if (nvDy < 480) then
             MessageBox( "This program requires VGA or better resolution.", WARNING );
             exit;
          endif;

        end;


/*---------------------------------------------------------------------------*\
 *
 * Function:  CheckSpaceRequirements
 *
 *  Purpose:  This function will check space requirements based on the
 *            elements being installed.
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function CheckSpaceRequirements( bIncludeInputs,
                                 bIncludeOutputs,
                                 bIncludeManual,
                                 szDir )
          number  nSizeRequired;
        begin

          nSizeRequired = 0;

          // Determine total size.
          nSizeRequired = nSizeRequired + DISK_SPACE_REQ;

          // Check space on target drive.
          bSpaceOk = TRUE;
          if (GetDiskSpace( szDir ) < nSizeRequired) then
             szMsg = "There is not enough space available on the disk\n" +
                     "'" + svMainDirectory + "' \n" +
                     "Please free up some space or change the target location\n" +
                     "to a different disk";
             MessageBeep(0);
             MessageBox( szMsg, WARNING );
             bSpaceOk = FALSE;
          endif;

          return bSpaceOk;
        end;


/*---------------------------------------------------------------------------*\
 *
 * Function:  CreateRegDBEntries
 *
 *  Purpose:  This function will create the MLWorks entries in the registry.
 *
 *    Input:  Nothing, but relies on the global svMainDirectory being set.
 *
 *  Returns:
 *
 * Comments:  Only warnings are given if the registry settings are not 
 *            created properly.
 * 
\*---------------------------------------------------------------------------*/


function CreateRegDBEntries()
   begin
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	CreateMLWorksRegKey("");
   end;

function CreateMLWorksRegKey(RegRoot)
   STRING regKey, regValue, regClass;
   BOOL bKeyCreated;
   begin
	regKey = RegRoot ^ "\\Software\\Harlequin";
	regClass = "";

	bKeyCreated = TRUE;
	if (RegDBKeyExist(regKey) < 0) then
	   if (RegDBCreateKeyEx(regKey, regClass) < 0) then
	      szMsg = "Failed to create " + RegRoot ^ "\\Software\\Harlequin";
	      MessageBeep(0);
	      MessageBox(szMsg, WARNING);
	      bKeyCreated = FALSE;
	   endif;
	endif;
	if (bKeyCreated) then
	   regKey = RegRoot + "\\Software\\Harlequin\\MLWorks";
	   if (RegDBKeyExist(regKey) < 0) then
	      if (RegDBCreateKeyEx(regKey, regClass) < 0) then
		 szMsg = "Failed to create " + RegRoot ^  
		         "\\Software\\Harlequin\\MLWorks";
		 MessageBeep(0);
		 MessageBox(szMsg, WARNING);
		 bKeyCreated = FALSE;
	      endif;
	   endif;  
	   if (bKeyCreated) then
	      CreateMLWorksRegValues(regKey);
	   endif; 
	endif;

   end;

function CreateMLWorksRegValues(rKey)
   STRING regClass;
   begin
	Disable(LOGGING);
	RegDBSetKeyValueEx(rKey, "Source Path", REGDB_STRING, 
				svMainDirectory, -1);
	RegDBSetKeyValueEx(rKey, "Pervasive Path", REGDB_STRING, 
				svMainDirectory ^ "pervasive", -1);
	RegDBSetKeyValueEx(rKey, "Object Path", REGDB_STRING, "", -1);
	RegDBSetKeyValueEx(rKey, "Startup Directory", REGDB_STRING, 
				svMainDirectory, -1);
	Enable(LOGGING);
   end;

#include "sdlic.rul"
#include "sdint.rul"
#include "sdsedt2.rul"
