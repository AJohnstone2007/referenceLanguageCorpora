<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1977) -->
<HEAD>
<LINK REL=TOP HREF="UG_1.HTM">
<LINK REL=UP HREF="UG_23.HTM">
<LINK REL=PREV HREF="UG_24.HTM">
<LINK REL=NEXT HREF="UG_26.HTM">
<TITLE>2.1.2   Introducing the MLWorks project system </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1977)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING25></A>

<DIV>
<P><A HREF="UG_26.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="UG_24.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="UG_23.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="UG_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="UG_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="UG_85.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.1   Introduction</P>

</DIV>
<A NAME=HEADING25-0></A>
<H1>2.1.2   Introducing the MLWorks project <A NAME=MARKER-2-465></A>system </H1>
<P>Application <A NAME=MARKER-2-466></A>sources<A NAME=MARKER-2-467></A> are typically decomposed into a collection of separate source files. These files may depend on one another in complex ways, in which case when you ask MLWorks to compile a file, it also compiles all the files that your file depends on. MLWorks handles this using a project file which is used to compile ML source files to object files in an organized and flexible way.</P>
<P>When it compiles a source file, MLWorks produces an object file, which contains an internal representation of the objects defined by the code; and it can then load those objects into the interactive environment. If an object file already exists, MLWorks does not need to compile the source file; it can just load the objects directly from the object file.</P>
<P>Using object files is much faster than re-compiling every file whenever you change it or re-start MLWorks. However, it would be inconvenient if you had to keep track of object files and remember which ones needed re-compiling. The project system does this tracking for you, only compiling a given source file if it has been changed since the last time it was compiled, or if it has never been compiled before.</P>
<P>The MLWorks project system also provides two different notations for describing the locations of source and object versions of your application's files. Using relative path names allows you to compile different versions of the application files stored in matching directory structures by simply copying the project file to a different location, whereas using absolute path names provides a fixed reference to the application files, regardless of where the project file is saved. Both relative and absolute path name specifications are discussed in greater detail in <A HREF="UG_30.HTM#MARKER-9-486">Section 2.3.2</A>. <A NAME=MARKER-2-468></A></P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>MLWorks User Guide version 2.0 for Windows - 30 Jul 1998</ADDRESS>
<P><A HREF="UG_26.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="UG_24.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="UG_23.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="UG_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="UG_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="UG_85.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Generated with <A HREF="http://www.harlequin.com/webmaker/">Harlequin WebMaker</A></P>

</DIV>
</BODY>
</HTML>
