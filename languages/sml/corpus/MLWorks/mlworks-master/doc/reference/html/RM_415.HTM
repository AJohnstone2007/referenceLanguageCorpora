<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1977) -->
<HEAD>
<LINK REL=TOP HREF="RM_1.HTM">
<LINK REL=UP HREF="RM_411.HTM">
<LINK REL=PREV HREF="RM_414.HTM">
<LINK REL=NEXT HREF="RM_416.HTM">
<TITLE>7.10.4   The C.Signature structure </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1977)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING415></A>

<DIV>
<P><A HREF="RM_416.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_414.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_411.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>7.10   The C structure</P>

</DIV>
<A NAME=HEADING415-0></A>
<H1>7.10.4   The <A NAME=MARKER-2-958></A>C.Signature<A NAME=MARKER-2-959></A> structure </H1>
<P>This structure defines how external signature information is represented and provides operators for manipulating this information.</P>
<STRONG>c_type</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-960></A>Specification:<DD><P>  <CODE>type c_type</CODE> </P>
<DT>Description:<DD>
<DT><DD>Representation for C-type information. Equivalent to <CODE>Type.c_type</CODE>.
</DL>
<STRONG>c_signature</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-961></A>Specification:<DD><P>  <CODE>type c_signature</CODE> </P>
<DT>Description:<DD>
<DT><DD>This is an encapsulated abstract type for representing consistent collections of C declaration information for types, functions and variables.
</DL>
<STRONG>c_decl</STRONG>
<P><I>Datatype</I></P>
<DL>
<DT><A NAME=MARKER-2-962></A>Specification:<DD><P> <CODE>datatype c_decl = UNDEF_DECL | VAR_DECL of { name : name, ctype : c_type } | FUN_DECL of { name   : name, source : c_type list, target : c_type } | TYPE_DECL of { name : name, defn : c_type, size : int } | CONST_DECL of { name : name, ctype : c_type }</CODE></P>
<DT>Description:<DD>
<DT><DD>This data type is used to represent C type declaration info and has the following structure: 
<DT><CODE>UNDEF_DECL</CODE><DD><P> This value is included as a default return value for queries rather than using option values (that is, <CODE>NONE</CODE> and <CODE>SOME</CODE>) for wrapping and unwrapping these values.</P>
<DT><CODE>VAR_DECL of { name : name, ctype : c_type }</CODE> <DD>
<DT><DD>C variable declarations can be recorded in this form. The type information may be updated and modified.
<DT><CODE>FUN_DECL of { name : name, source : c_type list, target : c_type }</CODE> <DD>
<DT><DD>C function declaration information can be recorded in this form. The type information may be updated and modified.
<DT><CODE>TYPE_DECL of { name : name, defn : c_type, size : int }</CODE> <DD>
<DT><DD>C type information associated with a name (that is, <CODE>typedef</CODE> and <CODE>struct</CODE>/<CODE>union</CODE>/<CODE>enum</CODE> declarations) can be recorded in this form. The associated type and size information may be updated and modified. 
<DT><CODE>CONST_DECL of { name : name, ctype : c_type }</CODE> <DD>
<DT><DD>Type information associated with simple literal <CODE>#define</CODE> constants can be recorded in this form.
</DL>
<STRONG>newSignature</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-963></A>Signature:<DD><P> <CODE>val newSignature : unit -&gt; c_signature</CODE> </P>
<DT>Description:<DD>
<DT><DD>This generates a fresh <CODE>c_signature</CODE> object.
</DL>
<STRONG>lookupEntry</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-964></A>Signature:<DD><P> <CODE>val lookupEntry : c_signature -&gt; name -&gt; c_decl</CODE> </P>
<DT>Description:<DD>
<DT><DD>This takes a <CODE>c_signature</CODE> and a name and returns a declaration value having that name, if one exists.
</DL>
<STRONG>defEntry</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-965></A>Signature:<DD><P> <CODE>val defEntry : c_signature * c_decl -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This updates a <CODE>c_signature</CODE> object by adding a given entry.
</DL>
<STRONG>removeEntry</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-966></A>Signature:<DD><P> <CODE>val removeEntry : c_signature * name -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This removes the named entry from the given <CODE>c_signature</CODE> object.
</DL>
<STRONG>showEntries</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-967></A>Signature:<DD><P> <CODE>val showEntries : c_signature -&gt; c_decl list</CODE> </P>
<DT>Description:<DD>
<DT><DD>This yields a list of all the entries contained within a given <CODE>c_signature</CODE>.
</DL>
<STRONG>normaliseType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-968></A>Signature:<DD><P> <CODE>val normaliseType : c_signature -&gt; (c_type -&gt; c_type)</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function takes a <CODE>c_type</CODE> object and ensures that size information is correct and up to date. Normalised types can have their sizes computed using <CODE>sizeOf</CODE>. See page <A HREF="RM_413.HTM#MARKER-9-849">253</A><A NAME=MARKER-2-969></A>.
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>MLWorks Reference Manual version 2.0 - 29 Jul 1998</ADDRESS>
<P><A HREF="RM_416.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_414.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_411.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Generated with <A HREF="http://www.harlequin.com/webmaker/">Harlequin WebMaker</A></P>

</DIV>
</BODY>
</HTML>
