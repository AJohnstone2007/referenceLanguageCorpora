<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1977) -->
<HEAD>
<LINK REL=TOP HREF="RM_1.HTM">
<LINK REL=UP HREF="RM_394.HTM">
<LINK REL=PREV HREF="RM_406.HTM">
<LINK REL=NEXT HREF="RM_408.HTM">
<TITLE>7.6   The Object structure </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1977)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING407></A>

<DIV>
<P><A HREF="RM_408.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_406.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_394.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>7 The MLWorks Foreign Interface Library</P>

</DIV>
<A NAME=HEADING407-0></A>
<A NAME=UID-fi-885124></A>
<H1>7.6   The <A NAME=MARKER-2-780></A>Object <A NAME=MARKER-2-781></A>structure </H1>
<P>A <A NAME=MARKER-2-782></A>foreign object is an ML value which provides a means of both accessing and modifying foreign data from ML. Foreign objects are represented with the type <CODE>object</CODE>.</P>
<P>Foreign objects do not contain foreign data itself, but are instead associated with a location in a store object which contains foreign data. In short, a foreign object provides <I>indirect</I> access to foreign data, thus allowing objects to be freely copied or otherwise manipulated without replicating the foreign data itself. The disadvantage of this is that it permits many different objects to refer to the same foreign data, that is, it permits aliasing. An update to the foreign data through any one such object is an update that will be observed by all alias objects.</P>
<P>The requirements for representing foreign objects naturally differ depending on the foreign language being interfaced to. Some of the necessary features of, and possible operations upon, foreign objects will be the same whatever the foreign language.</P>
<P>However, foreign objects will probably have some language-specific aspects too. In particular, any notion of typing will be language specific. For this reason, the ML type that represents <CODE>object</CODE> objects is polymorphic, allowing for this dependence on language-specific aspects, such as typing.</P>
<P>The <CODE>Object</CODE> structure is, then, the generic implementation of foreign object representations and protocols.</P>
<P>As you will see below, there are several generic ways of inspecting a foreign object, but <I>no</I> (generic) ways of generating objects directly or modifying any existing characteristics they may have. The reason is that these are very much subject to the language-specific semantics of the appropriate data model. Accordingly, such operations are provided within the language-specific interfaces.</P>
<STRONG><A NAME=MARKER-9-783></A>object</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-784></A>Specification:<DD><P> <CODE>type ('l_type)object</CODE> </P>
<DT>Description:<DD>
<DT><DD>Foreign objects have two main components: a <I>value</I> part and a <I>type</I> part. The value part refers to some raw information contained in an associated store workspace, while the type part defines how that raw information should be interpreted.
<DT><DD><A NAME=MARKER-10-785></A>The ML type of the language-specific information is provided via the ML type parameter <CODE>'l_type</CODE>.
</DL>
<STRONG>ReadOnly</STRONG>
<P><I>Exception</I></P>
<DL>
<DT><A NAME=MARKER-2-786></A>Specification:<DD><P> <CODE>exception ReadOnly</CODE> </P>
<DT>Description:<DD>
<DT><DD>See <CODE>WriteOnly</CODE>, below.
</DL>
<STRONG>WriteOnly</STRONG>
<P><I>Exception</I></P>
<DL>
<DT><A NAME=MARKER-2-787></A>Specification:<DD><P> <CODE>exception WriteOnly</CODE> </P>
<DT>Description:<DD>
<DT><DD>The <CODE>WriteOnly</CODE> and <CODE>ReadOnly</CODE> exceptions are raised when an object attempts to access or update a store in a manner forbidden by the store's current read/write status. See the datatype <CODE>object_mode</CODE>, below.
</DL>
<STRONG><A NAME=MARKER-9-788></A>object_mode</STRONG>
<P><I>Datatype</I></P>
<DL>
<DT><A NAME=MARKER-2-789></A>Specification:<DD><P> <CODE>datatype object_mode = <BR>&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_OBJECT | REMOTE_OBJECT </CODE></P>
<DT>Description:<DD>
<DT><DD>Every object has an associated <I>mode</I> which governs the way in which foreign data can be accessed. In general, foreign objects access foreign data that is present locally, in store objects they are associated with. 
<DT><DD>However, some foreign objects access raw foreign data that is not local to a store but somewhere remote. You may not need to copy the foreign data to a store to do what you want with such data. A local access method based around stores is not appropriate in that case.
<DT><DD>Object may therefore be in one of two modes: local or remote. An object in local mode can only access and modify data present within its associated store. An object in remote mode is located remotely to enable it to access foreign data without having first copied it back to a store. In addition, a remote object cannot modify or affect foreign data.
<DT><DD>The modes provided are:
<DT><CODE>LOCAL_OBJECT</CODE><DD><P> Foreign data is sited locally within a store workspace. The data can be read and written by ML and foreign code.</P>
<DT><DD>Pointer values are not restricted, that is, they can be simple indices (that is, relative values) or machine addresses.
<DT><CODE>REMOTE_OBJECT</CODE><DD><P> Foreign data is sited remotely somewhere in the user's address space. The data can only be read by ML. It cannot be written by ML. </P>
<DT><DD>Pointer values are restricted to machine addresses.
</DL>
<STRONG>objectMode</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-790></A>Signature<DD><P> <CODE>val objectMode : <BR>&nbsp;&nbsp;&nbsp;&nbsp;('l_type) object -&gt; object_mode</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function returns the current <CODE>object_mode</CODE>.
</DL>
<STRONG>object_status</STRONG>
<P><I>Datatype</I></P>
<DL>
<DT><A NAME=MARKER-2-791></A>Specification:<DD><P> <CODE>datatype object_status = <BR>&nbsp;&nbsp;&nbsp;&nbsp;PERMANENT_OBJECT | TEMPORARY_OBJECT </CODE></P>
<DT>Description:<DD>
<DT><DD>As foreign data is not stored directly as part of a foreign object, objects can be cheaply replicated without changing the meaning of the foreign data. However, it is also sometimes useful to be able to control the way in which foreign objects are replicated.
<DT><DD>To do this, each object is given a status value, which can be either <I>permanent</I> or <I>temporary</I>. The purpose of the object status is that permanent foreign objects can be duplicated but temporary objects are <I>never</I> duplicated and would be returned unmodified. Temporary objects are made by an operation that first duplicates a permanent object and changes the status of the duplicate to temporary.
<DT><DD>The functions which perform such duplication may need to take suitable care of the language-specific part of an object. As such, these function are provided as part of the language specific interfaces.
<DT><DD>The object status values are: 
<DT><CODE>PERMANENT_OBJECT</CODE> <DD>
<DT><DD>An object with permanent status usually represents some sort of 'live' object which is in some way persistent. By default, newly built objects are given permanent status.
<DT><CODE>TEMPORARY_OBJECT</CODE> <DD>
<DT><DD>An object with temporary status usually represents an ephemeral (short-lived) object that is summoned into existence to perform a very specific role in a program.
</DL>
<STRONG>objectStatus</STRONG>
<P><I>Function</I></P>
<DL>
<DT>Signature:<DD><P> <CODE>val objectStatus : <BR>&nbsp;&nbsp;&nbsp;&nbsp;('l_type) object -&gt; object_status</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function returns the current status of the given object.
</DL>
<STRONG>OutOfBounds</STRONG>
<P><I>Exception</I></P>
<DL>
<DT><A NAME=MARKER-2-792></A>Specification:<DD><P> <CODE>exception OutOfBounds</CODE> </P>
<DT>Description:<DD>
<DT><DD>This exception is raised if an attempt is made to 'move' or 'relocate' an object to some location outside the current store. It is analogous to the <CODE>Subscript</CODE> error that is raised upon an attempt to update an array at an invalid index. 
</DL>
<STRONG>Currency</STRONG>
<P><I>Exception</I></P>
<DL>
<DT><A NAME=MARKER-2-793></A>Specification:<DD><P> <CODE>exception Currency</CODE> </P>
<DT>Description:<DD>
<DT><DD>This exception is raised upon an attempt to perform some action upon an object when the association between object and foreign data is assumed to be corrupt or invalid.
<DT><DD>The notion of data corruption or validity is naturally dependent upon the interpretation placed on the semantics of the data model of the language being interfaced with. In general, an object is assumed <I>not</I> current if it has just been moved, relocated or otherwise changed without its language-dependent interpretation (that is, its 'type') having been adjusted accordingly.
</DL>
<STRONG>objectCurrency</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-794></A>Signature:<DD><P> <CODE>val objectCurrency : ('l_type) object -&gt; bool</CODE> </P>
<DT>Description:<DD>
<DT><DD>This predicate reports true if and only if the object supplied is assumed to represent current foreign data.
</DL>
<STRONG>objectSize</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-795></A>Signature:<DD><P> <CODE>val objectSize : ('l_type) object -&gt; int</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function returns the current size, in bytes, of the foreign data located in the store.
</DL>
<STRONG>objectLocation</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-796></A>Signature:<DD><P> <CODE>val objectLocation : ('l_type) object -&gt; int</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function returns the location of the associated foreign data in the store.
</DL>
<STRONG>objectAddress</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-797></A>Signature:<DD><P> <CODE>val objectAddress : <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;('l_type) object -&gt; address</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function returns the machine address of the location of the foreign data in the store.<A NAME=MARKER-2-798></A>
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>MLWorks Reference Manual version 2.0 - 29 Jul 1998</ADDRESS>
<P><A HREF="RM_408.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_406.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_394.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Generated with <A HREF="http://www.harlequin.com/webmaker/">Harlequin WebMaker</A></P>

</DIV>
</BODY>
</HTML>
