<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1977) -->
<HEAD>
<LINK REL=TOP HREF="RM_1.HTM">
<LINK REL=UP HREF="RM_262.HTM">
<LINK REL=PREV HREF="RM_263.HTM">
<LINK REL=NEXT HREF="RM_265.HTM">
<TITLE> addInspectMethod</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1977)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING264></A>

<DIV>
<P><A HREF="RM_265.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_263.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_262.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.9   Inspecting values: the Inspector structure</P>

</DIV>
<A NAME=HEADING264-0></A>
<H1> <A NAME=MARKER-2-524></A>addInspectMethod</H1>
<P><I>Function</I></P>
<H3>Structure</H3>
<dl><dd><pre>Shell.Inspector</pre></dl>
<H3>Type</H3>
<dl><dd><pre>val addInspectMethod: ('a -&gt; 'b) -&gt; unit</pre></dl>
<H3>Syntax</H3>
<P> addInspectMethod <I>m</I> -&gt; ()</P>
<H3>Arguments</H3>
<DL>
<DT><I>m</I><DD> An ML function. 
</DL>
<H3>Values</H3>
<dl><dd><pre>()</pre></dl>
<H3>Description</H3>
<P> Adds the inspector method <I>m</I> to the inspector. An inspector method is a function of type <CODE>t1 -&gt; t2</CODE> that will be applied whenever an object of type <CODE>t1</CODE> is being inspected. On subsequent inspection, values of type <CODE>t1</CODE> are inspected as if they were of type <CODE>t2</CODE>.This function raises exception <CODE>InspectError</CODE> if <I>m</I> was not compiled with debugging information. </P>
<H3>Example</H3>
<P> First define the new datatype <CODE>Foo</CODE> as follows:</P>
<DL><DD><PRE>MLWorks&gt; datatype Foo = FOO of int * bool;
datatype Foo =
&nbsp;&nbsp;FOO of (int * bool)
val FOO : (int * bool) -&gt; Foo
MLWorks&gt; FOO (10, false);
val it : Foo = FOO (10, false)
MLWorks&gt;</PRE></DL>
<DL>
<DT>Using <CODE>inspectIt</CODE> returns the following result:<DD>
</DL>
<DL><DD><PRE>MLWorks&gt; inspectIt();
Entering TTY inspector - enter ? for help
Value: FOO (10, false)
Type: Foo
1: 10
2: false
Inspector&gt; q
val it : unit = ()
MLWorks&gt;</PRE></DL>
<P> Compare this output with the following output, resulting from inspecting <CODE>Foo</CODE> after adding a new inspector method using <CODE>addInspectMethod</CODE>:</P>
<DL><DD><PRE>MLWorks&gt; fun inspectFoo (FOO (n,b)) = if b then {value = 0} else {value=n};
val inspectFoo : Foo -&gt; {value: int} = fn
MLWorks&gt; addInspectMethod (inspectFoo);
val it : unit = ()
MLWorks&gt; FOO (10, false);
val it : Foo = FOO (10, false)
MLWorks&gt; inspectIt();
Entering TTY inspector - enter ? for help
Value: FOO (10, false)
Type: Foo
value: 10
Inspector&gt; q
val it : unit = ()
MLWorks&gt;
</PRE></DD></DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>MLWorks Reference Manual version 2.0 - 29 Jul 1998</ADDRESS>
<P><A HREF="RM_265.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_263.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_262.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Generated with <A HREF="http://www.harlequin.com/webmaker/">Harlequin WebMaker</A></P>

</DIV>
</BODY>
</HTML>
