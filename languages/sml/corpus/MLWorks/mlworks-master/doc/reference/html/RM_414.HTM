<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1977) -->
<HEAD>
<LINK REL=TOP HREF="RM_1.HTM">
<LINK REL=UP HREF="RM_411.HTM">
<LINK REL=PREV HREF="RM_413.HTM">
<LINK REL=NEXT HREF="RM_415.HTM">
<TITLE>7.10.3   The C.Value structure </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1977)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING414></A>

<DIV>
<P><A HREF="RM_415.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_413.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_411.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>7.10   The C structure</P>

</DIV>
<A NAME=HEADING414-0></A>
<H1>7.10.3   The<A NAME=MARKER-2-858></A> C.Value <A NAME=MARKER-2-859></A>structure </H1>
<P>This structure provides support for foreign data values as ML data structures.</P>
<STRONG>store</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-860></A>Specification:<DD><P> <CODE>type store</CODE> </P>
<DT>Description:<DD>
<DT>Equivalent to <CODE>Store.store</CODE>. See page <A HREF="RM_406.HTM#MARKER-9-769">234</A>. <DD>
</DL>
<STRONG>object_mode</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-861></A>Specification:<DD><P> <CODE>type object_mode</CODE> </P>
<DT>Description:<DD>
<DT><DD>Equivalent to <CODE>Object.object_mode</CODE>. See page <A HREF="RM_407.HTM#MARKER-9-788">238</A>.
</DL>
<STRONG>c_type</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-862></A>Specification:<DD><P> <CODE>type c_type</CODE> </P>
<DT>Description:<DD>
<DT>Equivalent to <CODE>Type.c_type</CODE>. See page <A HREF="RM_413.HTM#MARKER-9-843">250</A>.<DD>
</DL>
<STRONG>c_object</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-863></A>Specification:<DD><P> <CODE>type c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>This is an encapsulated ML type used to represent foreign data and is equivalent to <CODE>(c_type)Object.object</CODE>. See page <A HREF="RM_407.HTM#MARKER-9-783">237</A>.
</DL>
<STRONG>object</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-864></A>Signature:<DD><P> <CODE>val object : { ctype : c_type, store : store } <BR>-&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>This generates fresh <CODE>c_objects</CODE>, given specific type information and a particular store to contain the raw value information.
</DL>
<STRONG>setObjectMode</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-865></A>Signature:<DD><P> <CODE>val setObjectMode : c_object * object_mode -&gt; unit</CODE> </P>
<DT>Description: <DD>
<DT><DD>This is used to change the current object mode.
</DL>
<STRONG>objectType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-866></A>Signature:<DD><P> <CODE>val objectType : c_object -&gt; c_type</CODE> </P>
<DT>Description:<DD>
<DT><DD>This is used to inspect the current <CODE>c_type</CODE>.
</DL>
<STRONG>castObjectType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-867></A>Signature:<DD><P> <CODE>val castObjectType : c_object * c_type -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This is used to change the current <CODE>c_type</CODE>.
</DL>
<STRONG>tmpObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-868></A>Signature:<DD><P> <CODE>val tmpObject : c_object -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>This maps permanent objects into a duplicate except that the status of the duplicate is mapped to temporary. Temporary objects are simply returned. 
</DL>
<STRONG>dupObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-869></A>Signature:<DD><P> <CODE>val dupObject : c_object -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>Duplicates permanent objects, but does not duplicate objects whose status is temporary.
</DL>
<STRONG>newObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-870></A>Signature:<DD><P> <CODE>val newObject : c_object -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>This generates a fresh foreign object, including making a duplicate type component (using <CODE>dup_type()</CODE>), irrespective of the object's status.
</DL>
<STRONG>c_char</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-871></A>Specification:<DD><P> <CODE>type c_char</CODE> </P>
<DT>Description:<DD>
<DT><DD>This ML type is compatible with the C type <CODE>char</CODE>.
</DL>
<STRONG>c_short_int</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-872></A>Specification:<DD><P> <CODE>type c_short_int</CODE> </P>
<DT>Description:<DD>
<DT><DD>This ML type is compatible with the C type <CODE>short int</CODE>.
</DL>
<STRONG>c_int</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-873></A>Specification:<DD><P> <CODE>type c_int</CODE> </P>
<DT>Description:<DD>
<DT>This ML type is compatible with the C type <CODE>int</CODE>.<DD>
</DL>
<STRONG>c_long_int</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-874></A>Specification:<DD><P> type c_long_int</P>
<DT>Description:<DD>
<DT>This ML type should be compatible with the C type <CODE>long int</CODE>.<DD>
</DL>
<STRONG>c_real</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-875></A>Specification:<DD><P> <CODE>type c_real</CODE> </P>
<DT>Description:<DD>
<DT>This ML type is compatible with the C type <CODE>float</CODE>.<DD>
</DL>
<STRONG>c_double</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-876></A>Specification:<DD><P> <CODE>type c_double</CODE> </P>
<DT>Description:<DD>
<DT>This ML type is compatible with the C type <CODE>double</CODE>.<DD>
</DL>
<STRONG>c_long_status</STRONG>
<P><I>Type abbreviation</I></P>
<DL>
<DT><A NAME=MARKER-2-877></A>Specification:<DD><P> <CODE>type c_long_double</CODE> </P>
<DT>Description:<DD>
<DT><DD>This ML type should be compatible with the C type <CODE>long double</CODE>.
</DL>
<STRONG><A NAME=MARKER-2-878></A>ForeignType</STRONG>
<P><I>Exception</I></P>
<STRONG><A NAME=MARKER-2-879></A>StoreAccess</STRONG>
<P><I>Exception</I></P>
<STRONG><A NAME=MARKER-2-880></A>OutOfBounds</STRONG>
<P><I>Exception</I></P>
<STRONG><A NAME=MARKER-2-881></A>Currency</STRONG>
<P><I>Exception</I></P>
<P><A NAME=MARKER-10-882></A>The following are generally 'setter' functions for particular kinds of C data. In particular, they expect the foreign objects to have an appropriate <CODE>c_type</CODE> already set. If not, then they fail with exception <CODE>ForeignType</CODE>. </P>
<STRONG>setChar</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-883></A>Signature:<DD><P> <CODE>val setChar : c_object * c_char -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C <CODE>char</CODE>.
</DL>
<STRONG>setUnsignedChar</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-884></A>Signature:<DD><P> <CODE>val setUnsignedChar : c_object * c_char -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing an unsigned C char (that is, 0 &lt;= char &lt;= 255).
</DL>
<STRONG>setSignedChar</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-885></A>Signature:<DD><P> <CODE>val setSignedChar : c_object * c_char -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing an unsigned C character (that is -127 &lt;= <CODE>char</CODE> &lt;= 128).
</DL>
<STRONG>setShort</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-886></A>Signature:<DD><P> <CODE>val setShort : c_object * c_short_int -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C short integer.
</DL>
<STRONG>setInt</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-887></A>Signature:<DD><P> <CODE>val setInt : c_object * c_int -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C integer. 
</DL>
<STRONG>setLong</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-888></A>Signature:<DD><P> <CODE>val setLong : c_object * c_long_int -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C long integer.
</DL>
<STRONG>setUnsignedShort</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-889></A>Signature:<DD><P> <CODE>val setUnsignedShort : c_object * c_short_int -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C unsigned short integer. 
</DL>
<STRONG>setUnsigned</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-890></A>Signature:<DD><P> <CODE>val setUnsigned : c_object * c_int -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C unsigned integer.
</DL>
<STRONG>setUnsignedLong</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-891></A>Signature:<DD><P> <CODE>val setUnsignedLong : c_object * c_long_int <BR>-&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C unsigned long integer.
</DL>
<STRONG>setWord32</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-892></A>Signature:<DD><P> <CODE>val setWord32 : c_object * word32 -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value from an ML 32-bit value.
</DL>
<STRONG>setFloat</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-893></A>Signature:<DD><P> <CODE>val setFloat : c_object * c_real -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C floating-point real value.
</DL>
<STRONG>setDouble</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-894></A>Signature:<DD><P> <CODE>val setDouble : c_object * c_double -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C double floating point real value.
</DL>
<STRONG>setLongDouble</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-895></A>Signature:<DD><P> <CODE>val setLongDouble : c_object * c_long_double -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C long double floating-point real value.
</DL>
<STRONG>setString</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-896></A>Signature:<DD><P> <CODE>val setString : c_object * string -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function sets the object value to a value representing a C string. In general, ML strings can contain embedded NULL characters -- so only the string up to the first NULL is significant. However, if no NULL is included then one is added. Finally, the foreign object must have a suitable string <CODE>c_type</CODE> whose length (including any NULL sentinel) is sufficient to contain this data.
</DL>
<P>Functions for manipulating pointer objects:</P>
<STRONG>setAddr</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-897></A>Signature:<DD><P> <CODE>val setAddr : { obj:c_object, addr:c_object } <BR>-&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This makes the value part of the <CODE>obj</CODE> object coincide with the value based at the address given by the <CODE>addr</CODE> object. The <CODE>c_type</CODE> of <CODE>obj</CODE> may be arbitrary and the <CODE>c_type</CODE> of <CODE>addr</CODE> should be a numeric type capable of representing a machine address or an appropriate pointer type.
<DT><DD>In a sense, this makes the <CODE>obj</CODE> object inspect value data at a given address.
</DL>
<STRONG>setPtrAddr</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-898></A>Signature:<DD><P> <CODE>val setPtrAddr : { ptr:c_object, addr:c_object } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This sets the given pointer object <CODE>ptr</CODE> to reference the address value given by <CODE>addr</CODE> (see above). The <CODE>c_type</CODE> of <CODE>ptr</CODE> is any pointer <CODE>c_type</CODE> and the <CODE>c_type</CODE> of <CODE>addr</CODE> is any numeric type capable of representing a machine address or an appropriate pointer type.
<DT><DD>This function makes a pointer object refer to a given address.
</DL>
<STRONG>setPtrAddrOf</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-899></A>Signature:<DD><P> <CODE>val setPtrAddrOf : { ptr:c_object, data:c_object } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This sets the given pointer object, <CODE>ptr</CODE>, to reference the value referred to by the <CODE>data</CODE> object. The <CODE>c_type</CODE> of <CODE>ptr</CODE> is any pointer <CODE>c_type</CODE> and the <CODE>c_type</CODE> of <CODE>data</CODE> must be compatible with this. 
<DT><DD>This function makes a pointer object refer to a given piece of data of compatible type.
</DL>
<STRONG>setPtrData</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-900></A>Signature:<DD><P> <CODE>val setPtrData : { ptr:c_object, data:c_object } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This sets the data that is addressed by the pointer object, <CODE>ptr</CODE>, to the data specified by the object <CODE>data</CODE>. The <CODE>c_type</CODE> of <CODE>ptr</CODE> can be any pointer <CODE>c_type</CODE> and the <CODE>c_type</CODE> of <CODE>data</CODE> must be compatible with this.
<DT><DD>This function indirectly assigns data into the space referred to by pointer.
</DL>
<STRONG>setPtrType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-901></A>Signature:<DD><P> val setPtrType : { ptr:c_object, data:c_object } -&gt; unit </P>
<DT>Description:<DD>
<DT><DD>This sets the <CODE>c_type</CODE> of the data addressed by the pointer <CODE>ptr</CODE> to the <CODE>c_type</CODE> specified by the object <CODE>data</CODE>. The <CODE>c_type</CODE> of <CODE>ptr</CODE> can be any pointer <CODE>c_type</CODE> and the <CODE>c_type</CODE> of <CODE>data</CODE> can be arbitrary. The current pointer mode is preserved.
<DT><DD>This function performs an implicit type cast of the pointer to match that of the given data object.
</DL>
<STRONG>castPtrType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-902></A>Signature:<DD><P> <CODE>val castPtrType : { ptr : c_object, ctype : c_type } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This sets the <CODE>c_type</CODE> of the data addressed by the pointer <CODE>ptr</CODE> to the <CODE>c_type</CODE> specified. This function performs an explicit type cast of the given pointer, while preserving the current pointer mode.
</DL>
<STRONG>setLocalPtr</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-903></A>Signature:<DD><P> <CODE>val setLocalPtr : c_object -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This converts the current pointer into a local pointer -- that is, a machine address located within the associated store workspace. This may fail if the given pointer is a remote pointer that points outside of this workspace.
</DL>
<STRONG>setRelativePtr</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-904></A>Signature:<DD><P> <CODE>val setRelativePtr : c_object -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This converts the current pointer into a relative pointer -- that is, a small index value giving the relative offset from the origin address of the store workspace. This fails if the given pointer points outside the associated store workspace.
</DL>
<STRONG>setRemotePtr</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-905></A>Signature:<DD><P> <CODE>val setRemotePtr : c_object -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This converts the current pointer into a remote pointer -- that is, a machine address.
</DL>
<P>Functions for manipulating structured objects:</P>
<STRONG>setStruct</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-906></A>Signature:<DD><P> <CODE>val setStruct : c_object * (c_object list) -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function takes an object specifying a structure and updates its fields from the given list of data items. This relies upon fields being ordered in a structure and that the <CODE>c_types</CODE> of corresponding items and fields are matched. If there are fewer items than fields then only the corresponding leading prefix of fields are updated. Also, if there are more items than fields then the excess items are ignored.
</DL>
<STRONG>setField</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-907></A>Signature:<DD><P> <CODE>val setField : { record : c_object, field:name, data : c_object } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This function updates a specific field of a C struct with the given data.
</DL>
<STRONG>setMember</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-908></A>Signature:<DD><P> <CODE>val setMember : { union : c_object, member : name } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This updates an object with union <CODE>c_type</CODE> by selecting a particular member. The selected member must be one of the known options.
</DL>
<STRONG>setUnion</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-909></A>Signature:<DD><P> <CODE>val setUnion : { union : c_object, data : c_object } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This updates an object with union <CODE>c_type</CODE> with given data. The <CODE>c_type</CODE> of the current member of the union object must be compatible with the <CODE>c_type</CODE> of the data.
</DL>
<STRONG>setArray</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-910></A>Signature:<DD><P> <CODE>val setArray : c_object * (c_object list) * int -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This updates an array object with a 'slice' of items, based at a given index. This allows several elements of an array to be updated together. The array elements updated begin with the given index and continue with consecutive indices until either the list is exhausted or the array ends. 
</DL>
<STRONG>setEnum</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-911></A>Signature:<DD><P> <CODE>val setEnum : c_object * int -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This updates an object containing enumerated values. The integer must be in the appropriate range defined by the <CODE>c_type</CODE> of the object. The <CODE>c_type</CODE> of the object should be an enumerated type.
</DL>
<P>The following are particular selection functions for particular kinds of structured C data -- they expect the foreign objects to have an appropriate <CODE>c_type</CODE> already set. If not, they fail with exception <CODE>ForeignType</CODE>.</P>
<STRONG><A NAME=MARKER-9-912></A>indexObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-913></A>Signature:<DD><P> <CODE>val indexObject : { array:c_object, tgt:c_object, index:int } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This selects an array element from the given array at the given <CODE>index</CODE> and copies the data to the target object, <CODE>tgt</CODE>. The <CODE>index</CODE> must be in the range of the array; the <CODE>c_type</CODE> of <CODE>array</CODE> should be an array type; and the target object should have compatible <CODE>c_type</CODE>.
</DL>
<STRONG><A NAME=MARKER-9-914></A>derefObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-915></A>Signature:<DD><P> <CODE>val derefObject : { ptr:c_object, tgt:c_object } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This locates the data pointed at by the pointer object and copies it to the target object.
</DL>
<STRONG><A NAME=MARKER-9-916></A>selectObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-917></A>Signature:<DD><P> <CODE>val selectObject : { record:c_object, tgt:c_object, field:name } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This selects data from a field of a given record and copies it to the target object. The field has to be one of those associated with the C struct type of the <CODE>record</CODE>; the <CODE>c_type</CODE> of the target object must also be compatible with the field.
</DL>
<STRONG>coerceObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-918></A>Signature:<DD><P> <CODE>val coerceObject : { union:c_object, tgt:c_object } -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This extracts the content of the union object and copies it to the target object. The <CODE>c_types</CODE> of the union and the target do not have to match (that is, implicit coercion). <A NAME=MARKER-10-919></A> 
</DL>
<STRONG>copyIndexObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-920></A>Signature:<DD><P> <CODE>val copyIndexObject : c_object * int -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>As <CODE>indexObject</CODE> (page <A HREF="#MARKER-9-912">266</A>), but generates a new object to provide the result.
</DL>
<STRONG><A NAME=MARKER-9-921></A>copyDerefObject</STRONG>
<P><I>Function </I></P>
<DL>
<DT><A NAME=MARKER-2-922></A>Signature:<DD><P> <CODE>val copyDerefObject : c_object -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>As <CODE>derefObject</CODE> (page <A HREF="#MARKER-9-914">266</A>), but generates a new object to provide the result.
</DL>
<STRONG><A NAME=MARKER-9-923></A>copySelectObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-924></A>Signature:<DD><P> <CODE>val copySelectObject : c_object * name -&gt; c_object</CODE> </P>
<DT>Description: <DD>
<DT><DD>As <CODE>selectObject</CODE> (page <A HREF="#MARKER-9-916">266</A>), but generates a new object to provide the result.
</DL>
<STRONG><A NAME=MARKER-9-925></A>copyCoerceObject</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-926></A>Signature:<DD><P> <CODE>val copyCoerceObject : c_object -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>As for <CODE>coerceObject()</CODE> above, but generates a new object to provide the result.
</DL>
<STRONG>indexObjectType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-927></A>Signature:<DD><P> <CODE>val indexObjectType : c_object -&gt; c_type</CODE> </P>
<DT>Description:<DD>
<DT><DD>This gives the <CODE>c_type</CODE> of an element of the array.
</DL>
<STRONG>derefObjectType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-928></A>Signature:<DD><P> <CODE>val derefObjectType : c_object -&gt; c_type</CODE> </P>
<DT>Description:<DD>
<DT><DD>This gives the <CODE>c_type</CODE> of the value pointed at by the pointer object.
</DL>
<STRONG>selectObjectType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-929></A>Signature:<DD><P> <CODE>val selectObjectType : c_object * name -&gt; c_type</CODE> </P>
<DT>Description:<DD>
<DT><DD>This gives the <CODE>c_type</CODE> of the field selected from the C struct object.
</DL>
<STRONG>coerceObjectType</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-930></A>Signature:<DD><P> <CODE>val coerceObjectType : c_object -&gt; c_type</CODE> </P>
<DT>Description:<DD>
<DT><DD>This gives the <CODE>c_type</CODE> of the current member of the C union object.
</DL>
<STRONG>indexObjectSize</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-931></A>Signature:<DD><P> <CODE>val indexObjectSize : c_object -&gt; int</CODE> </P>
<DT>Description:<DD>
<DT><DD>This gives the size (in bytes) of an element of the specified array.
</DL>
<STRONG>derefObjectSize</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-932></A>Signature:<DD><P> <CODE>val derefObjectSize : c_object -&gt; int</CODE> </P>
<DT>Description:<DD>
<DT><DD>This gives the size (in bytes) of the value pointed at by the pointer object.
</DL>
<STRONG>selectObjectSize</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-933></A>Signature:<DD><P> <CODE>val selectObjectSize : c_object * name -&gt; int</CODE> </P>
<DT>Description:<DD>
<DT><DD>This gives the size (in bytes) of the field selected from the C struct object.
</DL>
<STRONG>coerceObjectSize</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-934></A>Signature:<DD><P> <CODE>val coerceObjectSize : c_object -&gt; int</CODE> </P>
<DT>Description:<DD>
<DT><DD>This gives the size (in bytes) of the current member for the C union object.
</DL>
<STRONG>nextArrayItem</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-935></A>Signature:<DD><P> <CODE>val nextArrayItem : c_object -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>This shifts the object forwards through the workspace by an amount equal to its size. This is useful when stepping through an array.
</DL>
<STRONG>prevArrayItem</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-936></A>Signature:<DD><P> <CODE>val prevArrayItem : c_object -&gt; unit</CODE> </P>
<DT>Description:<DD>
<DT><DD>As for <CODE>nextArrayItem</CODE>, except that the object is shifted backwards.
</DL>
<P>The following are generally 'getter' functions for particular kinds of C data -- as for the related setter functions, they expect the <CODE>object</CODE> objects to have an appropriate <CODE>c_type</CODE> already set. If not, then they fail with exception <CODE>ForeignType</CODE>.</P>
<STRONG>getChar</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-937></A>Signature:<DD><P> <CODE>val getChar : c_object -&gt; c_char</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C character (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getUnsignedChar</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-938></A>Signature:<DD><P> <CODE>val getUnsignedChar : c_object -&gt; c_char</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C unsigned character (represented as an ML value in the range 0-255) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getSignedChar</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-939></A>Signature:<DD><P> <CODE>val getSignedChar : c_object -&gt; c_char</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C signed character represented as an ML value (-127-127) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getShort</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-940></A>Signature:<DD><P> <CODE>val getShort : c_object -&gt; c_short_int</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C short value (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getInt</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-941></A>Signature:<DD><P> <CODE>val getInt : c_object -&gt; c_int</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C int value (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getLong</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-942></A>Signature:<DD><P> <CODE>val getLong : c_object -&gt; c_long_int</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C long value (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getUnsignedShort</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-943></A>Signature:<DD><P> <CODE>val getUnsignedShort : c_object -&gt; c_short_int</CODE> </P>
<DT>Description: <DD>
<DT><DD>Extracts a C unsigned short value (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getUnsigned</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-944></A>Signature:<DD><P> <CODE>val getUnsigned : c_object -&gt; c_int</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C unsigned int value (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getUnsignedLong</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-945></A>Signature:<DD><P> <CODE>val getUnsignedLong : c_object -&gt; c_long_int</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C unsigned long value (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getWord32</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-946></A>Signature:<DD><P> <CODE>val getWord32 : c_object -&gt; word32</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a 4-byte quantity (that is, C unsigned) from an object with appropriate <CODE>c_type</CODE>. The quantity is represented as a <CODE>Word32</CODE> ML value.
</DL>
<STRONG>getFloat</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-947></A>Signature:<DD><P> <CODE>val getFloat : c_object -&gt; c_real</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C float (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getDouble</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-948></A>Signature:<DD><P> <CODE>val getDouble : c_object -&gt; c_double</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C double float (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getLongDouble</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-949></A>Signature:<DD><P> <CODE>val getLongDouble : c_object -&gt; c_long_double</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts a C long double float (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getString</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-950></A>Signature:<DD><P> <CODE>val getString : c_object -&gt; string</CODE> </P>
<DT>Description:<DD>
<DT><DD>Extracts an ASCII character string (represented as an ML value) from an object with appropriate <CODE>c_type</CODE>.
</DL>
<STRONG>getData</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-951></A>Signature:<DD><P> <CODE>val getData : c_object -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>Yields an object containing the dereferenced value of the given pointer. This is a synonym for the <CODE>copyDerefObject</CODE> function. See page <A HREF="#MARKER-9-921">267</A>.
</DL>
<STRONG>getStruct</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-952></A>Signature:<DD><P> <CODE>val getStruct : c_object -&gt; c_object list</CODE> </P>
<DT>Description:<DD>
<DT><DD>Yields a list of objects each corresponding to a field of the given C struct object.
</DL>
<STRONG>getField</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-953></A>Signature:<DD><P> <CODE>val getField : c_object * name -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>Yields the value of a given field. This is a synonym for the <CODE>copySelectObject</CODE> function. See page <A HREF="#MARKER-9-923">267</A>.
</DL>
<STRONG>getUnion</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-954></A>Signature:<DD><P> <CODE>val getUnion : c_object -&gt; c_object</CODE> </P>
<DT>Description:<DD>
<DT><DD>Yields an object whose value and <CODE>c_type</CODE> correspond to the current member of the given union object. This is a synonym for the <CODE>copyCoerceObject</CODE> function. See page <A HREF="#MARKER-9-925">268</A>.
</DL>
<STRONG>getArray</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-955></A>Signature:<DD><P> <CODE>val getArray : c_object -&gt; c_object list</CODE> </P>
<DT>Description:<DD>
<DT><DD>Yields a list of objects corresponding to the elements of the given array object.
</DL>
<STRONG>getEnum</STRONG>
<P><I>Function</I></P>
<DL>
<DT><A NAME=MARKER-2-956></A>Signature:<DD><P> <CODE>val getEnum : c_object -&gt; int</CODE> </P>
<DT>Description:<DD>
<DT><DD>Yields an integer corresponding to the enumerated value represented by the object given.<A NAME=MARKER-2-957></A>
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>MLWorks Reference Manual version 2.0 - 29 Jul 1998</ADDRESS>
<P><A HREF="RM_415.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_413.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_411.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Generated with <A HREF="http://www.harlequin.com/webmaker/">Harlequin WebMaker</A></P>

</DIV>
</BODY>
</HTML>
