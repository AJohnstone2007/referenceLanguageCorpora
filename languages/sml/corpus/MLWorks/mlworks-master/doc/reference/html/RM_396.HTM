<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1977) -->
<HEAD>
<LINK REL=TOP HREF="RM_1.HTM">
<LINK REL=UP HREF="RM_395.HTM">
<LINK REL=PREV HREF="RM_395.HTM">
<LINK REL=NEXT HREF="RM_397.HTM">
<TITLE>7.1.1   Terminology</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1977)">
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<DIV>
<A NAME=HEADING396></A>

<DIV>
<P><A HREF="RM_397.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_395.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_395.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>7.1   Introduction</P>

</DIV>
<A NAME=HEADING396-0></A>
<H1>7.1.1   Terminology</H1>
<P>In general, all ML expressions evaluate to <I>values</I>. An ML <I>object</I> is simply an ML value which is also <I>stateful</I> and so has persistent effect. ML computes values which can be either stateful or <I>stateless</I>. We shall call ML values that are stateless <I>pure</I> ML values.</P>
<P>In ML programming work generally, transient values tend not to be stateful. Objects are used mainly when information persists from transaction to transaction. The programming model required for using the MLWorks FI is usually procedural and imperative, relying very much upon persistent state. </P>
<P>This situation is almost forced, because most foreign languages are to some degree or even entirely static and imperative. In particular, function calling requires addresses and pointers to be consistent during a foreign function call. This can be <A NAME=MARKER-2-736></A>achieved by providing static memory and having ML operators construct and analyse data in these static areas.</P>
<P>We have not followed convention and called the FI a Foreign Function Interface or FFI. The reason for this is that ML is strongly typed, and so the interface must also be concerned with the differences in typing between different languages. Further, the concept of function is central to ML and is certainly not neutral from an ML perspective. For this reason, we chose to call our interface a Foreign Interface: a term which is simpler and which implies greater generality than Foreign Function Interface.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>MLWorks Reference Manual version 2.0 - 29 Jul 1998</ADDRESS>
<P><A HREF="RM_397.HTM"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="RM_395.HTM"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="RM_395.HTM"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="RM_1.HTM"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="RM_2.HTM"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="RM_418.HTM"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>Generated with <A HREF="http://www.harlequin.com/webmaker/">Harlequin WebMaker</A></P>

</DIV>
</BODY>
</HTML>
