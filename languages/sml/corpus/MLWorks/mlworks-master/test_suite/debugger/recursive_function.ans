val it : unit = ()
val foldl : ((('a * 'b) -> 'a) * 'a * 'b list) -> 'a = fn
val sum : int list -> int = fn
val it : unit = ()
Entering: sum [1, 2, 3]
Entering debugger, commands: q : Return to top level, c : Continue interrupted code,  ? : more help
Current (innermost) stack frame:
sum [1, 2, 3]
Debugger> (Current frame)
sum [1, 2, 3]
(Outermost frame)
sum [1, 2, 3]
Debugger> Entering: foldl (fn, 0, [1, 2, 3])
Debugger> (Current frame)
foldl (fn, 0, [1, 2, 3])
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: Builtin function _int+ _
Debugger> (Current frame)
foldl (fn, 0, [1, 2, 3])
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl (fn, 1, [2, 3])
Debugger> (Current frame)
foldl (fn, 1, [2, 3])
foldl (fn, 0, [1, 2, 3])
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: Builtin function _int+ _
Debugger> (Current frame)
foldl (fn, 1, [2, 3])
foldl (fn, 0, [1, 2, 3])
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl (fn, 3, [3])
Debugger> (Current frame)
foldl (fn, 3, [3])
foldl (fn, 1, [2, 3])
foldl (fn, 0, [1, 2, 3])
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: Builtin function _int+ _
Debugger> (Current frame)
foldl (fn, 3, [3])
foldl (fn, 1, [2, 3])
foldl (fn, 0, [1, 2, 3])
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl (fn, 6, [])
Debugger> (Current frame)
foldl (fn, 6, [])
foldl (fn, 3, [3])
foldl (fn, 1, [2, 3])
foldl (fn, 0, [1, 2, 3])
sum [1, 2, 3]
(Outermost frame)
Debugger> val it : int = 6
