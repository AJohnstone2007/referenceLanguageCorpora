val it : unit = ()
val foldl : (('a * 'b) -> 'a) -> 'a -> 'b list -> 'a = fn
val sum : int list -> int = fn
val it : unit = ()
Entering: sum [1, 2, 3]
Entering debugger, commands: q : Return to top level, c : Continue interrupted code,  ? : more help
Current (innermost) stack frame:
sum [1, 2, 3]
Debugger> (Current frame)
sum [1, 2, 3]
(Outermost frame)
sum [1, 2, 3]
Debugger> Entering: foldl argument 0 fn
Debugger> (Current frame)
foldl argument 0 fn
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 1 0
Debugger> (Current frame)
foldl argument 1 0
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 2 [1, 2, 3]
Debugger> (Current frame)
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 0 fn
Debugger> (Current frame)
foldl argument 0 fn
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: Builtin function _int+ _
Debugger> (Current frame)
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 1 _
Debugger> (Current frame)
foldl argument 1 _
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 2 [2, 3]
Debugger> (Current frame)
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 0 fn
Debugger> (Current frame)
foldl argument 0 fn
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: Builtin function _int+ _
Debugger> (Current frame)
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 1 _
Debugger> (Current frame)
foldl argument 1 _
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 2 [3]
Debugger> (Current frame)
foldl argument 2 [3]
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 0 fn
Debugger> (Current frame)
foldl argument 0 fn
foldl argument 2 [3]
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: Builtin function _int+ _
Debugger> (Current frame)
foldl argument 2 [3]
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 1 _
Debugger> (Current frame)
foldl argument 1 _
foldl argument 2 [3]
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> Entering: foldl argument 2 []
Debugger> (Current frame)
foldl argument 2 []
foldl argument 2 [3]
foldl argument 2 [2, 3]
foldl argument 2 [1, 2, 3]
sum [1, 2, 3]
(Outermost frame)
Debugger> val it : int = 6
