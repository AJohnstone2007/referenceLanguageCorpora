test succeeded.
test succeeded.
test succeeded.
test succeeded.
test succeeded.
test succeeded.
val amy : TextIO.StreamIO.outstream ref = ref(Out {data=A(#B[83, 101, 118, 101, 110, 32, 69, 105, 103, 104, ..]), mode=ref(LINE_BUF), name="Amy", pos=ref(0), writer=ref(PUTmore WR ..)})
val arthur : TextIO.StreamIO.instream ref = ref(In {buffer=Buf {basePos=SOME _, data=_, emptyMeansEof=true, more=ref(ISmore(..)), name="Arthur"}, pos=5})
val comm_2 : string ref = ref("BBBBB")
val comm_medium : string ref = ref("AAAAA")
val interleave : TextIO.StreamIO.instream ref -> TextIO.StreamIO.instream -> string = fn
val pos : int ref = ref(5)
val pos2 : int ref = ref(5)
val r : TextPrimIO.reader = RD {avail=fn, block=SOME fn, canInput=SOME fn, chunkSize=5, close=fn, endPos=SOME fn, getPos=SOME fn, ioDesc=NONE, name="Arthur", readArr=NONE, readArrNB=NONE, readVec=SOME fn, readVecNB=NONE, setPos=SOME fn, verifyPos=NONE}
val r2 : TextPrimIO.reader = RD {avail=fn, block=SOME fn, canInput=SOME fn, chunkSize=5, close=fn, endPos=SOME fn, getPos=SOME fn, ioDesc=NONE, name="Arthur's twin", readArr=NONE, readArrNB=NONE, readVec=SOME fn, readVecNB=NONE, setPos=SOME fn, verifyPos=NONE}
val reportOK : bool -> unit = fn
val ruhtra : TextIO.StreamIO.instream = In {buffer=Buf {basePos=SOME _, data=_, emptyMeansEof=false, more=ref(ISmore(Buf ..)), name="Arthur's twin"}, pos=0}
val s : string = "Oh the grand old Duke of York,\nHe had a leg of Pork,\nHe marched it up to the Microwave,\nAnd he ate it with a fork.\n\n\nFile created by test_suite/basis/imperative_io.sml"
val s'_1 : string = "Oh the grand old Duke of York,\n"
val s'_2 : string = "He had a leg of Pork,\nHe marched it up to the Microwave,\nAnd he ate it with a fork.\n\n\nFile created by test_suite/basis/imperative_io.smlSome enchanted evening,..."
val s_1 : string = "Oh the grand old Duke of York,\n"
val s_2 : string = "He had a leg of Pork,\n"
val s_3 : string = "He marched it up to the Microwave,\n"
val s_4 : string = "And he ate it with a fork.\n"
val s_5 : string = "\n\nFile created by test_suite/basis/imperative_io.sml"
val s_6 : string = "Some enchanted evening,..."
val test1 : bool = true
val test2 : bool = true
val the_answer : string = "One Two Three\n1Four Five Six\nSeven Eight Nine."
val w : TextPrimIO.writer = WR {block=NONE, canOutput=SOME fn, chunkSize=20, close=fn, endPos=SOME fn, getPos=SOME fn, ioDesc=NONE, name="Amy", setPos=SOME fn, verifyPos=NONE, writeArr=NONE, writeArrNB=NONE, writeVec=SOME fn, writeVecNB=NONE}
val x : unit = ()
val y : TextIO.StreamIO.instream ref = ref(In {buffer=Buf {basePos=SOME _, data=_, emptyMeansEof=true, more=ref(ISmore(..)), name="123"}, pos=193})
