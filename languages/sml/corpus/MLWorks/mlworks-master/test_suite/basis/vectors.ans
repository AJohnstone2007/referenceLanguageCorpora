infix 1 seq
val seq : ('a * 'b) -> 'b = fn
val check : bool -> string = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
infix 0 ==
val == : (''a vector * ''a vector) -> bool = fn
val a : int vector = #V[0, 1, 2, 3, 4, 5, 6]
val add1 : int -> int = fn
val addi : (int * int) -> int = fn
val b : int vector = #V[44, 55, 66]
val c : int vector = #V[0, 1, 2, 3, 4, 5, 6]
val d : int vector = #V[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..]
val e : int vector = #V[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..]
val f : int vector = #V[44, 55, 66]
val test1 : string = "OK"
val test2 : string = "OK"
val test3 : string = "OK"
val test4a : string = "OK"
val test4b : string = "OK"
val test4c : string = "OK"
val test5 : string = "OK"
val test6a : string = "OK"
val test6b : string = "OK"
val test6c : string = "OK"
val test7 : string = "OK"
val test8 : string = "OK"
val test9 : string = "OK"
val test9a : string = "OK"
val test9b : string = "OK"
val test9c : string = "OK"
val test9d : string = "OK"
val test9e : string = "OK"
val test9f : string = "OK"
val test9g : string = "OK"
val test9h : string = "OK"
val test9i : string = "OK"
val testAa : string = "OK"
val testAb : string = "OK"
val testAc : string = "OK"
val testAd : string = "OK"
val testAe : string = "OK"
val testAf : string = "OKEXN"
val testAga : string = "OK"
val testAgb : string = "OKEXN"
val testAh : string = "OK"
val testAi : string = "OK"
val testAj : string = "OKEXN"
val testAk : string = "OK"
val testAl : string = "OKEXN"
val testBa : string = "OK"
val v : int vector = #V[0, 1, 2, 3, 4, 5, 6, 7]
