val allreg : 'a -> {base: 'a, col: int, ncols: 'b option, nrows: 'c option, row: int} = fn
val iprint : int Array2.array -> unit = fn
val maken : (int * int) -> int Array2.array = fn
val mkreg : ('a * 'b * 'c * 'd * 'e) -> {base: 'a, col: 'c, ncols: 'e option, nrows: 'd option, row: 'b} = fn
tabulate RowMajor

  0   1   2   3   4   5 
  6   7   8   9  10  11 
 12  13  14  15  16  17 
 18  19  20  21  22  23 

  0   0   0   0   0   0 
  1   1   1   1   1   1 
  2   2   2   2   2   2 
  3   3   3   3   3   3 

  0   1   2   3   4   5 
  0   1   2   3   4   5 
  0   1   2   3   4   5 
  0   1   2   3   4   5 
tabulate ColMajor 

  0   4   8  12  16  20 
  1   5   9  13  17  21 
  2   6  10  14  18  22 
  3   7  11  15  19  23 

  0   0   0   0   0   0 
  1   1   1   1   1   1 
  2   2   2   2   2   2 
  3   3   3   3   3   3 

  0   1   2   3   4   5 
  0   1   2   3   4   5 
  0   1   2   3   4   5 
  0   1   2   3   4   5 
val copytest : (int * int * int * int * int * int) -> unit = fn
copy test

  0   1   2   3   4   5   6   7 
  8   9  10  11  12  13  14  15 
 16  17  18  19   0   1  22  23 
 24  25  26  27   8   9  30  31 
 32  33  34  35  16  17  38  39 
 40  41  42  43  44  45  46  47 

  0   1   2   3   4   5   6   7 
  8   9  10  11  12  13  14  15 
  0   1  18  19  20  21  22  23 
  8   9  26  27  28  29  30  31 
 16  17  34  35  36  37  38  39 
 40  41  42  43  44  45  46  47 

 18  19   2   3   4   5   6   7 
 26  27  10  11  12  13  14  15 
 34  35  18  19  20  21  22  23 
 24  25  26  27  28  29  30  31 
 32  33  34  35  36  37  38  39 
 40  41  42  43  44  45  46  47 

  0   1   2   3   4   5   6   7 
  8   0   1   2  12  13  14  15 
 16   8   9  10  20  21  22  23 
 24  16  17  18  28  29  30  31 
 32  33  34  35  36  37  38  39 
 40  41  42  43  44  45  46  47 

  9  10  11   3   4   5   6   7 
 17  18  19  11  12  13  14  15 
 25  26  27  19  20  21  22  23 
 24  25  26  27  28  29  30  31 
 32  33  34  35  36  37  38  39 
 40  41  42  43  44  45  46  47 
val it : string = "OK"
val it : string = "OK"
val it : string = "OK"
val it : string = "OK"
val copytest2 : (int * int * int * int * int * int) -> unit = fn
copy test2

  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   1   0   0   0   0 
  0   0   0   0   8   9   0   0   0   0 
  0   0   0   0  16  17   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 

  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   1   0   0   0   0   0   0   0   0 
  8   9   0   0   0   0   0   0   0   0 
 16  17   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 

 18  19   0   0   0   0   0   0   0   0 
 26  27   0   0   0   0   0   0   0   0 
 34  35   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 

  0   0   0   0   0   0   0   0   0   0 
  0   0   1   2   0   0   0   0   0   0 
  0   8   9  10   0   0   0   0   0   0 
  0  16  17  18   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 

  9  10  11   0   0   0   0   0   0   0 
 17  18  19   0   0   0   0   0   0   0 
 25  26  27   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
val it : string = "OK"
app test
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 
0 6 12 18 1 7 13 19 2 8 14 20 3 9 15 21 4 10 16 22 5 11 17 23 
0 7 14 21 
0 7 14 21 
8 9 13 15 19 20 
13 19 8 20 9 15 
modify test
val it : unit = ()

  0   2   4   6   8  10 
 12   0  16  18  20  22 
 24  26   0  30  32  34 
 36  38  40   0  44  46 

  0   1   2   3   4   5 
  6   0  16  18  20  11 
 12  26   0  30  32  17 
 18  38  40   0  44  23 
modify RowMajor

  0   1   2   3   4   5 
  6   7   8   9  10  11 
 12  13  14  15  16  17 
 18  19  20  21  22  23 
modify ColMajor

  0   4   8  12  16  20 
  1   5   9  13  17  21 
  2   6  10  14  18  22 
  3   7  11  15  19  23 
fold test
val fold1 : int list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..]
val fold2 : int list = [0, 4, 8, 12, 1, 5, 9, 13, 2, 6, ..]
val fold3 : string = "OK"
val fold4 : string = "OK"
val fold5 : string = "OK"
val fold6 : int list = [0, 4, 8, 12, 1, 5, 9, 13, 2, 6, ..]
