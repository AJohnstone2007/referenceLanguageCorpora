val it : unit = ()
structure IO = struct ... end
structure BinPrimIO = struct ... end
structure OSPrimIO = struct ... end
structure TextIO = struct ... end
structure TextStreamIO = struct ... end
structure BinStreamIO = struct ... end
structure TextPrimIO = struct ... end
val it : unit = ()
datatype Result =
  CORRECT_EX |
  NO_EX |
  WRONG_EX of exn
val CORRECT_EX : Result
val NO_EX : Result
val WRONG_EX : exn -> Result
val test : unit -> {repeatTest: Result list, testGetPosStdErr: Result, testGetPosStdIn: Result, testGetPosStdOut: Result, testSetPosStdErr: Result, testSetPosStdIn: Result, testSetPosStdOut: Result, testStreamIO: {getPosStdIn: Result, getPosStdOut: Result}} = fn
val it : {repeatTest: Result list, testGetPosStdErr: Result, testGetPosStdIn: Result, testGetPosStdOut: Result, testSetPosStdErr: Result, testSetPosStdIn: Result, testSetPosStdOut: Result, testStreamIO: {getPosStdIn: Result, getPosStdOut: Result}} = {repeatTest=[CORRECT_EX, CORRECT_EX, CORRECT_EX, CORRECT_EX, CORRECT_EX, CORRECT_EX, CORRECT_EX, CORRECT_EX, CORRECT_EX, CORRECT_EX], testGetPosStdErr=CORRECT_EX, testGetPosStdIn=CORRECT_EX, testGetPosStdOut=CORRECT_EX, testSetPosStdErr=CORRECT_EX, testSetPosStdIn=CORRECT_EX, testSetPosStdOut=CORRECT_EX, testStreamIO={getPosStdIn=CORRECT_EX, getPosStdOut=CORRECT_EX}}
