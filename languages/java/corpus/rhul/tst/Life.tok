import ID . ID . * ; 
import ID . ID . * ; 
import ID . ID . ID ; 
import ID . ID . * ; 
import ID . ID . ID ; 

class ID 
{ 
private int ID ; 
private int ID = INTEGER ; 
int [ ] [ ] ID ; 
int [ ] [ ] ID ; 
boolean ID ; 
ID ID = new ID ( ) ; 

ID ( int ID , int ID , int ID , ID ID , boolean ID , boolean ID ) throws ID , ID 
{ 
ID = new int [ ID ] [ ID ] ; 
ID = new int [ ID ] [ ID ] ; 

this . ID = ID ; 
ID ( ID ) ; 
if ( ID ) 
ID ( ) ; 
this . ID = ID ; 
} 

private void ID ( ) 
{ 
for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
if ( ID . ID ( ) > REAL ) 
ID [ ID ] [ ID ] = INTEGER ; 
} 

private void ID ( ID ID ) throws ID , ID 
{ 
ID ID = new ID ( new ID ( ID ) ) ; 

for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
{ 
ID ID = ID . ID ( ) ; 
if ( ID == ID ) 
break ; 

for ( int ID = INTEGER ; ID < ID . ID ( ) && ID < ID [ ID ] . ID ; ID ++ ) 
if ( ID . ID ( ID ) == STRING_SQ ) 
ID [ ID ] [ ID ] = INTEGER ; 
} 
} 

private void ID ( ) 
{ 
ID . ID . ID ( STRING_DQ + ID ) ; 

for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
{ 
for ( int ID = INTEGER ; ID < ID [ ID ] . ID ; ID ++ ) 
ID . ID . ID ( ID [ ID ] [ ID ] > INTEGER ? STRING_SQ : STRING_SQ ) ; 

ID . ID . ID ( ) ; 
} 
} 

private int ID ( int ID , int ID ) 
{ 
int ID = INTEGER ; 

if ( ID [ ID - INTEGER ] [ ID + INTEGER ] != INTEGER ) ID ++ ; 
if ( ID [ ID - INTEGER ] [ ID ] != INTEGER ) ID ++ ; 
if ( ID [ ID - INTEGER ] [ ID - INTEGER ] != INTEGER ) ID ++ ; 
if ( ID [ ID + INTEGER ] [ ID + INTEGER ] != INTEGER ) ID ++ ; 
if ( ID [ ID + INTEGER ] [ ID ] != INTEGER ) ID ++ ; 
if ( ID [ ID + INTEGER ] [ ID - INTEGER ] != INTEGER ) ID ++ ; 
if ( ID [ ID ] [ ID - INTEGER ] != INTEGER ) ID ++ ; 
if ( ID [ ID ] [ ID + INTEGER ] != INTEGER ) ID ++ ; 

return ID ; 
} 

public int ID ( ) { return ID [ INTEGER ] . ID ; } 
public int ID ( ) { return ID . ID ; } 
public int ID ( ) { return ID ; } 
public int ID ( int ID , int ID ) { return ID [ ID ] [ ID ] ; } 

public void ID ( ID ID ) 
{ 
for ( int ID = INTEGER ; ID < ID . ID ; ID ++ ) 
ID [ ID ] = new int [ ID [ ID ] . ID ] ; 

while ( true ) 
{ 
if ( ID != INTEGER && ID > ID ) 
return ; 

for ( int ID = INTEGER ; ID < ID . ID - INTEGER ; ID ++ ) 
for ( int ID = INTEGER ; ID < ID [ ID ] . ID - INTEGER ; ID ++ ) 
{ 
int ID = ID ( ID , ID ) ; 

if ( ID [ ID ] [ ID ] == INTEGER ) 
{ 
if ( ID == INTEGER ) 
ID [ ID ] [ ID ] = ID ; 
else 
ID [ ID ] [ ID ] = ID [ ID ] [ ID ] ; 
} 
else 
{ 
if ( ID < INTEGER | ID > INTEGER ) 
ID [ ID ] [ ID ] = INTEGER ; 
else 
ID [ ID ] [ ID ] = ID [ ID ] [ ID ] ; 
} 
} 

int [ ] [ ] ID = ID ; 
ID = ID ; 
ID = ID ; 

ID . ID ( ) ; 
if ( ID ) 
ID ( ) ; 

ID ++ ; 
} 
} 
} 

class ID extends ID 
{ 
int ID ; 

public ID ( ID ID , int ID ) 
{ 
ID ( STRING_DQ ) ; 
this . ID = ID ; 
ID ( new ID ( ID , ID ) ) ; 
ID ( ID . ID ) ; 
ID ( ID . ID ( ) * ID , ID . ID ( ) * ID ) ; 
ID ( true ) ; 
} 
} 

class ID extends ID 
{ 
ID ID ; 
int ID ; 
ID ID [ ] = { ID . ID , ID . ID , ID . ID , ID . ID } ; 

ID ( ID ID , int ID ) { ID . ID = ID ; ID . ID = ID ; } 

protected void ID ( ID ID ) 
{ 
super . ID ( ID ) ; 

for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
for ( int ID = INTEGER ; ID < ID . ID ( ) ; ID ++ ) 
{ 
int ID = ID . ID ( ID , ID ) ; 

if ( ID > INTEGER ) 
{ 
ID ID = ID . ID ; 

if ( ID . ID ( ) - ID < ID . ID ) 
ID = ID [ ID . ID ( ) - ID ] ; 

ID . ID ( ID ) ; 
ID . ID ( ID * ID , ID * ID , ID , ID ) ; 
} 
} 
} 
} 

class ID 
{ 
private static void ID ( ) 
{ 
ID . ID . ID ( STRING_DQ ) ; 
ID . ID ( INTEGER ) ; 
} 

public static void ID ( ID [ ] ID ) throws ID , ID 
{ 
int ID = INTEGER ; 
int ID = INTEGER , ID = INTEGER , ID = INTEGER , ID = INTEGER ; 
ID ID ; 
boolean ID = false ; 
boolean ID = false ; 

ID . ID . ID ( STRING_DQ + ID . ID ) ; 
while ( ID < ID . ID && ID [ ID ] . ID ( INTEGER ) == STRING_SQ ) 
switch ( ID [ ID ] . ID ( INTEGER ) ) 
{ 
case STRING_SQ : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
case STRING_SQ : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
case STRING_SQ : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
case STRING_SQ : ID = ID . ID ( ID [ ID + INTEGER ] ) ; ID += INTEGER ; break ; 
case STRING_SQ : ID = ! ID ; ID += INTEGER ; break ; 
case STRING_SQ : ID = ! ID ; ID += INTEGER ; break ; 
default : ID ( ) ; 
} 
if ( ID == ID . ID ) 
ID ( ) ; 

ID = ID [ ID ] ; 

ID ID = new ID ( ID , ID , ID , ID , ID , ID ) ; 
ID ID = new ID ( ID , ID ) ; 
ID . ID ( ID ) ; 
} 
} 


