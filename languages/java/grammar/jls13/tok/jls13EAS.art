!start  CompilationUnit 

Identifier ::= 'ID'
TypeIdentifier ::= 'ID'


AnnotationIt ::= Annotation AnnotationIt | #
Iter1 ::= AnnotationIt  '[' ']' Iter1 | # 
TypeParameterModifierIt ::= TypeParameterModifier TypeParameterModifierIt | #
Iter2 ::= ',' TypeArgument Iter2 | #
ImportDeclarationIt ::= ImportDeclaration ImportDeclarationIt | #
TypeDeclarationIt ::= TypeDeclaration TypeDeclarationIt | #
PackageModifierIt ::= PackageModifier PackageModifierIt | #
Iter3 ::=   '.' Identifier Iter3 | #
ModuleDirectiveIt ::= ModuleDirective ModuleDirectiveIt | #
RequiresModifierIt ::= RequiresModifier RequiresModifierIt | #
Iter4 ::= ',' ModuleName Iter4 | #
Iter5 ::= ',' TypeName Iter5 | #
ClassModifierIt ::= ClassModifier ClassModifierIt | #
Iter6 ::= ',' TypeParameter Iter6 | #
Iter7 ::=   ',' InterfaceType Iter7 | #
ClassBodyDeclarationIt ::= ClassBodyDeclaration ClassBodyDeclarationIt | #
FieldModifierIt ::= FieldModifier FieldModifierIt | #
Iter8 ::= ',' VariableDeclarator Iter8 | #
MethodModifierIt ::= MethodModifier MethodModifierIt | #
Iter9 ::= ',' FormalParameter Iter9 | #
VariableModifierIt ::= VariableModifier VariableModifierIt | #
Iter10 ::=  ',' ExceptionType Iter10 | #
Iter11 ::=  ',' EnumConstant Iter11 | #
EnumConstantModifierIt ::= EnumConstantModifier EnumConstantModifierIt | #
InterfaceModifierIt ::= InterfaceModifier InterfaceModifierIt | #
InterfaceMemberDeclarationIt ::= InterfaceMemberDeclaration InterfaceMemberDeclarationIt | #
ConstantModifierIt ::= ConstantModifier ConstantModifierIt | #
InterfaceMethodModifierIt ::= InterfaceMethodModifier InterfaceMethodModifierIt | #
AnnotationTypeMemberDeclarationIt ::= AnnotationTypeMemberDeclaration
AnnotationTypeMemberDeclarationIt | #
AnnotationTypeElementModifierIt ::= AnnotationTypeElementModifier AnnotationTypeElementModifierIt | #
Iter12 ::= ',' ElementValuePair Iter12 | #
Iter13 ::= ',' ElementValue Iter13 | #
Iter14 ::= ',' VariableInitializer Iter14 | #
BlockStatementIt ::= BlockStatement BlockStatementIt | #
SwitchBlockStatementGroupIt ::= SwitchBlockStatementGroup SwitchBlockStatementGroupIt | #
SwitchLabelIt ::= SwitchLabel SwitchLabelIt | #
Iter15 ::= ',' StatementExpression Iter15 | #
CatchClauseIt ::= CatchClause CatchClauseIt | #
Iter16 ::= '|'  ClassType Iter16 | #
Iter17 ::= ';' Resource Iter17 | #
Iter18 ::= '[' ']' Iter18 | #
Iter19 ::= '.' AnnotationIt  Identifier Iter19 | #
Iter20 ::= ',' Expression Iter20 | #
DimExprIt ::= DimExpr DimExprIt | #
Iter21 ::= ',' LambdaParameter Iter21 | #
AdditionalBoundIt ::= AdditionalBound AdditionalBoundIt | #
ConstructorModifierIt ::= ConstructorModifier ConstructorModifierIt | #

TypeArgumentsOpt ::= TypeArguments | #
ArgumentListOpt ::= ArgumentList | #
commaOpt ::= ',' | #
ExpressionOpt ::= Expression | #
IdentifierOpt ::= Identifier | #
TypeBoundOpt ::= TypeBound | #
WildcardBoundsOpt ::= WildcardBounds | #
PackageDeclarationOpt ::= PackageDeclaration | #
Opt1 ::= 'open' | #
Opt2 ::= 'to' ModuleName Iter4  | #
TypeParametersOpt ::= TypeParameters | #
SuperclassOpt ::= Superclass | #
SuperinterfacesOpt ::= Superinterfaces | #
Opt3 ::= '=' VariableInitializer | #
DimsOpt ::= Dims | #
ThrowsOpt ::= Throws | #
Opt4 ::= ReceiverParameter ',' | #
FormalParameterListOpt ::= FormalParameterList | #
Opt5 ::= Identifier '.' | #
ExplicitConstructorInvocationOpt ::= ExplicitConstructorInvocation | #
BlockStatementsOpt ::= BlockStatements | #
EnumConstantListOpt ::= EnumConstantList | #
EnumBodyDeclarationsOpt ::= EnumBodyDeclarations | #
ClassBodyOpt ::= ClassBody | #
Opt6 ::= '(' ArgumentListOpt ')'  | #
ExtendsInterfacesOpt ::= ExtendsInterfaces | #
DefaultValueOpt ::= DefaultValue | #
ElementValuePairListOpt ::= ElementValuePairList | #
ElementValueListOpt ::= ElementValueList | #
VariableInitializerListOpt ::= VariableInitializerList | #
ForInitOpt ::= ForInit | #
ForUpdateOpt ::= ForUpdate | #
CatchesOpt ::= Catches | #
FinallyOpt ::= Finally | #
semiOpt ::= ';' | #
TypeArgumentsOrDiamondOpt ::= TypeArgumentsOrDiamond | #
LambdaParameterListOpt ::= LambdaParameterList | #


Literal::=
  IntegerLiteral |
  FloatingPointLiteral |
  BooleanLiteral |
  'CharacterLiteral' |
  StringLiteral |
  NullLiteral

IntegerLiteral ::= 'INTEGER'

FloatingPointLiteral ::= 'REAL'

BooleanLiteral ::= 'true' | 'false'

StringLiteral ::= 'STRING_SQ' | 'STRING_DQ'

NullLiteral ::= 'null'

Type::=
  PrimitiveType |
  ReferenceType

PrimitiveType::=
  AnnotationIt  NumericType |
  AnnotationIt  'boolean'

NumericType::=
  IntegralType |
  FloatingPointType

IntegralType::=
  'byte' |
  'short' |
  'int' |
  'long' |
  'char'

FloatingPointType::=
  'float' |
  'double'

ReferenceType::=
  ClassOrInterfaceType |
  TypeVariable |
  ArrayType

ClassOrInterfaceType::=
  ClassType |
  InterfaceType

ClassType::=
  AnnotationIt TypeIdentifier TypeArgumentsOpt  |
  PackageName '.' AnnotationIt  TypeIdentifier TypeArgumentsOpt  |
  ClassOrInterfaceType '.' AnnotationIt  TypeIdentifier TypeArgumentsOpt 

InterfaceType::=
  ClassType

TypeVariable::=
  AnnotationIt  TypeIdentifier

ArrayType::=
  PrimitiveType Dims |
  ClassOrInterfaceType Dims |
  TypeVariable Dims

Dims::=
  AnnotationIt  '[' ']'  Iter1 

TypeParameter::=
  TypeParameterModifierIt  TypeIdentifier TypeBoundOpt 

TypeParameterModifier::=
  Annotation

TypeBound::=
  'extends' TypeVariable |
  'extends' ClassOrInterfaceType AdditionalBoundIt 

AdditionalBound::=
  '&' InterfaceType

TypeArguments::=
  '<' TypeArgumentList '>'

TypeArgumentList::=
  TypeArgument Iter2

TypeArgument::=
  ReferenceType |
  Wildcard

Wildcard::=
  AnnotationIt  '?' WildcardBoundsOpt

WildcardBounds::=
  'extends' ReferenceType |
  'super' ReferenceType

ModuleName::=
  Identifier |
  ModuleName '.' Identifier

PackageName::=
  Identifier |
  PackageName '.' Identifier

TypeName::=
  TypeIdentifier |
  PackageOrTypeName '.' TypeIdentifier

ExpressionName::=
  Identifier |
  AmbiguousName '.' Identifier

MethodName::=
  Identifier

PackageOrTypeName::=
  Identifier |
  PackageOrTypeName '.' Identifier

AmbiguousName::=
  Identifier |
  AmbiguousName '.' Identifier

CompilationUnit::=
  OrdinaryCompilationUnit |
  ModularCompilationUnit

OrdinaryCompilationUnit::=
  PackageDeclarationOpt  ImportDeclarationIt  TypeDeclarationIt 

ModularCompilationUnit::=
  ImportDeclarationIt  ModuleDeclaration

PackageDeclaration::=
  PackageModifierIt 'package' Identifier Iter3  ';'

PackageModifier::=
  Annotation

ImportDeclaration::=
  SingleTypeImportDeclaration |
  TypeImportOnDemandDeclaration |
  SingleStaticImportDeclaration |
  StaticImportOnDemandDeclaration

SingleTypeImportDeclaration::=
  'import' TypeName ';'

TypeImportOnDemandDeclaration::=
  'import' PackageOrTypeName '.' '*' ';'

SingleStaticImportDeclaration::=
  'import' 'static' TypeName '.' Identifier ';'

StaticImportOnDemandDeclaration::=
  'import' 'static' TypeName '.' '*' ';'

TypeDeclaration::=
  ClassDeclaration |
  InterfaceDeclaration |
  ';'

ModuleDeclaration::=
  AnnotationIt  Opt1  'module' Identifier Iter3  '{'  ModuleDirectiveIt  '}' 

ModuleDirective::=
  'requires' RequiresModifierIt  ModuleName ';' |
  'exports' PackageName Opt2  ';' |
  'opens' PackageName Opt2  ';' |
  'uses' TypeName ';' |
  'provides' TypeName 'with' TypeName Iter5 ';'

RequiresModifier::=
  'transitive' |
  'static'

ClassDeclaration::=
  NormalClassDeclaration |
  EnumDeclaration

NormalClassDeclaration::=
  ClassModifierIt 'class' TypeIdentifier TypeParametersOpt  SuperclassOpt  SuperinterfacesOpt  ClassBody

ClassModifier::=
  Annotation |
  'public' |
  'protected' |
  'private' |
  'abstract' |
  'static' |
  'final' |
  'strictfp'

TypeParameters::=
  '<' TypeParameterList '>'

TypeParameterList::=
  TypeParameter Iter6 

Superclass::=
  'extends' ClassType

Superinterfaces::=
  'implements' InterfaceTypeList

InterfaceTypeList::=
  InterfaceType Iter7 

ClassBody::=
  '{'  ClassBodyDeclarationIt  '}' 

ClassBodyDeclaration::=
  ClassMemberDeclaration |
  InstanceInitializer |
  StaticInitializer |
  ConstructorDeclaration

ClassMemberDeclaration::=
  FieldDeclaration |
  MethodDeclaration |
  ClassDeclaration |
  InterfaceDeclaration |
  ';'

FieldDeclaration::=
  FieldModifierIt UnannType VariableDeclaratorList ';'

FieldModifier::=
  Annotation |
  'public' |
  'protected' |
  'private' |
  'static' |
  'final' |
  'transient' |
  'volatile'

VariableDeclaratorList::=
  VariableDeclarator Iter8 

VariableDeclarator::=
  VariableDeclaratorId Opt3

VariableDeclaratorId::=
  Identifier DimsOpt

VariableInitializer::=
  Expression |
  ArrayInitializer

UnannType::=
  UnannPrimitiveType |
  UnannReferenceType

UnannPrimitiveType::=
  NumericType |
  'boolean'

UnannReferenceType::=
  UnannClassOrInterfaceType |
  UnannTypeVariable |
  UnannArrayType

UnannClassOrInterfaceType::=
  UnannClassType |
  UnannInterfaceType

UnannClassType::=
  TypeIdentifier TypeArgumentsOpt  |
  PackageName '.' AnnotationIt  TypeIdentifier TypeArgumentsOpt  |
  UnannClassOrInterfaceType '.'  AnnotationIt  TypeIdentifier TypeArgumentsOpt 

UnannInterfaceType::=
  UnannClassType

UnannTypeVariable::=
  TypeIdentifier

UnannArrayType::=
  UnannPrimitiveType Dims |
  UnannClassOrInterfaceType Dims |
  UnannTypeVariable Dims

MethodDeclaration::=
  MethodModifierIt  MethodHeader MethodBody

MethodModifier::=
  Annotation |
  'public' |
  'protected' |
  'private' |
  'abstract' |
  'static' |
  'final' |
  'synchronized' |
  'native' |
  'strictfp'

MethodHeader::=
  Result MethodDeclarator ThrowsOpt  |
  TypeParameters AnnotationIt  Result MethodDeclarator ThrowsOpt

Result::=
  UnannType |
  'void'

MethodDeclarator::=
  Identifier '('  Opt4  FormalParameterListOpt  ')' DimsOpt

ReceiverParameter::=
  AnnotationIt  UnannType Opt5  'this'

FormalParameterList::=
  FormalParameter Iter9 

FormalParameter::=
  VariableModifierIt  UnannType VariableDeclaratorId |
  VariableArityParameter

VariableArityParameter::=
  VariableModifierIt  UnannType AnnotationIt  '...' Identifier

VariableModifier::=
  Annotation |
  'final'

Throws::=
  'throws' ExceptionTypeList

ExceptionTypeList::=
  ExceptionType Iter10 

ExceptionType::=
  ClassType |
  TypeVariable

MethodBody::=
  Block |
  ';'

InstanceInitializer::=
  Block

StaticInitializer::=
  'static' Block

ConstructorDeclaration::=
  ConstructorModifierIt  ConstructorDeclarator ThrowsOpt  ConstructorBody

ConstructorModifier::=
  Annotation |
  'public' |
  'protected' |
  'private'

ConstructorDeclarator::=
  TypeParametersOpt  SimpleTypeName '(' Opt4  FormalParameterListOpt  ')' 

SimpleTypeName::=
  TypeIdentifier

ConstructorBody::=
  '{'  ExplicitConstructorInvocationOpt BlockStatementsOpt  '}' 

ExplicitConstructorInvocation::=
  TypeArgumentsOpt  'this' '('  ArgumentListOpt  ')'  ';' |
  TypeArgumentsOpt 'super' '('  ArgumentListOpt  ')'  ';' |
  ExpressionName '.' TypeArgumentsOpt  'super' '('  ArgumentListOpt ')'  ';' |
  Primary '.' TypeArgumentsOpt  'super' '(' ArgumentListOpt ')'  ';'

EnumDeclaration::=
  ClassModifierIt  'enum' TypeIdentifier SuperinterfacesOpt  EnumBody

EnumBody::=
  '{'  EnumConstantListOpt  commaOpt  EnumBodyDeclarationsOpt  '}' 

EnumConstantList::=
  EnumConstant Iter11 

EnumConstant::=
  EnumConstantModifierIt  Identifier Opt6  ClassBodyOpt

EnumConstantModifier::=
  Annotation

EnumBodyDeclarations::=
  ';' ClassBodyDeclarationIt 

InterfaceDeclaration::=
  NormalInterfaceDeclaration |
  AnnotationTypeDeclaration

NormalInterfaceDeclaration::=
  InterfaceModifierIt  'interface' TypeIdentifier TypeParametersOpt  ExtendsInterfacesOpt InterfaceBody

InterfaceModifier::=
  Annotation |
  'public' |
  'protected' |
  'private' |
  'abstract' |
  'static' |
  'strictfp'

ExtendsInterfaces::=
  'extends' InterfaceTypeList

InterfaceBody::=
  '{' InterfaceMemberDeclarationIt  '}' 

InterfaceMemberDeclaration::=
  ConstantDeclaration |
  InterfaceMethodDeclaration |
  ClassDeclaration |
  InterfaceDeclaration |
  ';'

ConstantDeclaration::=
  ConstantModifierIt  UnannType VariableDeclaratorList ';'

ConstantModifier::=
  Annotation |
  'public' |
  'static' |
  'final'

InterfaceMethodDeclaration::=
  InterfaceMethodModifierIt  MethodHeader MethodBody

InterfaceMethodModifier::=
  Annotation |
  'public' |
  'private' |
  'abstract' |
  'default' |
  'static' |
  'strictfp'

AnnotationTypeDeclaration::=
  InterfaceModifierIt  '@' 'interface' TypeIdentifier AnnotationTypeBody

AnnotationTypeBody::=
  '{'  AnnotationTypeMemberDeclarationIt  '}' 

AnnotationTypeMemberDeclaration::=
  AnnotationTypeElementDeclaration |
  ConstantDeclaration |
  ClassDeclaration |
  InterfaceDeclaration |
  ';'

AnnotationTypeElementDeclaration::=
  AnnotationTypeElementModifierIt  UnannType Identifier '(' ')'  DimsOpt DefaultValueOpt ';'

AnnotationTypeElementModifier::=
  Annotation |
  'public' |
  'abstract'

DefaultValue::=
  'default' ElementValue

Annotation::=
  NormalAnnotation |
  MarkerAnnotation |
  SingleElementAnnotation

NormalAnnotation::=
  '@' TypeName '(' ElementValuePairListOpt ')' 

ElementValuePairList::=
  ElementValuePair Iter12 

ElementValuePair::=
  Identifier '=' ElementValue

ElementValue::=
  ConditionalExpression |
  ElementValueArrayInitializer |
  Annotation

ElementValueArrayInitializer::=
  '{' ElementValueListOpt  commaOpt  '}' 

ElementValueList::=
  ElementValue Iter13 

MarkerAnnotation::=
  '@' TypeName

SingleElementAnnotation::=
  '@' TypeName '('  ElementValue ')' 

ArrayInitializer::=
  '{' VariableInitializerListOpt commaOpt  '}'

VariableInitializerList::=
  VariableInitializer Iter14 

Block::=
  '{'  BlockStatementsOpt '}' 

BlockStatements::=
  BlockStatement BlockStatementIt 

BlockStatement::=
  LocalVariableDeclarationStatement |
  ClassDeclaration |
  Statement

LocalVariableDeclarationStatement::=
  LocalVariableDeclaration ';'

LocalVariableDeclaration::=
  VariableModifierIt  LocalVariableType VariableDeclaratorList

LocalVariableType::=
  UnannType |
  'var'

Statement::=
  StatementWithoutTrailingSubstatement |
  LabeledStatement |
  IfThenStatement |
  IfThenElseStatement |
  WhileStatement |
  ForStatement

StatementNoShortIf::=
  StatementWithoutTrailingSubstatement |
  LabeledStatementNoShortIf |
  IfThenElseStatementNoShortIf |
  WhileStatementNoShortIf |
  ForStatementNoShortIf

StatementWithoutTrailingSubstatement::=
  Block |
  EmptyStatement |
  ExpressionStatement |
  AssertStatement |
  SwitchStatement |
  DoStatement |
  BreakStatement |
  ContinueStatement |
  ReturnStatement |
  SynchronizedStatement |
  ThrowStatement |
  TryStatement

EmptyStatement::=
  ';'

LabeledStatement::=
  Identifier ':' Statement

LabeledStatementNoShortIf::=
  Identifier ':' StatementNoShortIf

ExpressionStatement::=
  StatementExpression ';'

StatementExpression::=
  Assignment |
  PreIncrementExpression |
  PreDecrementExpression |
  PostIncrementExpression |
  PostDecrementExpression |
  MethodInvocation |
  ClassInstanceCreationExpression

IfThenStatement::=
  'if' '('  Expression ')'  Statement

IfThenElseStatement::=
  'if' '('  Expression ')'  StatementNoShortIf 'else' Statement

IfThenElseStatementNoShortIf::=
  'if' '('  Expression ')'  StatementNoShortIf 'else' StatementNoShortIf

AssertStatement::=
  'assert' Expression ';' |
  'assert' Expression ':' Expression ';'

SwitchStatement::=
  'switch' '('  Expression ')'  SwitchBlock

SwitchBlock::=
  '{' SwitchBlockStatementGroupIt  SwitchLabelIt  '}' 

SwitchBlockStatementGroup::=
  SwitchLabels BlockStatements

SwitchLabels::=
  SwitchLabel SwitchLabelIt 

SwitchLabel::=
  'case' ConstantExpression ':' |
  'case' EnumConstantName ':' |
  'default' ':'

EnumConstantName::=
  Identifier

WhileStatement::=
  'while' '('  Expression ')'  Statement

WhileStatementNoShortIf::=
  'while' '('  Expression ')'  StatementNoShortIf

DoStatement::=
  'do' Statement 'while' '('  Expression ')'  ';'

ForStatement::=
  BasicForStatement |
  EnhancedForStatement

ForStatementNoShortIf::=
  BasicForStatementNoShortIf |
  EnhancedForStatementNoShortIf

BasicForStatement::=
  'for' '('  ForInitOpt  ';' ExpressionOpt  ';' ForUpdateOpt ')'  Statement

BasicForStatementNoShortIf::=
  'for' '('  ForInitOpt  ';' ExpressionOpt  ';' ForUpdateOpt ')'  StatementNoShortIf

ForInit::=
  StatementExpressionList |
  LocalVariableDeclaration

ForUpdate::=
  StatementExpressionList

StatementExpressionList::=
  StatementExpression Iter15 

EnhancedForStatement::=
  'for' '('  VariableModifierIt  LocalVariableType VariableDeclaratorId ':' Expression ')'  Statement

EnhancedForStatementNoShortIf::=
  'for' '('  VariableModifierIt  LocalVariableType VariableDeclaratorId ':' Expression ')'  StatementNoShortIf

BreakStatement::=
  'break' IdentifierOpt  ';'

ContinueStatement::=
  'continue' IdentifierOpt  ';'

ReturnStatement::=
  'return' ExpressionOpt ';'

ThrowStatement::=
  'throw' Expression ';'

SynchronizedStatement::=
  'synchronized' '('  Expression ')'  Block

TryStatement::=
  'try' Block Catches |
  'try' Block CatchesOpt Finally |
  TryWithResourcesStatement

Catches::=
  CatchClause CatchClauseIt 

CatchClause::=
  'catch' '('  CatchFormalParameter ')'  Block

CatchFormalParameter::=
  VariableModifierIt  CatchType VariableDeclaratorId

CatchType::=
  UnannClassType Iter16 

Finally::=
  'finally' Block

TryWithResourcesStatement::=
  'try' ResourceSpecification Block CatchesOpt FinallyOpt

ResourceSpecification::=
  '('  ResourceList semiOpt ')' 

ResourceList::=
  Resource Iter17 

Resource::=
  VariableModifierIt  LocalVariableType Identifier '=' Expression |
  'VariableAccess'

Primary::=
  PrimaryNoNewArray |
  ArrayCreationExpression

PrimaryNoNewArray::=
  Literal |
  ClassLiteral |
  'this' |
  TypeName '.' 'this' |
  '('  Expression ')'  |
  ClassInstanceCreationExpression |
  FieldAccess |
  ArrayAccess |
  MethodInvocation |
  MethodReference

ClassLiteral::=
  TypeName Iter18 '.' 'class' |
  NumericType Iter18  '.' 'class' |
  'boolean' Iter18  '.' 'class' |
  'void' '.' 'class'

ClassInstanceCreationExpression::=
  UnqualifiedClassInstanceCreationExpression |
  ExpressionName '.' UnqualifiedClassInstanceCreationExpression |
  Primary '.' UnqualifiedClassInstanceCreationExpression

UnqualifiedClassInstanceCreationExpression::=
  'new' TypeArgumentsOpt  ClassOrInterfaceTypeToInstantiate '('  ArgumentListOpt ')'  ClassBodyOpt

ClassOrInterfaceTypeToInstantiate::=
  AnnotationIt  Identifier Iter19  TypeArgumentsOrDiamondOpt

TypeArgumentsOrDiamond::=
  TypeArguments |
  '<' '>'

FieldAccess::=
  Primary '.' Identifier |
  'super' '.' Identifier |
  TypeName '.' 'super' '.' Identifier

ArrayAccess::=
  ExpressionName '[' Expression ']'  |
  PrimaryNoNewArray '[' Expression ']' 

MethodInvocation::=
  MethodName '(' ArgumentListOpt ')'  |
  TypeName '.' TypeArgumentsOpt Identifier '(' ArgumentListOpt ')'  |
  ExpressionName '.' TypeArgumentsOpt Identifier '(' ArgumentListOpt ')'  |
  Primary '.' TypeArgumentsOpt Identifier '('  ArgumentListOpt ')'  |
  'super' '.' TypeArgumentsOpt Identifier '('  ArgumentListOpt ')'  |
  TypeName '.' 'super' '.' TypeArgumentsOpt Identifier '(' ArgumentListOpt ')' 

ArgumentList::=
  Expression Iter20 

MethodReference::=
  ExpressionName '::' TypeArgumentsOpt Identifier |
  Primary '::' TypeArgumentsOpt Identifier |
  ReferenceType '::' TypeArgumentsOpt Identifier |
  'super' '::' TypeArgumentsOpt Identifier |
  TypeName '.' 'super' '::' TypeArgumentsOpt Identifier |
  ClassType '::' TypeArgumentsOpt 'new' |
  ArrayType '::' 'new'

ArrayCreationExpression::=
  'new' PrimitiveType DimExprs DimsOpt  |
  'new' ClassOrInterfaceType DimExprs DimsOpt  |
  'new' PrimitiveType Dims ArrayInitializer |
  'new' ClassOrInterfaceType Dims ArrayInitializer

DimExprs::=
  DimExpr DimExprIt 

DimExpr::=
  AnnotationIt  '[' Expression ']' 

Expression::=
  LambdaExpression |
  AssignmentExpression

LambdaExpression::=
  LambdaParameters '->' LambdaBody

LambdaParameters::=
  '(' LambdaParameterListOpt ')'  |
  Identifier

LambdaParameterList::=
  LambdaParameter Iter21  |
  Identifier Iter3 

LambdaParameter::=
  VariableModifierIt  LambdaParameterType VariableDeclaratorId |
  VariableArityParameter

LambdaParameterType::=
  UnannType |
  'var'

LambdaBody::=
  Expression |
  Block

AssignmentExpression::=
  ConditionalExpression |
  Assignment

Assignment::=
  LeftHandSide AssignmentOperator Expression

LeftHandSide::=
  ExpressionName |
  FieldAccess |
  ArrayAccess

AssignmentOperator::=
  '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' |
  '>>>=' | '&=' | '^=' | '|='

ConditionalExpression::=
  ConditionalOrExpression |
  ConditionalOrExpression '?' Expression ':' ConditionalExpression |
  ConditionalOrExpression '?' Expression ':' LambdaExpression

ConditionalOrExpression::=
  ConditionalAndExpression |
  ConditionalOrExpression '||' ConditionalAndExpression

ConditionalAndExpression::=
  InclusiveOrExpression |
  ConditionalAndExpression '&&' InclusiveOrExpression

InclusiveOrExpression::=
  ExclusiveOrExpression |
  InclusiveOrExpression '|'  ExclusiveOrExpression

ExclusiveOrExpression::=
  AndExpression |
  ExclusiveOrExpression '^' AndExpression

AndExpression::=
  EqualityExpression |
  AndExpression '&' EqualityExpression

EqualityExpression::=
  RelationalExpression |
  EqualityExpression '==' RelationalExpression |
  EqualityExpression '!=' RelationalExpression

RelationalExpression::=
  ShiftExpression |
  RelationalExpression '<' ShiftExpression |
  RelationalExpression '>' ShiftExpression |
  RelationalExpression '<=' ShiftExpression |
  RelationalExpression '>=' ShiftExpression |
  RelationalExpression 'instanceof' ReferenceType

ShiftExpression::=
  AdditiveExpression |
  ShiftExpression '<<' AdditiveExpression |
  ShiftExpression '>>' AdditiveExpression |
  ShiftExpression '>>>' AdditiveExpression

AdditiveExpression::=
  MultiplicativeExpression |
  AdditiveExpression '+' MultiplicativeExpression |
  AdditiveExpression '-' MultiplicativeExpression

MultiplicativeExpression::=
  UnaryExpression |
  MultiplicativeExpression '*' UnaryExpression |
  MultiplicativeExpression '/' UnaryExpression |
  MultiplicativeExpression '%' UnaryExpression

UnaryExpression::=
  PreIncrementExpression |
  PreDecrementExpression |
  '+' UnaryExpression |
  '-' UnaryExpression |
  UnaryExpressionNotPlusMinus

PreIncrementExpression::=
  '++' UnaryExpression

PreDecrementExpression::=
  '--' UnaryExpression

UnaryExpressionNotPlusMinus::=
  PostfixExpression |
  '~' UnaryExpression |
  '!' UnaryExpression |
  CastExpression

PostfixExpression::=
  Primary |
  ExpressionName |
  PostIncrementExpression |
  PostDecrementExpression

PostIncrementExpression::=
  PostfixExpression '++'

PostDecrementExpression::=
  PostfixExpression '--'

CastExpression::=
  '('  PrimitiveType ')'  UnaryExpression |
  '('  ReferenceType AdditionalBoundIt  ')'  UnaryExpressionNotPlusMinus |
  '('  ReferenceType AdditionalBoundIt  ')'  LambdaExpression

ConstantExpression::=
  Expression

