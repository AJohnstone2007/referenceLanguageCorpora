import uk.ac.rhul.cs.csle.art.old.v4.core.ARTUncheckedException;
import java.io.FileNotFoundException;
import uk.ac.rhul.cs.csle.art.old.v3.alg.gll.support.*;
import uk.ac.rhul.cs.csle.art.old.v3.lex.*;
import uk.ac.rhul.cs.csle.art.old.v3.manager.*;
import uk.ac.rhul.cs.csle.art.old.v3.manager.grammar.*;
import uk.ac.rhul.cs.csle.art.old.v3.manager.mode.*;
import uk.ac.rhul.cs.csle.art.old.v4.util.text.*;
import uk.ac.rhul.cs.csle.art.term.*;
import uk.ac.rhul.cs.csle.art.old.v4.util.bitset.ARTBitSet;
/*******************************************************************************
*
* ARTGeneratedParser.java
*
*******************************************************************************/
@SuppressWarnings("fallthrough") public class ARTGeneratedParser extends ARTGLLParserHashPool {
private static boolean[] ARTSet1;
private static boolean[] ARTSet2;
private static boolean[] ARTSet3;
private static boolean[] ARTSet4;
private static boolean[] ARTSet5;
private static boolean[] ARTSet6;
private static boolean[] ARTSet7;
private static boolean[] ARTSet8;
private static boolean[] ARTSet9;
private static boolean[] ARTSet10;
private static boolean[] ARTSet11;
private static boolean[] ARTSet12;
private static boolean[] ARTSet13;
private static boolean[] ARTSet14;
private static boolean[] ARTSet15;
private static boolean[] ARTSet16;
private static boolean[] ARTSet17;
private static boolean[] ARTSet18;
private static boolean[] ARTSet19;
private static boolean[] ARTSet20;
private static boolean[] ARTSet21;
private static boolean[] ARTSet22;
private static boolean[] ARTSet23;
private static boolean[] ARTSet24;
private static boolean[] ARTSet25;
private static boolean[] ARTSet26;
private static boolean[] ARTSet27;
private static boolean[] ARTSet28;
private static boolean[] ARTSet29;
private static boolean[] ARTSet30;
private static boolean[] ARTSet31;
private static boolean[] ARTSet32;
private static boolean[] ARTSet33;
private static boolean[] ARTSet34;
private static boolean[] ARTSet35;
private static boolean[] ARTSet36;
private static boolean[] ARTSet37;
private static boolean[] ARTSet38;
private static boolean[] ARTSet39;
private static boolean[] ARTSet40;
private static boolean[] ARTSet41;
private static boolean[] ARTSet42;
private static boolean[] ARTSet43;
private static boolean[] ARTSet44;
private static boolean[] ARTSet45;
private static boolean[] ARTSet46;
private static boolean[] ARTSet47;
private static boolean[] ARTSet48;
private static boolean[] ARTSet49;
private static boolean[] ARTSet50;
private static boolean[] ARTSet51;
private static boolean[] ARTSet52;
private static boolean[] ARTSet53;
private static boolean[] ARTSet54;
private static boolean[] ARTSet55;
private static boolean[] ARTSet56;
private static boolean[] ARTSet57;
private static boolean[] ARTSet58;
private static boolean[] ARTSet59;
private static boolean[] ARTSet60;
private static boolean[] ARTSet61;
private static boolean[] ARTSet62;
private static boolean[] ARTSet63;
private static boolean[] ARTSet64;
private static boolean[] ARTSet65;
private static boolean[] ARTSet66;
private static boolean[] ARTSet67;
private static boolean[] ARTSet68;
private static boolean[] ARTSet69;
private static boolean[] ARTSet70;
private static boolean[] ARTSet71;
private static boolean[] ARTSet72;
private static boolean[] ARTSet73;
private static boolean[] ARTSet74;
private static boolean[] ARTSet75;
private static boolean[] ARTSet76;
private static boolean[] ARTSet77;
private static boolean[] ARTSet78;
private static boolean[] ARTSet79;
private static boolean[] ARTSet80;
private static boolean[] ARTSet81;
private static boolean[] ARTSet82;
private static boolean[] ARTSet83;
private static boolean[] ARTSet84;
private static boolean[] ARTSet85;
private static boolean[] ARTSet86;
private static boolean[] ARTSet87;
private static boolean[] ARTSet88;
private static boolean[] ARTSet89;
private static boolean[] ARTSet90;
private static boolean[] ARTSet91;
private static boolean[] ARTSet92;
private static boolean[] ARTSet93;
private static boolean[] ARTSet94;
private static boolean[] ARTSet95;
private static boolean[] ARTSet96;
private static boolean[] ARTSet97;
private static boolean[] ARTSet98;
private static boolean[] ARTSet99;
private static boolean[] ARTSet100;
private static boolean[] ARTSet101;
private static boolean[] ARTSet102;
private static boolean[] ARTSet103;
private static boolean[] ARTSet104;
private static boolean[] ARTSet105;
private static boolean[] ARTSet106;
private static boolean[] ARTSet107;
private static boolean[] ARTSet108;
private static boolean[] ARTSet109;
private static boolean[] ARTSet110;
private static boolean[] ARTSet111;
private static boolean[] ARTSet112;
private static boolean[] ARTSet113;
private static boolean[] ARTSet114;
private static boolean[] ARTSet115;
private static boolean[] ARTSet116;
private static boolean[] ARTSet117;
private static boolean[] ARTSet118;
private static boolean[] ARTSet119;
private static boolean[] ARTSet120;
private static boolean[] ARTSet121;
private static boolean[] ARTSet122;
private static boolean[] ARTSet123;
private static boolean[] ARTSet124;
private static boolean[] ARTSet125;
private static boolean[] ARTSet126;
private static boolean[] ARTSet127;
private static boolean[] ARTSet128;
private static boolean[] ARTSet129;
private static boolean[] ARTSet130;
private static boolean[] ARTSet131;
private static boolean[] ARTSet132;
private static boolean[] ARTSet133;
private static boolean[] ARTSet134;
private static boolean[] ARTSet135;
private static boolean[] ARTSet136;
private static boolean[] ARTSet137;
private static boolean[] ARTSet138;
private static boolean[] ARTSet139;
private static boolean[] ARTSet140;
private static boolean[] ARTSet141;
private static boolean[] ARTSet142;
private static boolean[] ARTSet143;
private static boolean[] ARTSet144;
private static boolean[] ARTSet145;
private static boolean[] ARTSet146;
private static boolean[] ARTSet147;
private static boolean[] ARTSet148;
private static boolean[] ARTSet149;
private static boolean[] ARTSet150;
private static boolean[] ARTSet151;
private static boolean[] ARTSet152;
private static boolean[] ARTSet153;
private static boolean[] ARTSet154;
private static boolean[] ARTSet155;
private static boolean[] ARTSet156;
private static boolean[] ARTSet157;
private static boolean[] ARTSet158;
private static boolean[] ARTSet159;
private static boolean[] ARTSet160;
private static boolean[] ARTSet161;
private static boolean[] ARTSet162;
private static boolean[] ARTSet163;
private static boolean[] ARTSet164;
private static boolean[] ARTSet165;
private static boolean[] ARTSet166;
private static boolean[] ARTSet167;
private static boolean[] ARTSet168;
private static boolean[] ARTSet169;
private static boolean[] ARTSet170;
private static boolean[] ARTSet171;
private static boolean[] ARTSet172;
private static boolean[] ARTSet173;
private static boolean[] ARTSet174;
private static boolean[] ARTSet175;
private static boolean[] ARTSet176;
private static boolean[] ARTSet177;
private static boolean[] ARTSet178;
private static boolean[] ARTSet179;
private static boolean[] ARTSet180;
private static boolean[] ARTSet181;
private static boolean[] ARTSet182;
private static boolean[] ARTSet183;
private static boolean[] ARTSet184;
private static boolean[] ARTSet185;
private static boolean[] ARTSet186;
private static boolean[] ARTSet187;
private static boolean[] ARTSet188;
private static boolean[] ARTSet189;
private static boolean[] ARTSet190;
private static boolean[] ARTSet191;
private static boolean[] ARTSet192;
private static boolean[] ARTSet193;
private static boolean[] ARTSet194;
private static boolean[] ARTSet195;
private static boolean[] ARTSet196;
private static boolean[] ARTSet197;
private static boolean[] ARTSet198;
private static boolean[] ARTSet199;
private static boolean[] ARTSet200;
private static boolean[] ARTSet201;
private static boolean[] ARTSet202;
private static boolean[] ARTSet203;
private static boolean[] ARTSet204;
private static boolean[] ARTSet205;
private static boolean[] ARTSet206;
private static boolean[] ARTSet207;
private static boolean[] ARTSet208;
private static boolean[] ARTSet209;
private static boolean[] ARTSet210;
private static boolean[] ARTSet211;
private static boolean[] ARTSet212;
private static boolean[] ARTSet213;
private static boolean[] ARTSet214;
private static boolean[] ARTSet215;
private static boolean[] ARTSet216;
private static boolean[] ARTSet217;
private static boolean[] ARTSet218;
private static boolean[] ARTSet219;
private static boolean[] ARTSet220;
private static boolean[] ARTSet221;
private static boolean[] ARTSet222;
private static boolean[] ARTSet223;
private static boolean[] ARTSet224;
private static boolean[] ARTSet225;
private static boolean[] ARTSet226;
private static boolean[] ARTSet227;
private static boolean[] ARTSet228;
private static boolean[] ARTSet229;
private static boolean[] ARTSet230;
private static boolean[] ARTSet231;
private static boolean[] ARTSet232;
private static boolean[] ARTSet233;
private static boolean[] ARTSet234;
private static boolean[] ARTSet235;
private static boolean[] ARTSet236;
private static boolean[] ARTSet237;
private static boolean[] ARTSet238;
private static boolean[] ARTSet239;
private static boolean[] ARTSet240;
private static boolean[] ARTSet241;
private static boolean[] ARTSet242;
private static boolean[] ARTSet243;
private static boolean[] ARTSet244;
private static boolean[] ARTSet245;
private static boolean[] ARTSet246;
private static boolean[] ARTSet247;
private static boolean[] ARTSet248;
private static boolean[] ARTSet249;
private static boolean[] ARTSet250;
private static boolean[] ARTSet251;
private static boolean[] ARTSet252;
private static boolean[] ARTSet253;
private static boolean[] ARTSet254;
private static boolean[] ARTSet255;
private static boolean[] ARTSet256;
private static boolean[] ARTSet257;
private static boolean[] ARTSet258;
private static boolean[] ARTSet259;
private static boolean[] ARTSet260;
private static boolean[] ARTSet261;
private static boolean[] ARTSet262;
private static boolean[] ARTSet263;
private static boolean[] ARTSet264;
private static boolean[] ARTSet265;
private static boolean[] ARTSet266;
private static boolean[] ARTSet267;
private static boolean[] ARTSet268;
private static boolean[] ARTSet269;
private static boolean[] ARTSet270;
private static boolean[] ARTSet271;
private static boolean[] ARTSet272;
private static boolean[] ARTSet273;
private static boolean[] ARTSet274;
private static boolean[] ARTSet275;
private static boolean[] ARTSet276;
private static boolean[] ARTSet277;
private static boolean[] ARTSet278;
private static boolean[] ARTSet279;
private static boolean[] ARTSet280;
private static boolean[] ARTSet281;
private static boolean[] ARTSet282;
private static boolean[] ARTSet283;
private static boolean[] ARTSet284;
private static boolean[] ARTSet285;
private static boolean[] ARTSet286;
private static boolean[] ARTSet287;
private static boolean[] ARTSet288;
private static boolean[] ARTSet289;
private static boolean[] ARTSet290;
private static boolean[] ARTSet291;
private static boolean[] ARTSet292;
private static boolean[] ARTSet293;
private static boolean[] ARTSet294;
private static boolean[] ARTSet295;
private static boolean[] ARTSet296;
private static boolean[] ARTSet297;
private static boolean[] ARTSet298;
private static boolean[] ARTSet299;
private static boolean[] ARTSet300;
private static boolean[] ARTSet301;
private static boolean[] ARTSet302;
private static boolean[] ARTSet303;
private static boolean[] ARTSet304;
private static boolean[] ARTSet305;
private static boolean[] ARTSet306;
private static boolean[] ARTSet307;
private static boolean[] ARTSet308;
private static boolean[] ARTSet309;
private static boolean[] ARTSet310;
private static boolean[] ARTSet311;
private static boolean[] ARTSet312;
private static boolean[] ARTSet313;
private static boolean[] ARTSet314;
private static boolean[] ARTSet315;
private static boolean[] ARTSet316;
private static boolean[] ARTSet317;
private static boolean[] ARTSet318;
private static boolean[] ARTSet319;
private static boolean[] ARTSet320;
private static boolean[] ARTSet321;
private static boolean[] ARTSet322;
private static boolean[] ARTSet323;
private static boolean[] ARTSet324;
private static boolean[] ARTSet325;
private static boolean[] ARTSet326;
private static boolean[] ARTSet327;
private static boolean[] ARTSet328;
private static boolean[] ARTSet329;
private static boolean[] ARTSet330;
private static boolean[] ARTSet331;
private static boolean[] ARTSet332;
private static boolean[] ARTSet333;
private static boolean[] ARTSet334;
private static boolean[] ARTSet335;
private static boolean[] ARTSet336;
private static boolean[] ARTSet337;
private static boolean[] ARTSet338;
private static boolean[] ARTSet339;
private static boolean[] ARTSet340;
private static boolean[] ARTSet341;
private static boolean[] ARTSet342;
private static boolean[] ARTSet343;
private static boolean[] ARTSet344;
private static boolean[] ARTSet345;
private static boolean[] ARTSet346;
private static boolean[] ARTSet347;
private static boolean[] ARTSet348;
private static boolean[] ARTSet349;
private static boolean[] ARTSet350;
private static boolean[] ARTSet351;
private static boolean[] ARTSet352;
private static boolean[] ARTSet353;
private static boolean[] ARTSet354;
private static boolean[] ARTSet355;
private static boolean[] ARTSet356;
private static boolean[] ARTSet357;
private static boolean[] ARTSet358;
private static boolean[] ARTSet359;
private static boolean[] ARTSet360;
private static boolean[] ARTSet361;
private static boolean[] ARTSet362;
private static boolean[] ARTSet363;
private static boolean[] ARTSet364;
private static boolean[] ARTSet365;
private static boolean[] ARTSet366;
private static boolean[] ARTSet367;
private static boolean[] ARTSet368;
private static boolean[] ARTSet369;
private static boolean[] ARTSet370;
private static boolean[] ARTSet371;
private static boolean[] ARTSet372;
private static boolean[] ARTSet373;
private static boolean[] ARTSet374;
private static boolean[] ARTSet375;
private static boolean[] ARTSet376;
private static boolean[] ARTSet377;
private static boolean[] ARTSet378;
private static boolean[] ARTSet379;
private static boolean[] ARTSet380;
private static boolean[] ARTSet381;
private static boolean[] ARTSet382;
private static boolean[] ARTSet383;
private static boolean[] ARTSet384;
private static boolean[] ARTSet385;
private static boolean[] ARTSet386;
private static boolean[] ARTSet387;
private static boolean[] ARTSet388;
private static boolean[] ARTSet389;
private static boolean[] ARTSet390;
private static boolean[] ARTSet391;
private static boolean[] ARTSet392;
private static boolean[] ARTSet393;
private static boolean[] ARTSet394;
private static boolean[] ARTSet395;
private static boolean[] ARTSet396;
private static boolean[] ARTSet397;
private static boolean[] ARTSet398;
private static boolean[] ARTSet399;
private static boolean[] ARTSet400;
private static boolean[] ARTSet401;
private static boolean[] ARTSet402;
private static boolean[] ARTSet403;
private static boolean[] ARTSet404;
private static boolean[] ARTSet405;
private static boolean[] ARTSet406;
private static boolean[] ARTSet407;
private static boolean[] ARTSet408;
private static boolean[] ARTSet409;
private static boolean[] ARTSet410;
private static boolean[] ARTSet411;
private static boolean[] ARTSet412;
private static boolean[] ARTSet413;
private static boolean[] ARTSet414;
private static boolean[] ARTSet415;
private static boolean[] ARTSet416;
private static boolean[] ARTSet417;
private static boolean[] ARTSet418;
private static boolean[] ARTSet419;
private static boolean[] ARTSet420;
private static boolean[] ARTSet421;
private static boolean[] ARTSet422;
private static boolean[] ARTSet423;
private static boolean[] ARTSet424;
private static boolean[] ARTSet425;
private static boolean[] ARTSet426;
private static boolean[] ARTSet427;
private static boolean[] ARTSet428;
private static boolean[] ARTSet429;
private static boolean[] ARTSet430;
private static boolean[] ARTSet431;
private static boolean[] ARTSet432;
private static boolean[] ARTSet433;
private static boolean[] ARTSet434;
private static boolean[] ARTSet435;
private static boolean[] ARTSet436;
private static boolean[] ARTSet437;
private static boolean[] ARTSet438;
private static boolean[] ARTSet439;
private static boolean[] ARTSet440;
private static boolean[] ARTSet441;
private static boolean[] ARTSet442;
private static boolean[] ARTSet443;
private static boolean[] ARTSet444;
private static boolean[] ARTSet445;
private static boolean[] ARTSet446;
private static boolean[] ARTSet447;
private static boolean[] ARTSet448;
private static boolean[] ARTSet449;
private static boolean[] ARTSet450;
private static boolean[] ARTSet451;
private static boolean[] ARTSet452;
private static boolean[] ARTSet453;
private static boolean[] ARTSet454;
private static boolean[] ARTSet455;
private static boolean[] ARTSet456;
private static boolean[] ARTSet457;
private static boolean[] ARTSet458;
private static boolean[] ARTSet459;

/* Start of artLabel enumeration */
public static final int ARTX_EOS = 0;
public static final int ARTTB_SIMPLE_WHITESPACE = 1;
public static final int ARTTS__LPAR = 2;
public static final int ARTTS__RPAR = 3;
public static final int ARTTS__STAR = 4;
public static final int ARTTS__PLUS = 5;
public static final int ARTTS__COMMA = 6;
public static final int ARTTS__MINUS = 7;
public static final int ARTTS__PERIOD = 8;
public static final int ARTTS__PERIOD_PERIOD = 9;
public static final int ARTTS__SLASH = 10;
public static final int ARTTS__COLON = 11;
public static final int ARTTS__COLON_EQUAL = 12;
public static final int ARTTS__SEMICOLON = 13;
public static final int ARTTS__LT = 14;
public static final int ARTTS__LT_EQUAL = 15;
public static final int ARTTS__LT_GT = 16;
public static final int ARTTS__EQUAL = 17;
public static final int ARTTS__GT = 18;
public static final int ARTTS__GT_EQUAL = 19;
public static final int ARTTS_ID = 20;
public static final int ARTTS_INTEGER = 21;
public static final int ARTTS_REAL = 22;
public static final int ARTTS_STRING = 23;
public static final int ARTTS__LBRACK = 24;
public static final int ARTTS__BACKSLASH_DBLQUOTE = 25;
public static final int ARTTS__RBRACK = 26;
public static final int ARTTS__UPARROW = 27;
public static final int ARTTS_and = 28;
public static final int ARTTS_array = 29;
public static final int ARTTS_begin = 30;
public static final int ARTTS_case = 31;
public static final int ARTTS_const = 32;
public static final int ARTTS_constant_ID = 33;
public static final int ARTTS_digit = 34;
public static final int ARTTS_div = 35;
public static final int ARTTS_do = 36;
public static final int ARTTS_downto = 37;
public static final int ARTTS_else = 38;
public static final int ARTTS_end = 39;
public static final int ARTTS_field_ID = 40;
public static final int ARTTS_field_designator_ID = 41;
public static final int ARTTS_file = 42;
public static final int ARTTS_for = 43;
public static final int ARTTS_function = 44;
public static final int ARTTS_function_ID = 45;
public static final int ARTTS_goto = 46;
public static final int ARTTS_if = 47;
public static final int ARTTS_in = 48;
public static final int ARTTS_label = 49;
public static final int ARTTS_letter = 50;
public static final int ARTTS_mod = 51;
public static final int ARTTS_nil = 52;
public static final int ARTTS_not = 53;
public static final int ARTTS_of = 54;
public static final int ARTTS_one_of_a_set_of_implementation_defined_characters = 55;
public static final int ARTTS_or = 56;
public static final int ARTTS_packed = 57;
public static final int ARTTS_procedure = 58;
public static final int ARTTS_procedure_ID = 59;
public static final int ARTTS_program = 60;
public static final int ARTTS_read = 61;
public static final int ARTTS_readln = 62;
public static final int ARTTS_record = 63;
public static final int ARTTS_repeat = 64;
public static final int ARTTS_set = 65;
public static final int ARTTS_tag_field = 66;
public static final int ARTTS_then = 67;
public static final int ARTTS_to = 68;
public static final int ARTTS_type = 69;
public static final int ARTTS_type_ID = 70;
public static final int ARTTS_until = 71;
public static final int ARTTS_var = 72;
public static final int ARTTS_variable_ID = 73;
public static final int ARTTS_while = 74;
public static final int ARTTS_with = 75;
public static final int ARTTS_write = 76;
public static final int ARTTS_writeln = 77;
public static final int ARTX_EPSILON = 78;
public static final int ARTL_ART_Boolean_expression = 79;
public static final int ARTL_ART_ID = 80;
public static final int ARTL_ART_ID_list = 81;
public static final int ARTL_ART_ID_list_18 = 82;
public static final int ARTL_ART_actual_parameter = 83;
public static final int ARTL_ART_actual_parameter_list = 84;
public static final int ARTL_ART_actual_parameter_list_1 = 85;
public static final int ARTL_ART_adding_operator = 86;
public static final int ARTL_ART_apostrophe_image = 87;
public static final int ARTL_ART_array_type = 88;
public static final int ARTL_ART_array_type_2 = 89;
public static final int ARTL_ART_assignment_statement = 90;
public static final int ARTL_ART_assignment_statement_3 = 91;
public static final int ARTL_ART_base_type = 92;
public static final int ARTL_ART_block = 93;
public static final int ARTL_ART_bound_ID = 94;
public static final int ARTL_ART_case_constant = 95;
public static final int ARTL_ART_case_constant_list = 96;
public static final int ARTL_ART_case_constant_list_4 = 97;
public static final int ARTL_ART_case_index = 98;
public static final int ARTL_ART_case_list_element = 99;
public static final int ARTL_ART_case_statement = 100;
public static final int ARTL_ART_case_statement_5 = 101;
public static final int ARTL_ART_case_statement_6 = 102;
public static final int ARTL_ART_character_string = 103;
public static final int ARTL_ART_component_type = 104;
public static final int ARTL_ART_component_variable = 105;
public static final int ARTL_ART_compound_statement = 106;
public static final int ARTL_ART_conditional_statement = 107;
public static final int ARTL_ART_conformant_array_parameter_specification = 108;
public static final int ARTL_ART_conformant_array_schema = 109;
public static final int ARTL_ART_constant = 110;
public static final int ARTL_ART_constant_7 = 111;
public static final int ARTL_ART_constant_8 = 112;
public static final int ARTL_ART_constant_ID = 113;
public static final int ARTL_ART_constant_definition = 114;
public static final int ARTL_ART_constant_definition_part = 115;
public static final int ARTL_ART_constant_definition_part_10 = 116;
public static final int ARTL_ART_constant_definition_part_9 = 117;
public static final int ARTL_ART_control_variable = 118;
public static final int ARTL_ART_digit = 119;
public static final int ARTL_ART_digit_sequence = 120;
public static final int ARTL_ART_directive = 121;
public static final int ARTL_ART_domain_type = 122;
public static final int ARTL_ART_else_part = 123;
public static final int ARTL_ART_entire_variable = 124;
public static final int ARTL_ART_enumerated_type = 125;
public static final int ARTL_ART_expression = 126;
public static final int ARTL_ART_expression_11 = 127;
public static final int ARTL_ART_factor = 128;
public static final int ARTL_ART_field_ID = 129;
public static final int ARTL_ART_field_designator = 130;
public static final int ARTL_ART_field_designator_ID = 131;
public static final int ARTL_ART_field_list = 132;
public static final int ARTL_ART_field_list_12 = 133;
public static final int ARTL_ART_field_list_13 = 134;
public static final int ARTL_ART_field_specifier = 135;
public static final int ARTL_ART_file_type = 136;
public static final int ARTL_ART_final_value = 137;
public static final int ARTL_ART_fixed_part = 138;
public static final int ARTL_ART_for_statement = 139;
public static final int ARTL_ART_for_statement_14 = 140;
public static final int ARTL_ART_formal_parameter_list = 141;
public static final int ARTL_ART_formal_parameter_list_15 = 142;
public static final int ARTL_ART_formal_parameter_section = 143;
public static final int ARTL_ART_fractional_part = 144;
public static final int ARTL_ART_function_ID = 145;
public static final int ARTL_ART_function_block = 146;
public static final int ARTL_ART_function_declaration = 147;
public static final int ARTL_ART_function_designator = 148;
public static final int ARTL_ART_function_designator_16 = 149;
public static final int ARTL_ART_function_heading = 150;
public static final int ARTL_ART_function_heading_17 = 151;
public static final int ARTL_ART_function_identification = 152;
public static final int ARTL_ART_functional_parameter_specification = 153;
public static final int ARTL_ART_goto_statement = 154;
public static final int ARTL_ART_if_statement = 155;
public static final int ARTL_ART_if_statement_19 = 156;
public static final int ARTL_ART_index_expression = 157;
public static final int ARTL_ART_index_type = 158;
public static final int ARTL_ART_index_type_specification = 159;
public static final int ARTL_ART_indexed_variable = 160;
public static final int ARTL_ART_indexed_variable_20 = 161;
public static final int ARTL_ART_initial_value = 162;
public static final int ARTL_ART_label = 163;
public static final int ARTL_ART_label_declaration_part = 164;
public static final int ARTL_ART_label_declaration_part_21 = 165;
public static final int ARTL_ART_label_declaration_part_22 = 166;
public static final int ARTL_ART_letter = 167;
public static final int ARTL_ART_member_designator = 168;
public static final int ARTL_ART_member_designator_23 = 169;
public static final int ARTL_ART_multiplying_operator = 170;
public static final int ARTL_ART_new_ordinal_type = 171;
public static final int ARTL_ART_new_pointer_type = 172;
public static final int ARTL_ART_new_structured_type = 173;
public static final int ARTL_ART_new_structured_type_24 = 174;
public static final int ARTL_ART_new_type = 175;
public static final int ARTL_ART_ordinal_type = 176;
public static final int ARTL_ART_ordinal_type_ID = 177;
public static final int ARTL_ART_packed_conformant_array_schema = 178;
public static final int ARTL_ART_pointer_type = 179;
public static final int ARTL_ART_pointer_type_ID = 180;
public static final int ARTL_ART_procedural_parameter_specification = 181;
public static final int ARTL_ART_procedure_ID = 182;
public static final int ARTL_ART_procedure_and_function_declaration_part = 183;
public static final int ARTL_ART_procedure_and_function_declaration_part_25 = 184;
public static final int ARTL_ART_procedure_and_function_declaration_part_26 = 185;
public static final int ARTL_ART_procedure_and_function_heading_part = 186;
public static final int ARTL_ART_procedure_and_function_heading_part_27 = 187;
public static final int ARTL_ART_procedure_block = 188;
public static final int ARTL_ART_procedure_declaration = 189;
public static final int ARTL_ART_procedure_heading = 190;
public static final int ARTL_ART_procedure_heading_28 = 191;
public static final int ARTL_ART_procedure_identification = 192;
public static final int ARTL_ART_procedure_statement = 193;
public static final int ARTL_ART_procedure_statement_29 = 194;
public static final int ARTL_ART_program = 195;
public static final int ARTL_ART_program_block = 196;
public static final int ARTL_ART_program_heading = 197;
public static final int ARTL_ART_program_heading_30 = 198;
public static final int ARTL_ART_program_parameters = 199;
public static final int ARTL_ART_read_parameter_list = 200;
public static final int ARTL_ART_read_parameter_list_31 = 201;
public static final int ARTL_ART_readln_parameter_list = 202;
public static final int ARTL_ART_readln_parameter_list_32 = 203;
public static final int ARTL_ART_readln_parameter_list_33 = 204;
public static final int ARTL_ART_real_type_ID = 205;
public static final int ARTL_ART_record_section = 206;
public static final int ARTL_ART_record_type = 207;
public static final int ARTL_ART_record_variable_list = 208;
public static final int ARTL_ART_record_variable_list_34 = 209;
public static final int ARTL_ART_relational_operator = 210;
public static final int ARTL_ART_repeat_statement = 211;
public static final int ARTL_ART_repetitive_statement = 212;
public static final int ARTL_ART_result_type = 213;
public static final int ARTL_ART_scale_factor = 214;
public static final int ARTL_ART_set_constructor = 215;
public static final int ARTL_ART_set_constructor_35 = 216;
public static final int ARTL_ART_set_constructor_36 = 217;
public static final int ARTL_ART_set_type = 218;
public static final int ARTL_ART_sign = 219;
public static final int ARTL_ART_signed_integer = 220;
public static final int ARTL_ART_signed_integer_37 = 221;
public static final int ARTL_ART_signed_number = 222;
public static final int ARTL_ART_signed_real = 223;
public static final int ARTL_ART_signed_real_38 = 224;
public static final int ARTL_ART_simple_expression = 225;
public static final int ARTL_ART_simple_expression_39 = 226;
public static final int ARTL_ART_simple_expression_40 = 227;
public static final int ARTL_ART_simple_statement = 228;
public static final int ARTL_ART_simple_statement_41 = 229;
public static final int ARTL_ART_simple_type = 230;
public static final int ARTL_ART_simple_type_ID = 231;
public static final int ARTL_ART_statement = 232;
public static final int ARTL_ART_statement_42 = 233;
public static final int ARTL_ART_statement_43 = 234;
public static final int ARTL_ART_statement_part = 235;
public static final int ARTL_ART_statement_sequence = 236;
public static final int ARTL_ART_statement_sequence_44 = 237;
public static final int ARTL_ART_string_character = 238;
public static final int ARTL_ART_string_element = 239;
public static final int ARTL_ART_structured_statement = 240;
public static final int ARTL_ART_structured_type = 241;
public static final int ARTL_ART_structured_type_ID = 242;
public static final int ARTL_ART_subrange_type = 243;
public static final int ARTL_ART_tag_field = 244;
public static final int ARTL_ART_tag_type = 245;
public static final int ARTL_ART_term = 246;
public static final int ARTL_ART_term_45 = 247;
public static final int ARTL_ART_type_ID = 248;
public static final int ARTL_ART_type_definition = 249;
public static final int ARTL_ART_type_definition_part = 250;
public static final int ARTL_ART_type_definition_part_46 = 251;
public static final int ARTL_ART_type_definition_part_47 = 252;
public static final int ARTL_ART_type_denoter = 253;
public static final int ARTL_ART_unpacked_conformant_array_schema = 254;
public static final int ARTL_ART_unpacked_conformant_array_schema_48 = 255;
public static final int ARTL_ART_unpacked_conformant_array_schema_49 = 256;
public static final int ARTL_ART_unpacked_structured_type = 257;
public static final int ARTL_ART_unsigned_constant = 258;
public static final int ARTL_ART_unsigned_integer = 259;
public static final int ARTL_ART_unsigned_number = 260;
public static final int ARTL_ART_unsigned_real = 261;
public static final int ARTL_ART_value_conformant_array_specification = 262;
public static final int ARTL_ART_value_parameter_specification = 263;
public static final int ARTL_ART_variable_ID = 264;
public static final int ARTL_ART_variable_access = 265;
public static final int ARTL_ART_variable_conformant_array_specification = 266;
public static final int ARTL_ART_variable_declaration = 267;
public static final int ARTL_ART_variable_declaration_part = 268;
public static final int ARTL_ART_variable_declaration_part_50 = 269;
public static final int ARTL_ART_variable_declaration_part_51 = 270;
public static final int ARTL_ART_variable_parameter_specification = 271;
public static final int ARTL_ART_variant = 272;
public static final int ARTL_ART_variant_part = 273;
public static final int ARTL_ART_variant_selector = 274;
public static final int ARTL_ART_variant_selector_52 = 275;
public static final int ARTL_ART_while_statement = 276;
public static final int ARTL_ART_with_statement = 277;
public static final int ARTL_ART_write_parameter = 278;
public static final int ARTL_ART_write_parameter_53 = 279;
public static final int ARTL_ART_write_parameter_54 = 280;
public static final int ARTL_ART_write_parameter_list = 281;
public static final int ARTL_ART_write_parameter_list_57 = 282;
public static final int ARTL_ART_writeln_parameter_list = 283;
public static final int ARTL_ART_writeln_parameter_list_55 = 284;
public static final int ARTL_ART_writeln_parameter_list_56 = 285;
public static final int ARTL_ART_Boolean_expression_197 = 286;
public static final int ARTL_ART_Boolean_expression_198 = 287;
public static final int ARTL_ART_Boolean_expression_199 = 288;
public static final int ARTL_ART_Boolean_expression_200 = 289;
public static final int ARTL_ART_ID_205 = 290;
public static final int ARTL_ART_ID_206 = 291;
public static final int ARTL_ART_ID_207 = 292;
public static final int ARTL_ART_ID_208 = 293;
public static final int ARTL_ART_ID_list_555 = 294;
public static final int ARTL_ART_ID_list_556 = 295;
public static final int ARTL_ART_ID_list_557 = 296;
public static final int ARTL_ART_ID_list_558 = 297;
public static final int ARTL_ART_ID_list_559 = 298;
public static final int ARTL_ART_ID_list_560 = 299;
public static final int ARTL_ART_ID_list_18_959 = 300;
public static final int ARTL_ART_ID_list_18_960 = 301;
public static final int ARTL_ART_ID_list_18_961 = 302;
public static final int ARTL_ART_ID_list_18_962 = 303;
public static final int ARTL_ART_ID_list_18_963 = 304;
public static final int ARTL_ART_ID_list_18_964 = 305;
public static final int ARTL_ART_ID_list_18_965 = 306;
public static final int ARTL_ART_ID_list_18_966 = 307;
public static final int ARTL_ART_ID_list_18_967 = 308;
public static final int ARTL_ART_ID_list_18_968 = 309;
public static final int ARTL_ART_ID_list_18_969 = 310;
public static final int ARTL_ART_ID_list_18_970 = 311;
public static final int ARTL_ART_actual_parameter_21 = 312;
public static final int ARTL_ART_actual_parameter_22 = 313;
public static final int ARTL_ART_actual_parameter_23 = 314;
public static final int ARTL_ART_actual_parameter_24 = 315;
public static final int ARTL_ART_actual_parameter_25 = 316;
public static final int ARTL_ART_actual_parameter_26 = 317;
public static final int ARTL_ART_actual_parameter_27 = 318;
public static final int ARTL_ART_actual_parameter_28 = 319;
public static final int ARTL_ART_actual_parameter_list_39 = 320;
public static final int ARTL_ART_actual_parameter_list_40 = 321;
public static final int ARTL_ART_actual_parameter_list_41 = 322;
public static final int ARTL_ART_actual_parameter_list_42 = 323;
public static final int ARTL_ART_actual_parameter_list_43 = 324;
public static final int ARTL_ART_actual_parameter_list_44 = 325;
public static final int ARTL_ART_actual_parameter_list_45 = 326;
public static final int ARTL_ART_actual_parameter_list_46 = 327;
public static final int ARTL_ART_actual_parameter_list_47 = 328;
public static final int ARTL_ART_actual_parameter_list_48 = 329;
public static final int ARTL_ART_actual_parameter_list_1_49 = 330;
public static final int ARTL_ART_actual_parameter_list_1_50 = 331;
public static final int ARTL_ART_actual_parameter_list_1_51 = 332;
public static final int ARTL_ART_actual_parameter_list_1_52 = 333;
public static final int ARTL_ART_actual_parameter_list_1_53 = 334;
public static final int ARTL_ART_actual_parameter_list_1_54 = 335;
public static final int ARTL_ART_actual_parameter_list_1_55 = 336;
public static final int ARTL_ART_actual_parameter_list_1_56 = 337;
public static final int ARTL_ART_actual_parameter_list_1_57 = 338;
public static final int ARTL_ART_actual_parameter_list_1_58 = 339;
public static final int ARTL_ART_actual_parameter_list_1_59 = 340;
public static final int ARTL_ART_actual_parameter_list_1_60 = 341;
public static final int ARTL_ART_adding_operator_61 = 342;
public static final int ARTL_ART_adding_operator_62 = 343;
public static final int ARTL_ART_adding_operator_63 = 344;
public static final int ARTL_ART_adding_operator_64 = 345;
public static final int ARTL_ART_adding_operator_65 = 346;
public static final int ARTL_ART_adding_operator_66 = 347;
public static final int ARTL_ART_adding_operator_67 = 348;
public static final int ARTL_ART_adding_operator_68 = 349;
public static final int ARTL_ART_adding_operator_69 = 350;
public static final int ARTL_ART_adding_operator_70 = 351;
public static final int ARTL_ART_adding_operator_71 = 352;
public static final int ARTL_ART_adding_operator_72 = 353;
public static final int ARTL_ART_apostrophe_image_73 = 354;
public static final int ARTL_ART_apostrophe_image_74 = 355;
public static final int ARTL_ART_apostrophe_image_75 = 356;
public static final int ARTL_ART_apostrophe_image_76 = 357;
public static final int ARTL_ART_array_type_77 = 358;
public static final int ARTL_ART_array_type_78 = 359;
public static final int ARTL_ART_array_type_79 = 360;
public static final int ARTL_ART_array_type_80 = 361;
public static final int ARTL_ART_array_type_81 = 362;
public static final int ARTL_ART_array_type_82 = 363;
public static final int ARTL_ART_array_type_83 = 364;
public static final int ARTL_ART_array_type_84 = 365;
public static final int ARTL_ART_array_type_85 = 366;
public static final int ARTL_ART_array_type_86 = 367;
public static final int ARTL_ART_array_type_87 = 368;
public static final int ARTL_ART_array_type_88 = 369;
public static final int ARTL_ART_array_type_89 = 370;
public static final int ARTL_ART_array_type_90 = 371;
public static final int ARTL_ART_array_type_91 = 372;
public static final int ARTL_ART_array_type_92 = 373;
public static final int ARTL_ART_array_type_2_97 = 374;
public static final int ARTL_ART_array_type_2_98 = 375;
public static final int ARTL_ART_array_type_2_99 = 376;
public static final int ARTL_ART_array_type_2_100 = 377;
public static final int ARTL_ART_array_type_2_101 = 378;
public static final int ARTL_ART_array_type_2_102 = 379;
public static final int ARTL_ART_array_type_2_103 = 380;
public static final int ARTL_ART_array_type_2_104 = 381;
public static final int ARTL_ART_array_type_2_105 = 382;
public static final int ARTL_ART_array_type_2_106 = 383;
public static final int ARTL_ART_array_type_2_107 = 384;
public static final int ARTL_ART_array_type_2_108 = 385;
public static final int ARTL_ART_assignment_statement_113 = 386;
public static final int ARTL_ART_assignment_statement_114 = 387;
public static final int ARTL_ART_assignment_statement_115 = 388;
public static final int ARTL_ART_assignment_statement_116 = 389;
public static final int ARTL_ART_assignment_statement_117 = 390;
public static final int ARTL_ART_assignment_statement_118 = 391;
public static final int ARTL_ART_assignment_statement_119 = 392;
public static final int ARTL_ART_assignment_statement_120 = 393;
public static final int ARTL_ART_assignment_statement_3_121 = 394;
public static final int ARTL_ART_assignment_statement_3_122 = 395;
public static final int ARTL_ART_assignment_statement_3_123 = 396;
public static final int ARTL_ART_assignment_statement_3_124 = 397;
public static final int ARTL_ART_assignment_statement_3_125 = 398;
public static final int ARTL_ART_assignment_statement_3_126 = 399;
public static final int ARTL_ART_assignment_statement_3_127 = 400;
public static final int ARTL_ART_assignment_statement_3_128 = 401;
public static final int ARTL_ART_base_type_147 = 402;
public static final int ARTL_ART_base_type_148 = 403;
public static final int ARTL_ART_base_type_149 = 404;
public static final int ARTL_ART_base_type_150 = 405;
public static final int ARTL_ART_block_159 = 406;
public static final int ARTL_ART_block_160 = 407;
public static final int ARTL_ART_block_161 = 408;
public static final int ARTL_ART_block_162 = 409;
public static final int ARTL_ART_block_163 = 410;
public static final int ARTL_ART_block_164 = 411;
public static final int ARTL_ART_block_165 = 412;
public static final int ARTL_ART_block_166 = 413;
public static final int ARTL_ART_block_167 = 414;
public static final int ARTL_ART_block_168 = 415;
public static final int ARTL_ART_block_169 = 416;
public static final int ARTL_ART_block_170 = 417;
public static final int ARTL_ART_block_171 = 418;
public static final int ARTL_ART_block_172 = 419;
public static final int ARTL_ART_bound_ID_201 = 420;
public static final int ARTL_ART_bound_ID_202 = 421;
public static final int ARTL_ART_bound_ID_203 = 422;
public static final int ARTL_ART_bound_ID_204 = 423;
public static final int ARTL_ART_case_constant_209 = 424;
public static final int ARTL_ART_case_constant_210 = 425;
public static final int ARTL_ART_case_constant_211 = 426;
public static final int ARTL_ART_case_constant_212 = 427;
public static final int ARTL_ART_case_constant_list_223 = 428;
public static final int ARTL_ART_case_constant_list_224 = 429;
public static final int ARTL_ART_case_constant_list_225 = 430;
public static final int ARTL_ART_case_constant_list_226 = 431;
public static final int ARTL_ART_case_constant_list_227 = 432;
public static final int ARTL_ART_case_constant_list_228 = 433;
public static final int ARTL_ART_case_constant_list_4_229 = 434;
public static final int ARTL_ART_case_constant_list_4_230 = 435;
public static final int ARTL_ART_case_constant_list_4_231 = 436;
public static final int ARTL_ART_case_constant_list_4_232 = 437;
public static final int ARTL_ART_case_constant_list_4_233 = 438;
public static final int ARTL_ART_case_constant_list_4_234 = 439;
public static final int ARTL_ART_case_constant_list_4_235 = 440;
public static final int ARTL_ART_case_constant_list_4_236 = 441;
public static final int ARTL_ART_case_constant_list_4_237 = 442;
public static final int ARTL_ART_case_constant_list_4_238 = 443;
public static final int ARTL_ART_case_constant_list_4_239 = 444;
public static final int ARTL_ART_case_constant_list_4_240 = 445;
public static final int ARTL_ART_case_index_241 = 446;
public static final int ARTL_ART_case_index_242 = 447;
public static final int ARTL_ART_case_index_243 = 448;
public static final int ARTL_ART_case_index_244 = 449;
public static final int ARTL_ART_case_list_element_245 = 450;
public static final int ARTL_ART_case_list_element_246 = 451;
public static final int ARTL_ART_case_list_element_247 = 452;
public static final int ARTL_ART_case_list_element_248 = 453;
public static final int ARTL_ART_case_list_element_249 = 454;
public static final int ARTL_ART_case_list_element_250 = 455;
public static final int ARTL_ART_case_list_element_251 = 456;
public static final int ARTL_ART_case_list_element_252 = 457;
public static final int ARTL_ART_case_statement_259 = 458;
public static final int ARTL_ART_case_statement_260 = 459;
public static final int ARTL_ART_case_statement_261 = 460;
public static final int ARTL_ART_case_statement_262 = 461;
public static final int ARTL_ART_case_statement_263 = 462;
public static final int ARTL_ART_case_statement_264 = 463;
public static final int ARTL_ART_case_statement_265 = 464;
public static final int ARTL_ART_case_statement_266 = 465;
public static final int ARTL_ART_case_statement_267 = 466;
public static final int ARTL_ART_case_statement_268 = 467;
public static final int ARTL_ART_case_statement_269 = 468;
public static final int ARTL_ART_case_statement_270 = 469;
public static final int ARTL_ART_case_statement_271 = 470;
public static final int ARTL_ART_case_statement_272 = 471;
public static final int ARTL_ART_case_statement_273 = 472;
public static final int ARTL_ART_case_statement_274 = 473;
public static final int ARTL_ART_case_statement_5_275 = 474;
public static final int ARTL_ART_case_statement_5_276 = 475;
public static final int ARTL_ART_case_statement_5_277 = 476;
public static final int ARTL_ART_case_statement_5_278 = 477;
public static final int ARTL_ART_case_statement_5_279 = 478;
public static final int ARTL_ART_case_statement_5_280 = 479;
public static final int ARTL_ART_case_statement_5_281 = 480;
public static final int ARTL_ART_case_statement_5_282 = 481;
public static final int ARTL_ART_case_statement_5_283 = 482;
public static final int ARTL_ART_case_statement_5_284 = 483;
public static final int ARTL_ART_case_statement_5_285 = 484;
public static final int ARTL_ART_case_statement_5_286 = 485;
public static final int ARTL_ART_case_statement_6_287 = 486;
public static final int ARTL_ART_case_statement_6_288 = 487;
public static final int ARTL_ART_case_statement_6_289 = 488;
public static final int ARTL_ART_case_statement_6_290 = 489;
public static final int ARTL_ART_case_statement_6_291 = 490;
public static final int ARTL_ART_case_statement_6_292 = 491;
public static final int ARTL_ART_case_statement_6_293 = 492;
public static final int ARTL_ART_case_statement_6_294 = 493;
public static final int ARTL_ART_character_string_295 = 494;
public static final int ARTL_ART_character_string_296 = 495;
public static final int ARTL_ART_character_string_297 = 496;
public static final int ARTL_ART_character_string_298 = 497;
public static final int ARTL_ART_component_type_109 = 498;
public static final int ARTL_ART_component_type_110 = 499;
public static final int ARTL_ART_component_type_111 = 500;
public static final int ARTL_ART_component_type_112 = 501;
public static final int ARTL_ART_component_variable_307 = 502;
public static final int ARTL_ART_component_variable_308 = 503;
public static final int ARTL_ART_component_variable_309 = 504;
public static final int ARTL_ART_component_variable_310 = 505;
public static final int ARTL_ART_component_variable_311 = 506;
public static final int ARTL_ART_component_variable_312 = 507;
public static final int ARTL_ART_component_variable_313 = 508;
public static final int ARTL_ART_component_variable_314 = 509;
public static final int ARTL_ART_compound_statement_339 = 510;
public static final int ARTL_ART_compound_statement_340 = 511;
public static final int ARTL_ART_compound_statement_341 = 512;
public static final int ARTL_ART_compound_statement_342 = 513;
public static final int ARTL_ART_compound_statement_343 = 514;
public static final int ARTL_ART_compound_statement_344 = 515;
public static final int ARTL_ART_compound_statement_345 = 516;
public static final int ARTL_ART_compound_statement_346 = 517;
public static final int ARTL_ART_conditional_statement_353 = 518;
public static final int ARTL_ART_conditional_statement_354 = 519;
public static final int ARTL_ART_conditional_statement_355 = 520;
public static final int ARTL_ART_conditional_statement_356 = 521;
public static final int ARTL_ART_conditional_statement_357 = 522;
public static final int ARTL_ART_conditional_statement_358 = 523;
public static final int ARTL_ART_conditional_statement_359 = 524;
public static final int ARTL_ART_conditional_statement_360 = 525;
public static final int ARTL_ART_conformant_array_parameter_specification_373 = 526;
public static final int ARTL_ART_conformant_array_parameter_specification_374 = 527;
public static final int ARTL_ART_conformant_array_parameter_specification_375 = 528;
public static final int ARTL_ART_conformant_array_parameter_specification_376 = 529;
public static final int ARTL_ART_conformant_array_parameter_specification_377 = 530;
public static final int ARTL_ART_conformant_array_parameter_specification_378 = 531;
public static final int ARTL_ART_conformant_array_parameter_specification_379 = 532;
public static final int ARTL_ART_conformant_array_parameter_specification_380 = 533;
public static final int ARTL_ART_conformant_array_schema_399 = 534;
public static final int ARTL_ART_conformant_array_schema_400 = 535;
public static final int ARTL_ART_conformant_array_schema_401 = 536;
public static final int ARTL_ART_conformant_array_schema_402 = 537;
public static final int ARTL_ART_conformant_array_schema_403 = 538;
public static final int ARTL_ART_conformant_array_schema_404 = 539;
public static final int ARTL_ART_conformant_array_schema_405 = 540;
public static final int ARTL_ART_conformant_array_schema_406 = 541;
public static final int ARTL_ART_constant_213 = 542;
public static final int ARTL_ART_constant_214 = 543;
public static final int ARTL_ART_constant_215 = 544;
public static final int ARTL_ART_constant_216 = 545;
public static final int ARTL_ART_constant_217 = 546;
public static final int ARTL_ART_constant_218 = 547;
public static final int ARTL_ART_constant_219 = 548;
public static final int ARTL_ART_constant_220 = 549;
public static final int ARTL_ART_constant_221 = 550;
public static final int ARTL_ART_constant_222 = 551;
public static final int ARTL_ART_constant_7_439 = 552;
public static final int ARTL_ART_constant_7_440 = 553;
public static final int ARTL_ART_constant_7_441 = 554;
public static final int ARTL_ART_constant_7_442 = 555;
public static final int ARTL_ART_constant_7_443 = 556;
public static final int ARTL_ART_constant_7_444 = 557;
public static final int ARTL_ART_constant_7_445 = 558;
public static final int ARTL_ART_constant_7_446 = 559;
public static final int ARTL_ART_constant_8_447 = 560;
public static final int ARTL_ART_constant_8_448 = 561;
public static final int ARTL_ART_constant_8_449 = 562;
public static final int ARTL_ART_constant_8_450 = 563;
public static final int ARTL_ART_constant_8_451 = 564;
public static final int ARTL_ART_constant_8_452 = 565;
public static final int ARTL_ART_constant_8_453 = 566;
public static final int ARTL_ART_constant_8_454 = 567;
public static final int ARTL_ART_constant_ID_471 = 568;
public static final int ARTL_ART_constant_ID_472 = 569;
public static final int ARTL_ART_constant_ID_473 = 570;
public static final int ARTL_ART_constant_ID_474 = 571;
public static final int ARTL_ART_constant_definition_475 = 572;
public static final int ARTL_ART_constant_definition_476 = 573;
public static final int ARTL_ART_constant_definition_477 = 574;
public static final int ARTL_ART_constant_definition_478 = 575;
public static final int ARTL_ART_constant_definition_479 = 576;
public static final int ARTL_ART_constant_definition_480 = 577;
public static final int ARTL_ART_constant_definition_481 = 578;
public static final int ARTL_ART_constant_definition_482 = 579;
public static final int ARTL_ART_constant_definition_part_177 = 580;
public static final int ARTL_ART_constant_definition_part_178 = 581;
public static final int ARTL_ART_constant_definition_part_179 = 582;
public static final int ARTL_ART_constant_definition_part_180 = 583;
public static final int ARTL_ART_constant_definition_part_10_497 = 584;
public static final int ARTL_ART_constant_definition_part_10_498 = 585;
public static final int ARTL_ART_constant_definition_part_10_499 = 586;
public static final int ARTL_ART_constant_definition_part_10_500 = 587;
public static final int ARTL_ART_constant_definition_part_10_501 = 588;
public static final int ARTL_ART_constant_definition_part_10_502 = 589;
public static final int ARTL_ART_constant_definition_part_10_503 = 590;
public static final int ARTL_ART_constant_definition_part_10_504 = 591;
public static final int ARTL_ART_constant_definition_part_10_505 = 592;
public static final int ARTL_ART_constant_definition_part_10_506 = 593;
public static final int ARTL_ART_constant_definition_part_10_507 = 594;
public static final int ARTL_ART_constant_definition_part_10_508 = 595;
public static final int ARTL_ART_constant_definition_part_9_483 = 596;
public static final int ARTL_ART_constant_definition_part_9_484 = 597;
public static final int ARTL_ART_constant_definition_part_9_485 = 598;
public static final int ARTL_ART_constant_definition_part_9_486 = 599;
public static final int ARTL_ART_constant_definition_part_9_487 = 600;
public static final int ARTL_ART_constant_definition_part_9_488 = 601;
public static final int ARTL_ART_constant_definition_part_9_489 = 602;
public static final int ARTL_ART_constant_definition_part_9_490 = 603;
public static final int ARTL_ART_constant_definition_part_9_491 = 604;
public static final int ARTL_ART_constant_definition_part_9_492 = 605;
public static final int ARTL_ART_constant_definition_part_9_493 = 606;
public static final int ARTL_ART_constant_definition_part_9_494 = 607;
public static final int ARTL_ART_constant_definition_part_9_495 = 608;
public static final int ARTL_ART_constant_definition_part_9_496 = 609;
public static final int ARTL_ART_control_variable_509 = 610;
public static final int ARTL_ART_control_variable_510 = 611;
public static final int ARTL_ART_control_variable_511 = 612;
public static final int ARTL_ART_control_variable_512 = 613;
public static final int ARTL_ART_digit_517 = 614;
public static final int ARTL_ART_digit_518 = 615;
public static final int ARTL_ART_digit_519 = 616;
public static final int ARTL_ART_digit_520 = 617;
public static final int ARTL_ART_digit_sequence_521 = 618;
public static final int ARTL_ART_digit_sequence_522 = 619;
public static final int ARTL_ART_digit_sequence_523 = 620;
public static final int ARTL_ART_digit_sequence_524 = 621;
public static final int ARTL_ART_directive_525 = 622;
public static final int ARTL_ART_directive_526 = 623;
public static final int ARTL_ART_directive_527 = 624;
public static final int ARTL_ART_directive_528 = 625;
public static final int ARTL_ART_domain_type_529 = 626;
public static final int ARTL_ART_domain_type_530 = 627;
public static final int ARTL_ART_domain_type_531 = 628;
public static final int ARTL_ART_domain_type_532 = 629;
public static final int ARTL_ART_else_part_537 = 630;
public static final int ARTL_ART_else_part_538 = 631;
public static final int ARTL_ART_else_part_539 = 632;
public static final int ARTL_ART_else_part_540 = 633;
public static final int ARTL_ART_else_part_541 = 634;
public static final int ARTL_ART_else_part_542 = 635;
public static final int ARTL_ART_entire_variable_513 = 636;
public static final int ARTL_ART_entire_variable_514 = 637;
public static final int ARTL_ART_entire_variable_515 = 638;
public static final int ARTL_ART_entire_variable_516 = 639;
public static final int ARTL_ART_enumerated_type_547 = 640;
public static final int ARTL_ART_enumerated_type_548 = 641;
public static final int ARTL_ART_enumerated_type_549 = 642;
public static final int ARTL_ART_enumerated_type_550 = 643;
public static final int ARTL_ART_enumerated_type_551 = 644;
public static final int ARTL_ART_enumerated_type_552 = 645;
public static final int ARTL_ART_enumerated_type_553 = 646;
public static final int ARTL_ART_enumerated_type_554 = 647;
public static final int ARTL_ART_expression_29 = 648;
public static final int ARTL_ART_expression_30 = 649;
public static final int ARTL_ART_expression_31 = 650;
public static final int ARTL_ART_expression_32 = 651;
public static final int ARTL_ART_expression_33 = 652;
public static final int ARTL_ART_expression_34 = 653;
public static final int ARTL_ART_expression_11_575 = 654;
public static final int ARTL_ART_expression_11_576 = 655;
public static final int ARTL_ART_expression_11_577 = 656;
public static final int ARTL_ART_expression_11_578 = 657;
public static final int ARTL_ART_expression_11_579 = 658;
public static final int ARTL_ART_expression_11_580 = 659;
public static final int ARTL_ART_expression_11_581 = 660;
public static final int ARTL_ART_expression_11_582 = 661;
public static final int ARTL_ART_expression_11_583 = 662;
public static final int ARTL_ART_expression_11_584 = 663;
public static final int ARTL_ART_factor_613 = 664;
public static final int ARTL_ART_factor_614 = 665;
public static final int ARTL_ART_factor_615 = 666;
public static final int ARTL_ART_factor_616 = 667;
public static final int ARTL_ART_factor_617 = 668;
public static final int ARTL_ART_factor_618 = 669;
public static final int ARTL_ART_factor_619 = 670;
public static final int ARTL_ART_factor_620 = 671;
public static final int ARTL_ART_factor_621 = 672;
public static final int ARTL_ART_factor_622 = 673;
public static final int ARTL_ART_factor_623 = 674;
public static final int ARTL_ART_factor_624 = 675;
public static final int ARTL_ART_factor_625 = 676;
public static final int ARTL_ART_factor_626 = 677;
public static final int ARTL_ART_factor_627 = 678;
public static final int ARTL_ART_factor_628 = 679;
public static final int ARTL_ART_factor_629 = 680;
public static final int ARTL_ART_factor_630 = 681;
public static final int ARTL_ART_factor_631 = 682;
public static final int ARTL_ART_factor_632 = 683;
public static final int ARTL_ART_factor_633 = 684;
public static final int ARTL_ART_factor_634 = 685;
public static final int ARTL_ART_factor_635 = 686;
public static final int ARTL_ART_factor_636 = 687;
public static final int ARTL_ART_factor_637 = 688;
public static final int ARTL_ART_factor_638 = 689;
public static final int ARTL_ART_factor_639 = 690;
public static final int ARTL_ART_factor_640 = 691;
public static final int ARTL_ART_factor_641 = 692;
public static final int ARTL_ART_factor_642 = 693;
public static final int ARTL_ART_field_ID_681 = 694;
public static final int ARTL_ART_field_ID_682 = 695;
public static final int ARTL_ART_field_ID_683 = 696;
public static final int ARTL_ART_field_ID_684 = 697;
public static final int ARTL_ART_field_designator_327 = 698;
public static final int ARTL_ART_field_designator_328 = 699;
public static final int ARTL_ART_field_designator_329 = 700;
public static final int ARTL_ART_field_designator_330 = 701;
public static final int ARTL_ART_field_designator_331 = 702;
public static final int ARTL_ART_field_designator_332 = 703;
public static final int ARTL_ART_field_designator_333 = 704;
public static final int ARTL_ART_field_designator_334 = 705;
public static final int ARTL_ART_field_designator_335 = 706;
public static final int ARTL_ART_field_designator_336 = 707;
public static final int ARTL_ART_field_designator_337 = 708;
public static final int ARTL_ART_field_designator_338 = 709;
public static final int ARTL_ART_field_designator_ID_677 = 710;
public static final int ARTL_ART_field_designator_ID_678 = 711;
public static final int ARTL_ART_field_designator_ID_679 = 712;
public static final int ARTL_ART_field_designator_ID_680 = 713;
public static final int ARTL_ART_field_list_685 = 714;
public static final int ARTL_ART_field_list_686 = 715;
public static final int ARTL_ART_field_list_687 = 716;
public static final int ARTL_ART_field_list_688 = 717;
public static final int ARTL_ART_field_list_689 = 718;
public static final int ARTL_ART_field_list_690 = 719;
public static final int ARTL_ART_field_list_691 = 720;
public static final int ARTL_ART_field_list_692 = 721;
public static final int ARTL_ART_field_list_693 = 722;
public static final int ARTL_ART_field_list_694 = 723;
public static final int ARTL_ART_field_list_695 = 724;
public static final int ARTL_ART_field_list_696 = 725;
public static final int ARTL_ART_field_list_697 = 726;
public static final int ARTL_ART_field_list_698 = 727;
public static final int ARTL_ART_field_list_699 = 728;
public static final int ARTL_ART_field_list_700 = 729;
public static final int ARTL_ART_field_list_701 = 730;
public static final int ARTL_ART_field_list_702 = 731;
public static final int ARTL_ART_field_list_703 = 732;
public static final int ARTL_ART_field_list_704 = 733;
public static final int ARTL_ART_field_list_705 = 734;
public static final int ARTL_ART_field_list_706 = 735;
public static final int ARTL_ART_field_list_707 = 736;
public static final int ARTL_ART_field_list_708 = 737;
public static final int ARTL_ART_field_list_709 = 738;
public static final int ARTL_ART_field_list_710 = 739;
public static final int ARTL_ART_field_list_711 = 740;
public static final int ARTL_ART_field_list_712 = 741;
public static final int ARTL_ART_field_list_713 = 742;
public static final int ARTL_ART_field_list_714 = 743;
public static final int ARTL_ART_field_list_715 = 744;
public static final int ARTL_ART_field_list_716 = 745;
public static final int ARTL_ART_field_list_717 = 746;
public static final int ARTL_ART_field_list_718 = 747;
public static final int ARTL_ART_field_list_12_719 = 748;
public static final int ARTL_ART_field_list_12_720 = 749;
public static final int ARTL_ART_field_list_12_721 = 750;
public static final int ARTL_ART_field_list_12_722 = 751;
public static final int ARTL_ART_field_list_12_723 = 752;
public static final int ARTL_ART_field_list_12_724 = 753;
public static final int ARTL_ART_field_list_12_725 = 754;
public static final int ARTL_ART_field_list_12_726 = 755;
public static final int ARTL_ART_field_list_13_757 = 756;
public static final int ARTL_ART_field_list_13_758 = 757;
public static final int ARTL_ART_field_list_13_759 = 758;
public static final int ARTL_ART_field_list_13_760 = 759;
public static final int ARTL_ART_field_list_13_761 = 760;
public static final int ARTL_ART_field_list_13_762 = 761;
public static final int ARTL_ART_field_list_13_763 = 762;
public static final int ARTL_ART_field_list_13_764 = 763;
public static final int ARTL_ART_field_specifier_673 = 764;
public static final int ARTL_ART_field_specifier_674 = 765;
public static final int ARTL_ART_field_specifier_675 = 766;
public static final int ARTL_ART_field_specifier_676 = 767;
public static final int ARTL_ART_file_type_765 = 768;
public static final int ARTL_ART_file_type_766 = 769;
public static final int ARTL_ART_file_type_767 = 770;
public static final int ARTL_ART_file_type_768 = 771;
public static final int ARTL_ART_file_type_769 = 772;
public static final int ARTL_ART_file_type_770 = 773;
public static final int ARTL_ART_file_type_771 = 774;
public static final int ARTL_ART_file_type_772 = 775;
public static final int ARTL_ART_final_value_773 = 776;
public static final int ARTL_ART_final_value_774 = 777;
public static final int ARTL_ART_final_value_775 = 778;
public static final int ARTL_ART_final_value_776 = 779;
public static final int ARTL_ART_fixed_part_727 = 780;
public static final int ARTL_ART_fixed_part_728 = 781;
public static final int ARTL_ART_fixed_part_729 = 782;
public static final int ARTL_ART_fixed_part_730 = 783;
public static final int ARTL_ART_fixed_part_731 = 784;
public static final int ARTL_ART_fixed_part_732 = 785;
public static final int ARTL_ART_fixed_part_733 = 786;
public static final int ARTL_ART_fixed_part_734 = 787;
public static final int ARTL_ART_fixed_part_735 = 788;
public static final int ARTL_ART_fixed_part_736 = 789;
public static final int ARTL_ART_fixed_part_737 = 790;
public static final int ARTL_ART_fixed_part_738 = 791;
public static final int ARTL_ART_for_statement_785 = 792;
public static final int ARTL_ART_for_statement_786 = 793;
public static final int ARTL_ART_for_statement_787 = 794;
public static final int ARTL_ART_for_statement_788 = 795;
public static final int ARTL_ART_for_statement_789 = 796;
public static final int ARTL_ART_for_statement_790 = 797;
public static final int ARTL_ART_for_statement_791 = 798;
public static final int ARTL_ART_for_statement_792 = 799;
public static final int ARTL_ART_for_statement_793 = 800;
public static final int ARTL_ART_for_statement_794 = 801;
public static final int ARTL_ART_for_statement_795 = 802;
public static final int ARTL_ART_for_statement_796 = 803;
public static final int ARTL_ART_for_statement_797 = 804;
public static final int ARTL_ART_for_statement_798 = 805;
public static final int ARTL_ART_for_statement_799 = 806;
public static final int ARTL_ART_for_statement_800 = 807;
public static final int ARTL_ART_for_statement_801 = 808;
public static final int ARTL_ART_for_statement_802 = 809;
public static final int ARTL_ART_for_statement_14_807 = 810;
public static final int ARTL_ART_for_statement_14_808 = 811;
public static final int ARTL_ART_for_statement_14_809 = 812;
public static final int ARTL_ART_for_statement_14_810 = 813;
public static final int ARTL_ART_for_statement_14_811 = 814;
public static final int ARTL_ART_for_statement_14_812 = 815;
public static final int ARTL_ART_for_statement_14_813 = 816;
public static final int ARTL_ART_for_statement_14_814 = 817;
public static final int ARTL_ART_formal_parameter_list_815 = 818;
public static final int ARTL_ART_formal_parameter_list_816 = 819;
public static final int ARTL_ART_formal_parameter_list_817 = 820;
public static final int ARTL_ART_formal_parameter_list_818 = 821;
public static final int ARTL_ART_formal_parameter_list_819 = 822;
public static final int ARTL_ART_formal_parameter_list_820 = 823;
public static final int ARTL_ART_formal_parameter_list_821 = 824;
public static final int ARTL_ART_formal_parameter_list_822 = 825;
public static final int ARTL_ART_formal_parameter_list_823 = 826;
public static final int ARTL_ART_formal_parameter_list_824 = 827;
public static final int ARTL_ART_formal_parameter_list_15_841 = 828;
public static final int ARTL_ART_formal_parameter_list_15_842 = 829;
public static final int ARTL_ART_formal_parameter_list_15_843 = 830;
public static final int ARTL_ART_formal_parameter_list_15_844 = 831;
public static final int ARTL_ART_formal_parameter_list_15_845 = 832;
public static final int ARTL_ART_formal_parameter_list_15_846 = 833;
public static final int ARTL_ART_formal_parameter_list_15_847 = 834;
public static final int ARTL_ART_formal_parameter_list_15_848 = 835;
public static final int ARTL_ART_formal_parameter_list_15_849 = 836;
public static final int ARTL_ART_formal_parameter_list_15_850 = 837;
public static final int ARTL_ART_formal_parameter_list_15_851 = 838;
public static final int ARTL_ART_formal_parameter_list_15_852 = 839;
public static final int ARTL_ART_formal_parameter_section_825 = 840;
public static final int ARTL_ART_formal_parameter_section_826 = 841;
public static final int ARTL_ART_formal_parameter_section_827 = 842;
public static final int ARTL_ART_formal_parameter_section_828 = 843;
public static final int ARTL_ART_formal_parameter_section_829 = 844;
public static final int ARTL_ART_formal_parameter_section_830 = 845;
public static final int ARTL_ART_formal_parameter_section_831 = 846;
public static final int ARTL_ART_formal_parameter_section_832 = 847;
public static final int ARTL_ART_formal_parameter_section_833 = 848;
public static final int ARTL_ART_formal_parameter_section_834 = 849;
public static final int ARTL_ART_formal_parameter_section_835 = 850;
public static final int ARTL_ART_formal_parameter_section_836 = 851;
public static final int ARTL_ART_formal_parameter_section_837 = 852;
public static final int ARTL_ART_formal_parameter_section_838 = 853;
public static final int ARTL_ART_formal_parameter_section_839 = 854;
public static final int ARTL_ART_formal_parameter_section_840 = 855;
public static final int ARTL_ART_fractional_part_879 = 856;
public static final int ARTL_ART_fractional_part_880 = 857;
public static final int ARTL_ART_fractional_part_881 = 858;
public static final int ARTL_ART_fractional_part_882 = 859;
public static final int ARTL_ART_function_ID_143 = 860;
public static final int ARTL_ART_function_ID_144 = 861;
public static final int ARTL_ART_function_ID_145 = 862;
public static final int ARTL_ART_function_ID_146 = 863;
public static final int ARTL_ART_function_block_883 = 864;
public static final int ARTL_ART_function_block_884 = 865;
public static final int ARTL_ART_function_block_885 = 866;
public static final int ARTL_ART_function_block_886 = 867;
public static final int ARTL_ART_function_declaration_887 = 868;
public static final int ARTL_ART_function_declaration_888 = 869;
public static final int ARTL_ART_function_declaration_889 = 870;
public static final int ARTL_ART_function_declaration_890 = 871;
public static final int ARTL_ART_function_declaration_891 = 872;
public static final int ARTL_ART_function_declaration_892 = 873;
public static final int ARTL_ART_function_declaration_893 = 874;
public static final int ARTL_ART_function_declaration_894 = 875;
public static final int ARTL_ART_function_declaration_895 = 876;
public static final int ARTL_ART_function_declaration_896 = 877;
public static final int ARTL_ART_function_declaration_897 = 878;
public static final int ARTL_ART_function_declaration_898 = 879;
public static final int ARTL_ART_function_declaration_899 = 880;
public static final int ARTL_ART_function_declaration_900 = 881;
public static final int ARTL_ART_function_declaration_901 = 882;
public static final int ARTL_ART_function_declaration_902 = 883;
public static final int ARTL_ART_function_declaration_903 = 884;
public static final int ARTL_ART_function_declaration_904 = 885;
public static final int ARTL_ART_function_declaration_905 = 886;
public static final int ARTL_ART_function_declaration_906 = 887;
public static final int ARTL_ART_function_declaration_907 = 888;
public static final int ARTL_ART_function_declaration_908 = 889;
public static final int ARTL_ART_function_declaration_909 = 890;
public static final int ARTL_ART_function_declaration_910 = 891;
public static final int ARTL_ART_function_designator_659 = 892;
public static final int ARTL_ART_function_designator_660 = 893;
public static final int ARTL_ART_function_designator_661 = 894;
public static final int ARTL_ART_function_designator_662 = 895;
public static final int ARTL_ART_function_designator_663 = 896;
public static final int ARTL_ART_function_designator_664 = 897;
public static final int ARTL_ART_function_designator_16_929 = 898;
public static final int ARTL_ART_function_designator_16_930 = 899;
public static final int ARTL_ART_function_designator_16_931 = 900;
public static final int ARTL_ART_function_designator_16_932 = 901;
public static final int ARTL_ART_function_designator_16_933 = 902;
public static final int ARTL_ART_function_designator_16_934 = 903;
public static final int ARTL_ART_function_designator_16_935 = 904;
public static final int ARTL_ART_function_designator_16_936 = 905;
public static final int ARTL_ART_function_heading_911 = 906;
public static final int ARTL_ART_function_heading_912 = 907;
public static final int ARTL_ART_function_heading_913 = 908;
public static final int ARTL_ART_function_heading_914 = 909;
public static final int ARTL_ART_function_heading_915 = 910;
public static final int ARTL_ART_function_heading_916 = 911;
public static final int ARTL_ART_function_heading_917 = 912;
public static final int ARTL_ART_function_heading_918 = 913;
public static final int ARTL_ART_function_heading_919 = 914;
public static final int ARTL_ART_function_heading_920 = 915;
public static final int ARTL_ART_function_heading_921 = 916;
public static final int ARTL_ART_function_heading_922 = 917;
public static final int ARTL_ART_function_heading_17_937 = 918;
public static final int ARTL_ART_function_heading_17_938 = 919;
public static final int ARTL_ART_function_heading_17_939 = 920;
public static final int ARTL_ART_function_heading_17_940 = 921;
public static final int ARTL_ART_function_heading_17_941 = 922;
public static final int ARTL_ART_function_heading_17_942 = 923;
public static final int ARTL_ART_function_heading_17_943 = 924;
public static final int ARTL_ART_function_heading_17_944 = 925;
public static final int ARTL_ART_function_identification_923 = 926;
public static final int ARTL_ART_function_identification_924 = 927;
public static final int ARTL_ART_function_identification_925 = 928;
public static final int ARTL_ART_function_identification_926 = 929;
public static final int ARTL_ART_function_identification_927 = 930;
public static final int ARTL_ART_function_identification_928 = 931;
public static final int ARTL_ART_functional_parameter_specification_875 = 932;
public static final int ARTL_ART_functional_parameter_specification_876 = 933;
public static final int ARTL_ART_functional_parameter_specification_877 = 934;
public static final int ARTL_ART_functional_parameter_specification_878 = 935;
public static final int ARTL_ART_goto_statement_949 = 936;
public static final int ARTL_ART_goto_statement_950 = 937;
public static final int ARTL_ART_goto_statement_951 = 938;
public static final int ARTL_ART_goto_statement_952 = 939;
public static final int ARTL_ART_goto_statement_953 = 940;
public static final int ARTL_ART_goto_statement_954 = 941;
public static final int ARTL_ART_if_statement_361 = 942;
public static final int ARTL_ART_if_statement_362 = 943;
public static final int ARTL_ART_if_statement_363 = 944;
public static final int ARTL_ART_if_statement_364 = 945;
public static final int ARTL_ART_if_statement_365 = 946;
public static final int ARTL_ART_if_statement_366 = 947;
public static final int ARTL_ART_if_statement_367 = 948;
public static final int ARTL_ART_if_statement_368 = 949;
public static final int ARTL_ART_if_statement_369 = 950;
public static final int ARTL_ART_if_statement_370 = 951;
public static final int ARTL_ART_if_statement_371 = 952;
public static final int ARTL_ART_if_statement_372 = 953;
public static final int ARTL_ART_if_statement_19_971 = 954;
public static final int ARTL_ART_if_statement_19_972 = 955;
public static final int ARTL_ART_if_statement_19_973 = 956;
public static final int ARTL_ART_if_statement_19_974 = 957;
public static final int ARTL_ART_if_statement_19_975 = 958;
public static final int ARTL_ART_if_statement_19_976 = 959;
public static final int ARTL_ART_if_statement_19_977 = 960;
public static final int ARTL_ART_if_statement_19_978 = 961;
public static final int ARTL_ART_index_expression_979 = 962;
public static final int ARTL_ART_index_expression_980 = 963;
public static final int ARTL_ART_index_expression_981 = 964;
public static final int ARTL_ART_index_expression_982 = 965;
public static final int ARTL_ART_index_type_93 = 966;
public static final int ARTL_ART_index_type_94 = 967;
public static final int ARTL_ART_index_type_95 = 968;
public static final int ARTL_ART_index_type_96 = 969;
public static final int ARTL_ART_index_type_specification_983 = 970;
public static final int ARTL_ART_index_type_specification_984 = 971;
public static final int ARTL_ART_index_type_specification_985 = 972;
public static final int ARTL_ART_index_type_specification_986 = 973;
public static final int ARTL_ART_index_type_specification_987 = 974;
public static final int ARTL_ART_index_type_specification_988 = 975;
public static final int ARTL_ART_index_type_specification_989 = 976;
public static final int ARTL_ART_index_type_specification_990 = 977;
public static final int ARTL_ART_index_type_specification_991 = 978;
public static final int ARTL_ART_index_type_specification_992 = 979;
public static final int ARTL_ART_index_type_specification_993 = 980;
public static final int ARTL_ART_index_type_specification_994 = 981;
public static final int ARTL_ART_indexed_variable_315 = 982;
public static final int ARTL_ART_indexed_variable_316 = 983;
public static final int ARTL_ART_indexed_variable_317 = 984;
public static final int ARTL_ART_indexed_variable_318 = 985;
public static final int ARTL_ART_indexed_variable_319 = 986;
public static final int ARTL_ART_indexed_variable_320 = 987;
public static final int ARTL_ART_indexed_variable_321 = 988;
public static final int ARTL_ART_indexed_variable_322 = 989;
public static final int ARTL_ART_indexed_variable_323 = 990;
public static final int ARTL_ART_indexed_variable_324 = 991;
public static final int ARTL_ART_indexed_variable_325 = 992;
public static final int ARTL_ART_indexed_variable_326 = 993;
public static final int ARTL_ART_indexed_variable_20_999 = 994;
public static final int ARTL_ART_indexed_variable_20_1000 = 995;
public static final int ARTL_ART_indexed_variable_20_1001 = 996;
public static final int ARTL_ART_indexed_variable_20_1002 = 997;
public static final int ARTL_ART_indexed_variable_20_1003 = 998;
public static final int ARTL_ART_indexed_variable_20_1004 = 999;
public static final int ARTL_ART_indexed_variable_20_1005 = 1000;
public static final int ARTL_ART_indexed_variable_20_1006 = 1001;
public static final int ARTL_ART_indexed_variable_20_1007 = 1002;
public static final int ARTL_ART_indexed_variable_20_1008 = 1003;
public static final int ARTL_ART_indexed_variable_20_1009 = 1004;
public static final int ARTL_ART_indexed_variable_20_1010 = 1005;
public static final int ARTL_ART_initial_value_803 = 1006;
public static final int ARTL_ART_initial_value_804 = 1007;
public static final int ARTL_ART_initial_value_805 = 1008;
public static final int ARTL_ART_initial_value_806 = 1009;
public static final int ARTL_ART_label_955 = 1010;
public static final int ARTL_ART_label_956 = 1011;
public static final int ARTL_ART_label_957 = 1012;
public static final int ARTL_ART_label_958 = 1013;
public static final int ARTL_ART_label_declaration_part_173 = 1014;
public static final int ARTL_ART_label_declaration_part_174 = 1015;
public static final int ARTL_ART_label_declaration_part_175 = 1016;
public static final int ARTL_ART_label_declaration_part_176 = 1017;
public static final int ARTL_ART_label_declaration_part_21_1011 = 1018;
public static final int ARTL_ART_label_declaration_part_21_1012 = 1019;
public static final int ARTL_ART_label_declaration_part_21_1013 = 1020;
public static final int ARTL_ART_label_declaration_part_21_1014 = 1021;
public static final int ARTL_ART_label_declaration_part_21_1015 = 1022;
public static final int ARTL_ART_label_declaration_part_21_1016 = 1023;
public static final int ARTL_ART_label_declaration_part_21_1017 = 1024;
public static final int ARTL_ART_label_declaration_part_21_1018 = 1025;
public static final int ARTL_ART_label_declaration_part_21_1019 = 1026;
public static final int ARTL_ART_label_declaration_part_21_1020 = 1027;
public static final int ARTL_ART_label_declaration_part_21_1021 = 1028;
public static final int ARTL_ART_label_declaration_part_21_1022 = 1029;
public static final int ARTL_ART_label_declaration_part_21_1023 = 1030;
public static final int ARTL_ART_label_declaration_part_21_1024 = 1031;
public static final int ARTL_ART_label_declaration_part_22_1025 = 1032;
public static final int ARTL_ART_label_declaration_part_22_1026 = 1033;
public static final int ARTL_ART_label_declaration_part_22_1027 = 1034;
public static final int ARTL_ART_label_declaration_part_22_1028 = 1035;
public static final int ARTL_ART_label_declaration_part_22_1029 = 1036;
public static final int ARTL_ART_label_declaration_part_22_1030 = 1037;
public static final int ARTL_ART_label_declaration_part_22_1031 = 1038;
public static final int ARTL_ART_label_declaration_part_22_1032 = 1039;
public static final int ARTL_ART_label_declaration_part_22_1033 = 1040;
public static final int ARTL_ART_label_declaration_part_22_1034 = 1041;
public static final int ARTL_ART_label_declaration_part_22_1035 = 1042;
public static final int ARTL_ART_label_declaration_part_22_1036 = 1043;
public static final int ARTL_ART_letter_1037 = 1044;
public static final int ARTL_ART_letter_1038 = 1045;
public static final int ARTL_ART_letter_1039 = 1046;
public static final int ARTL_ART_letter_1040 = 1047;
public static final int ARTL_ART_member_designator_1041 = 1048;
public static final int ARTL_ART_member_designator_1042 = 1049;
public static final int ARTL_ART_member_designator_1043 = 1050;
public static final int ARTL_ART_member_designator_1044 = 1051;
public static final int ARTL_ART_member_designator_1045 = 1052;
public static final int ARTL_ART_member_designator_1046 = 1053;
public static final int ARTL_ART_member_designator_23_1047 = 1054;
public static final int ARTL_ART_member_designator_23_1048 = 1055;
public static final int ARTL_ART_member_designator_23_1049 = 1056;
public static final int ARTL_ART_member_designator_23_1050 = 1057;
public static final int ARTL_ART_member_designator_23_1051 = 1058;
public static final int ARTL_ART_member_designator_23_1052 = 1059;
public static final int ARTL_ART_member_designator_23_1053 = 1060;
public static final int ARTL_ART_member_designator_23_1054 = 1061;
public static final int ARTL_ART_member_designator_23_1055 = 1062;
public static final int ARTL_ART_member_designator_23_1056 = 1063;
public static final int ARTL_ART_member_designator_23_1057 = 1064;
public static final int ARTL_ART_member_designator_23_1058 = 1065;
public static final int ARTL_ART_multiplying_operator_1059 = 1066;
public static final int ARTL_ART_multiplying_operator_1060 = 1067;
public static final int ARTL_ART_multiplying_operator_1061 = 1068;
public static final int ARTL_ART_multiplying_operator_1062 = 1069;
public static final int ARTL_ART_multiplying_operator_1063 = 1070;
public static final int ARTL_ART_multiplying_operator_1064 = 1071;
public static final int ARTL_ART_multiplying_operator_1065 = 1072;
public static final int ARTL_ART_multiplying_operator_1066 = 1073;
public static final int ARTL_ART_multiplying_operator_1067 = 1074;
public static final int ARTL_ART_multiplying_operator_1068 = 1075;
public static final int ARTL_ART_multiplying_operator_1069 = 1076;
public static final int ARTL_ART_multiplying_operator_1070 = 1077;
public static final int ARTL_ART_multiplying_operator_1071 = 1078;
public static final int ARTL_ART_multiplying_operator_1072 = 1079;
public static final int ARTL_ART_multiplying_operator_1073 = 1080;
public static final int ARTL_ART_multiplying_operator_1074 = 1081;
public static final int ARTL_ART_multiplying_operator_1075 = 1082;
public static final int ARTL_ART_multiplying_operator_1076 = 1083;
public static final int ARTL_ART_multiplying_operator_1077 = 1084;
public static final int ARTL_ART_multiplying_operator_1078 = 1085;
public static final int ARTL_ART_new_ordinal_type_1079 = 1086;
public static final int ARTL_ART_new_ordinal_type_1080 = 1087;
public static final int ARTL_ART_new_ordinal_type_1081 = 1088;
public static final int ARTL_ART_new_ordinal_type_1082 = 1089;
public static final int ARTL_ART_new_ordinal_type_1083 = 1090;
public static final int ARTL_ART_new_ordinal_type_1084 = 1091;
public static final int ARTL_ART_new_ordinal_type_1085 = 1092;
public static final int ARTL_ART_new_ordinal_type_1086 = 1093;
public static final int ARTL_ART_new_pointer_type_1095 = 1094;
public static final int ARTL_ART_new_pointer_type_1096 = 1095;
public static final int ARTL_ART_new_pointer_type_1097 = 1096;
public static final int ARTL_ART_new_pointer_type_1098 = 1097;
public static final int ARTL_ART_new_pointer_type_1099 = 1098;
public static final int ARTL_ART_new_pointer_type_1100 = 1099;
public static final int ARTL_ART_new_structured_type_1101 = 1100;
public static final int ARTL_ART_new_structured_type_1102 = 1101;
public static final int ARTL_ART_new_structured_type_1103 = 1102;
public static final int ARTL_ART_new_structured_type_1104 = 1103;
public static final int ARTL_ART_new_structured_type_1105 = 1104;
public static final int ARTL_ART_new_structured_type_1106 = 1105;
public static final int ARTL_ART_new_structured_type_24_1107 = 1106;
public static final int ARTL_ART_new_structured_type_24_1108 = 1107;
public static final int ARTL_ART_new_structured_type_24_1109 = 1108;
public static final int ARTL_ART_new_structured_type_24_1110 = 1109;
public static final int ARTL_ART_new_structured_type_24_1111 = 1110;
public static final int ARTL_ART_new_structured_type_24_1112 = 1111;
public static final int ARTL_ART_new_structured_type_24_1113 = 1112;
public static final int ARTL_ART_new_structured_type_24_1114 = 1113;
public static final int ARTL_ART_new_type_1131 = 1114;
public static final int ARTL_ART_new_type_1132 = 1115;
public static final int ARTL_ART_new_type_1133 = 1116;
public static final int ARTL_ART_new_type_1134 = 1117;
public static final int ARTL_ART_new_type_1135 = 1118;
public static final int ARTL_ART_new_type_1136 = 1119;
public static final int ARTL_ART_new_type_1137 = 1120;
public static final int ARTL_ART_new_type_1138 = 1121;
public static final int ARTL_ART_new_type_1139 = 1122;
public static final int ARTL_ART_new_type_1140 = 1123;
public static final int ARTL_ART_new_type_1141 = 1124;
public static final int ARTL_ART_new_type_1142 = 1125;
public static final int ARTL_ART_ordinal_type_151 = 1126;
public static final int ARTL_ART_ordinal_type_152 = 1127;
public static final int ARTL_ART_ordinal_type_153 = 1128;
public static final int ARTL_ART_ordinal_type_154 = 1129;
public static final int ARTL_ART_ordinal_type_155 = 1130;
public static final int ARTL_ART_ordinal_type_156 = 1131;
public static final int ARTL_ART_ordinal_type_157 = 1132;
public static final int ARTL_ART_ordinal_type_158 = 1133;
public static final int ARTL_ART_ordinal_type_ID_995 = 1134;
public static final int ARTL_ART_ordinal_type_ID_996 = 1135;
public static final int ARTL_ART_ordinal_type_ID_997 = 1136;
public static final int ARTL_ART_ordinal_type_ID_998 = 1137;
public static final int ARTL_ART_packed_conformant_array_schema_407 = 1138;
public static final int ARTL_ART_packed_conformant_array_schema_408 = 1139;
public static final int ARTL_ART_packed_conformant_array_schema_409 = 1140;
public static final int ARTL_ART_packed_conformant_array_schema_410 = 1141;
public static final int ARTL_ART_packed_conformant_array_schema_411 = 1142;
public static final int ARTL_ART_packed_conformant_array_schema_412 = 1143;
public static final int ARTL_ART_packed_conformant_array_schema_413 = 1144;
public static final int ARTL_ART_packed_conformant_array_schema_414 = 1145;
public static final int ARTL_ART_packed_conformant_array_schema_415 = 1146;
public static final int ARTL_ART_packed_conformant_array_schema_416 = 1147;
public static final int ARTL_ART_packed_conformant_array_schema_417 = 1148;
public static final int ARTL_ART_packed_conformant_array_schema_418 = 1149;
public static final int ARTL_ART_packed_conformant_array_schema_419 = 1150;
public static final int ARTL_ART_packed_conformant_array_schema_420 = 1151;
public static final int ARTL_ART_packed_conformant_array_schema_421 = 1152;
public static final int ARTL_ART_packed_conformant_array_schema_422 = 1153;
public static final int ARTL_ART_pointer_type_1143 = 1154;
public static final int ARTL_ART_pointer_type_1144 = 1155;
public static final int ARTL_ART_pointer_type_1145 = 1156;
public static final int ARTL_ART_pointer_type_1146 = 1157;
public static final int ARTL_ART_pointer_type_1147 = 1158;
public static final int ARTL_ART_pointer_type_1148 = 1159;
public static final int ARTL_ART_pointer_type_1149 = 1160;
public static final int ARTL_ART_pointer_type_1150 = 1161;
public static final int ARTL_ART_pointer_type_ID_1151 = 1162;
public static final int ARTL_ART_pointer_type_ID_1152 = 1163;
public static final int ARTL_ART_pointer_type_ID_1153 = 1164;
public static final int ARTL_ART_pointer_type_ID_1154 = 1165;
public static final int ARTL_ART_procedural_parameter_specification_871 = 1166;
public static final int ARTL_ART_procedural_parameter_specification_872 = 1167;
public static final int ARTL_ART_procedural_parameter_specification_873 = 1168;
public static final int ARTL_ART_procedural_parameter_specification_874 = 1169;
public static final int ARTL_ART_procedure_ID_35 = 1170;
public static final int ARTL_ART_procedure_ID_36 = 1171;
public static final int ARTL_ART_procedure_ID_37 = 1172;
public static final int ARTL_ART_procedure_ID_38 = 1173;
public static final int ARTL_ART_procedure_and_function_declaration_part_189 = 1174;
public static final int ARTL_ART_procedure_and_function_declaration_part_190 = 1175;
public static final int ARTL_ART_procedure_and_function_declaration_part_191 = 1176;
public static final int ARTL_ART_procedure_and_function_declaration_part_192 = 1177;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1163 = 1178;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1164 = 1179;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1165 = 1180;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1166 = 1181;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1167 = 1182;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1168 = 1183;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1169 = 1184;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1170 = 1185;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1171 = 1186;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1172 = 1187;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1173 = 1188;
public static final int ARTL_ART_procedure_and_function_declaration_part_25_1174 = 1189;
public static final int ARTL_ART_procedure_and_function_declaration_part_26_1175 = 1190;
public static final int ARTL_ART_procedure_and_function_declaration_part_26_1176 = 1191;
public static final int ARTL_ART_procedure_and_function_declaration_part_26_1177 = 1192;
public static final int ARTL_ART_procedure_and_function_declaration_part_26_1178 = 1193;
public static final int ARTL_ART_procedure_and_function_declaration_part_26_1179 = 1194;
public static final int ARTL_ART_procedure_and_function_declaration_part_26_1180 = 1195;
public static final int ARTL_ART_procedure_and_function_declaration_part_26_1181 = 1196;
public static final int ARTL_ART_procedure_and_function_declaration_part_26_1182 = 1197;
public static final int ARTL_ART_procedure_and_function_heading_part_1207 = 1198;
public static final int ARTL_ART_procedure_and_function_heading_part_1208 = 1199;
public static final int ARTL_ART_procedure_and_function_heading_part_1209 = 1200;
public static final int ARTL_ART_procedure_and_function_heading_part_1210 = 1201;
public static final int ARTL_ART_procedure_and_function_heading_part_1211 = 1202;
public static final int ARTL_ART_procedure_and_function_heading_part_1212 = 1203;
public static final int ARTL_ART_procedure_and_function_heading_part_27_1213 = 1204;
public static final int ARTL_ART_procedure_and_function_heading_part_27_1214 = 1205;
public static final int ARTL_ART_procedure_and_function_heading_part_27_1215 = 1206;
public static final int ARTL_ART_procedure_and_function_heading_part_27_1216 = 1207;
public static final int ARTL_ART_procedure_and_function_heading_part_27_1217 = 1208;
public static final int ARTL_ART_procedure_and_function_heading_part_27_1218 = 1209;
public static final int ARTL_ART_procedure_and_function_heading_part_27_1219 = 1210;
public static final int ARTL_ART_procedure_and_function_heading_part_27_1220 = 1211;
public static final int ARTL_ART_procedure_block_1221 = 1212;
public static final int ARTL_ART_procedure_block_1222 = 1213;
public static final int ARTL_ART_procedure_block_1223 = 1214;
public static final int ARTL_ART_procedure_block_1224 = 1215;
public static final int ARTL_ART_procedure_declaration_1183 = 1216;
public static final int ARTL_ART_procedure_declaration_1184 = 1217;
public static final int ARTL_ART_procedure_declaration_1185 = 1218;
public static final int ARTL_ART_procedure_declaration_1186 = 1219;
public static final int ARTL_ART_procedure_declaration_1187 = 1220;
public static final int ARTL_ART_procedure_declaration_1188 = 1221;
public static final int ARTL_ART_procedure_declaration_1189 = 1222;
public static final int ARTL_ART_procedure_declaration_1190 = 1223;
public static final int ARTL_ART_procedure_declaration_1191 = 1224;
public static final int ARTL_ART_procedure_declaration_1192 = 1225;
public static final int ARTL_ART_procedure_declaration_1193 = 1226;
public static final int ARTL_ART_procedure_declaration_1194 = 1227;
public static final int ARTL_ART_procedure_declaration_1195 = 1228;
public static final int ARTL_ART_procedure_declaration_1196 = 1229;
public static final int ARTL_ART_procedure_declaration_1197 = 1230;
public static final int ARTL_ART_procedure_declaration_1198 = 1231;
public static final int ARTL_ART_procedure_declaration_1199 = 1232;
public static final int ARTL_ART_procedure_declaration_1200 = 1233;
public static final int ARTL_ART_procedure_declaration_1201 = 1234;
public static final int ARTL_ART_procedure_declaration_1202 = 1235;
public static final int ARTL_ART_procedure_declaration_1203 = 1236;
public static final int ARTL_ART_procedure_declaration_1204 = 1237;
public static final int ARTL_ART_procedure_declaration_1205 = 1238;
public static final int ARTL_ART_procedure_declaration_1206 = 1239;
public static final int ARTL_ART_procedure_heading_1155 = 1240;
public static final int ARTL_ART_procedure_heading_1156 = 1241;
public static final int ARTL_ART_procedure_heading_1157 = 1242;
public static final int ARTL_ART_procedure_heading_1158 = 1243;
public static final int ARTL_ART_procedure_heading_1159 = 1244;
public static final int ARTL_ART_procedure_heading_1160 = 1245;
public static final int ARTL_ART_procedure_heading_1161 = 1246;
public static final int ARTL_ART_procedure_heading_1162 = 1247;
public static final int ARTL_ART_procedure_heading_28_1231 = 1248;
public static final int ARTL_ART_procedure_heading_28_1232 = 1249;
public static final int ARTL_ART_procedure_heading_28_1233 = 1250;
public static final int ARTL_ART_procedure_heading_28_1234 = 1251;
public static final int ARTL_ART_procedure_heading_28_1235 = 1252;
public static final int ARTL_ART_procedure_heading_28_1236 = 1253;
public static final int ARTL_ART_procedure_heading_28_1237 = 1254;
public static final int ARTL_ART_procedure_heading_28_1238 = 1255;
public static final int ARTL_ART_procedure_identification_1225 = 1256;
public static final int ARTL_ART_procedure_identification_1226 = 1257;
public static final int ARTL_ART_procedure_identification_1227 = 1258;
public static final int ARTL_ART_procedure_identification_1228 = 1259;
public static final int ARTL_ART_procedure_identification_1229 = 1260;
public static final int ARTL_ART_procedure_identification_1230 = 1261;
public static final int ARTL_ART_procedure_statement_1239 = 1262;
public static final int ARTL_ART_procedure_statement_1240 = 1263;
public static final int ARTL_ART_procedure_statement_1241 = 1264;
public static final int ARTL_ART_procedure_statement_1242 = 1265;
public static final int ARTL_ART_procedure_statement_1243 = 1266;
public static final int ARTL_ART_procedure_statement_1244 = 1267;
public static final int ARTL_ART_procedure_statement_1245 = 1268;
public static final int ARTL_ART_procedure_statement_1246 = 1269;
public static final int ARTL_ART_procedure_statement_1247 = 1270;
public static final int ARTL_ART_procedure_statement_1248 = 1271;
public static final int ARTL_ART_procedure_statement_1249 = 1272;
public static final int ARTL_ART_procedure_statement_1250 = 1273;
public static final int ARTL_ART_procedure_statement_1251 = 1274;
public static final int ARTL_ART_procedure_statement_1252 = 1275;
public static final int ARTL_ART_procedure_statement_1253 = 1276;
public static final int ARTL_ART_procedure_statement_1254 = 1277;
public static final int ARTL_ART_procedure_statement_1255 = 1278;
public static final int ARTL_ART_procedure_statement_1256 = 1279;
public static final int ARTL_ART_procedure_statement_1257 = 1280;
public static final int ARTL_ART_procedure_statement_1258 = 1281;
public static final int ARTL_ART_procedure_statement_1259 = 1282;
public static final int ARTL_ART_procedure_statement_1260 = 1283;
public static final int ARTL_ART_procedure_statement_1261 = 1284;
public static final int ARTL_ART_procedure_statement_1262 = 1285;
public static final int ARTL_ART_procedure_statement_1263 = 1286;
public static final int ARTL_ART_procedure_statement_1264 = 1287;
public static final int ARTL_ART_procedure_statement_1265 = 1288;
public static final int ARTL_ART_procedure_statement_1266 = 1289;
public static final int ARTL_ART_procedure_statement_1267 = 1290;
public static final int ARTL_ART_procedure_statement_1268 = 1291;
public static final int ARTL_ART_procedure_statement_29_1269 = 1292;
public static final int ARTL_ART_procedure_statement_29_1270 = 1293;
public static final int ARTL_ART_procedure_statement_29_1271 = 1294;
public static final int ARTL_ART_procedure_statement_29_1272 = 1295;
public static final int ARTL_ART_procedure_statement_29_1273 = 1296;
public static final int ARTL_ART_procedure_statement_29_1274 = 1297;
public static final int ARTL_ART_procedure_statement_29_1275 = 1298;
public static final int ARTL_ART_procedure_statement_29_1276 = 1299;
public static final int ARTL_ART_program_1 = 1300;
public static final int ARTL_ART_program_2 = 1301;
public static final int ARTL_ART_program_3 = 1302;
public static final int ARTL_ART_program_4 = 1303;
public static final int ARTL_ART_program_5 = 1304;
public static final int ARTL_ART_program_6 = 1305;
public static final int ARTL_ART_program_7 = 1306;
public static final int ARTL_ART_program_8 = 1307;
public static final int ARTL_ART_program_block_17 = 1308;
public static final int ARTL_ART_program_block_18 = 1309;
public static final int ARTL_ART_program_block_19 = 1310;
public static final int ARTL_ART_program_block_20 = 1311;
public static final int ARTL_ART_program_heading_9 = 1312;
public static final int ARTL_ART_program_heading_10 = 1313;
public static final int ARTL_ART_program_heading_11 = 1314;
public static final int ARTL_ART_program_heading_12 = 1315;
public static final int ARTL_ART_program_heading_13 = 1316;
public static final int ARTL_ART_program_heading_14 = 1317;
public static final int ARTL_ART_program_heading_15 = 1318;
public static final int ARTL_ART_program_heading_16 = 1319;
public static final int ARTL_ART_program_heading_30_1305 = 1320;
public static final int ARTL_ART_program_heading_30_1306 = 1321;
public static final int ARTL_ART_program_heading_30_1307 = 1322;
public static final int ARTL_ART_program_heading_30_1308 = 1323;
public static final int ARTL_ART_program_heading_30_1309 = 1324;
public static final int ARTL_ART_program_heading_30_1310 = 1325;
public static final int ARTL_ART_program_heading_30_1311 = 1326;
public static final int ARTL_ART_program_heading_30_1312 = 1327;
public static final int ARTL_ART_program_heading_30_1313 = 1328;
public static final int ARTL_ART_program_heading_30_1314 = 1329;
public static final int ARTL_ART_program_heading_30_1315 = 1330;
public static final int ARTL_ART_program_heading_30_1316 = 1331;
public static final int ARTL_ART_program_parameters_1317 = 1332;
public static final int ARTL_ART_program_parameters_1318 = 1333;
public static final int ARTL_ART_program_parameters_1319 = 1334;
public static final int ARTL_ART_program_parameters_1320 = 1335;
public static final int ARTL_ART_read_parameter_list_1277 = 1336;
public static final int ARTL_ART_read_parameter_list_1278 = 1337;
public static final int ARTL_ART_read_parameter_list_1279 = 1338;
public static final int ARTL_ART_read_parameter_list_1280 = 1339;
public static final int ARTL_ART_read_parameter_list_1281 = 1340;
public static final int ARTL_ART_read_parameter_list_1282 = 1341;
public static final int ARTL_ART_read_parameter_list_1283 = 1342;
public static final int ARTL_ART_read_parameter_list_1284 = 1343;
public static final int ARTL_ART_read_parameter_list_1285 = 1344;
public static final int ARTL_ART_read_parameter_list_1286 = 1345;
public static final int ARTL_ART_read_parameter_list_31_1321 = 1346;
public static final int ARTL_ART_read_parameter_list_31_1322 = 1347;
public static final int ARTL_ART_read_parameter_list_31_1323 = 1348;
public static final int ARTL_ART_read_parameter_list_31_1324 = 1349;
public static final int ARTL_ART_read_parameter_list_31_1325 = 1350;
public static final int ARTL_ART_read_parameter_list_31_1326 = 1351;
public static final int ARTL_ART_read_parameter_list_31_1327 = 1352;
public static final int ARTL_ART_read_parameter_list_31_1328 = 1353;
public static final int ARTL_ART_read_parameter_list_31_1329 = 1354;
public static final int ARTL_ART_read_parameter_list_31_1330 = 1355;
public static final int ARTL_ART_read_parameter_list_31_1331 = 1356;
public static final int ARTL_ART_read_parameter_list_31_1332 = 1357;
public static final int ARTL_ART_readln_parameter_list_1287 = 1358;
public static final int ARTL_ART_readln_parameter_list_1288 = 1359;
public static final int ARTL_ART_readln_parameter_list_1289 = 1360;
public static final int ARTL_ART_readln_parameter_list_1290 = 1361;
public static final int ARTL_ART_readln_parameter_list_32_1333 = 1362;
public static final int ARTL_ART_readln_parameter_list_32_1334 = 1363;
public static final int ARTL_ART_readln_parameter_list_32_1335 = 1364;
public static final int ARTL_ART_readln_parameter_list_32_1336 = 1365;
public static final int ARTL_ART_readln_parameter_list_32_1337 = 1366;
public static final int ARTL_ART_readln_parameter_list_32_1338 = 1367;
public static final int ARTL_ART_readln_parameter_list_32_1339 = 1368;
public static final int ARTL_ART_readln_parameter_list_32_1340 = 1369;
public static final int ARTL_ART_readln_parameter_list_32_1341 = 1370;
public static final int ARTL_ART_readln_parameter_list_32_1342 = 1371;
public static final int ARTL_ART_readln_parameter_list_32_1343 = 1372;
public static final int ARTL_ART_readln_parameter_list_32_1344 = 1373;
public static final int ARTL_ART_readln_parameter_list_32_1345 = 1374;
public static final int ARTL_ART_readln_parameter_list_32_1346 = 1375;
public static final int ARTL_ART_readln_parameter_list_33_1347 = 1376;
public static final int ARTL_ART_readln_parameter_list_33_1348 = 1377;
public static final int ARTL_ART_readln_parameter_list_33_1349 = 1378;
public static final int ARTL_ART_readln_parameter_list_33_1350 = 1379;
public static final int ARTL_ART_readln_parameter_list_33_1351 = 1380;
public static final int ARTL_ART_readln_parameter_list_33_1352 = 1381;
public static final int ARTL_ART_readln_parameter_list_33_1353 = 1382;
public static final int ARTL_ART_readln_parameter_list_33_1354 = 1383;
public static final int ARTL_ART_readln_parameter_list_33_1355 = 1384;
public static final int ARTL_ART_readln_parameter_list_33_1356 = 1385;
public static final int ARTL_ART_readln_parameter_list_33_1357 = 1386;
public static final int ARTL_ART_readln_parameter_list_33_1358 = 1387;
public static final int ARTL_ART_real_type_ID_1359 = 1388;
public static final int ARTL_ART_real_type_ID_1360 = 1389;
public static final int ARTL_ART_real_type_ID_1361 = 1390;
public static final int ARTL_ART_real_type_ID_1362 = 1391;
public static final int ARTL_ART_record_section_777 = 1392;
public static final int ARTL_ART_record_section_778 = 1393;
public static final int ARTL_ART_record_section_779 = 1394;
public static final int ARTL_ART_record_section_780 = 1395;
public static final int ARTL_ART_record_section_781 = 1396;
public static final int ARTL_ART_record_section_782 = 1397;
public static final int ARTL_ART_record_section_783 = 1398;
public static final int ARTL_ART_record_section_784 = 1399;
public static final int ARTL_ART_record_type_1363 = 1400;
public static final int ARTL_ART_record_type_1364 = 1401;
public static final int ARTL_ART_record_type_1365 = 1402;
public static final int ARTL_ART_record_type_1366 = 1403;
public static final int ARTL_ART_record_type_1367 = 1404;
public static final int ARTL_ART_record_type_1368 = 1405;
public static final int ARTL_ART_record_type_1369 = 1406;
public static final int ARTL_ART_record_type_1370 = 1407;
public static final int ARTL_ART_record_variable_list_1371 = 1408;
public static final int ARTL_ART_record_variable_list_1372 = 1409;
public static final int ARTL_ART_record_variable_list_1373 = 1410;
public static final int ARTL_ART_record_variable_list_1374 = 1411;
public static final int ARTL_ART_record_variable_list_1375 = 1412;
public static final int ARTL_ART_record_variable_list_1376 = 1413;
public static final int ARTL_ART_record_variable_list_34_1377 = 1414;
public static final int ARTL_ART_record_variable_list_34_1378 = 1415;
public static final int ARTL_ART_record_variable_list_34_1379 = 1416;
public static final int ARTL_ART_record_variable_list_34_1380 = 1417;
public static final int ARTL_ART_record_variable_list_34_1381 = 1418;
public static final int ARTL_ART_record_variable_list_34_1382 = 1419;
public static final int ARTL_ART_record_variable_list_34_1383 = 1420;
public static final int ARTL_ART_record_variable_list_34_1384 = 1421;
public static final int ARTL_ART_record_variable_list_34_1385 = 1422;
public static final int ARTL_ART_record_variable_list_34_1386 = 1423;
public static final int ARTL_ART_record_variable_list_34_1387 = 1424;
public static final int ARTL_ART_record_variable_list_34_1388 = 1425;
public static final int ARTL_ART_relational_operator_585 = 1426;
public static final int ARTL_ART_relational_operator_586 = 1427;
public static final int ARTL_ART_relational_operator_587 = 1428;
public static final int ARTL_ART_relational_operator_588 = 1429;
public static final int ARTL_ART_relational_operator_589 = 1430;
public static final int ARTL_ART_relational_operator_590 = 1431;
public static final int ARTL_ART_relational_operator_591 = 1432;
public static final int ARTL_ART_relational_operator_592 = 1433;
public static final int ARTL_ART_relational_operator_593 = 1434;
public static final int ARTL_ART_relational_operator_594 = 1435;
public static final int ARTL_ART_relational_operator_595 = 1436;
public static final int ARTL_ART_relational_operator_596 = 1437;
public static final int ARTL_ART_relational_operator_597 = 1438;
public static final int ARTL_ART_relational_operator_598 = 1439;
public static final int ARTL_ART_relational_operator_599 = 1440;
public static final int ARTL_ART_relational_operator_600 = 1441;
public static final int ARTL_ART_relational_operator_601 = 1442;
public static final int ARTL_ART_relational_operator_602 = 1443;
public static final int ARTL_ART_relational_operator_603 = 1444;
public static final int ARTL_ART_relational_operator_604 = 1445;
public static final int ARTL_ART_relational_operator_605 = 1446;
public static final int ARTL_ART_relational_operator_606 = 1447;
public static final int ARTL_ART_relational_operator_607 = 1448;
public static final int ARTL_ART_relational_operator_608 = 1449;
public static final int ARTL_ART_relational_operator_609 = 1450;
public static final int ARTL_ART_relational_operator_610 = 1451;
public static final int ARTL_ART_relational_operator_611 = 1452;
public static final int ARTL_ART_relational_operator_612 = 1453;
public static final int ARTL_ART_repeat_statement_1389 = 1454;
public static final int ARTL_ART_repeat_statement_1390 = 1455;
public static final int ARTL_ART_repeat_statement_1391 = 1456;
public static final int ARTL_ART_repeat_statement_1392 = 1457;
public static final int ARTL_ART_repeat_statement_1393 = 1458;
public static final int ARTL_ART_repeat_statement_1394 = 1459;
public static final int ARTL_ART_repeat_statement_1395 = 1460;
public static final int ARTL_ART_repeat_statement_1396 = 1461;
public static final int ARTL_ART_repeat_statement_1397 = 1462;
public static final int ARTL_ART_repeat_statement_1398 = 1463;
public static final int ARTL_ART_repetitive_statement_1399 = 1464;
public static final int ARTL_ART_repetitive_statement_1400 = 1465;
public static final int ARTL_ART_repetitive_statement_1401 = 1466;
public static final int ARTL_ART_repetitive_statement_1402 = 1467;
public static final int ARTL_ART_repetitive_statement_1403 = 1468;
public static final int ARTL_ART_repetitive_statement_1404 = 1469;
public static final int ARTL_ART_repetitive_statement_1405 = 1470;
public static final int ARTL_ART_repetitive_statement_1406 = 1471;
public static final int ARTL_ART_repetitive_statement_1407 = 1472;
public static final int ARTL_ART_repetitive_statement_1408 = 1473;
public static final int ARTL_ART_repetitive_statement_1409 = 1474;
public static final int ARTL_ART_repetitive_statement_1410 = 1475;
public static final int ARTL_ART_result_type_945 = 1476;
public static final int ARTL_ART_result_type_946 = 1477;
public static final int ARTL_ART_result_type_947 = 1478;
public static final int ARTL_ART_result_type_948 = 1479;
public static final int ARTL_ART_scale_factor_1425 = 1480;
public static final int ARTL_ART_scale_factor_1426 = 1481;
public static final int ARTL_ART_scale_factor_1427 = 1482;
public static final int ARTL_ART_scale_factor_1428 = 1483;
public static final int ARTL_ART_set_constructor_665 = 1484;
public static final int ARTL_ART_set_constructor_666 = 1485;
public static final int ARTL_ART_set_constructor_667 = 1486;
public static final int ARTL_ART_set_constructor_668 = 1487;
public static final int ARTL_ART_set_constructor_669 = 1488;
public static final int ARTL_ART_set_constructor_670 = 1489;
public static final int ARTL_ART_set_constructor_671 = 1490;
public static final int ARTL_ART_set_constructor_672 = 1491;
public static final int ARTL_ART_set_constructor_35_1435 = 1492;
public static final int ARTL_ART_set_constructor_35_1436 = 1493;
public static final int ARTL_ART_set_constructor_35_1437 = 1494;
public static final int ARTL_ART_set_constructor_35_1438 = 1495;
public static final int ARTL_ART_set_constructor_35_1439 = 1496;
public static final int ARTL_ART_set_constructor_35_1440 = 1497;
public static final int ARTL_ART_set_constructor_35_1441 = 1498;
public static final int ARTL_ART_set_constructor_35_1442 = 1499;
public static final int ARTL_ART_set_constructor_35_1443 = 1500;
public static final int ARTL_ART_set_constructor_35_1444 = 1501;
public static final int ARTL_ART_set_constructor_36_1445 = 1502;
public static final int ARTL_ART_set_constructor_36_1446 = 1503;
public static final int ARTL_ART_set_constructor_36_1447 = 1504;
public static final int ARTL_ART_set_constructor_36_1448 = 1505;
public static final int ARTL_ART_set_constructor_36_1449 = 1506;
public static final int ARTL_ART_set_constructor_36_1450 = 1507;
public static final int ARTL_ART_set_constructor_36_1451 = 1508;
public static final int ARTL_ART_set_constructor_36_1452 = 1509;
public static final int ARTL_ART_set_constructor_36_1453 = 1510;
public static final int ARTL_ART_set_constructor_36_1454 = 1511;
public static final int ARTL_ART_set_constructor_36_1455 = 1512;
public static final int ARTL_ART_set_constructor_36_1456 = 1513;
public static final int ARTL_ART_set_type_1457 = 1514;
public static final int ARTL_ART_set_type_1458 = 1515;
public static final int ARTL_ART_set_type_1459 = 1516;
public static final int ARTL_ART_set_type_1460 = 1517;
public static final int ARTL_ART_set_type_1461 = 1518;
public static final int ARTL_ART_set_type_1462 = 1519;
public static final int ARTL_ART_set_type_1463 = 1520;
public static final int ARTL_ART_set_type_1464 = 1521;
public static final int ARTL_ART_sign_455 = 1522;
public static final int ARTL_ART_sign_456 = 1523;
public static final int ARTL_ART_sign_457 = 1524;
public static final int ARTL_ART_sign_458 = 1525;
public static final int ARTL_ART_sign_459 = 1526;
public static final int ARTL_ART_sign_460 = 1527;
public static final int ARTL_ART_sign_461 = 1528;
public static final int ARTL_ART_sign_462 = 1529;
public static final int ARTL_ART_signed_integer_1429 = 1530;
public static final int ARTL_ART_signed_integer_1430 = 1531;
public static final int ARTL_ART_signed_integer_1431 = 1532;
public static final int ARTL_ART_signed_integer_1432 = 1533;
public static final int ARTL_ART_signed_integer_1433 = 1534;
public static final int ARTL_ART_signed_integer_1434 = 1535;
public static final int ARTL_ART_signed_integer_37_1465 = 1536;
public static final int ARTL_ART_signed_integer_37_1466 = 1537;
public static final int ARTL_ART_signed_integer_37_1467 = 1538;
public static final int ARTL_ART_signed_integer_37_1468 = 1539;
public static final int ARTL_ART_signed_integer_37_1469 = 1540;
public static final int ARTL_ART_signed_integer_37_1470 = 1541;
public static final int ARTL_ART_signed_integer_37_1471 = 1542;
public static final int ARTL_ART_signed_integer_37_1472 = 1543;
public static final int ARTL_ART_signed_number_1477 = 1544;
public static final int ARTL_ART_signed_number_1478 = 1545;
public static final int ARTL_ART_signed_number_1479 = 1546;
public static final int ARTL_ART_signed_number_1480 = 1547;
public static final int ARTL_ART_signed_number_1481 = 1548;
public static final int ARTL_ART_signed_number_1482 = 1549;
public static final int ARTL_ART_signed_number_1483 = 1550;
public static final int ARTL_ART_signed_number_1484 = 1551;
public static final int ARTL_ART_signed_real_1485 = 1552;
public static final int ARTL_ART_signed_real_1486 = 1553;
public static final int ARTL_ART_signed_real_1487 = 1554;
public static final int ARTL_ART_signed_real_1488 = 1555;
public static final int ARTL_ART_signed_real_1489 = 1556;
public static final int ARTL_ART_signed_real_1490 = 1557;
public static final int ARTL_ART_signed_real_38_1491 = 1558;
public static final int ARTL_ART_signed_real_38_1492 = 1559;
public static final int ARTL_ART_signed_real_38_1493 = 1560;
public static final int ARTL_ART_signed_real_38_1494 = 1561;
public static final int ARTL_ART_signed_real_38_1495 = 1562;
public static final int ARTL_ART_signed_real_38_1496 = 1563;
public static final int ARTL_ART_signed_real_38_1497 = 1564;
public static final int ARTL_ART_signed_real_38_1498 = 1565;
public static final int ARTL_ART_simple_expression_561 = 1566;
public static final int ARTL_ART_simple_expression_562 = 1567;
public static final int ARTL_ART_simple_expression_563 = 1568;
public static final int ARTL_ART_simple_expression_564 = 1569;
public static final int ARTL_ART_simple_expression_565 = 1570;
public static final int ARTL_ART_simple_expression_566 = 1571;
public static final int ARTL_ART_simple_expression_567 = 1572;
public static final int ARTL_ART_simple_expression_568 = 1573;
public static final int ARTL_ART_simple_expression_569 = 1574;
public static final int ARTL_ART_simple_expression_570 = 1575;
public static final int ARTL_ART_simple_expression_571 = 1576;
public static final int ARTL_ART_simple_expression_572 = 1577;
public static final int ARTL_ART_simple_expression_573 = 1578;
public static final int ARTL_ART_simple_expression_574 = 1579;
public static final int ARTL_ART_simple_expression_39_1509 = 1580;
public static final int ARTL_ART_simple_expression_39_1510 = 1581;
public static final int ARTL_ART_simple_expression_39_1511 = 1582;
public static final int ARTL_ART_simple_expression_39_1512 = 1583;
public static final int ARTL_ART_simple_expression_39_1513 = 1584;
public static final int ARTL_ART_simple_expression_39_1514 = 1585;
public static final int ARTL_ART_simple_expression_39_1515 = 1586;
public static final int ARTL_ART_simple_expression_39_1516 = 1587;
public static final int ARTL_ART_simple_expression_39_1517 = 1588;
public static final int ARTL_ART_simple_expression_39_1518 = 1589;
public static final int ARTL_ART_simple_expression_39_1519 = 1590;
public static final int ARTL_ART_simple_expression_39_1520 = 1591;
public static final int ARTL_ART_simple_expression_40_1521 = 1592;
public static final int ARTL_ART_simple_expression_40_1522 = 1593;
public static final int ARTL_ART_simple_expression_40_1523 = 1594;
public static final int ARTL_ART_simple_expression_40_1524 = 1595;
public static final int ARTL_ART_simple_expression_40_1525 = 1596;
public static final int ARTL_ART_simple_expression_40_1526 = 1597;
public static final int ARTL_ART_simple_expression_40_1527 = 1598;
public static final int ARTL_ART_simple_expression_40_1528 = 1599;
public static final int ARTL_ART_simple_expression_40_1529 = 1600;
public static final int ARTL_ART_simple_expression_40_1530 = 1601;
public static final int ARTL_ART_simple_expression_40_1531 = 1602;
public static final int ARTL_ART_simple_expression_40_1532 = 1603;
public static final int ARTL_ART_simple_statement_1533 = 1604;
public static final int ARTL_ART_simple_statement_1534 = 1605;
public static final int ARTL_ART_simple_statement_1535 = 1606;
public static final int ARTL_ART_simple_statement_1536 = 1607;
public static final int ARTL_ART_simple_statement_1537 = 1608;
public static final int ARTL_ART_simple_statement_1538 = 1609;
public static final int ARTL_ART_simple_statement_1539 = 1610;
public static final int ARTL_ART_simple_statement_1540 = 1611;
public static final int ARTL_ART_simple_statement_1541 = 1612;
public static final int ARTL_ART_simple_statement_1542 = 1613;
public static final int ARTL_ART_simple_statement_1543 = 1614;
public static final int ARTL_ART_simple_statement_1544 = 1615;
public static final int ARTL_ART_simple_statement_41_1545 = 1616;
public static final int ARTL_ART_simple_statement_41_1546 = 1617;
public static final int ARTL_ART_simple_statement_41_1547 = 1618;
public static final int ARTL_ART_simple_statement_41_1548 = 1619;
public static final int ARTL_ART_simple_statement_41_1549 = 1620;
public static final int ARTL_ART_simple_statement_41_1550 = 1621;
public static final int ARTL_ART_simple_statement_41_1551 = 1622;
public static final int ARTL_ART_simple_statement_41_1552 = 1623;
public static final int ARTL_ART_simple_type_1553 = 1624;
public static final int ARTL_ART_simple_type_1554 = 1625;
public static final int ARTL_ART_simple_type_1555 = 1626;
public static final int ARTL_ART_simple_type_1556 = 1627;
public static final int ARTL_ART_simple_type_1557 = 1628;
public static final int ARTL_ART_simple_type_1558 = 1629;
public static final int ARTL_ART_simple_type_1559 = 1630;
public static final int ARTL_ART_simple_type_1560 = 1631;
public static final int ARTL_ART_simple_type_ID_1421 = 1632;
public static final int ARTL_ART_simple_type_ID_1422 = 1633;
public static final int ARTL_ART_simple_type_ID_1423 = 1634;
public static final int ARTL_ART_simple_type_ID_1424 = 1635;
public static final int ARTL_ART_statement_253 = 1636;
public static final int ARTL_ART_statement_254 = 1637;
public static final int ARTL_ART_statement_255 = 1638;
public static final int ARTL_ART_statement_256 = 1639;
public static final int ARTL_ART_statement_257 = 1640;
public static final int ARTL_ART_statement_258 = 1641;
public static final int ARTL_ART_statement_42_1561 = 1642;
public static final int ARTL_ART_statement_42_1562 = 1643;
public static final int ARTL_ART_statement_42_1563 = 1644;
public static final int ARTL_ART_statement_42_1564 = 1645;
public static final int ARTL_ART_statement_42_1565 = 1646;
public static final int ARTL_ART_statement_42_1566 = 1647;
public static final int ARTL_ART_statement_42_1567 = 1648;
public static final int ARTL_ART_statement_42_1568 = 1649;
public static final int ARTL_ART_statement_42_1569 = 1650;
public static final int ARTL_ART_statement_42_1570 = 1651;
public static final int ARTL_ART_statement_43_1571 = 1652;
public static final int ARTL_ART_statement_43_1572 = 1653;
public static final int ARTL_ART_statement_43_1573 = 1654;
public static final int ARTL_ART_statement_43_1574 = 1655;
public static final int ARTL_ART_statement_43_1575 = 1656;
public static final int ARTL_ART_statement_43_1576 = 1657;
public static final int ARTL_ART_statement_43_1577 = 1658;
public static final int ARTL_ART_statement_43_1578 = 1659;
public static final int ARTL_ART_statement_part_193 = 1660;
public static final int ARTL_ART_statement_part_194 = 1661;
public static final int ARTL_ART_statement_part_195 = 1662;
public static final int ARTL_ART_statement_part_196 = 1663;
public static final int ARTL_ART_statement_sequence_347 = 1664;
public static final int ARTL_ART_statement_sequence_348 = 1665;
public static final int ARTL_ART_statement_sequence_349 = 1666;
public static final int ARTL_ART_statement_sequence_350 = 1667;
public static final int ARTL_ART_statement_sequence_351 = 1668;
public static final int ARTL_ART_statement_sequence_352 = 1669;
public static final int ARTL_ART_statement_sequence_44_1595 = 1670;
public static final int ARTL_ART_statement_sequence_44_1596 = 1671;
public static final int ARTL_ART_statement_sequence_44_1597 = 1672;
public static final int ARTL_ART_statement_sequence_44_1598 = 1673;
public static final int ARTL_ART_statement_sequence_44_1599 = 1674;
public static final int ARTL_ART_statement_sequence_44_1600 = 1675;
public static final int ARTL_ART_statement_sequence_44_1601 = 1676;
public static final int ARTL_ART_statement_sequence_44_1602 = 1677;
public static final int ARTL_ART_statement_sequence_44_1603 = 1678;
public static final int ARTL_ART_statement_sequence_44_1604 = 1679;
public static final int ARTL_ART_statement_sequence_44_1605 = 1680;
public static final int ARTL_ART_statement_sequence_44_1606 = 1681;
public static final int ARTL_ART_string_character_1607 = 1682;
public static final int ARTL_ART_string_character_1608 = 1683;
public static final int ARTL_ART_string_character_1609 = 1684;
public static final int ARTL_ART_string_character_1610 = 1685;
public static final int ARTL_ART_string_element_1611 = 1686;
public static final int ARTL_ART_string_element_1612 = 1687;
public static final int ARTL_ART_string_element_1613 = 1688;
public static final int ARTL_ART_string_element_1614 = 1689;
public static final int ARTL_ART_string_element_1615 = 1690;
public static final int ARTL_ART_string_element_1616 = 1691;
public static final int ARTL_ART_string_element_1617 = 1692;
public static final int ARTL_ART_string_element_1618 = 1693;
public static final int ARTL_ART_structured_statement_1579 = 1694;
public static final int ARTL_ART_structured_statement_1580 = 1695;
public static final int ARTL_ART_structured_statement_1581 = 1696;
public static final int ARTL_ART_structured_statement_1582 = 1697;
public static final int ARTL_ART_structured_statement_1583 = 1698;
public static final int ARTL_ART_structured_statement_1584 = 1699;
public static final int ARTL_ART_structured_statement_1585 = 1700;
public static final int ARTL_ART_structured_statement_1586 = 1701;
public static final int ARTL_ART_structured_statement_1587 = 1702;
public static final int ARTL_ART_structured_statement_1588 = 1703;
public static final int ARTL_ART_structured_statement_1589 = 1704;
public static final int ARTL_ART_structured_statement_1590 = 1705;
public static final int ARTL_ART_structured_statement_1591 = 1706;
public static final int ARTL_ART_structured_statement_1592 = 1707;
public static final int ARTL_ART_structured_statement_1593 = 1708;
public static final int ARTL_ART_structured_statement_1594 = 1709;
public static final int ARTL_ART_structured_type_1629 = 1710;
public static final int ARTL_ART_structured_type_1630 = 1711;
public static final int ARTL_ART_structured_type_1631 = 1712;
public static final int ARTL_ART_structured_type_1632 = 1713;
public static final int ARTL_ART_structured_type_1633 = 1714;
public static final int ARTL_ART_structured_type_1634 = 1715;
public static final int ARTL_ART_structured_type_1635 = 1716;
public static final int ARTL_ART_structured_type_1636 = 1717;
public static final int ARTL_ART_structured_type_ID_1637 = 1718;
public static final int ARTL_ART_structured_type_ID_1638 = 1719;
public static final int ARTL_ART_structured_type_ID_1639 = 1720;
public static final int ARTL_ART_structured_type_ID_1640 = 1721;
public static final int ARTL_ART_subrange_type_1087 = 1722;
public static final int ARTL_ART_subrange_type_1088 = 1723;
public static final int ARTL_ART_subrange_type_1089 = 1724;
public static final int ARTL_ART_subrange_type_1090 = 1725;
public static final int ARTL_ART_subrange_type_1091 = 1726;
public static final int ARTL_ART_subrange_type_1092 = 1727;
public static final int ARTL_ART_subrange_type_1093 = 1728;
public static final int ARTL_ART_subrange_type_1094 = 1729;
public static final int ARTL_ART_tag_field_1641 = 1730;
public static final int ARTL_ART_tag_field_1642 = 1731;
public static final int ARTL_ART_tag_field_1643 = 1732;
public static final int ARTL_ART_tag_field_1644 = 1733;
public static final int ARTL_ART_tag_type_1645 = 1734;
public static final int ARTL_ART_tag_type_1646 = 1735;
public static final int ARTL_ART_tag_type_1647 = 1736;
public static final int ARTL_ART_tag_type_1648 = 1737;
public static final int ARTL_ART_term_1503 = 1738;
public static final int ARTL_ART_term_1504 = 1739;
public static final int ARTL_ART_term_1505 = 1740;
public static final int ARTL_ART_term_1506 = 1741;
public static final int ARTL_ART_term_1507 = 1742;
public static final int ARTL_ART_term_1508 = 1743;
public static final int ARTL_ART_term_45_1649 = 1744;
public static final int ARTL_ART_term_45_1650 = 1745;
public static final int ARTL_ART_term_45_1651 = 1746;
public static final int ARTL_ART_term_45_1652 = 1747;
public static final int ARTL_ART_term_45_1653 = 1748;
public static final int ARTL_ART_term_45_1654 = 1749;
public static final int ARTL_ART_term_45_1655 = 1750;
public static final int ARTL_ART_term_45_1656 = 1751;
public static final int ARTL_ART_term_45_1657 = 1752;
public static final int ARTL_ART_term_45_1658 = 1753;
public static final int ARTL_ART_term_45_1659 = 1754;
public static final int ARTL_ART_term_45_1660 = 1755;
public static final int ARTL_ART_type_ID_533 = 1756;
public static final int ARTL_ART_type_ID_534 = 1757;
public static final int ARTL_ART_type_ID_535 = 1758;
public static final int ARTL_ART_type_ID_536 = 1759;
public static final int ARTL_ART_type_definition_1661 = 1760;
public static final int ARTL_ART_type_definition_1662 = 1761;
public static final int ARTL_ART_type_definition_1663 = 1762;
public static final int ARTL_ART_type_definition_1664 = 1763;
public static final int ARTL_ART_type_definition_1665 = 1764;
public static final int ARTL_ART_type_definition_1666 = 1765;
public static final int ARTL_ART_type_definition_1667 = 1766;
public static final int ARTL_ART_type_definition_1668 = 1767;
public static final int ARTL_ART_type_definition_part_181 = 1768;
public static final int ARTL_ART_type_definition_part_182 = 1769;
public static final int ARTL_ART_type_definition_part_183 = 1770;
public static final int ARTL_ART_type_definition_part_184 = 1771;
public static final int ARTL_ART_type_definition_part_46_1669 = 1772;
public static final int ARTL_ART_type_definition_part_46_1670 = 1773;
public static final int ARTL_ART_type_definition_part_46_1671 = 1774;
public static final int ARTL_ART_type_definition_part_46_1672 = 1775;
public static final int ARTL_ART_type_definition_part_46_1673 = 1776;
public static final int ARTL_ART_type_definition_part_46_1674 = 1777;
public static final int ARTL_ART_type_definition_part_46_1675 = 1778;
public static final int ARTL_ART_type_definition_part_46_1676 = 1779;
public static final int ARTL_ART_type_definition_part_46_1677 = 1780;
public static final int ARTL_ART_type_definition_part_46_1678 = 1781;
public static final int ARTL_ART_type_definition_part_46_1679 = 1782;
public static final int ARTL_ART_type_definition_part_46_1680 = 1783;
public static final int ARTL_ART_type_definition_part_46_1681 = 1784;
public static final int ARTL_ART_type_definition_part_46_1682 = 1785;
public static final int ARTL_ART_type_definition_part_47_1683 = 1786;
public static final int ARTL_ART_type_definition_part_47_1684 = 1787;
public static final int ARTL_ART_type_definition_part_47_1685 = 1788;
public static final int ARTL_ART_type_definition_part_47_1686 = 1789;
public static final int ARTL_ART_type_definition_part_47_1687 = 1790;
public static final int ARTL_ART_type_definition_part_47_1688 = 1791;
public static final int ARTL_ART_type_definition_part_47_1689 = 1792;
public static final int ARTL_ART_type_definition_part_47_1690 = 1793;
public static final int ARTL_ART_type_definition_part_47_1691 = 1794;
public static final int ARTL_ART_type_definition_part_47_1692 = 1795;
public static final int ARTL_ART_type_definition_part_47_1693 = 1796;
public static final int ARTL_ART_type_definition_part_47_1694 = 1797;
public static final int ARTL_ART_type_denoter_299 = 1798;
public static final int ARTL_ART_type_denoter_300 = 1799;
public static final int ARTL_ART_type_denoter_301 = 1800;
public static final int ARTL_ART_type_denoter_302 = 1801;
public static final int ARTL_ART_type_denoter_303 = 1802;
public static final int ARTL_ART_type_denoter_304 = 1803;
public static final int ARTL_ART_type_denoter_305 = 1804;
public static final int ARTL_ART_type_denoter_306 = 1805;
public static final int ARTL_ART_unpacked_conformant_array_schema_423 = 1806;
public static final int ARTL_ART_unpacked_conformant_array_schema_424 = 1807;
public static final int ARTL_ART_unpacked_conformant_array_schema_425 = 1808;
public static final int ARTL_ART_unpacked_conformant_array_schema_426 = 1809;
public static final int ARTL_ART_unpacked_conformant_array_schema_427 = 1810;
public static final int ARTL_ART_unpacked_conformant_array_schema_428 = 1811;
public static final int ARTL_ART_unpacked_conformant_array_schema_429 = 1812;
public static final int ARTL_ART_unpacked_conformant_array_schema_430 = 1813;
public static final int ARTL_ART_unpacked_conformant_array_schema_431 = 1814;
public static final int ARTL_ART_unpacked_conformant_array_schema_432 = 1815;
public static final int ARTL_ART_unpacked_conformant_array_schema_433 = 1816;
public static final int ARTL_ART_unpacked_conformant_array_schema_434 = 1817;
public static final int ARTL_ART_unpacked_conformant_array_schema_435 = 1818;
public static final int ARTL_ART_unpacked_conformant_array_schema_436 = 1819;
public static final int ARTL_ART_unpacked_conformant_array_schema_437 = 1820;
public static final int ARTL_ART_unpacked_conformant_array_schema_438 = 1821;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1695 = 1822;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1696 = 1823;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1697 = 1824;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1698 = 1825;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1699 = 1826;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1700 = 1827;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1701 = 1828;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1702 = 1829;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1703 = 1830;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1704 = 1831;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1705 = 1832;
public static final int ARTL_ART_unpacked_conformant_array_schema_48_1706 = 1833;
public static final int ARTL_ART_unpacked_conformant_array_schema_49_1707 = 1834;
public static final int ARTL_ART_unpacked_conformant_array_schema_49_1708 = 1835;
public static final int ARTL_ART_unpacked_conformant_array_schema_49_1709 = 1836;
public static final int ARTL_ART_unpacked_conformant_array_schema_49_1710 = 1837;
public static final int ARTL_ART_unpacked_conformant_array_schema_49_1711 = 1838;
public static final int ARTL_ART_unpacked_conformant_array_schema_49_1712 = 1839;
public static final int ARTL_ART_unpacked_conformant_array_schema_49_1713 = 1840;
public static final int ARTL_ART_unpacked_conformant_array_schema_49_1714 = 1841;
public static final int ARTL_ART_unpacked_structured_type_1115 = 1842;
public static final int ARTL_ART_unpacked_structured_type_1116 = 1843;
public static final int ARTL_ART_unpacked_structured_type_1117 = 1844;
public static final int ARTL_ART_unpacked_structured_type_1118 = 1845;
public static final int ARTL_ART_unpacked_structured_type_1119 = 1846;
public static final int ARTL_ART_unpacked_structured_type_1120 = 1847;
public static final int ARTL_ART_unpacked_structured_type_1121 = 1848;
public static final int ARTL_ART_unpacked_structured_type_1122 = 1849;
public static final int ARTL_ART_unpacked_structured_type_1123 = 1850;
public static final int ARTL_ART_unpacked_structured_type_1124 = 1851;
public static final int ARTL_ART_unpacked_structured_type_1125 = 1852;
public static final int ARTL_ART_unpacked_structured_type_1126 = 1853;
public static final int ARTL_ART_unpacked_structured_type_1127 = 1854;
public static final int ARTL_ART_unpacked_structured_type_1128 = 1855;
public static final int ARTL_ART_unpacked_structured_type_1129 = 1856;
public static final int ARTL_ART_unpacked_structured_type_1130 = 1857;
public static final int ARTL_ART_unsigned_constant_643 = 1858;
public static final int ARTL_ART_unsigned_constant_644 = 1859;
public static final int ARTL_ART_unsigned_constant_645 = 1860;
public static final int ARTL_ART_unsigned_constant_646 = 1861;
public static final int ARTL_ART_unsigned_constant_647 = 1862;
public static final int ARTL_ART_unsigned_constant_648 = 1863;
public static final int ARTL_ART_unsigned_constant_649 = 1864;
public static final int ARTL_ART_unsigned_constant_650 = 1865;
public static final int ARTL_ART_unsigned_constant_651 = 1866;
public static final int ARTL_ART_unsigned_constant_652 = 1867;
public static final int ARTL_ART_unsigned_constant_653 = 1868;
public static final int ARTL_ART_unsigned_constant_654 = 1869;
public static final int ARTL_ART_unsigned_constant_655 = 1870;
public static final int ARTL_ART_unsigned_constant_656 = 1871;
public static final int ARTL_ART_unsigned_constant_657 = 1872;
public static final int ARTL_ART_unsigned_constant_658 = 1873;
public static final int ARTL_ART_unsigned_integer_1473 = 1874;
public static final int ARTL_ART_unsigned_integer_1474 = 1875;
public static final int ARTL_ART_unsigned_integer_1475 = 1876;
public static final int ARTL_ART_unsigned_integer_1476 = 1877;
public static final int ARTL_ART_unsigned_number_463 = 1878;
public static final int ARTL_ART_unsigned_number_464 = 1879;
public static final int ARTL_ART_unsigned_number_465 = 1880;
public static final int ARTL_ART_unsigned_number_466 = 1881;
public static final int ARTL_ART_unsigned_number_467 = 1882;
public static final int ARTL_ART_unsigned_number_468 = 1883;
public static final int ARTL_ART_unsigned_number_469 = 1884;
public static final int ARTL_ART_unsigned_number_470 = 1885;
public static final int ARTL_ART_unsigned_real_1499 = 1886;
public static final int ARTL_ART_unsigned_real_1500 = 1887;
public static final int ARTL_ART_unsigned_real_1501 = 1888;
public static final int ARTL_ART_unsigned_real_1502 = 1889;
public static final int ARTL_ART_value_conformant_array_specification_381 = 1890;
public static final int ARTL_ART_value_conformant_array_specification_382 = 1891;
public static final int ARTL_ART_value_conformant_array_specification_383 = 1892;
public static final int ARTL_ART_value_conformant_array_specification_384 = 1893;
public static final int ARTL_ART_value_conformant_array_specification_385 = 1894;
public static final int ARTL_ART_value_conformant_array_specification_386 = 1895;
public static final int ARTL_ART_value_conformant_array_specification_387 = 1896;
public static final int ARTL_ART_value_conformant_array_specification_388 = 1897;
public static final int ARTL_ART_value_parameter_specification_853 = 1898;
public static final int ARTL_ART_value_parameter_specification_854 = 1899;
public static final int ARTL_ART_value_parameter_specification_855 = 1900;
public static final int ARTL_ART_value_parameter_specification_856 = 1901;
public static final int ARTL_ART_value_parameter_specification_857 = 1902;
public static final int ARTL_ART_value_parameter_specification_858 = 1903;
public static final int ARTL_ART_value_parameter_specification_859 = 1904;
public static final int ARTL_ART_value_parameter_specification_860 = 1905;
public static final int ARTL_ART_variable_ID_543 = 1906;
public static final int ARTL_ART_variable_ID_544 = 1907;
public static final int ARTL_ART_variable_ID_545 = 1908;
public static final int ARTL_ART_variable_ID_546 = 1909;
public static final int ARTL_ART_variable_access_129 = 1910;
public static final int ARTL_ART_variable_access_130 = 1911;
public static final int ARTL_ART_variable_access_131 = 1912;
public static final int ARTL_ART_variable_access_132 = 1913;
public static final int ARTL_ART_variable_access_133 = 1914;
public static final int ARTL_ART_variable_access_134 = 1915;
public static final int ARTL_ART_variable_access_135 = 1916;
public static final int ARTL_ART_variable_access_136 = 1917;
public static final int ARTL_ART_variable_access_137 = 1918;
public static final int ARTL_ART_variable_access_138 = 1919;
public static final int ARTL_ART_variable_access_139 = 1920;
public static final int ARTL_ART_variable_access_140 = 1921;
public static final int ARTL_ART_variable_access_141 = 1922;
public static final int ARTL_ART_variable_access_142 = 1923;
public static final int ARTL_ART_variable_conformant_array_specification_389 = 1924;
public static final int ARTL_ART_variable_conformant_array_specification_390 = 1925;
public static final int ARTL_ART_variable_conformant_array_specification_391 = 1926;
public static final int ARTL_ART_variable_conformant_array_specification_392 = 1927;
public static final int ARTL_ART_variable_conformant_array_specification_393 = 1928;
public static final int ARTL_ART_variable_conformant_array_specification_394 = 1929;
public static final int ARTL_ART_variable_conformant_array_specification_395 = 1930;
public static final int ARTL_ART_variable_conformant_array_specification_396 = 1931;
public static final int ARTL_ART_variable_conformant_array_specification_397 = 1932;
public static final int ARTL_ART_variable_conformant_array_specification_398 = 1933;
public static final int ARTL_ART_variable_declaration_1715 = 1934;
public static final int ARTL_ART_variable_declaration_1716 = 1935;
public static final int ARTL_ART_variable_declaration_1717 = 1936;
public static final int ARTL_ART_variable_declaration_1718 = 1937;
public static final int ARTL_ART_variable_declaration_1719 = 1938;
public static final int ARTL_ART_variable_declaration_1720 = 1939;
public static final int ARTL_ART_variable_declaration_1721 = 1940;
public static final int ARTL_ART_variable_declaration_1722 = 1941;
public static final int ARTL_ART_variable_declaration_part_185 = 1942;
public static final int ARTL_ART_variable_declaration_part_186 = 1943;
public static final int ARTL_ART_variable_declaration_part_187 = 1944;
public static final int ARTL_ART_variable_declaration_part_188 = 1945;
public static final int ARTL_ART_variable_declaration_part_50_1723 = 1946;
public static final int ARTL_ART_variable_declaration_part_50_1724 = 1947;
public static final int ARTL_ART_variable_declaration_part_50_1725 = 1948;
public static final int ARTL_ART_variable_declaration_part_50_1726 = 1949;
public static final int ARTL_ART_variable_declaration_part_50_1727 = 1950;
public static final int ARTL_ART_variable_declaration_part_50_1728 = 1951;
public static final int ARTL_ART_variable_declaration_part_50_1729 = 1952;
public static final int ARTL_ART_variable_declaration_part_50_1730 = 1953;
public static final int ARTL_ART_variable_declaration_part_50_1731 = 1954;
public static final int ARTL_ART_variable_declaration_part_50_1732 = 1955;
public static final int ARTL_ART_variable_declaration_part_50_1733 = 1956;
public static final int ARTL_ART_variable_declaration_part_50_1734 = 1957;
public static final int ARTL_ART_variable_declaration_part_50_1735 = 1958;
public static final int ARTL_ART_variable_declaration_part_50_1736 = 1959;
public static final int ARTL_ART_variable_declaration_part_51_1737 = 1960;
public static final int ARTL_ART_variable_declaration_part_51_1738 = 1961;
public static final int ARTL_ART_variable_declaration_part_51_1739 = 1962;
public static final int ARTL_ART_variable_declaration_part_51_1740 = 1963;
public static final int ARTL_ART_variable_declaration_part_51_1741 = 1964;
public static final int ARTL_ART_variable_declaration_part_51_1742 = 1965;
public static final int ARTL_ART_variable_declaration_part_51_1743 = 1966;
public static final int ARTL_ART_variable_declaration_part_51_1744 = 1967;
public static final int ARTL_ART_variable_declaration_part_51_1745 = 1968;
public static final int ARTL_ART_variable_declaration_part_51_1746 = 1969;
public static final int ARTL_ART_variable_declaration_part_51_1747 = 1970;
public static final int ARTL_ART_variable_declaration_part_51_1748 = 1971;
public static final int ARTL_ART_variable_parameter_specification_861 = 1972;
public static final int ARTL_ART_variable_parameter_specification_862 = 1973;
public static final int ARTL_ART_variable_parameter_specification_863 = 1974;
public static final int ARTL_ART_variable_parameter_specification_864 = 1975;
public static final int ARTL_ART_variable_parameter_specification_865 = 1976;
public static final int ARTL_ART_variable_parameter_specification_866 = 1977;
public static final int ARTL_ART_variable_parameter_specification_867 = 1978;
public static final int ARTL_ART_variable_parameter_specification_868 = 1979;
public static final int ARTL_ART_variable_parameter_specification_869 = 1980;
public static final int ARTL_ART_variable_parameter_specification_870 = 1981;
public static final int ARTL_ART_variant_1749 = 1982;
public static final int ARTL_ART_variant_1750 = 1983;
public static final int ARTL_ART_variant_1751 = 1984;
public static final int ARTL_ART_variant_1752 = 1985;
public static final int ARTL_ART_variant_1753 = 1986;
public static final int ARTL_ART_variant_1754 = 1987;
public static final int ARTL_ART_variant_1755 = 1988;
public static final int ARTL_ART_variant_1756 = 1989;
public static final int ARTL_ART_variant_1757 = 1990;
public static final int ARTL_ART_variant_1758 = 1991;
public static final int ARTL_ART_variant_1759 = 1992;
public static final int ARTL_ART_variant_1760 = 1993;
public static final int ARTL_ART_variant_part_739 = 1994;
public static final int ARTL_ART_variant_part_740 = 1995;
public static final int ARTL_ART_variant_part_741 = 1996;
public static final int ARTL_ART_variant_part_742 = 1997;
public static final int ARTL_ART_variant_part_743 = 1998;
public static final int ARTL_ART_variant_part_744 = 1999;
public static final int ARTL_ART_variant_part_745 = 2000;
public static final int ARTL_ART_variant_part_746 = 2001;
public static final int ARTL_ART_variant_part_747 = 2002;
public static final int ARTL_ART_variant_part_748 = 2003;
public static final int ARTL_ART_variant_part_749 = 2004;
public static final int ARTL_ART_variant_part_750 = 2005;
public static final int ARTL_ART_variant_part_751 = 2006;
public static final int ARTL_ART_variant_part_752 = 2007;
public static final int ARTL_ART_variant_part_753 = 2008;
public static final int ARTL_ART_variant_part_754 = 2009;
public static final int ARTL_ART_variant_part_755 = 2010;
public static final int ARTL_ART_variant_part_756 = 2011;
public static final int ARTL_ART_variant_selector_1761 = 2012;
public static final int ARTL_ART_variant_selector_1762 = 2013;
public static final int ARTL_ART_variant_selector_1763 = 2014;
public static final int ARTL_ART_variant_selector_1764 = 2015;
public static final int ARTL_ART_variant_selector_1765 = 2016;
public static final int ARTL_ART_variant_selector_1766 = 2017;
public static final int ARTL_ART_variant_selector_52_1767 = 2018;
public static final int ARTL_ART_variant_selector_52_1768 = 2019;
public static final int ARTL_ART_variant_selector_52_1769 = 2020;
public static final int ARTL_ART_variant_selector_52_1770 = 2021;
public static final int ARTL_ART_variant_selector_52_1771 = 2022;
public static final int ARTL_ART_variant_selector_52_1772 = 2023;
public static final int ARTL_ART_variant_selector_52_1773 = 2024;
public static final int ARTL_ART_variant_selector_52_1774 = 2025;
public static final int ARTL_ART_variant_selector_52_1775 = 2026;
public static final int ARTL_ART_variant_selector_52_1776 = 2027;
public static final int ARTL_ART_while_statement_1411 = 2028;
public static final int ARTL_ART_while_statement_1412 = 2029;
public static final int ARTL_ART_while_statement_1413 = 2030;
public static final int ARTL_ART_while_statement_1414 = 2031;
public static final int ARTL_ART_while_statement_1415 = 2032;
public static final int ARTL_ART_while_statement_1416 = 2033;
public static final int ARTL_ART_while_statement_1417 = 2034;
public static final int ARTL_ART_while_statement_1418 = 2035;
public static final int ARTL_ART_while_statement_1419 = 2036;
public static final int ARTL_ART_while_statement_1420 = 2037;
public static final int ARTL_ART_with_statement_1619 = 2038;
public static final int ARTL_ART_with_statement_1620 = 2039;
public static final int ARTL_ART_with_statement_1621 = 2040;
public static final int ARTL_ART_with_statement_1622 = 2041;
public static final int ARTL_ART_with_statement_1623 = 2042;
public static final int ARTL_ART_with_statement_1624 = 2043;
public static final int ARTL_ART_with_statement_1625 = 2044;
public static final int ARTL_ART_with_statement_1626 = 2045;
public static final int ARTL_ART_with_statement_1627 = 2046;
public static final int ARTL_ART_with_statement_1628 = 2047;
public static final int ARTL_ART_write_parameter_1777 = 2048;
public static final int ARTL_ART_write_parameter_1778 = 2049;
public static final int ARTL_ART_write_parameter_1779 = 2050;
public static final int ARTL_ART_write_parameter_1780 = 2051;
public static final int ARTL_ART_write_parameter_1781 = 2052;
public static final int ARTL_ART_write_parameter_1782 = 2053;
public static final int ARTL_ART_write_parameter_53_1783 = 2054;
public static final int ARTL_ART_write_parameter_53_1784 = 2055;
public static final int ARTL_ART_write_parameter_53_1785 = 2056;
public static final int ARTL_ART_write_parameter_53_1786 = 2057;
public static final int ARTL_ART_write_parameter_53_1787 = 2058;
public static final int ARTL_ART_write_parameter_53_1788 = 2059;
public static final int ARTL_ART_write_parameter_53_1789 = 2060;
public static final int ARTL_ART_write_parameter_53_1790 = 2061;
public static final int ARTL_ART_write_parameter_53_1791 = 2062;
public static final int ARTL_ART_write_parameter_53_1792 = 2063;
public static final int ARTL_ART_write_parameter_53_1793 = 2064;
public static final int ARTL_ART_write_parameter_53_1794 = 2065;
public static final int ARTL_ART_write_parameter_54_1795 = 2066;
public static final int ARTL_ART_write_parameter_54_1796 = 2067;
public static final int ARTL_ART_write_parameter_54_1797 = 2068;
public static final int ARTL_ART_write_parameter_54_1798 = 2069;
public static final int ARTL_ART_write_parameter_54_1799 = 2070;
public static final int ARTL_ART_write_parameter_54_1800 = 2071;
public static final int ARTL_ART_write_parameter_54_1801 = 2072;
public static final int ARTL_ART_write_parameter_54_1802 = 2073;
public static final int ARTL_ART_write_parameter_54_1803 = 2074;
public static final int ARTL_ART_write_parameter_54_1804 = 2075;
public static final int ARTL_ART_write_parameter_list_1291 = 2076;
public static final int ARTL_ART_write_parameter_list_1292 = 2077;
public static final int ARTL_ART_write_parameter_list_1293 = 2078;
public static final int ARTL_ART_write_parameter_list_1294 = 2079;
public static final int ARTL_ART_write_parameter_list_1295 = 2080;
public static final int ARTL_ART_write_parameter_list_1296 = 2081;
public static final int ARTL_ART_write_parameter_list_1297 = 2082;
public static final int ARTL_ART_write_parameter_list_1298 = 2083;
public static final int ARTL_ART_write_parameter_list_1299 = 2084;
public static final int ARTL_ART_write_parameter_list_1300 = 2085;
public static final int ARTL_ART_write_parameter_list_57_1831 = 2086;
public static final int ARTL_ART_write_parameter_list_57_1832 = 2087;
public static final int ARTL_ART_write_parameter_list_57_1833 = 2088;
public static final int ARTL_ART_write_parameter_list_57_1834 = 2089;
public static final int ARTL_ART_write_parameter_list_57_1835 = 2090;
public static final int ARTL_ART_write_parameter_list_57_1836 = 2091;
public static final int ARTL_ART_write_parameter_list_57_1837 = 2092;
public static final int ARTL_ART_write_parameter_list_57_1838 = 2093;
public static final int ARTL_ART_write_parameter_list_57_1839 = 2094;
public static final int ARTL_ART_write_parameter_list_57_1840 = 2095;
public static final int ARTL_ART_write_parameter_list_57_1841 = 2096;
public static final int ARTL_ART_write_parameter_list_57_1842 = 2097;
public static final int ARTL_ART_writeln_parameter_list_1301 = 2098;
public static final int ARTL_ART_writeln_parameter_list_1302 = 2099;
public static final int ARTL_ART_writeln_parameter_list_1303 = 2100;
public static final int ARTL_ART_writeln_parameter_list_1304 = 2101;
public static final int ARTL_ART_writeln_parameter_list_55_1805 = 2102;
public static final int ARTL_ART_writeln_parameter_list_55_1806 = 2103;
public static final int ARTL_ART_writeln_parameter_list_55_1807 = 2104;
public static final int ARTL_ART_writeln_parameter_list_55_1808 = 2105;
public static final int ARTL_ART_writeln_parameter_list_55_1809 = 2106;
public static final int ARTL_ART_writeln_parameter_list_55_1810 = 2107;
public static final int ARTL_ART_writeln_parameter_list_55_1811 = 2108;
public static final int ARTL_ART_writeln_parameter_list_55_1812 = 2109;
public static final int ARTL_ART_writeln_parameter_list_55_1813 = 2110;
public static final int ARTL_ART_writeln_parameter_list_55_1814 = 2111;
public static final int ARTL_ART_writeln_parameter_list_55_1815 = 2112;
public static final int ARTL_ART_writeln_parameter_list_55_1816 = 2113;
public static final int ARTL_ART_writeln_parameter_list_55_1817 = 2114;
public static final int ARTL_ART_writeln_parameter_list_55_1818 = 2115;
public static final int ARTL_ART_writeln_parameter_list_56_1819 = 2116;
public static final int ARTL_ART_writeln_parameter_list_56_1820 = 2117;
public static final int ARTL_ART_writeln_parameter_list_56_1821 = 2118;
public static final int ARTL_ART_writeln_parameter_list_56_1822 = 2119;
public static final int ARTL_ART_writeln_parameter_list_56_1823 = 2120;
public static final int ARTL_ART_writeln_parameter_list_56_1824 = 2121;
public static final int ARTL_ART_writeln_parameter_list_56_1825 = 2122;
public static final int ARTL_ART_writeln_parameter_list_56_1826 = 2123;
public static final int ARTL_ART_writeln_parameter_list_56_1827 = 2124;
public static final int ARTL_ART_writeln_parameter_list_56_1828 = 2125;
public static final int ARTL_ART_writeln_parameter_list_56_1829 = 2126;
public static final int ARTL_ART_writeln_parameter_list_56_1830 = 2127;
public static final int ARTX_DESPATCH = 2128;
public static final int ARTX_DUMMY = 2129;
public static final int ARTX_LABEL_EXTENT = 2130;
/* End of artLabel enumeration */

/* Start of artName enumeration */
public static final int ARTNAME_NONE = 0;
public static final int ARTNAME_EXTENT = 1;
/* End of artName enumeration */
public void ARTPF_ART_Boolean_expression() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal Boolean_expression production descriptor loads*/
    case ARTL_ART_Boolean_expression: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_Boolean_expression_198, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal Boolean_expression: match production*/
    case ARTL_ART_Boolean_expression_198: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_Boolean_expression_200, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_Boolean_expression_200: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet3[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal ID production descriptor loads*/
    case ARTL_ART_ID: 
      if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ID_206, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal ID: match production*/
    case ARTL_ART_ID_206: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_ID_208, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_ID_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal ID_list production descriptor loads*/
    case ARTL_ART_ID_list: 
      if (ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ID_list_556, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal ID_list: match production*/
    case ARTL_ART_ID_list_556: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_ID_list_558, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_ID_list_558: 
      /* Nonterminal template end */
      if (!ARTSet9[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_ID_list_560, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list_18; return; }
    case ARTL_ART_ID_list_560: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet8[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_ID_list_18() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal ID_list_18 production descriptor loads*/
    case ARTL_ART_ID_list_18: 
      if (ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ID_list_18_960, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet12[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ID_list_18_964, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal ID_list_18: match production*/
    case ARTL_ART_ID_list_18_960: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_ID_list_18_962, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal ID_list_18: match production*/
    case ARTL_ART_ID_list_18_964: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_ID_list_18_966, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list_18; return; }
    case ARTL_ART_ID_list_18_966: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_ID_list_18_968, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_ID_list_18_970, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_ID_list_18_970: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_actual_parameter() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal actual_parameter production descriptor loads*/
    case ARTL_ART_actual_parameter: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_actual_parameter_22, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_actual_parameter_26, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal actual_parameter: match production*/
    case ARTL_ART_actual_parameter_22: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_actual_parameter_24, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_actual_parameter_24: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal actual_parameter: match production*/
    case ARTL_ART_actual_parameter_26: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_actual_parameter_28, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_ID; return; }
    case ARTL_ART_actual_parameter_28: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_actual_parameter_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal actual_parameter_list production descriptor loads*/
    case ARTL_ART_actual_parameter_list: 
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_actual_parameter_list_40, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal actual_parameter_list: match production*/
    case ARTL_ART_actual_parameter_list_40: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_actual_parameter_list_42, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet19[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_actual_parameter_list_44, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_actual_parameter; return; }
    case ARTL_ART_actual_parameter_list_44: 
      /* Nonterminal template end */
      if (!ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_actual_parameter_list_46, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_actual_parameter_list_1; return; }
    case ARTL_ART_actual_parameter_list_46: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_actual_parameter_list_48, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_actual_parameter_list_1() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal actual_parameter_list_1 production descriptor loads*/
    case ARTL_ART_actual_parameter_list_1: 
      if (ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_actual_parameter_list_1_50, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_actual_parameter_list_1_54, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal actual_parameter_list_1: match production*/
    case ARTL_ART_actual_parameter_list_1_50: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_actual_parameter_list_1_52, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal actual_parameter_list_1: match production*/
    case ARTL_ART_actual_parameter_list_1_54: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_actual_parameter_list_1_56, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_actual_parameter_list_1; return; }
    case ARTL_ART_actual_parameter_list_1_56: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_actual_parameter_list_1_58, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet19[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_actual_parameter_list_1_60, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_actual_parameter; return; }
    case ARTL_ART_actual_parameter_list_1_60: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_adding_operator() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal adding_operator production descriptor loads*/
    case ARTL_ART_adding_operator: 
      if (ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_adding_operator_62, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_adding_operator_66, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet28[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_adding_operator_70, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal adding_operator: match production*/
    case ARTL_ART_adding_operator_62: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PLUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_adding_operator_64, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal adding_operator: match production*/
    case ARTL_ART_adding_operator_66: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_adding_operator_68, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal adding_operator: match production*/
    case ARTL_ART_adding_operator_70: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_or, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_adding_operator_72, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_apostrophe_image() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal apostrophe_image production descriptor loads*/
    case ARTL_ART_apostrophe_image: 
      if (ARTSet29[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_apostrophe_image_74, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal apostrophe_image: match production*/
    case ARTL_ART_apostrophe_image_74: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH_DBLQUOTE, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_apostrophe_image_76, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_array_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal array_type production descriptor loads*/
    case ARTL_ART_array_type: 
      if (ARTSet30[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_array_type_78, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal array_type: match production*/
    case ARTL_ART_array_type_78: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_array, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_array_type_80, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_array_type_82, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_array_type_84, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_index_type; return; }
    case ARTL_ART_array_type_84: 
      /* Nonterminal template end */
      if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_array_type_86, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_array_type_2; return; }
    case ARTL_ART_array_type_86: 
      /* Nonterminal template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_array_type_88, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_of, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_array_type_90, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_array_type_92, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_component_type; return; }
    case ARTL_ART_array_type_92: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_array_type_2() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal array_type_2 production descriptor loads*/
    case ARTL_ART_array_type_2: 
      if (ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_array_type_2_98, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet40[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_array_type_2_102, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal array_type_2: match production*/
    case ARTL_ART_array_type_2_98: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_array_type_2_100, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal array_type_2: match production*/
    case ARTL_ART_array_type_2_102: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_array_type_2_104, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_array_type_2; return; }
    case ARTL_ART_array_type_2_104: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_array_type_2_106, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_array_type_2_108, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_index_type; return; }
    case ARTL_ART_array_type_2_108: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_assignment_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal assignment_statement production descriptor loads*/
    case ARTL_ART_assignment_statement: 
      if (ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_assignment_statement_114, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal assignment_statement: match production*/
    case ARTL_ART_assignment_statement_114: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_assignment_statement_116, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_assignment_statement_3; return; }
    case ARTL_ART_assignment_statement_116: 
      /* Nonterminal template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_assignment_statement_118, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_assignment_statement_120, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_assignment_statement_120: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_assignment_statement_3() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal assignment_statement_3 production descriptor loads*/
    case ARTL_ART_assignment_statement_3: 
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_assignment_statement_3_122, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_assignment_statement_3_126, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal assignment_statement_3: match production*/
    case ARTL_ART_assignment_statement_3_122: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_assignment_statement_3_124, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_assignment_statement_3_124: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal assignment_statement_3: match production*/
    case ARTL_ART_assignment_statement_3_126: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_assignment_statement_3_128, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_ID; return; }
    case ARTL_ART_assignment_statement_3_128: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_base_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal base_type production descriptor loads*/
    case ARTL_ART_base_type: 
      if (ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_base_type_148, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal base_type: match production*/
    case ARTL_ART_base_type_148: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_base_type_150, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ordinal_type; return; }
    case ARTL_ART_base_type_150: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_block() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal block production descriptor loads*/
    case ARTL_ART_block: 
      if (ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_block_160, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal block: match production*/
    case ARTL_ART_block_160: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_block_162, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_label_declaration_part; return; }
    case ARTL_ART_block_162: 
      /* Nonterminal template end */
      if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_block_164, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_definition_part; return; }
    case ARTL_ART_block_164: 
      /* Nonterminal template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_block_166, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_definition_part; return; }
    case ARTL_ART_block_166: 
      /* Nonterminal template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_block_168, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_declaration_part; return; }
    case ARTL_ART_block_168: 
      /* Nonterminal template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_block_170, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_and_function_declaration_part; return; }
    case ARTL_ART_block_170: 
      /* Nonterminal template end */
      if (!ARTSet59[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_block_172, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement_part; return; }
    case ARTL_ART_block_172: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet49[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_bound_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal bound_ID production descriptor loads*/
    case ARTL_ART_bound_ID: 
      if (ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_bound_ID_202, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal bound_ID: match production*/
    case ARTL_ART_bound_ID_202: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_bound_ID_204, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_bound_ID_204: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_case_constant() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal case_constant production descriptor loads*/
    case ARTL_ART_case_constant: 
      if (ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_constant_210, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal case_constant: match production*/
    case ARTL_ART_case_constant_210: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_constant_212, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant; return; }
    case ARTL_ART_case_constant_212: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet61[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_case_constant_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal case_constant_list production descriptor loads*/
    case ARTL_ART_case_constant_list: 
      if (ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_constant_list_224, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal case_constant_list: match production*/
    case ARTL_ART_case_constant_list_224: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_constant_list_226, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_constant; return; }
    case ARTL_ART_case_constant_list_226: 
      /* Nonterminal template end */
      if (!ARTSet61[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_constant_list_228, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_constant_list_4; return; }
    case ARTL_ART_case_constant_list_228: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_case_constant_list_4() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal case_constant_list_4 production descriptor loads*/
    case ARTL_ART_case_constant_list_4: 
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_constant_list_4_230, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_constant_list_4_234, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal case_constant_list_4: match production*/
    case ARTL_ART_case_constant_list_4_230: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_constant_list_4_232, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal case_constant_list_4: match production*/
    case ARTL_ART_case_constant_list_4_234: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_constant_list_4_236, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_constant_list_4; return; }
    case ARTL_ART_case_constant_list_4_236: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_constant_list_4_238, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_constant_list_4_240, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_constant; return; }
    case ARTL_ART_case_constant_list_4_240: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_case_index() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal case_index production descriptor loads*/
    case ARTL_ART_case_index: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_index_242, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal case_index: match production*/
    case ARTL_ART_case_index_242: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_index_244, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_case_index_244: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_case_list_element() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal case_list_element production descriptor loads*/
    case ARTL_ART_case_list_element: 
      if (ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_list_element_246, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal case_list_element: match production*/
    case ARTL_ART_case_list_element_246: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_list_element_248, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_constant_list; return; }
    case ARTL_ART_case_list_element_248: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_list_element_250, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_list_element_252, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement; return; }
    case ARTL_ART_case_list_element_252: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_case_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal case_statement production descriptor loads*/
    case ARTL_ART_case_statement: 
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_statement_260, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal case_statement: match production*/
    case ARTL_ART_case_statement_260: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_case, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_statement_262, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_statement_264, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_index; return; }
    case ARTL_ART_case_statement_264: 
      /* Nonterminal template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_of, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_statement_266, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_statement_268, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_list_element; return; }
    case ARTL_ART_case_statement_268: 
      /* Nonterminal template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_statement_270, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_statement_5; return; }
    case ARTL_ART_case_statement_270: 
      /* Nonterminal template end */
      if (!ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_statement_272, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_statement_6; return; }
    case ARTL_ART_case_statement_272: 
      /* Nonterminal template end */
      if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_end, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_statement_274, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_case_statement_5() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal case_statement_5 production descriptor loads*/
    case ARTL_ART_case_statement_5: 
      if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_statement_5_276, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet78[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_statement_5_280, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal case_statement_5: match production*/
    case ARTL_ART_case_statement_5_276: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_statement_5_278, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal case_statement_5: match production*/
    case ARTL_ART_case_statement_5_280: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_statement_5_282, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_statement_5; return; }
    case ARTL_ART_case_statement_5_282: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_statement_5_284, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_case_statement_5_286, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_list_element; return; }
    case ARTL_ART_case_statement_5_286: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_case_statement_6() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal case_statement_6 production descriptor loads*/
    case ARTL_ART_case_statement_6: 
      if (ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_statement_6_288, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_case_statement_6_292, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal case_statement_6: match production*/
    case ARTL_ART_case_statement_6_288: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_statement_6_290, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal case_statement_6: match production*/
    case ARTL_ART_case_statement_6_292: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_case_statement_6_294, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_character_string() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal character_string production descriptor loads*/
    case ARTL_ART_character_string: 
      if (ARTSet81[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_character_string_296, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal character_string: match production*/
    case ARTL_ART_character_string_296: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_STRING, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_character_string_298, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_component_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal component_type production descriptor loads*/
    case ARTL_ART_component_type: 
      if (ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_component_type_110, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal component_type: match production*/
    case ARTL_ART_component_type_110: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_component_type_112, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_denoter; return; }
    case ARTL_ART_component_type_112: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_component_variable() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal component_variable production descriptor loads*/
    case ARTL_ART_component_variable: 
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_component_variable_308, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_component_variable_312, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal component_variable: match production*/
    case ARTL_ART_component_variable_308: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_component_variable_310, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_indexed_variable; return; }
    case ARTL_ART_component_variable_310: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal component_variable: match production*/
    case ARTL_ART_component_variable_312: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_component_variable_314, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_field_designator; return; }
    case ARTL_ART_component_variable_314: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_compound_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal compound_statement production descriptor loads*/
    case ARTL_ART_compound_statement: 
      if (ARTSet85[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_compound_statement_340, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal compound_statement: match production*/
    case ARTL_ART_compound_statement_340: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_begin, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_compound_statement_342, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet87[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_compound_statement_344, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement_sequence; return; }
    case ARTL_ART_compound_statement_344: 
      /* Nonterminal template end */
      if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_end, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_compound_statement_346, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet86[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_conditional_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal conditional_statement production descriptor loads*/
    case ARTL_ART_conditional_statement: 
      if (ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_conditional_statement_354, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet91[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_conditional_statement_358, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal conditional_statement: match production*/
    case ARTL_ART_conditional_statement_354: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_conditional_statement_356, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_if_statement; return; }
    case ARTL_ART_conditional_statement_356: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal conditional_statement: match production*/
    case ARTL_ART_conditional_statement_358: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_conditional_statement_360, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_statement; return; }
    case ARTL_ART_conditional_statement_360: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_conformant_array_parameter_specification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal conformant_array_parameter_specification production descriptor loads*/
    case ARTL_ART_conformant_array_parameter_specification: 
      if (ARTSet93[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_conformant_array_parameter_specification_374, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_conformant_array_parameter_specification_378, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal conformant_array_parameter_specification: match production*/
    case ARTL_ART_conformant_array_parameter_specification_374: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_conformant_array_parameter_specification_376, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_value_conformant_array_specification; return; }
    case ARTL_ART_conformant_array_parameter_specification_376: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal conformant_array_parameter_specification: match production*/
    case ARTL_ART_conformant_array_parameter_specification_378: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_conformant_array_parameter_specification_380, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_conformant_array_specification; return; }
    case ARTL_ART_conformant_array_parameter_specification_380: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_conformant_array_schema() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal conformant_array_schema production descriptor loads*/
    case ARTL_ART_conformant_array_schema: 
      if (ARTSet96[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_conformant_array_schema_400, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet97[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_conformant_array_schema_404, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal conformant_array_schema: match production*/
    case ARTL_ART_conformant_array_schema_400: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_conformant_array_schema_402, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_packed_conformant_array_schema; return; }
    case ARTL_ART_conformant_array_schema_402: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal conformant_array_schema: match production*/
    case ARTL_ART_conformant_array_schema_404: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_conformant_array_schema_406, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unpacked_conformant_array_schema; return; }
    case ARTL_ART_conformant_array_schema_406: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_constant() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal constant production descriptor loads*/
    case ARTL_ART_constant: 
      if (ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_214, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet103[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_220, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal constant: match production*/
    case ARTL_ART_constant_214: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_216, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_7; return; }
    case ARTL_ART_constant_216: 
      /* Nonterminal template end */
      if (!ARTSet102[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_218, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_8; return; }
    case ARTL_ART_constant_218: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet99[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal constant: match production*/
    case ARTL_ART_constant_220: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_222, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_character_string; return; }
    case ARTL_ART_constant_222: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet99[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_constant_7() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal constant_7 production descriptor loads*/
    case ARTL_ART_constant_7: 
      if (ARTSet102[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_7_440, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_7_444, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal constant_7: match production*/
    case ARTL_ART_constant_7_440: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_constant_7_442, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet102[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal constant_7: match production*/
    case ARTL_ART_constant_7_444: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_7_446, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_sign; return; }
    case ARTL_ART_constant_7_446: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet102[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_constant_8() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal constant_8 production descriptor loads*/
    case ARTL_ART_constant_8: 
      if (ARTSet107[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_8_448, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet108[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_8_452, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal constant_8: match production*/
    case ARTL_ART_constant_8_448: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_8_450, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unsigned_number; return; }
    case ARTL_ART_constant_8_450: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet99[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal constant_8: match production*/
    case ARTL_ART_constant_8_452: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_8_454, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_ID; return; }
    case ARTL_ART_constant_8_454: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet99[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_constant_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal constant_ID production descriptor loads*/
    case ARTL_ART_constant_ID: 
      if (ARTSet109[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_ID_472, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal constant_ID: match production*/
    case ARTL_ART_constant_ID_472: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_constant_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_constant_ID_474, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_constant_definition() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal constant_definition production descriptor loads*/
    case ARTL_ART_constant_definition: 
      if (ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_definition_476, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal constant_definition: match production*/
    case ARTL_ART_constant_definition_476: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_definition_478, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_constant_definition_478: 
      /* Nonterminal template end */
      if (!ARTSet110[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_constant_definition_480, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_definition_482, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant; return; }
    case ARTL_ART_constant_definition_482: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_constant_definition_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal constant_definition_part production descriptor loads*/
    case ARTL_ART_constant_definition_part: 
      if (ARTSet112[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_definition_part_178, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal constant_definition_part: match production*/
    case ARTL_ART_constant_definition_part_178: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_definition_part_180, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_definition_part_9; return; }
    case ARTL_ART_constant_definition_part_180: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_constant_definition_part_10() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal constant_definition_part_10 production descriptor loads*/
    case ARTL_ART_constant_definition_part_10: 
      if (ARTSet114[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_definition_part_10_498, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet115[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_definition_part_10_502, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal constant_definition_part_10: match production*/
    case ARTL_ART_constant_definition_part_10_498: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_constant_definition_part_10_500, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet114[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal constant_definition_part_10: match production*/
    case ARTL_ART_constant_definition_part_10_502: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_definition_part_10_504, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_definition_part_10; return; }
    case ARTL_ART_constant_definition_part_10_504: 
      /* Nonterminal template end */
      if (!ARTSet116[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_definition_part_10_506, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_definition; return; }
    case ARTL_ART_constant_definition_part_10_506: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_constant_definition_part_10_508, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet114[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_constant_definition_part_9() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal constant_definition_part_9 production descriptor loads*/
    case ARTL_ART_constant_definition_part_9: 
      if (ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_definition_part_9_484, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet118[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_constant_definition_part_9_488, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal constant_definition_part_9: match production*/
    case ARTL_ART_constant_definition_part_9_484: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_constant_definition_part_9_486, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal constant_definition_part_9: match production*/
    case ARTL_ART_constant_definition_part_9_488: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_const, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_constant_definition_part_9_490, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet116[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_definition_part_9_492, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_definition; return; }
    case ARTL_ART_constant_definition_part_9_492: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_constant_definition_part_9_494, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet119[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_constant_definition_part_9_496, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_definition_part_10; return; }
    case ARTL_ART_constant_definition_part_9_496: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_control_variable() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal control_variable production descriptor loads*/
    case ARTL_ART_control_variable: 
      if (ARTSet120[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_control_variable_510, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal control_variable: match production*/
    case ARTL_ART_control_variable_510: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_control_variable_512, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_entire_variable; return; }
    case ARTL_ART_control_variable_512: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_digit() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal digit production descriptor loads*/
    case ARTL_ART_digit: 
      if (ARTSet121[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_digit_518, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal digit: match production*/
    case ARTL_ART_digit_518: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_digit, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_digit_520, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_digit_sequence() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal digit_sequence production descriptor loads*/
    case ARTL_ART_digit_sequence: 
      if (ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_digit_sequence_522, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal digit_sequence: match production*/
    case ARTL_ART_digit_sequence_522: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_INTEGER, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_digit_sequence_524, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet123[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_directive() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal directive production descriptor loads*/
    case ARTL_ART_directive: 
      if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_526, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_526: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_528, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_domain_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal domain_type production descriptor loads*/
    case ARTL_ART_domain_type: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_domain_type_530, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal domain_type: match production*/
    case ARTL_ART_domain_type_530: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_domain_type_532, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_domain_type_532: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_else_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal else_part production descriptor loads*/
    case ARTL_ART_else_part: 
      if (ARTSet125[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_else_part_538, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal else_part: match production*/
    case ARTL_ART_else_part_538: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_else, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_else_part_540, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet126[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_else_part_542, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement; return; }
    case ARTL_ART_else_part_542: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_entire_variable() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal entire_variable production descriptor loads*/
    case ARTL_ART_entire_variable: 
      if (ARTSet127[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_entire_variable_514, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal entire_variable: match production*/
    case ARTL_ART_entire_variable_514: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_entire_variable_516, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_ID; return; }
    case ARTL_ART_entire_variable_516: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_enumerated_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal enumerated_type production descriptor loads*/
    case ARTL_ART_enumerated_type: 
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_enumerated_type_548, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal enumerated_type: match production*/
    case ARTL_ART_enumerated_type_548: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_enumerated_type_550, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_enumerated_type_552, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list; return; }
    case ARTL_ART_enumerated_type_552: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_enumerated_type_554, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_expression() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal expression production descriptor loads*/
    case ARTL_ART_expression: 
      if (ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_expression_30, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal expression: match production*/
    case ARTL_ART_expression_30: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_expression_32, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_expression; return; }
    case ARTL_ART_expression_32: 
      /* Nonterminal template end */
      if (!ARTSet132[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_expression_34, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression_11; return; }
    case ARTL_ART_expression_34: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_expression_11() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal expression_11 production descriptor loads*/
    case ARTL_ART_expression_11: 
      if (ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_expression_11_576, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet135[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_expression_11_580, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal expression_11: match production*/
    case ARTL_ART_expression_11_576: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_expression_11_578, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal expression_11: match production*/
    case ARTL_ART_expression_11_580: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_expression_11_582, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_relational_operator; return; }
    case ARTL_ART_expression_11_582: 
      /* Nonterminal template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_expression_11_584, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_expression; return; }
    case ARTL_ART_expression_11_584: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_factor() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal factor production descriptor loads*/
    case ARTL_ART_factor: 
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_factor_614, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet137[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_factor_618, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet138[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_factor_622, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet139[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_factor_626, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_factor_630, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet140[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_factor_638, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal factor: match production*/
    case ARTL_ART_factor_614: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_factor_616, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_factor_616: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal factor: match production*/
    case ARTL_ART_factor_618: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_factor_620, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unsigned_constant; return; }
    case ARTL_ART_factor_620: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal factor: match production*/
    case ARTL_ART_factor_622: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_factor_624, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_designator; return; }
    case ARTL_ART_factor_624: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal factor: match production*/
    case ARTL_ART_factor_626: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_factor_628, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_set_constructor; return; }
    case ARTL_ART_factor_628: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal factor: match production*/
    case ARTL_ART_factor_630: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_factor_632, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_factor_634, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_factor_634: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_factor_636, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal factor: match production*/
    case ARTL_ART_factor_638: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_not, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_factor_640, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_factor_642, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_factor; return; }
    case ARTL_ART_factor_642: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_field_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal field_ID production descriptor loads*/
    case ARTL_ART_field_ID: 
      if (ARTSet142[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_ID_682, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal field_ID: match production*/
    case ARTL_ART_field_ID_682: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_field_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_ID_684, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_field_designator() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal field_designator production descriptor loads*/
    case ARTL_ART_field_designator: 
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_designator_328, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet145[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_designator_336, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal field_designator: match production*/
    case ARTL_ART_field_designator_328: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_designator_330, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_field_designator_330: 
      /* Nonterminal template end */
      if (!ARTSet143[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_designator_332, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet144[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_designator_334, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_field_specifier; return; }
    case ARTL_ART_field_designator_334: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal field_designator: match production*/
    case ARTL_ART_field_designator_336: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_designator_338, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_field_designator_ID; return; }
    case ARTL_ART_field_designator_338: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_field_designator_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal field_designator_ID production descriptor loads*/
    case ARTL_ART_field_designator_ID: 
      if (ARTSet146[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_designator_ID_678, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal field_designator_ID: match production*/
    case ARTL_ART_field_designator_ID_678: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_field_designator_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_designator_ID_680, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_field_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal field_list production descriptor loads*/
    case ARTL_ART_field_list: 
      if (ARTSet150[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_686, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet151[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_690, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet151[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_696, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet151[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_704, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet152[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_714, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal field_list: match production*/
    case ARTL_ART_field_list_686: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_688, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_field_list_12; return; }
    case ARTL_ART_field_list_688: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal field_list: match production*/
    case ARTL_ART_field_list_690: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_692, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_fixed_part; return; }
    case ARTL_ART_field_list_692: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_list_694, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal field_list: match production*/
    case ARTL_ART_field_list_696: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_698, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_fixed_part; return; }
    case ARTL_ART_field_list_698: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_list_700, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet152[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_702, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variant_part; return; }
    case ARTL_ART_field_list_702: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal field_list: match production*/
    case ARTL_ART_field_list_704: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_706, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_fixed_part; return; }
    case ARTL_ART_field_list_706: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_list_708, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet152[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_710, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variant_part; return; }
    case ARTL_ART_field_list_710: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_list_712, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal field_list: match production*/
    case ARTL_ART_field_list_714: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_716, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variant_part; return; }
    case ARTL_ART_field_list_716: 
      /* Nonterminal template end */
      if (!ARTSet153[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_718, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_field_list_13; return; }
    case ARTL_ART_field_list_718: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_field_list_12() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal field_list_12 production descriptor loads*/
    case ARTL_ART_field_list_12: 
      if (ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_12_720, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet151[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_12_724, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal field_list_12: match production*/
    case ARTL_ART_field_list_12_720: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_list_12_722, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal field_list_12: match production*/
    case ARTL_ART_field_list_12_724: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_list_12_726, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_fixed_part; return; }
    case ARTL_ART_field_list_12_726: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_field_list_13() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal field_list_13 production descriptor loads*/
    case ARTL_ART_field_list_13: 
      if (ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_13_758, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_list_13_762, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal field_list_13: match production*/
    case ARTL_ART_field_list_13_758: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_list_13_760, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal field_list_13: match production*/
    case ARTL_ART_field_list_13_762: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_field_list_13_764, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_field_specifier() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal field_specifier production descriptor loads*/
    case ARTL_ART_field_specifier: 
      if (ARTSet156[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_field_specifier_674, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal field_specifier: match production*/
    case ARTL_ART_field_specifier_674: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_field_specifier_676, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_field_ID; return; }
    case ARTL_ART_field_specifier_676: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_file_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal file_type production descriptor loads*/
    case ARTL_ART_file_type: 
      if (ARTSet157[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_file_type_766, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal file_type: match production*/
    case ARTL_ART_file_type_766: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_file, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_file_type_768, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_of, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_file_type_770, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_file_type_772, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_component_type; return; }
    case ARTL_ART_file_type_772: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_final_value() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal final_value production descriptor loads*/
    case ARTL_ART_final_value: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_final_value_774, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal final_value: match production*/
    case ARTL_ART_final_value_774: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_final_value_776, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_final_value_776: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet158[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_fixed_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal fixed_part production descriptor loads*/
    case ARTL_ART_fixed_part: 
      if (ARTSet159[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_fixed_part_728, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet151[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_fixed_part_732, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal fixed_part: match production*/
    case ARTL_ART_fixed_part_728: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_fixed_part_730, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_record_section; return; }
    case ARTL_ART_fixed_part_730: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal fixed_part: match production*/
    case ARTL_ART_fixed_part_732: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_fixed_part_734, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_fixed_part; return; }
    case ARTL_ART_fixed_part_734: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_fixed_part_736, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet159[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_fixed_part_738, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_record_section; return; }
    case ARTL_ART_fixed_part_738: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_for_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal for_statement production descriptor loads*/
    case ARTL_ART_for_statement: 
      if (ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_for_statement_786, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal for_statement: match production*/
    case ARTL_ART_for_statement_786: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_for, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_for_statement_788, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet161[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_for_statement_790, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_control_variable; return; }
    case ARTL_ART_for_statement_790: 
      /* Nonterminal template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_for_statement_792, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet162[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_for_statement_794, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_initial_value; return; }
    case ARTL_ART_for_statement_794: 
      /* Nonterminal template end */
      if (!ARTSet163[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_for_statement_796, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_for_statement_14; return; }
    case ARTL_ART_for_statement_796: 
      /* Nonterminal template end */
      if (!ARTSet164[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_for_statement_798, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_final_value; return; }
    case ARTL_ART_for_statement_798: 
      /* Nonterminal template end */
      if (!ARTSet158[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_do, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_for_statement_800, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet126[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_for_statement_802, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement; return; }
    case ARTL_ART_for_statement_802: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_for_statement_14() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal for_statement_14 production descriptor loads*/
    case ARTL_ART_for_statement_14: 
      if (ARTSet166[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_for_statement_14_808, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet167[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_for_statement_14_812, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal for_statement_14: match production*/
    case ARTL_ART_for_statement_14_808: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_to, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_for_statement_14_810, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet164[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal for_statement_14: match production*/
    case ARTL_ART_for_statement_14_812: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_downto, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_for_statement_14_814, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet164[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_formal_parameter_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal formal_parameter_list production descriptor loads*/
    case ARTL_ART_formal_parameter_list: 
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_formal_parameter_list_816, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal formal_parameter_list: match production*/
    case ARTL_ART_formal_parameter_list_816: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_formal_parameter_list_818, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet169[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_formal_parameter_list_820, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_formal_parameter_section; return; }
    case ARTL_ART_formal_parameter_list_820: 
      /* Nonterminal template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_formal_parameter_list_822, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_formal_parameter_list_15; return; }
    case ARTL_ART_formal_parameter_list_822: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_formal_parameter_list_824, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet168[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_formal_parameter_list_15() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal formal_parameter_list_15 production descriptor loads*/
    case ARTL_ART_formal_parameter_list_15: 
      if (ARTSet172[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_formal_parameter_list_15_842, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet173[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_formal_parameter_list_15_846, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal formal_parameter_list_15: match production*/
    case ARTL_ART_formal_parameter_list_15_842: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_formal_parameter_list_15_844, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet172[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal formal_parameter_list_15: match production*/
    case ARTL_ART_formal_parameter_list_15_846: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_formal_parameter_list_15_848, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_formal_parameter_list_15; return; }
    case ARTL_ART_formal_parameter_list_15_848: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_formal_parameter_list_15_850, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet169[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_formal_parameter_list_15_852, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_formal_parameter_section; return; }
    case ARTL_ART_formal_parameter_list_15_852: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet172[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_formal_parameter_section() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal formal_parameter_section production descriptor loads*/
    case ARTL_ART_formal_parameter_section: 
      if (ARTSet175[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_formal_parameter_section_826, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet176[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_formal_parameter_section_830, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet177[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_formal_parameter_section_834, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet178[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_formal_parameter_section_838, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal formal_parameter_section: match production*/
    case ARTL_ART_formal_parameter_section_826: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_formal_parameter_section_828, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_value_parameter_specification; return; }
    case ARTL_ART_formal_parameter_section_828: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal formal_parameter_section: match production*/
    case ARTL_ART_formal_parameter_section_830: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_formal_parameter_section_832, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_parameter_specification; return; }
    case ARTL_ART_formal_parameter_section_832: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal formal_parameter_section: match production*/
    case ARTL_ART_formal_parameter_section_834: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_formal_parameter_section_836, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedural_parameter_specification; return; }
    case ARTL_ART_formal_parameter_section_836: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal formal_parameter_section: match production*/
    case ARTL_ART_formal_parameter_section_838: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_formal_parameter_section_840, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_functional_parameter_specification; return; }
    case ARTL_ART_formal_parameter_section_840: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_fractional_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal fractional_part production descriptor loads*/
    case ARTL_ART_fractional_part: 
      if (ARTSet179[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_fractional_part_880, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal fractional_part: match production*/
    case ARTL_ART_fractional_part_880: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_fractional_part_882, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_digit_sequence; return; }
    case ARTL_ART_fractional_part_882: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_function_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal function_ID production descriptor loads*/
    case ARTL_ART_function_ID: 
      if (ARTSet180[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_ID_144, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal function_ID: match production*/
    case ARTL_ART_function_ID_144: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_function_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_ID_146, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet181[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_function_block() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal function_block production descriptor loads*/
    case ARTL_ART_function_block: 
      if (ARTSet182[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_block_884, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal function_block: match production*/
    case ARTL_ART_function_block_884: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_block_886, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_block; return; }
    case ARTL_ART_function_block_886: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_function_declaration() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal function_declaration production descriptor loads*/
    case ARTL_ART_function_declaration: 
      if (ARTSet184[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_declaration_888, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet186[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_declaration_896, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet184[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_declaration_904, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal function_declaration: match production*/
    case ARTL_ART_function_declaration_888: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_declaration_890, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_heading; return; }
    case ARTL_ART_function_declaration_890: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_declaration_892, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet185[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_declaration_894, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_directive; return; }
    case ARTL_ART_function_declaration_894: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal function_declaration: match production*/
    case ARTL_ART_function_declaration_896: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_declaration_898, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_identification; return; }
    case ARTL_ART_function_declaration_898: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_declaration_900, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet187[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_declaration_902, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_block; return; }
    case ARTL_ART_function_declaration_902: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal function_declaration: match production*/
    case ARTL_ART_function_declaration_904: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_declaration_906, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_heading; return; }
    case ARTL_ART_function_declaration_906: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_declaration_908, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet187[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_declaration_910, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_block; return; }
    case ARTL_ART_function_declaration_910: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_function_designator() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal function_designator production descriptor loads*/
    case ARTL_ART_function_designator: 
      if (ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_designator_660, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal function_designator: match production*/
    case ARTL_ART_function_designator_660: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_designator_662, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_ID; return; }
    case ARTL_ART_function_designator_662: 
      /* Nonterminal template end */
      if (!ARTSet188[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_designator_664, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_designator_16; return; }
    case ARTL_ART_function_designator_664: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_function_designator_16() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal function_designator_16 production descriptor loads*/
    case ARTL_ART_function_designator_16: 
      if (ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_designator_16_930, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet191[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_designator_16_934, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal function_designator_16: match production*/
    case ARTL_ART_function_designator_16_930: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_designator_16_932, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal function_designator_16: match production*/
    case ARTL_ART_function_designator_16_934: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_designator_16_936, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_actual_parameter_list; return; }
    case ARTL_ART_function_designator_16_936: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_function_heading() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal function_heading production descriptor loads*/
    case ARTL_ART_function_heading: 
      if (ARTSet192[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_heading_912, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal function_heading: match production*/
    case ARTL_ART_function_heading_912: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_function, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_heading_914, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_heading_916, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_function_heading_916: 
      /* Nonterminal template end */
      if (!ARTSet193[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_heading_918, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_heading_17; return; }
    case ARTL_ART_function_heading_918: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_heading_920, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet195[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_heading_922, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_result_type; return; }
    case ARTL_ART_function_heading_922: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_function_heading_17() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal function_heading_17 production descriptor loads*/
    case ARTL_ART_function_heading_17: 
      if (ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_heading_17_938, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet197[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_heading_17_942, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal function_heading_17: match production*/
    case ARTL_ART_function_heading_17_938: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_heading_17_940, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal function_heading_17: match production*/
    case ARTL_ART_function_heading_17_942: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_heading_17_944, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_formal_parameter_list; return; }
    case ARTL_ART_function_heading_17_944: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_function_identification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal function_identification production descriptor loads*/
    case ARTL_ART_function_identification: 
      if (ARTSet192[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_function_identification_924, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal function_identification: match production*/
    case ARTL_ART_function_identification_924: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_function, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_function_identification_926, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_function_identification_928, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_ID; return; }
    case ARTL_ART_function_identification_928: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_functional_parameter_specification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal functional_parameter_specification production descriptor loads*/
    case ARTL_ART_functional_parameter_specification: 
      if (ARTSet184[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_functional_parameter_specification_876, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal functional_parameter_specification: match production*/
    case ARTL_ART_functional_parameter_specification_876: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_functional_parameter_specification_878, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_heading; return; }
    case ARTL_ART_functional_parameter_specification_878: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_goto_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal goto_statement production descriptor loads*/
    case ARTL_ART_goto_statement: 
      if (ARTSet198[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_goto_statement_950, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal goto_statement: match production*/
    case ARTL_ART_goto_statement_950: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_goto, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_goto_statement_952, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_goto_statement_954, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_label; return; }
    case ARTL_ART_goto_statement_954: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_if_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal if_statement production descriptor loads*/
    case ARTL_ART_if_statement: 
      if (ARTSet200[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_if_statement_362, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal if_statement: match production*/
    case ARTL_ART_if_statement_362: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_if, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_if_statement_364, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet201[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_if_statement_366, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_Boolean_expression; return; }
    case ARTL_ART_if_statement_366: 
      /* Nonterminal template end */
      if (!ARTSet202[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_then, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_if_statement_368, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet126[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_if_statement_370, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement; return; }
    case ARTL_ART_if_statement_370: 
      /* Nonterminal template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_if_statement_372, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_if_statement_19; return; }
    case ARTL_ART_if_statement_372: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_if_statement_19() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal if_statement_19 production descriptor loads*/
    case ARTL_ART_if_statement_19: 
      if (ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_if_statement_19_972, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet206[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_if_statement_19_976, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal if_statement_19: match production*/
    case ARTL_ART_if_statement_19_972: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_if_statement_19_974, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal if_statement_19: match production*/
    case ARTL_ART_if_statement_19_976: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_if_statement_19_978, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_else_part; return; }
    case ARTL_ART_if_statement_19_978: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_index_expression() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal index_expression production descriptor loads*/
    case ARTL_ART_index_expression: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_index_expression_980, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal index_expression: match production*/
    case ARTL_ART_index_expression_980: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_index_expression_982, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_index_expression_982: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet207[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_index_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal index_type production descriptor loads*/
    case ARTL_ART_index_type: 
      if (ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_index_type_94, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal index_type: match production*/
    case ARTL_ART_index_type_94: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_index_type_96, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ordinal_type; return; }
    case ARTL_ART_index_type_96: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_index_type_specification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal index_type_specification production descriptor loads*/
    case ARTL_ART_index_type_specification: 
      if (ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_index_type_specification_984, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal index_type_specification: match production*/
    case ARTL_ART_index_type_specification_984: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_index_type_specification_986, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_index_type_specification_986: 
      /* Nonterminal template end */
      if (!ARTSet209[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD_PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_index_type_specification_988, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_index_type_specification_990, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_index_type_specification_990: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_index_type_specification_992, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet210[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_index_type_specification_994, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ordinal_type_ID; return; }
    case ARTL_ART_index_type_specification_994: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet208[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_indexed_variable() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal indexed_variable production descriptor loads*/
    case ARTL_ART_indexed_variable: 
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_indexed_variable_316, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal indexed_variable: match production*/
    case ARTL_ART_indexed_variable_316: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_indexed_variable_318, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_indexed_variable_318: 
      /* Nonterminal template end */
      if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_indexed_variable_320, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet211[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_indexed_variable_322, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_index_expression; return; }
    case ARTL_ART_indexed_variable_322: 
      /* Nonterminal template end */
      if (!ARTSet207[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_indexed_variable_324, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_indexed_variable_20; return; }
    case ARTL_ART_indexed_variable_324: 
      /* Nonterminal template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_indexed_variable_326, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_indexed_variable_20() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal indexed_variable_20 production descriptor loads*/
    case ARTL_ART_indexed_variable_20: 
      if (ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_indexed_variable_20_1000, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet213[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_indexed_variable_20_1004, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal indexed_variable_20: match production*/
    case ARTL_ART_indexed_variable_20_1000: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_indexed_variable_20_1002, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal indexed_variable_20: match production*/
    case ARTL_ART_indexed_variable_20_1004: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_indexed_variable_20_1006, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_indexed_variable_20; return; }
    case ARTL_ART_indexed_variable_20_1006: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_indexed_variable_20_1008, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet211[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_indexed_variable_20_1010, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_index_expression; return; }
    case ARTL_ART_indexed_variable_20_1010: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_initial_value() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal initial_value production descriptor loads*/
    case ARTL_ART_initial_value: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_initial_value_804, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal initial_value: match production*/
    case ARTL_ART_initial_value_804: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_initial_value_806, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_initial_value_806: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet163[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_label() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal label production descriptor loads*/
    case ARTL_ART_label: 
      if (ARTSet179[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_label_956, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal label: match production*/
    case ARTL_ART_label_956: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_label_958, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_digit_sequence; return; }
    case ARTL_ART_label_958: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet214[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_label_declaration_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal label_declaration_part production descriptor loads*/
    case ARTL_ART_label_declaration_part: 
      if (ARTSet216[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_label_declaration_part_174, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal label_declaration_part: match production*/
    case ARTL_ART_label_declaration_part_174: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_label_declaration_part_176, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_label_declaration_part_21; return; }
    case ARTL_ART_label_declaration_part_176: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_label_declaration_part_21() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal label_declaration_part_21 production descriptor loads*/
    case ARTL_ART_label_declaration_part_21: 
      if (ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_label_declaration_part_21_1012, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet218[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_label_declaration_part_21_1016, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal label_declaration_part_21: match production*/
    case ARTL_ART_label_declaration_part_21_1012: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_label_declaration_part_21_1014, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal label_declaration_part_21: match production*/
    case ARTL_ART_label_declaration_part_21_1016: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_label, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_label_declaration_part_21_1018, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_label_declaration_part_21_1020, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_label; return; }
    case ARTL_ART_label_declaration_part_21_1020: 
      /* Nonterminal template end */
      if (!ARTSet219[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_label_declaration_part_21_1022, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_label_declaration_part_22; return; }
    case ARTL_ART_label_declaration_part_21_1022: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_label_declaration_part_21_1024, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_label_declaration_part_22() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal label_declaration_part_22 production descriptor loads*/
    case ARTL_ART_label_declaration_part_22: 
      if (ARTSet221[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_label_declaration_part_22_1026, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet222[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_label_declaration_part_22_1030, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal label_declaration_part_22: match production*/
    case ARTL_ART_label_declaration_part_22_1026: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_label_declaration_part_22_1028, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet221[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal label_declaration_part_22: match production*/
    case ARTL_ART_label_declaration_part_22_1030: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_label_declaration_part_22_1032, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_label_declaration_part_22; return; }
    case ARTL_ART_label_declaration_part_22_1032: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_label_declaration_part_22_1034, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_label_declaration_part_22_1036, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_label; return; }
    case ARTL_ART_label_declaration_part_22_1036: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet221[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_letter() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal letter production descriptor loads*/
    case ARTL_ART_letter: 
      if (ARTSet223[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_letter_1038, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal letter: match production*/
    case ARTL_ART_letter_1038: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_letter, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_letter_1040, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_member_designator() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal member_designator production descriptor loads*/
    case ARTL_ART_member_designator: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_member_designator_1042, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal member_designator: match production*/
    case ARTL_ART_member_designator_1042: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_member_designator_1044, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_member_designator_1044: 
      /* Nonterminal template end */
      if (!ARTSet225[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_member_designator_1046, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_member_designator_23; return; }
    case ARTL_ART_member_designator_1046: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet224[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_member_designator_23() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal member_designator_23 production descriptor loads*/
    case ARTL_ART_member_designator_23: 
      if (ARTSet227[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_member_designator_23_1048, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet228[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_member_designator_23_1052, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal member_designator_23: match production*/
    case ARTL_ART_member_designator_23_1048: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_member_designator_23_1050, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet227[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal member_designator_23: match production*/
    case ARTL_ART_member_designator_23_1052: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_member_designator_23_1054, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_member_designator_23; return; }
    case ARTL_ART_member_designator_23_1054: 
      /* Nonterminal template end */
      if (!ARTSet209[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD_PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_member_designator_23_1056, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_member_designator_23_1058, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_member_designator_23_1058: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet227[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_multiplying_operator() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal multiplying_operator production descriptor loads*/
    case ARTL_ART_multiplying_operator: 
      if (ARTSet230[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_multiplying_operator_1060, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet231[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_multiplying_operator_1064, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet232[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_multiplying_operator_1068, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet233[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_multiplying_operator_1072, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet234[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_multiplying_operator_1076, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal multiplying_operator: match production*/
    case ARTL_ART_multiplying_operator_1060: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_multiplying_operator_1062, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal multiplying_operator: match production*/
    case ARTL_ART_multiplying_operator_1064: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_multiplying_operator_1066, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal multiplying_operator: match production*/
    case ARTL_ART_multiplying_operator_1068: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_div, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_multiplying_operator_1070, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal multiplying_operator: match production*/
    case ARTL_ART_multiplying_operator_1072: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_mod, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_multiplying_operator_1074, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal multiplying_operator: match production*/
    case ARTL_ART_multiplying_operator_1076: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_and, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_multiplying_operator_1078, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_new_ordinal_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal new_ordinal_type production descriptor loads*/
    case ARTL_ART_new_ordinal_type: 
      if (ARTSet236[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_ordinal_type_1080, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet237[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_ordinal_type_1084, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal new_ordinal_type: match production*/
    case ARTL_ART_new_ordinal_type_1080: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_new_ordinal_type_1082, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_enumerated_type; return; }
    case ARTL_ART_new_ordinal_type_1082: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal new_ordinal_type: match production*/
    case ARTL_ART_new_ordinal_type_1084: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_new_ordinal_type_1086, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_subrange_type; return; }
    case ARTL_ART_new_ordinal_type_1086: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_new_pointer_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal new_pointer_type production descriptor loads*/
    case ARTL_ART_new_pointer_type: 
      if (ARTSet238[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_pointer_type_1096, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal new_pointer_type: match production*/
    case ARTL_ART_new_pointer_type_1096: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_new_pointer_type_1098, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet239[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_new_pointer_type_1100, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_domain_type; return; }
    case ARTL_ART_new_pointer_type_1100: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_new_structured_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal new_structured_type production descriptor loads*/
    case ARTL_ART_new_structured_type: 
      if (ARTSet240[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_structured_type_1102, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal new_structured_type: match production*/
    case ARTL_ART_new_structured_type_1102: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_new_structured_type_1104, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_new_structured_type_24; return; }
    case ARTL_ART_new_structured_type_1104: 
      /* Nonterminal template end */
      if (!ARTSet242[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_new_structured_type_1106, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unpacked_structured_type; return; }
    case ARTL_ART_new_structured_type_1106: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_new_structured_type_24() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal new_structured_type_24 production descriptor loads*/
    case ARTL_ART_new_structured_type_24: 
      if (ARTSet242[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_structured_type_24_1108, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet244[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_structured_type_24_1112, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal new_structured_type_24: match production*/
    case ARTL_ART_new_structured_type_24_1108: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_new_structured_type_24_1110, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet242[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal new_structured_type_24: match production*/
    case ARTL_ART_new_structured_type_24_1112: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_packed, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_new_structured_type_24_1114, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet242[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_new_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal new_type production descriptor loads*/
    case ARTL_ART_new_type: 
      if (ARTSet246[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_type_1132, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet247[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_type_1136, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet248[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_new_type_1140, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal new_type: match production*/
    case ARTL_ART_new_type_1132: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_new_type_1134, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_new_ordinal_type; return; }
    case ARTL_ART_new_type_1134: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal new_type: match production*/
    case ARTL_ART_new_type_1136: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_new_type_1138, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_new_structured_type; return; }
    case ARTL_ART_new_type_1138: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal new_type: match production*/
    case ARTL_ART_new_type_1140: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_new_type_1142, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_new_pointer_type; return; }
    case ARTL_ART_new_type_1142: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_ordinal_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal ordinal_type production descriptor loads*/
    case ARTL_ART_ordinal_type: 
      if (ARTSet246[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ordinal_type_152, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet210[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ordinal_type_156, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal ordinal_type: match production*/
    case ARTL_ART_ordinal_type_152: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_ordinal_type_154, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_new_ordinal_type; return; }
    case ARTL_ART_ordinal_type_154: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal ordinal_type: match production*/
    case ARTL_ART_ordinal_type_156: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_ordinal_type_158, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ordinal_type_ID; return; }
    case ARTL_ART_ordinal_type_158: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_ordinal_type_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal ordinal_type_ID production descriptor loads*/
    case ARTL_ART_ordinal_type_ID: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ordinal_type_ID_996, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal ordinal_type_ID: match production*/
    case ARTL_ART_ordinal_type_ID_996: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_ordinal_type_ID_998, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_ordinal_type_ID_998: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet250[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_packed_conformant_array_schema() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal packed_conformant_array_schema production descriptor loads*/
    case ARTL_ART_packed_conformant_array_schema: 
      if (ARTSet244[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_packed_conformant_array_schema_408, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal packed_conformant_array_schema: match production*/
    case ARTL_ART_packed_conformant_array_schema_408: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_packed, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_packed_conformant_array_schema_410, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet30[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_array, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_packed_conformant_array_schema_412, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_packed_conformant_array_schema_414, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet251[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_packed_conformant_array_schema_416, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_index_type_specification; return; }
    case ARTL_ART_packed_conformant_array_schema_416: 
      /* Nonterminal template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_packed_conformant_array_schema_418, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_of, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_packed_conformant_array_schema_420, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_packed_conformant_array_schema_422, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_packed_conformant_array_schema_422: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_pointer_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal pointer_type production descriptor loads*/
    case ARTL_ART_pointer_type: 
      if (ARTSet248[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_pointer_type_1144, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet253[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_pointer_type_1148, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal pointer_type: match production*/
    case ARTL_ART_pointer_type_1144: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_pointer_type_1146, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_new_pointer_type; return; }
    case ARTL_ART_pointer_type_1146: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal pointer_type: match production*/
    case ARTL_ART_pointer_type_1148: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_pointer_type_1150, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_pointer_type_ID; return; }
    case ARTL_ART_pointer_type_1150: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_pointer_type_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal pointer_type_ID production descriptor loads*/
    case ARTL_ART_pointer_type_ID: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_pointer_type_ID_1152, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal pointer_type_ID: match production*/
    case ARTL_ART_pointer_type_ID_1152: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_pointer_type_ID_1154, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_pointer_type_ID_1154: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedural_parameter_specification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedural_parameter_specification production descriptor loads*/
    case ARTL_ART_procedural_parameter_specification: 
      if (ARTSet254[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedural_parameter_specification_872, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedural_parameter_specification: match production*/
    case ARTL_ART_procedural_parameter_specification_872: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedural_parameter_specification_874, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_heading; return; }
    case ARTL_ART_procedural_parameter_specification_874: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_ID production descriptor loads*/
    case ARTL_ART_procedure_ID: 
      if (ARTSet255[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_ID_36, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_ID: match production*/
    case ARTL_ART_procedure_ID_36: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_procedure_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_ID_38, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet256[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_and_function_declaration_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_and_function_declaration_part production descriptor loads*/
    case ARTL_ART_procedure_and_function_declaration_part: 
      if (ARTSet258[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_and_function_declaration_part_190, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_and_function_declaration_part: match production*/
    case ARTL_ART_procedure_and_function_declaration_part_190: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_and_function_declaration_part_192, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_and_function_declaration_part_25; return; }
    case ARTL_ART_procedure_and_function_declaration_part_192: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet59[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_and_function_declaration_part_25() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_and_function_declaration_part_25 production descriptor loads*/
    case ARTL_ART_procedure_and_function_declaration_part_25: 
      if (ARTSet259[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_and_function_declaration_part_25_1164, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet260[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_and_function_declaration_part_25_1168, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_and_function_declaration_part_25: match production*/
    case ARTL_ART_procedure_and_function_declaration_part_25_1164: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_and_function_declaration_part_25_1166, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet259[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_and_function_declaration_part_25: match production*/
    case ARTL_ART_procedure_and_function_declaration_part_25_1168: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_and_function_declaration_part_25_1170, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_and_function_declaration_part_25; return; }
    case ARTL_ART_procedure_and_function_declaration_part_25_1170: 
      /* Nonterminal template end */
      if (!ARTSet261[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_and_function_declaration_part_25_1172, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_and_function_declaration_part_26; return; }
    case ARTL_ART_procedure_and_function_declaration_part_25_1172: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_and_function_declaration_part_25_1174, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet259[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_and_function_declaration_part_26() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_and_function_declaration_part_26 production descriptor loads*/
    case ARTL_ART_procedure_and_function_declaration_part_26: 
      if (ARTSet263[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_and_function_declaration_part_26_1176, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet264[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_and_function_declaration_part_26_1180, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_and_function_declaration_part_26: match production*/
    case ARTL_ART_procedure_and_function_declaration_part_26_1176: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_and_function_declaration_part_26_1178, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_declaration; return; }
    case ARTL_ART_procedure_and_function_declaration_part_26_1178: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_and_function_declaration_part_26: match production*/
    case ARTL_ART_procedure_and_function_declaration_part_26_1180: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_and_function_declaration_part_26_1182, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_declaration; return; }
    case ARTL_ART_procedure_and_function_declaration_part_26_1182: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_and_function_heading_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_and_function_heading_part production descriptor loads*/
    case ARTL_ART_procedure_and_function_heading_part: 
      if (ARTSet265[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_and_function_heading_part_1208, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_and_function_heading_part: match production*/
    case ARTL_ART_procedure_and_function_heading_part_1208: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_and_function_heading_part_1210, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_and_function_heading_part_27; return; }
    case ARTL_ART_procedure_and_function_heading_part_1210: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_and_function_heading_part_1212, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_and_function_heading_part_27() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_and_function_heading_part_27 production descriptor loads*/
    case ARTL_ART_procedure_and_function_heading_part_27: 
      if (ARTSet254[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_and_function_heading_part_27_1214, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet184[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_and_function_heading_part_27_1218, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_and_function_heading_part_27: match production*/
    case ARTL_ART_procedure_and_function_heading_part_27_1214: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_and_function_heading_part_27_1216, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_heading; return; }
    case ARTL_ART_procedure_and_function_heading_part_27_1216: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_and_function_heading_part_27: match production*/
    case ARTL_ART_procedure_and_function_heading_part_27_1218: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_and_function_heading_part_27_1220, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_function_heading; return; }
    case ARTL_ART_procedure_and_function_heading_part_27_1220: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_block() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_block production descriptor loads*/
    case ARTL_ART_procedure_block: 
      if (ARTSet182[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_block_1222, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_block: match production*/
    case ARTL_ART_procedure_block_1222: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_block_1224, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_block; return; }
    case ARTL_ART_procedure_block_1224: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_declaration() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_declaration production descriptor loads*/
    case ARTL_ART_procedure_declaration: 
      if (ARTSet254[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_declaration_1184, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet268[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_declaration_1192, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet254[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_declaration_1200, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_declaration: match production*/
    case ARTL_ART_procedure_declaration_1184: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_declaration_1186, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_heading; return; }
    case ARTL_ART_procedure_declaration_1186: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_declaration_1188, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet185[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_declaration_1190, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_directive; return; }
    case ARTL_ART_procedure_declaration_1190: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_declaration: match production*/
    case ARTL_ART_procedure_declaration_1192: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_declaration_1194, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_identification; return; }
    case ARTL_ART_procedure_declaration_1194: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_declaration_1196, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet269[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_declaration_1198, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_block; return; }
    case ARTL_ART_procedure_declaration_1198: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_declaration: match production*/
    case ARTL_ART_procedure_declaration_1200: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_declaration_1202, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_heading; return; }
    case ARTL_ART_procedure_declaration_1202: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_declaration_1204, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet269[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_declaration_1206, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_block; return; }
    case ARTL_ART_procedure_declaration_1206: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_heading() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_heading production descriptor loads*/
    case ARTL_ART_procedure_heading: 
      if (ARTSet270[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_heading_1156, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_heading: match production*/
    case ARTL_ART_procedure_heading_1156: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_procedure, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_heading_1158, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_heading_1160, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_procedure_heading_1160: 
      /* Nonterminal template end */
      if (!ARTSet271[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_heading_1162, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_heading_28; return; }
    case ARTL_ART_procedure_heading_1162: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_heading_28() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_heading_28 production descriptor loads*/
    case ARTL_ART_procedure_heading_28: 
      if (ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_heading_28_1232, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet197[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_heading_28_1236, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_heading_28: match production*/
    case ARTL_ART_procedure_heading_28_1232: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_heading_28_1234, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_heading_28: match production*/
    case ARTL_ART_procedure_heading_28_1236: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_heading_28_1238, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_formal_parameter_list; return; }
    case ARTL_ART_procedure_heading_28_1238: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_identification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_identification production descriptor loads*/
    case ARTL_ART_procedure_identification: 
      if (ARTSet270[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_identification_1226, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_identification: match production*/
    case ARTL_ART_procedure_identification_1226: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_procedure, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_identification_1228, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_identification_1230, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_ID; return; }
    case ARTL_ART_procedure_identification_1230: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_statement production descriptor loads*/
    case ARTL_ART_procedure_statement: 
      if (ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_statement_1240, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet276[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_statement_1246, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet278[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_statement_1252, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet281[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_statement_1258, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet283[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_statement_1264, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_statement: match production*/
    case ARTL_ART_procedure_statement_1240: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_statement_1242, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_ID; return; }
    case ARTL_ART_procedure_statement_1242: 
      /* Nonterminal template end */
      if (!ARTSet274[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_statement_1244, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_statement_29; return; }
    case ARTL_ART_procedure_statement_1244: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_statement: match production*/
    case ARTL_ART_procedure_statement_1246: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_read, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_statement_1248, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet277[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_statement_1250, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_read_parameter_list; return; }
    case ARTL_ART_procedure_statement_1250: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_statement: match production*/
    case ARTL_ART_procedure_statement_1252: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_readln, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_statement_1254, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet280[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_statement_1256, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_readln_parameter_list; return; }
    case ARTL_ART_procedure_statement_1256: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_statement: match production*/
    case ARTL_ART_procedure_statement_1258: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_write, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_statement_1260, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet282[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_statement_1262, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter_list; return; }
    case ARTL_ART_procedure_statement_1262: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_statement: match production*/
    case ARTL_ART_procedure_statement_1264: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_writeln, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_statement_1266, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet285[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_statement_1268, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_writeln_parameter_list; return; }
    case ARTL_ART_procedure_statement_1268: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_procedure_statement_29() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal procedure_statement_29 production descriptor loads*/
    case ARTL_ART_procedure_statement_29: 
      if (ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_statement_29_1270, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet191[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_procedure_statement_29_1274, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal procedure_statement_29: match production*/
    case ARTL_ART_procedure_statement_29_1270: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_procedure_statement_29_1272, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal procedure_statement_29: match production*/
    case ARTL_ART_procedure_statement_29_1274: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_procedure_statement_29_1276, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_actual_parameter_list; return; }
    case ARTL_ART_procedure_statement_29_1276: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_program() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal program production descriptor loads*/
    case ARTL_ART_program: 
      if (ARTSet286[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_program_2, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal program: match production*/
    case ARTL_ART_program_2: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_program_4, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_program_heading; return; }
    case ARTL_ART_program_4: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_program_6, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet288[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_program_8, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_program_block; return; }
    case ARTL_ART_program_8: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet287[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_program_block() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal program_block production descriptor loads*/
    case ARTL_ART_program_block: 
      if (ARTSet182[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_program_block_18, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal program_block: match production*/
    case ARTL_ART_program_block_18: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_program_block_20, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_block; return; }
    case ARTL_ART_program_block_20: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet287[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_program_heading() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal program_heading production descriptor loads*/
    case ARTL_ART_program_heading: 
      if (ARTSet289[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_program_heading_10, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal program_heading: match production*/
    case ARTL_ART_program_heading_10: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_program, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_program_heading_12, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_program_heading_14, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_program_heading_14: 
      /* Nonterminal template end */
      if (!ARTSet290[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_program_heading_16, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_program_heading_30; return; }
    case ARTL_ART_program_heading_16: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_program_heading_30() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal program_heading_30 production descriptor loads*/
    case ARTL_ART_program_heading_30: 
      if (ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_program_heading_30_1306, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_program_heading_30_1310, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal program_heading_30: match production*/
    case ARTL_ART_program_heading_30_1306: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_program_heading_30_1308, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal program_heading_30: match production*/
    case ARTL_ART_program_heading_30_1310: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_program_heading_30_1312, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet293[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_program_heading_30_1314, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_program_parameters; return; }
    case ARTL_ART_program_heading_30_1314: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_program_heading_30_1316, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_program_parameters() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal program_parameters production descriptor loads*/
    case ARTL_ART_program_parameters: 
      if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_program_parameters_1318, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal program_parameters: match production*/
    case ARTL_ART_program_parameters_1318: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_program_parameters_1320, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list; return; }
    case ARTL_ART_program_parameters_1320: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_read_parameter_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal read_parameter_list production descriptor loads*/
    case ARTL_ART_read_parameter_list: 
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_read_parameter_list_1278, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal read_parameter_list: match production*/
    case ARTL_ART_read_parameter_list_1278: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_read_parameter_list_1280, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_read_parameter_list_1282, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_read_parameter_list_1282: 
      /* Nonterminal template end */
      if (!ARTSet294[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_read_parameter_list_1284, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_read_parameter_list_31; return; }
    case ARTL_ART_read_parameter_list_1284: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_read_parameter_list_1286, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_read_parameter_list_31() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal read_parameter_list_31 production descriptor loads*/
    case ARTL_ART_read_parameter_list_31: 
      if (ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_read_parameter_list_31_1322, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet296[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_read_parameter_list_31_1326, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal read_parameter_list_31: match production*/
    case ARTL_ART_read_parameter_list_31_1322: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_read_parameter_list_31_1324, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal read_parameter_list_31: match production*/
    case ARTL_ART_read_parameter_list_31_1326: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_read_parameter_list_31_1328, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_read_parameter_list_31; return; }
    case ARTL_ART_read_parameter_list_31_1328: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_read_parameter_list_31_1330, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_read_parameter_list_31_1332, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_read_parameter_list_31_1332: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_readln_parameter_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal readln_parameter_list production descriptor loads*/
    case ARTL_ART_readln_parameter_list: 
      if (ARTSet298[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_readln_parameter_list_1288, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal readln_parameter_list: match production*/
    case ARTL_ART_readln_parameter_list_1288: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_readln_parameter_list_1290, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_readln_parameter_list_32; return; }
    case ARTL_ART_readln_parameter_list_1290: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_readln_parameter_list_32() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal readln_parameter_list_32 production descriptor loads*/
    case ARTL_ART_readln_parameter_list_32: 
      if (ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_readln_parameter_list_32_1334, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_readln_parameter_list_32_1338, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal readln_parameter_list_32: match production*/
    case ARTL_ART_readln_parameter_list_32_1334: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_readln_parameter_list_32_1336, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal readln_parameter_list_32: match production*/
    case ARTL_ART_readln_parameter_list_32_1338: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_readln_parameter_list_32_1340, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_readln_parameter_list_32_1342, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_readln_parameter_list_32_1342: 
      /* Nonterminal template end */
      if (!ARTSet299[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_readln_parameter_list_32_1344, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_readln_parameter_list_33; return; }
    case ARTL_ART_readln_parameter_list_32_1344: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_readln_parameter_list_32_1346, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_readln_parameter_list_33() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal readln_parameter_list_33 production descriptor loads*/
    case ARTL_ART_readln_parameter_list_33: 
      if (ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_readln_parameter_list_33_1348, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet301[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_readln_parameter_list_33_1352, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal readln_parameter_list_33: match production*/
    case ARTL_ART_readln_parameter_list_33_1348: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_readln_parameter_list_33_1350, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal readln_parameter_list_33: match production*/
    case ARTL_ART_readln_parameter_list_33_1352: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_readln_parameter_list_33_1354, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_readln_parameter_list_33; return; }
    case ARTL_ART_readln_parameter_list_33_1354: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_readln_parameter_list_33_1356, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_readln_parameter_list_33_1358, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_readln_parameter_list_33_1358: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_real_type_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal real_type_ID production descriptor loads*/
    case ARTL_ART_real_type_ID: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_real_type_ID_1360, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal real_type_ID: match production*/
    case ARTL_ART_real_type_ID_1360: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_real_type_ID_1362, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_real_type_ID_1362: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_record_section() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal record_section production descriptor loads*/
    case ARTL_ART_record_section: 
      if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_record_section_778, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal record_section: match production*/
    case ARTL_ART_record_section_778: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_record_section_780, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list; return; }
    case ARTL_ART_record_section_780: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_record_section_782, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_record_section_784, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_denoter; return; }
    case ARTL_ART_record_section_784: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_record_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal record_type production descriptor loads*/
    case ARTL_ART_record_type: 
      if (ARTSet302[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_record_type_1364, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal record_type: match production*/
    case ARTL_ART_record_type_1364: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_record, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_record_type_1366, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet303[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_record_type_1368, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_field_list; return; }
    case ARTL_ART_record_type_1368: 
      /* Nonterminal template end */
      if (!ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_end, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_record_type_1370, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_record_variable_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal record_variable_list production descriptor loads*/
    case ARTL_ART_record_variable_list: 
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_record_variable_list_1372, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal record_variable_list: match production*/
    case ARTL_ART_record_variable_list_1372: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_record_variable_list_1374, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_record_variable_list_1374: 
      /* Nonterminal template end */
      if (!ARTSet305[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_record_variable_list_1376, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_record_variable_list_34; return; }
    case ARTL_ART_record_variable_list_1376: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet158[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_record_variable_list_34() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal record_variable_list_34 production descriptor loads*/
    case ARTL_ART_record_variable_list_34: 
      if (ARTSet307[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_record_variable_list_34_1378, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet308[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_record_variable_list_34_1382, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal record_variable_list_34: match production*/
    case ARTL_ART_record_variable_list_34_1378: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_record_variable_list_34_1380, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet307[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal record_variable_list_34: match production*/
    case ARTL_ART_record_variable_list_34_1382: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_record_variable_list_34_1384, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_record_variable_list_34; return; }
    case ARTL_ART_record_variable_list_34_1384: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_record_variable_list_34_1386, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_record_variable_list_34_1388, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_record_variable_list_34_1388: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet307[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_relational_operator() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal relational_operator production descriptor loads*/
    case ARTL_ART_relational_operator: 
      if (ARTSet110[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_relational_operator_586, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet310[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_relational_operator_590, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet311[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_relational_operator_594, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet312[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_relational_operator_598, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet313[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_relational_operator_602, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet314[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_relational_operator_606, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet315[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_relational_operator_610, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal relational_operator: match production*/
    case ARTL_ART_relational_operator_586: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_relational_operator_588, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal relational_operator: match production*/
    case ARTL_ART_relational_operator_590: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_relational_operator_592, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal relational_operator: match production*/
    case ARTL_ART_relational_operator_594: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_relational_operator_596, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal relational_operator: match production*/
    case ARTL_ART_relational_operator_598: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_relational_operator_600, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal relational_operator: match production*/
    case ARTL_ART_relational_operator_602: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_relational_operator_604, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal relational_operator: match production*/
    case ARTL_ART_relational_operator_606: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_relational_operator_608, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal relational_operator: match production*/
    case ARTL_ART_relational_operator_610: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_in, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_relational_operator_612, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_repeat_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal repeat_statement production descriptor loads*/
    case ARTL_ART_repeat_statement: 
      if (ARTSet316[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_repeat_statement_1390, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal repeat_statement: match production*/
    case ARTL_ART_repeat_statement_1390: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_repeat, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_repeat_statement_1392, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet317[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_repeat_statement_1394, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement_sequence; return; }
    case ARTL_ART_repeat_statement_1394: 
      /* Nonterminal template end */
      if (!ARTSet318[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_until, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_repeat_statement_1396, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet201[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_repeat_statement_1398, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_Boolean_expression; return; }
    case ARTL_ART_repeat_statement_1398: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_repetitive_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal repetitive_statement production descriptor loads*/
    case ARTL_ART_repetitive_statement: 
      if (ARTSet320[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_repetitive_statement_1400, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet321[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_repetitive_statement_1404, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet322[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_repetitive_statement_1408, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal repetitive_statement: match production*/
    case ARTL_ART_repetitive_statement_1400: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_repetitive_statement_1402, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_repeat_statement; return; }
    case ARTL_ART_repetitive_statement_1402: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal repetitive_statement: match production*/
    case ARTL_ART_repetitive_statement_1404: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_repetitive_statement_1406, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_while_statement; return; }
    case ARTL_ART_repetitive_statement_1406: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal repetitive_statement: match production*/
    case ARTL_ART_repetitive_statement_1408: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_repetitive_statement_1410, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_for_statement; return; }
    case ARTL_ART_repetitive_statement_1410: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_result_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal result_type production descriptor loads*/
    case ARTL_ART_result_type: 
      if (ARTSet323[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_result_type_946, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal result_type: match production*/
    case ARTL_ART_result_type_946: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_result_type_948, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_type_ID; return; }
    case ARTL_ART_result_type_948: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_scale_factor() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal scale_factor production descriptor loads*/
    case ARTL_ART_scale_factor: 
      if (ARTSet324[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_scale_factor_1426, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal scale_factor: match production*/
    case ARTL_ART_scale_factor_1426: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_scale_factor_1428, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_signed_integer; return; }
    case ARTL_ART_scale_factor_1428: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_set_constructor() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal set_constructor production descriptor loads*/
    case ARTL_ART_set_constructor: 
      if (ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_set_constructor_666, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal set_constructor: match production*/
    case ARTL_ART_set_constructor_666: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_set_constructor_668, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet325[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_set_constructor_670, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_set_constructor_35; return; }
    case ARTL_ART_set_constructor_670: 
      /* Nonterminal template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_set_constructor_672, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_set_constructor_35() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal set_constructor_35 production descriptor loads*/
    case ARTL_ART_set_constructor_35: 
      if (ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_set_constructor_35_1436, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet328[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_set_constructor_35_1440, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal set_constructor_35: match production*/
    case ARTL_ART_set_constructor_35_1436: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_set_constructor_35_1438, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal set_constructor_35: match production*/
    case ARTL_ART_set_constructor_35_1440: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_set_constructor_35_1442, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_member_designator; return; }
    case ARTL_ART_set_constructor_35_1442: 
      /* Nonterminal template end */
      if (!ARTSet224[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_set_constructor_35_1444, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_set_constructor_36; return; }
    case ARTL_ART_set_constructor_35_1444: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_set_constructor_36() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal set_constructor_36 production descriptor loads*/
    case ARTL_ART_set_constructor_36: 
      if (ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_set_constructor_36_1446, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet330[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_set_constructor_36_1450, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal set_constructor_36: match production*/
    case ARTL_ART_set_constructor_36_1446: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_set_constructor_36_1448, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal set_constructor_36: match production*/
    case ARTL_ART_set_constructor_36_1450: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_set_constructor_36_1452, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_set_constructor_36; return; }
    case ARTL_ART_set_constructor_36_1452: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_set_constructor_36_1454, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet328[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_set_constructor_36_1456, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_member_designator; return; }
    case ARTL_ART_set_constructor_36_1456: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_set_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal set_type production descriptor loads*/
    case ARTL_ART_set_type: 
      if (ARTSet331[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_set_type_1458, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal set_type: match production*/
    case ARTL_ART_set_type_1458: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_set, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_set_type_1460, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_of, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_set_type_1462, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet332[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_set_type_1464, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_base_type; return; }
    case ARTL_ART_set_type_1464: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_sign() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal sign production descriptor loads*/
    case ARTL_ART_sign: 
      if (ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_sign_456, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_sign_460, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal sign: match production*/
    case ARTL_ART_sign_456: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PLUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_sign_458, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet334[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal sign: match production*/
    case ARTL_ART_sign_460: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_sign_462, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet334[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_signed_integer() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal signed_integer production descriptor loads*/
    case ARTL_ART_signed_integer: 
      if (ARTSet335[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_signed_integer_1430, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal signed_integer: match production*/
    case ARTL_ART_signed_integer_1430: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_signed_integer_1432, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_signed_integer_37; return; }
    case ARTL_ART_signed_integer_1432: 
      /* Nonterminal template end */
      if (!ARTSet337[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_signed_integer_1434, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unsigned_integer; return; }
    case ARTL_ART_signed_integer_1434: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_signed_integer_37() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal signed_integer_37 production descriptor loads*/
    case ARTL_ART_signed_integer_37: 
      if (ARTSet337[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_signed_integer_37_1466, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_signed_integer_37_1470, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal signed_integer_37: match production*/
    case ARTL_ART_signed_integer_37_1466: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_signed_integer_37_1468, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet337[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal signed_integer_37: match production*/
    case ARTL_ART_signed_integer_37_1470: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_signed_integer_37_1472, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_sign; return; }
    case ARTL_ART_signed_integer_37_1472: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet337[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_signed_number() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal signed_number production descriptor loads*/
    case ARTL_ART_signed_number: 
      if (ARTSet324[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_signed_number_1478, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet339[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_signed_number_1482, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal signed_number: match production*/
    case ARTL_ART_signed_number_1478: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_signed_number_1480, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_signed_integer; return; }
    case ARTL_ART_signed_number_1480: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal signed_number: match production*/
    case ARTL_ART_signed_number_1482: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_signed_number_1484, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_signed_real; return; }
    case ARTL_ART_signed_number_1484: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_signed_real() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal signed_real production descriptor loads*/
    case ARTL_ART_signed_real: 
      if (ARTSet340[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_signed_real_1486, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal signed_real: match production*/
    case ARTL_ART_signed_real_1486: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_signed_real_1488, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_signed_real_38; return; }
    case ARTL_ART_signed_real_1488: 
      /* Nonterminal template end */
      if (!ARTSet342[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_signed_real_1490, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unsigned_real; return; }
    case ARTL_ART_signed_real_1490: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_signed_real_38() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal signed_real_38 production descriptor loads*/
    case ARTL_ART_signed_real_38: 
      if (ARTSet342[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_signed_real_38_1492, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_signed_real_38_1496, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal signed_real_38: match production*/
    case ARTL_ART_signed_real_38_1492: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_signed_real_38_1494, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet342[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal signed_real_38: match production*/
    case ARTL_ART_signed_real_38_1496: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_signed_real_38_1498, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_sign; return; }
    case ARTL_ART_signed_real_38_1498: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet342[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_simple_expression() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal simple_expression production descriptor loads*/
    case ARTL_ART_simple_expression: 
      if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_expression_562, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_expression_568, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal simple_expression: match production*/
    case ARTL_ART_simple_expression_562: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_564, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_term; return; }
    case ARTL_ART_simple_expression_564: 
      /* Nonterminal template end */
      if (!ARTSet344[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_566, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_expression_39; return; }
    case ARTL_ART_simple_expression_566: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet132[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal simple_expression: match production*/
    case ARTL_ART_simple_expression_568: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_570, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_sign; return; }
    case ARTL_ART_simple_expression_570: 
      /* Nonterminal template end */
      if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_572, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_term; return; }
    case ARTL_ART_simple_expression_572: 
      /* Nonterminal template end */
      if (!ARTSet346[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_574, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_expression_40; return; }
    case ARTL_ART_simple_expression_574: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet132[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_simple_expression_39() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal simple_expression_39 production descriptor loads*/
    case ARTL_ART_simple_expression_39: 
      if (ARTSet348[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_expression_39_1510, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet349[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_expression_39_1514, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal simple_expression_39: match production*/
    case ARTL_ART_simple_expression_39_1510: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_simple_expression_39_1512, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet348[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal simple_expression_39: match production*/
    case ARTL_ART_simple_expression_39_1514: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_39_1516, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_expression_39; return; }
    case ARTL_ART_simple_expression_39_1516: 
      /* Nonterminal template end */
      if (!ARTSet350[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_39_1518, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_adding_operator; return; }
    case ARTL_ART_simple_expression_39_1518: 
      /* Nonterminal template end */
      if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_39_1520, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_term; return; }
    case ARTL_ART_simple_expression_39_1520: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet348[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_simple_expression_40() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal simple_expression_40 production descriptor loads*/
    case ARTL_ART_simple_expression_40: 
      if (ARTSet348[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_expression_40_1522, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet351[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_expression_40_1526, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal simple_expression_40: match production*/
    case ARTL_ART_simple_expression_40_1522: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_simple_expression_40_1524, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet348[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal simple_expression_40: match production*/
    case ARTL_ART_simple_expression_40_1526: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_40_1528, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_expression_40; return; }
    case ARTL_ART_simple_expression_40_1528: 
      /* Nonterminal template end */
      if (!ARTSet350[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_40_1530, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_adding_operator; return; }
    case ARTL_ART_simple_expression_40_1530: 
      /* Nonterminal template end */
      if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_expression_40_1532, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_term; return; }
    case ARTL_ART_simple_expression_40_1532: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet348[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_simple_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal simple_statement production descriptor loads*/
    case ARTL_ART_simple_statement: 
      if (ARTSet354[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_statement_1534, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet355[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_statement_1538, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet356[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_statement_1542, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal simple_statement: match production*/
    case ARTL_ART_simple_statement_1534: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_statement_1536, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_statement_41; return; }
    case ARTL_ART_simple_statement_1536: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal simple_statement: match production*/
    case ARTL_ART_simple_statement_1538: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_statement_1540, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_procedure_statement; return; }
    case ARTL_ART_simple_statement_1540: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal simple_statement: match production*/
    case ARTL_ART_simple_statement_1542: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_statement_1544, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_goto_statement; return; }
    case ARTL_ART_simple_statement_1544: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_simple_statement_41() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal simple_statement_41 production descriptor loads*/
    case ARTL_ART_simple_statement_41: 
      if (ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_statement_41_1546, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet358[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_statement_41_1550, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal simple_statement_41: match production*/
    case ARTL_ART_simple_statement_41_1546: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_simple_statement_41_1548, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal simple_statement_41: match production*/
    case ARTL_ART_simple_statement_41_1550: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_statement_41_1552, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_assignment_statement; return; }
    case ARTL_ART_simple_statement_41_1552: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_simple_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal simple_type production descriptor loads*/
    case ARTL_ART_simple_type: 
      if (ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_type_1554, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet360[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_type_1558, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal simple_type: match production*/
    case ARTL_ART_simple_type_1554: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_type_1556, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ordinal_type; return; }
    case ARTL_ART_simple_type_1556: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal simple_type: match production*/
    case ARTL_ART_simple_type_1558: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_type_1560, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_real_type_ID; return; }
    case ARTL_ART_simple_type_1560: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_simple_type_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal simple_type_ID production descriptor loads*/
    case ARTL_ART_simple_type_ID: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_simple_type_ID_1422, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal simple_type_ID: match production*/
    case ARTL_ART_simple_type_ID_1422: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_simple_type_ID_1424, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_simple_type_ID_1424: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal statement production descriptor loads*/
    case ARTL_ART_statement: 
      if (ARTSet362[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_254, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal statement: match production*/
    case ARTL_ART_statement_254: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_256, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement_42; return; }
    case ARTL_ART_statement_256: 
      /* Nonterminal template end */
      if (!ARTSet364[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_258, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement_43; return; }
    case ARTL_ART_statement_258: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_statement_42() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal statement_42 production descriptor loads*/
    case ARTL_ART_statement_42: 
      if (ARTSet364[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_42_1562, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_42_1566, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal statement_42: match production*/
    case ARTL_ART_statement_42_1562: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_statement_42_1564, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet364[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal statement_42: match production*/
    case ARTL_ART_statement_42_1566: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_42_1568, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_label; return; }
    case ARTL_ART_statement_42_1568: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_statement_42_1570, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet364[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_statement_43() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal statement_43 production descriptor loads*/
    case ARTL_ART_statement_43: 
      if (ARTSet369[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_43_1572, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet370[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_43_1576, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal statement_43: match production*/
    case ARTL_ART_statement_43_1572: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_43_1574, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_simple_statement; return; }
    case ARTL_ART_statement_43_1574: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal statement_43: match production*/
    case ARTL_ART_statement_43_1576: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_43_1578, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_structured_statement; return; }
    case ARTL_ART_statement_43_1578: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_statement_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal statement_part production descriptor loads*/
    case ARTL_ART_statement_part: 
      if (ARTSet371[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_part_194, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal statement_part: match production*/
    case ARTL_ART_statement_part_194: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_part_196, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_compound_statement; return; }
    case ARTL_ART_statement_part_196: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet49[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_statement_sequence() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal statement_sequence production descriptor loads*/
    case ARTL_ART_statement_sequence: 
      if (ARTSet374[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_sequence_348, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal statement_sequence: match production*/
    case ARTL_ART_statement_sequence_348: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_sequence_350, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement; return; }
    case ARTL_ART_statement_sequence_350: 
      /* Nonterminal template end */
      if (!ARTSet375[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_sequence_352, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement_sequence_44; return; }
    case ARTL_ART_statement_sequence_352: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet373[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_statement_sequence_44() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal statement_sequence_44 production descriptor loads*/
    case ARTL_ART_statement_sequence_44: 
      if (ARTSet377[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_sequence_44_1596, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet378[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_statement_sequence_44_1600, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal statement_sequence_44: match production*/
    case ARTL_ART_statement_sequence_44_1596: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_statement_sequence_44_1598, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet377[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal statement_sequence_44: match production*/
    case ARTL_ART_statement_sequence_44_1600: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_sequence_44_1602, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement_sequence_44; return; }
    case ARTL_ART_statement_sequence_44_1602: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_statement_sequence_44_1604, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet379[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_statement_sequence_44_1606, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement; return; }
    case ARTL_ART_statement_sequence_44_1606: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet377[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_string_character() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal string_character production descriptor loads*/
    case ARTL_ART_string_character: 
      if (ARTSet380[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_string_character_1608, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal string_character: match production*/
    case ARTL_ART_string_character_1608: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_one_of_a_set_of_implementation_defined_characters, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_string_character_1610, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_string_element() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal string_element production descriptor loads*/
    case ARTL_ART_string_element: 
      if (ARTSet382[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_string_element_1612, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet383[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_string_element_1616, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal string_element: match production*/
    case ARTL_ART_string_element_1612: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_string_element_1614, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_apostrophe_image; return; }
    case ARTL_ART_string_element_1614: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal string_element: match production*/
    case ARTL_ART_string_element_1616: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_string_element_1618, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_string_character; return; }
    case ARTL_ART_string_element_1618: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_structured_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal structured_statement production descriptor loads*/
    case ARTL_ART_structured_statement: 
      if (ARTSet371[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_structured_statement_1580, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet385[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_structured_statement_1584, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet386[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_structured_statement_1588, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet387[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_structured_statement_1592, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal structured_statement: match production*/
    case ARTL_ART_structured_statement_1580: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_structured_statement_1582, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_compound_statement; return; }
    case ARTL_ART_structured_statement_1582: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal structured_statement: match production*/
    case ARTL_ART_structured_statement_1584: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_structured_statement_1586, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_conditional_statement; return; }
    case ARTL_ART_structured_statement_1586: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal structured_statement: match production*/
    case ARTL_ART_structured_statement_1588: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_structured_statement_1590, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_repetitive_statement; return; }
    case ARTL_ART_structured_statement_1590: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal structured_statement: match production*/
    case ARTL_ART_structured_statement_1592: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_structured_statement_1594, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_with_statement; return; }
    case ARTL_ART_structured_statement_1594: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_structured_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal structured_type production descriptor loads*/
    case ARTL_ART_structured_type: 
      if (ARTSet247[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_structured_type_1630, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet389[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_structured_type_1634, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal structured_type: match production*/
    case ARTL_ART_structured_type_1630: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_structured_type_1632, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_new_structured_type; return; }
    case ARTL_ART_structured_type_1632: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal structured_type: match production*/
    case ARTL_ART_structured_type_1634: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_structured_type_1636, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_structured_type_ID; return; }
    case ARTL_ART_structured_type_1636: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_structured_type_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal structured_type_ID production descriptor loads*/
    case ARTL_ART_structured_type_ID: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_structured_type_ID_1638, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal structured_type_ID: match production*/
    case ARTL_ART_structured_type_ID_1638: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_structured_type_ID_1640, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_structured_type_ID_1640: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_subrange_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal subrange_type production descriptor loads*/
    case ARTL_ART_subrange_type: 
      if (ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_subrange_type_1088, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal subrange_type: match production*/
    case ARTL_ART_subrange_type_1088: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_subrange_type_1090, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant; return; }
    case ARTL_ART_subrange_type_1090: 
      /* Nonterminal template end */
      if (!ARTSet209[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD_PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_subrange_type_1092, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_subrange_type_1094, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant; return; }
    case ARTL_ART_subrange_type_1094: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_tag_field() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal tag_field production descriptor loads*/
    case ARTL_ART_tag_field: 
      if (ARTSet390[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_tag_field_1642, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal tag_field: match production*/
    case ARTL_ART_tag_field_1642: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tag_field, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_tag_field_1644, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_tag_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal tag_type production descriptor loads*/
    case ARTL_ART_tag_type: 
      if (ARTSet210[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_tag_type_1646, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal tag_type: match production*/
    case ARTL_ART_tag_type_1646: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tag_type_1648, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ordinal_type_ID; return; }
    case ARTL_ART_tag_type_1648: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_term() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal term production descriptor loads*/
    case ARTL_ART_term: 
      if (ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_term_1504, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal term: match production*/
    case ARTL_ART_term_1504: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_term_1506, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_factor; return; }
    case ARTL_ART_term_1506: 
      /* Nonterminal template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_term_1508, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_term_45; return; }
    case ARTL_ART_term_1508: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet391[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_term_45() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal term_45 production descriptor loads*/
    case ARTL_ART_term_45: 
      if (ARTSet393[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_term_45_1650, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet394[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_term_45_1654, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal term_45: match production*/
    case ARTL_ART_term_45_1650: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_term_45_1652, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet393[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal term_45: match production*/
    case ARTL_ART_term_45_1654: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_term_45_1656, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_term_45; return; }
    case ARTL_ART_term_45_1656: 
      /* Nonterminal template end */
      if (!ARTSet395[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_term_45_1658, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_multiplying_operator; return; }
    case ARTL_ART_term_45_1658: 
      /* Nonterminal template end */
      if (!ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_term_45_1660, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_factor; return; }
    case ARTL_ART_term_45_1660: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet393[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_type_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal type_ID production descriptor loads*/
    case ARTL_ART_type_ID: 
      if (ARTSet396[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_ID_534, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal type_ID: match production*/
    case ARTL_ART_type_ID_534: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_type_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_type_ID_536, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet397[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_type_definition() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal type_definition production descriptor loads*/
    case ARTL_ART_type_definition: 
      if (ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_definition_1662, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal type_definition: match production*/
    case ARTL_ART_type_definition_1662: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_definition_1664, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_type_definition_1664: 
      /* Nonterminal template end */
      if (!ARTSet110[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_type_definition_1666, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_definition_1668, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_denoter; return; }
    case ARTL_ART_type_definition_1668: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_type_definition_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal type_definition_part production descriptor loads*/
    case ARTL_ART_type_definition_part: 
      if (ARTSet399[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_definition_part_182, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal type_definition_part: match production*/
    case ARTL_ART_type_definition_part_182: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_definition_part_184, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_definition_part_46; return; }
    case ARTL_ART_type_definition_part_184: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_type_definition_part_46() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal type_definition_part_46 production descriptor loads*/
    case ARTL_ART_type_definition_part_46: 
      if (ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_definition_part_46_1670, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet401[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_definition_part_46_1674, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal type_definition_part_46: match production*/
    case ARTL_ART_type_definition_part_46_1670: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_type_definition_part_46_1672, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal type_definition_part_46: match production*/
    case ARTL_ART_type_definition_part_46_1674: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_type, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_type_definition_part_46_1676, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet402[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_definition_part_46_1678, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_definition; return; }
    case ARTL_ART_type_definition_part_46_1678: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_type_definition_part_46_1680, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet404[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_definition_part_46_1682, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_definition_part_47; return; }
    case ARTL_ART_type_definition_part_46_1682: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_type_definition_part_47() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal type_definition_part_47 production descriptor loads*/
    case ARTL_ART_type_definition_part_47: 
      if (ARTSet405[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_definition_part_47_1684, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet406[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_definition_part_47_1688, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal type_definition_part_47: match production*/
    case ARTL_ART_type_definition_part_47_1684: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_type_definition_part_47_1686, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet405[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal type_definition_part_47: match production*/
    case ARTL_ART_type_definition_part_47_1688: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_definition_part_47_1690, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_definition_part_47; return; }
    case ARTL_ART_type_definition_part_47_1690: 
      /* Nonterminal template end */
      if (!ARTSet402[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_definition_part_47_1692, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_definition; return; }
    case ARTL_ART_type_definition_part_47_1692: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_type_definition_part_47_1694, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet405[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_type_denoter() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal type_denoter production descriptor loads*/
    case ARTL_ART_type_denoter: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_denoter_300, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet408[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_type_denoter_304, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal type_denoter: match production*/
    case ARTL_ART_type_denoter_300: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_denoter_302, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_type_denoter_302: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal type_denoter: match production*/
    case ARTL_ART_type_denoter_304: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_type_denoter_306, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_new_type; return; }
    case ARTL_ART_type_denoter_306: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_unpacked_conformant_array_schema() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal unpacked_conformant_array_schema production descriptor loads*/
    case ARTL_ART_unpacked_conformant_array_schema: 
      if (ARTSet30[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_conformant_array_schema_424, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal unpacked_conformant_array_schema: match production*/
    case ARTL_ART_unpacked_conformant_array_schema_424: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_array, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_unpacked_conformant_array_schema_426, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_unpacked_conformant_array_schema_428, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet251[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_conformant_array_schema_430, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_index_type_specification; return; }
    case ARTL_ART_unpacked_conformant_array_schema_430: 
      /* Nonterminal template end */
      if (!ARTSet208[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_conformant_array_schema_432, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unpacked_conformant_array_schema_48; return; }
    case ARTL_ART_unpacked_conformant_array_schema_432: 
      /* Nonterminal template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RBRACK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_unpacked_conformant_array_schema_434, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_of, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_unpacked_conformant_array_schema_436, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet410[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_conformant_array_schema_438, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unpacked_conformant_array_schema_49; return; }
    case ARTL_ART_unpacked_conformant_array_schema_438: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_unpacked_conformant_array_schema_48() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal unpacked_conformant_array_schema_48 production descriptor loads*/
    case ARTL_ART_unpacked_conformant_array_schema_48: 
      if (ARTSet411[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_conformant_array_schema_48_1696, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet412[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_conformant_array_schema_48_1700, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal unpacked_conformant_array_schema_48: match production*/
    case ARTL_ART_unpacked_conformant_array_schema_48_1696: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_unpacked_conformant_array_schema_48_1698, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet411[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unpacked_conformant_array_schema_48: match production*/
    case ARTL_ART_unpacked_conformant_array_schema_48_1700: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_conformant_array_schema_48_1702, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unpacked_conformant_array_schema_48; return; }
    case ARTL_ART_unpacked_conformant_array_schema_48_1702: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_unpacked_conformant_array_schema_48_1704, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet251[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_conformant_array_schema_48_1706, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_index_type_specification; return; }
    case ARTL_ART_unpacked_conformant_array_schema_48_1706: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet411[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_unpacked_conformant_array_schema_49() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal unpacked_conformant_array_schema_49 production descriptor loads*/
    case ARTL_ART_unpacked_conformant_array_schema_49: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_conformant_array_schema_49_1708, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet414[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_conformant_array_schema_49_1712, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal unpacked_conformant_array_schema_49: match production*/
    case ARTL_ART_unpacked_conformant_array_schema_49_1708: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_conformant_array_schema_49_1710, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_unpacked_conformant_array_schema_49_1710: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unpacked_conformant_array_schema_49: match production*/
    case ARTL_ART_unpacked_conformant_array_schema_49_1712: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_conformant_array_schema_49_1714, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_conformant_array_schema; return; }
    case ARTL_ART_unpacked_conformant_array_schema_49_1714: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_unpacked_structured_type() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal unpacked_structured_type production descriptor loads*/
    case ARTL_ART_unpacked_structured_type: 
      if (ARTSet416[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_structured_type_1116, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet417[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_structured_type_1120, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet418[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_structured_type_1124, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet419[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unpacked_structured_type_1128, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal unpacked_structured_type: match production*/
    case ARTL_ART_unpacked_structured_type_1116: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_structured_type_1118, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_array_type; return; }
    case ARTL_ART_unpacked_structured_type_1118: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unpacked_structured_type: match production*/
    case ARTL_ART_unpacked_structured_type_1120: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_structured_type_1122, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_record_type; return; }
    case ARTL_ART_unpacked_structured_type_1122: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unpacked_structured_type: match production*/
    case ARTL_ART_unpacked_structured_type_1124: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_structured_type_1126, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_set_type; return; }
    case ARTL_ART_unpacked_structured_type_1126: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unpacked_structured_type: match production*/
    case ARTL_ART_unpacked_structured_type_1128: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unpacked_structured_type_1130, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_file_type; return; }
    case ARTL_ART_unpacked_structured_type_1130: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_unsigned_constant() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal unsigned_constant production descriptor loads*/
    case ARTL_ART_unsigned_constant: 
      if (ARTSet107[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unsigned_constant_644, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet103[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unsigned_constant_648, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet421[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unsigned_constant_652, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet108[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unsigned_constant_656, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal unsigned_constant: match production*/
    case ARTL_ART_unsigned_constant_644: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unsigned_constant_646, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unsigned_number; return; }
    case ARTL_ART_unsigned_constant_646: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unsigned_constant: match production*/
    case ARTL_ART_unsigned_constant_648: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unsigned_constant_650, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_character_string; return; }
    case ARTL_ART_unsigned_constant_650: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unsigned_constant: match production*/
    case ARTL_ART_unsigned_constant_652: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_nil, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_unsigned_constant_654, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unsigned_constant: match production*/
    case ARTL_ART_unsigned_constant_656: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unsigned_constant_658, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_constant_ID; return; }
    case ARTL_ART_unsigned_constant_658: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_unsigned_integer() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal unsigned_integer production descriptor loads*/
    case ARTL_ART_unsigned_integer: 
      if (ARTSet179[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unsigned_integer_1474, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal unsigned_integer: match production*/
    case ARTL_ART_unsigned_integer_1474: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unsigned_integer_1476, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_digit_sequence; return; }
    case ARTL_ART_unsigned_integer_1476: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_unsigned_number() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal unsigned_number production descriptor loads*/
    case ARTL_ART_unsigned_number: 
      if (ARTSet337[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unsigned_number_464, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet342[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unsigned_number_468, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal unsigned_number: match production*/
    case ARTL_ART_unsigned_number_464: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unsigned_number_466, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unsigned_integer; return; }
    case ARTL_ART_unsigned_number_466: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal unsigned_number: match production*/
    case ARTL_ART_unsigned_number_468: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_unsigned_number_470, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_unsigned_real; return; }
    case ARTL_ART_unsigned_number_470: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_unsigned_real() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal unsigned_real production descriptor loads*/
    case ARTL_ART_unsigned_real: 
      if (ARTSet423[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_unsigned_real_1500, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal unsigned_real: match production*/
    case ARTL_ART_unsigned_real_1500: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_REAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_unsigned_real_1502, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_value_conformant_array_specification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal value_conformant_array_specification production descriptor loads*/
    case ARTL_ART_value_conformant_array_specification: 
      if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_value_conformant_array_specification_382, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal value_conformant_array_specification: match production*/
    case ARTL_ART_value_conformant_array_specification_382: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_value_conformant_array_specification_384, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list; return; }
    case ARTL_ART_value_conformant_array_specification_384: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_value_conformant_array_specification_386, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet414[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_value_conformant_array_specification_388, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_conformant_array_schema; return; }
    case ARTL_ART_value_conformant_array_specification_388: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_value_parameter_specification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal value_parameter_specification production descriptor loads*/
    case ARTL_ART_value_parameter_specification: 
      if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_value_parameter_specification_854, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal value_parameter_specification: match production*/
    case ARTL_ART_value_parameter_specification_854: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_value_parameter_specification_856, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list; return; }
    case ARTL_ART_value_parameter_specification_856: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_value_parameter_specification_858, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_value_parameter_specification_860, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_value_parameter_specification_860: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variable_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variable_ID production descriptor loads*/
    case ARTL_ART_variable_ID: 
      if (ARTSet424[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_ID_544, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variable_ID: match production*/
    case ARTL_ART_variable_ID_544: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_variable_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_ID_546, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variable_access() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variable_access production descriptor loads*/
    case ARTL_ART_variable_access: 
      if (ARTSet120[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_access_130, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_access_134, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_access_138, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variable_access: match production*/
    case ARTL_ART_variable_access_130: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_access_132, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_entire_variable; return; }
    case ARTL_ART_variable_access_132: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal variable_access: match production*/
    case ARTL_ART_variable_access_134: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_access_136, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_component_variable; return; }
    case ARTL_ART_variable_access_136: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal variable_access: match production*/
    case ARTL_ART_variable_access_138: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_access_140, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_access; return; }
    case ARTL_ART_variable_access_140: 
      /* Nonterminal template end */
      if (!ARTSet238[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_access_142, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variable_conformant_array_specification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variable_conformant_array_specification production descriptor loads*/
    case ARTL_ART_variable_conformant_array_specification: 
      if (ARTSet425[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_conformant_array_specification_390, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variable_conformant_array_specification: match production*/
    case ARTL_ART_variable_conformant_array_specification_390: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_var, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_conformant_array_specification_392, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_conformant_array_specification_394, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list; return; }
    case ARTL_ART_variable_conformant_array_specification_394: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_conformant_array_specification_396, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet414[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_conformant_array_specification_398, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_conformant_array_schema; return; }
    case ARTL_ART_variable_conformant_array_specification_398: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variable_declaration() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variable_declaration production descriptor loads*/
    case ARTL_ART_variable_declaration: 
      if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_declaration_1716, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variable_declaration: match production*/
    case ARTL_ART_variable_declaration_1716: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_declaration_1718, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list; return; }
    case ARTL_ART_variable_declaration_1718: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_declaration_1720, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_declaration_1722, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_denoter; return; }
    case ARTL_ART_variable_declaration_1722: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variable_declaration_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variable_declaration_part production descriptor loads*/
    case ARTL_ART_variable_declaration_part: 
      if (ARTSet427[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_declaration_part_186, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variable_declaration_part: match production*/
    case ARTL_ART_variable_declaration_part_186: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_declaration_part_188, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_declaration_part_50; return; }
    case ARTL_ART_variable_declaration_part_188: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variable_declaration_part_50() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variable_declaration_part_50 production descriptor loads*/
    case ARTL_ART_variable_declaration_part_50: 
      if (ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_declaration_part_50_1724, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet425[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_declaration_part_50_1728, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variable_declaration_part_50: match production*/
    case ARTL_ART_variable_declaration_part_50_1724: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_declaration_part_50_1726, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal variable_declaration_part_50: match production*/
    case ARTL_ART_variable_declaration_part_50_1728: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_var, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_declaration_part_50_1730, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet429[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_declaration_part_50_1732, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_declaration; return; }
    case ARTL_ART_variable_declaration_part_50_1732: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_declaration_part_50_1734, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet431[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_declaration_part_50_1736, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_declaration_part_51; return; }
    case ARTL_ART_variable_declaration_part_50_1736: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variable_declaration_part_51() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variable_declaration_part_51 production descriptor loads*/
    case ARTL_ART_variable_declaration_part_51: 
      if (ARTSet432[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_declaration_part_51_1738, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet433[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_declaration_part_51_1742, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variable_declaration_part_51: match production*/
    case ARTL_ART_variable_declaration_part_51_1738: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_declaration_part_51_1740, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet432[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal variable_declaration_part_51: match production*/
    case ARTL_ART_variable_declaration_part_51_1742: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_declaration_part_51_1744, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_declaration_part_51; return; }
    case ARTL_ART_variable_declaration_part_51_1744: 
      /* Nonterminal template end */
      if (!ARTSet429[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_declaration_part_51_1746, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variable_declaration; return; }
    case ARTL_ART_variable_declaration_part_51_1746: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_declaration_part_51_1748, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet432[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variable_parameter_specification() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variable_parameter_specification production descriptor loads*/
    case ARTL_ART_variable_parameter_specification: 
      if (ARTSet425[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variable_parameter_specification_862, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variable_parameter_specification: match production*/
    case ARTL_ART_variable_parameter_specification_862: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_var, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_parameter_specification_864, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_parameter_specification_866, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_list; return; }
    case ARTL_ART_variable_parameter_specification_866: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variable_parameter_specification_868, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variable_parameter_specification_870, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_type_ID; return; }
    case ARTL_ART_variable_parameter_specification_870: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variant() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variant production descriptor loads*/
    case ARTL_ART_variant: 
      if (ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variant_1750, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variant: match production*/
    case ARTL_ART_variant_1750: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_1752, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_case_constant_list; return; }
    case ARTL_ART_variant_1752: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variant_1754, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variant_1756, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet434[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_1758, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_field_list; return; }
    case ARTL_ART_variant_1758: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variant_1760, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet153[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variant_part() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variant_part production descriptor loads*/
    case ARTL_ART_variant_part: 
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variant_part_740, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet152[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variant_part_750, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variant_part: match production*/
    case ARTL_ART_variant_part_740: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_case, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variant_part_742, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet435[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_part_744, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variant_selector; return; }
    case ARTL_ART_variant_part_744: 
      /* Nonterminal template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_of, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variant_part_746, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet436[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_part_748, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variant; return; }
    case ARTL_ART_variant_part_748: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet153[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal variant_part: match production*/
    case ARTL_ART_variant_part_750: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_part_752, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variant_part; return; }
    case ARTL_ART_variant_part_752: 
      /* Nonterminal template end */
      if (!ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SEMICOLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variant_part_754, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet436[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_part_756, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variant; return; }
    case ARTL_ART_variant_part_756: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet153[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variant_selector() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variant_selector production descriptor loads*/
    case ARTL_ART_variant_selector: 
      if (ARTSet437[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variant_selector_1762, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variant_selector: match production*/
    case ARTL_ART_variant_selector_1762: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_selector_1764, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_variant_selector_52; return; }
    case ARTL_ART_variant_selector_1764: 
      /* Nonterminal template end */
      if (!ARTSet439[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_selector_1766, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_tag_type; return; }
    case ARTL_ART_variant_selector_1766: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet37[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_variant_selector_52() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal variant_selector_52 production descriptor loads*/
    case ARTL_ART_variant_selector_52: 
      if (ARTSet439[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variant_selector_52_1768, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet441[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_variant_selector_52_1772, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal variant_selector_52: match production*/
    case ARTL_ART_variant_selector_52_1768: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variant_selector_52_1770, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet439[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal variant_selector_52: match production*/
    case ARTL_ART_variant_selector_52_1772: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_variant_selector_52_1774, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_tag_field; return; }
    case ARTL_ART_variant_selector_52_1774: 
      /* Nonterminal template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_variant_selector_52_1776, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet439[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_while_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal while_statement production descriptor loads*/
    case ARTL_ART_while_statement: 
      if (ARTSet442[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_while_statement_1412, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal while_statement: match production*/
    case ARTL_ART_while_statement_1412: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_while, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_while_statement_1414, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet201[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_while_statement_1416, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_Boolean_expression; return; }
    case ARTL_ART_while_statement_1416: 
      /* Nonterminal template end */
      if (!ARTSet158[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_do, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_while_statement_1418, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet126[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_while_statement_1420, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement; return; }
    case ARTL_ART_while_statement_1420: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_with_statement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal with_statement production descriptor loads*/
    case ARTL_ART_with_statement: 
      if (ARTSet443[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_with_statement_1620, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal with_statement: match production*/
    case ARTL_ART_with_statement_1620: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_with, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_with_statement_1622, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet444[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_with_statement_1624, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_record_variable_list; return; }
    case ARTL_ART_with_statement_1624: 
      /* Nonterminal template end */
      if (!ARTSet158[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_do, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_with_statement_1626, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet126[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_with_statement_1628, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_statement; return; }
    case ARTL_ART_with_statement_1628: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_write_parameter() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal write_parameter production descriptor loads*/
    case ARTL_ART_write_parameter: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_write_parameter_1778, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal write_parameter: match production*/
    case ARTL_ART_write_parameter_1778: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_1780, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_write_parameter_1780: 
      /* Nonterminal template end */
      if (!ARTSet446[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_1782, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter_53; return; }
    case ARTL_ART_write_parameter_1782: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet445[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_write_parameter_53() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal write_parameter_53 production descriptor loads*/
    case ARTL_ART_write_parameter_53: 
      if (ARTSet445[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_write_parameter_53_1784, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_write_parameter_53_1788, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal write_parameter_53: match production*/
    case ARTL_ART_write_parameter_53_1784: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_write_parameter_53_1786, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet445[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal write_parameter_53: match production*/
    case ARTL_ART_write_parameter_53_1788: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_write_parameter_53_1790, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_53_1792, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_write_parameter_53_1792: 
      /* Nonterminal template end */
      if (!ARTSet449[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_53_1794, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter_54; return; }
    case ARTL_ART_write_parameter_53_1794: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet445[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_write_parameter_54() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal write_parameter_54 production descriptor loads*/
    case ARTL_ART_write_parameter_54: 
      if (ARTSet445[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_write_parameter_54_1796, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_write_parameter_54_1800, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal write_parameter_54: match production*/
    case ARTL_ART_write_parameter_54_1796: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_write_parameter_54_1798, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet445[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal write_parameter_54: match production*/
    case ARTL_ART_write_parameter_54_1800: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_write_parameter_54_1802, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_54_1804, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_expression; return; }
    case ARTL_ART_write_parameter_54_1804: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet445[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_write_parameter_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal write_parameter_list production descriptor loads*/
    case ARTL_ART_write_parameter_list: 
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_write_parameter_list_1292, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal write_parameter_list: match production*/
    case ARTL_ART_write_parameter_list_1292: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_write_parameter_list_1294, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet451[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_list_1296, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter; return; }
    case ARTL_ART_write_parameter_list_1296: 
      /* Nonterminal template end */
      if (!ARTSet452[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_list_1298, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter_list_57; return; }
    case ARTL_ART_write_parameter_list_1298: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_write_parameter_list_1300, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_write_parameter_list_57() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal write_parameter_list_57 production descriptor loads*/
    case ARTL_ART_write_parameter_list_57: 
      if (ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_write_parameter_list_57_1832, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet454[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_write_parameter_list_57_1836, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal write_parameter_list_57: match production*/
    case ARTL_ART_write_parameter_list_57_1832: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_write_parameter_list_57_1834, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal write_parameter_list_57: match production*/
    case ARTL_ART_write_parameter_list_57_1836: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_list_57_1838, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter_list_57; return; }
    case ARTL_ART_write_parameter_list_57_1838: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_write_parameter_list_57_1840, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet451[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_write_parameter_list_57_1842, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter; return; }
    case ARTL_ART_write_parameter_list_57_1842: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_writeln_parameter_list() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal writeln_parameter_list production descriptor loads*/
    case ARTL_ART_writeln_parameter_list: 
      if (ARTSet456[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_writeln_parameter_list_1302, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal writeln_parameter_list: match production*/
    case ARTL_ART_writeln_parameter_list_1302: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_writeln_parameter_list_1304, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_writeln_parameter_list_55; return; }
    case ARTL_ART_writeln_parameter_list_1304: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_writeln_parameter_list_55() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal writeln_parameter_list_55 production descriptor loads*/
    case ARTL_ART_writeln_parameter_list_55: 
      if (ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_writeln_parameter_list_55_1806, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_writeln_parameter_list_55_1810, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal writeln_parameter_list_55: match production*/
    case ARTL_ART_writeln_parameter_list_55_1806: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_writeln_parameter_list_55_1808, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal writeln_parameter_list_55: match production*/
    case ARTL_ART_writeln_parameter_list_55_1810: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_writeln_parameter_list_55_1812, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet451[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_writeln_parameter_list_55_1814, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter; return; }
    case ARTL_ART_writeln_parameter_list_55_1814: 
      /* Nonterminal template end */
      if (!ARTSet457[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_writeln_parameter_list_55_1816, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_writeln_parameter_list_56; return; }
    case ARTL_ART_writeln_parameter_list_55_1816: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_writeln_parameter_list_55_1818, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_writeln_parameter_list_56() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal writeln_parameter_list_56 production descriptor loads*/
    case ARTL_ART_writeln_parameter_list_56: 
      if (ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_writeln_parameter_list_56_1820, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet459[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_writeln_parameter_list_56_1824, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal writeln_parameter_list_56: match production*/
    case ARTL_ART_writeln_parameter_list_56_1820: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_writeln_parameter_list_56_1822, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal writeln_parameter_list_56: match production*/
    case ARTL_ART_writeln_parameter_list_56_1824: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_writeln_parameter_list_56_1826, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_writeln_parameter_list_56; return; }
    case ARTL_ART_writeln_parameter_list_56_1826: 
      /* Nonterminal template end */
      if (!ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_writeln_parameter_list_56_1828, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet451[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_writeln_parameter_list_56_1830, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_write_parameter; return; }
    case ARTL_ART_writeln_parameter_list_56_1830: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void artParseBody(int artStartLabel) {
  artLoadSetupTime();
  artSpecificationName = "../languages/Pascal/grammar/iso_pascal_7185/earleyTableData/pascal.art";
  artStartSymbolLabel = artStartLabel;
  artIsInLanguage = false;
  artTokenExtent = 286;
  artLexicaliseForV3GLL(artInputString, null);
  artLoadLexTime();
  artDummySPPFNode = artFindSPPFInitial(ARTL_DUMMY, 0, 0);
  artCurrentSPPFNode = artDummySPPFNode;
  artRootGSSNode = artFindGSS(ARTL_EOS, 0, 0, 0);
  artCurrentGSSNode = artRootGSSNode;
  artCurrentRestartLabel = artStartSymbolLabel;
  artCurrentInputPairIndex = 0;
  artCurrentInputPairReference = 0;
  while (true)
    switch (artlhsL[artCurrentRestartLabel]) {
      case ARTL_ART_Boolean_expression: 
        ARTPF_ART_Boolean_expression();
        break;
      case ARTL_ART_ID: 
        ARTPF_ART_ID();
        break;
      case ARTL_ART_ID_list: 
        ARTPF_ART_ID_list();
        break;
      case ARTL_ART_ID_list_18: 
        ARTPF_ART_ID_list_18();
        break;
      case ARTL_ART_actual_parameter: 
        ARTPF_ART_actual_parameter();
        break;
      case ARTL_ART_actual_parameter_list: 
        ARTPF_ART_actual_parameter_list();
        break;
      case ARTL_ART_actual_parameter_list_1: 
        ARTPF_ART_actual_parameter_list_1();
        break;
      case ARTL_ART_adding_operator: 
        ARTPF_ART_adding_operator();
        break;
      case ARTL_ART_apostrophe_image: 
        ARTPF_ART_apostrophe_image();
        break;
      case ARTL_ART_array_type: 
        ARTPF_ART_array_type();
        break;
      case ARTL_ART_array_type_2: 
        ARTPF_ART_array_type_2();
        break;
      case ARTL_ART_assignment_statement: 
        ARTPF_ART_assignment_statement();
        break;
      case ARTL_ART_assignment_statement_3: 
        ARTPF_ART_assignment_statement_3();
        break;
      case ARTL_ART_base_type: 
        ARTPF_ART_base_type();
        break;
      case ARTL_ART_block: 
        ARTPF_ART_block();
        break;
      case ARTL_ART_bound_ID: 
        ARTPF_ART_bound_ID();
        break;
      case ARTL_ART_case_constant: 
        ARTPF_ART_case_constant();
        break;
      case ARTL_ART_case_constant_list: 
        ARTPF_ART_case_constant_list();
        break;
      case ARTL_ART_case_constant_list_4: 
        ARTPF_ART_case_constant_list_4();
        break;
      case ARTL_ART_case_index: 
        ARTPF_ART_case_index();
        break;
      case ARTL_ART_case_list_element: 
        ARTPF_ART_case_list_element();
        break;
      case ARTL_ART_case_statement: 
        ARTPF_ART_case_statement();
        break;
      case ARTL_ART_case_statement_5: 
        ARTPF_ART_case_statement_5();
        break;
      case ARTL_ART_case_statement_6: 
        ARTPF_ART_case_statement_6();
        break;
      case ARTL_ART_character_string: 
        ARTPF_ART_character_string();
        break;
      case ARTL_ART_component_type: 
        ARTPF_ART_component_type();
        break;
      case ARTL_ART_component_variable: 
        ARTPF_ART_component_variable();
        break;
      case ARTL_ART_compound_statement: 
        ARTPF_ART_compound_statement();
        break;
      case ARTL_ART_conditional_statement: 
        ARTPF_ART_conditional_statement();
        break;
      case ARTL_ART_conformant_array_parameter_specification: 
        ARTPF_ART_conformant_array_parameter_specification();
        break;
      case ARTL_ART_conformant_array_schema: 
        ARTPF_ART_conformant_array_schema();
        break;
      case ARTL_ART_constant: 
        ARTPF_ART_constant();
        break;
      case ARTL_ART_constant_7: 
        ARTPF_ART_constant_7();
        break;
      case ARTL_ART_constant_8: 
        ARTPF_ART_constant_8();
        break;
      case ARTL_ART_constant_ID: 
        ARTPF_ART_constant_ID();
        break;
      case ARTL_ART_constant_definition: 
        ARTPF_ART_constant_definition();
        break;
      case ARTL_ART_constant_definition_part: 
        ARTPF_ART_constant_definition_part();
        break;
      case ARTL_ART_constant_definition_part_10: 
        ARTPF_ART_constant_definition_part_10();
        break;
      case ARTL_ART_constant_definition_part_9: 
        ARTPF_ART_constant_definition_part_9();
        break;
      case ARTL_ART_control_variable: 
        ARTPF_ART_control_variable();
        break;
      case ARTL_ART_digit: 
        ARTPF_ART_digit();
        break;
      case ARTL_ART_digit_sequence: 
        ARTPF_ART_digit_sequence();
        break;
      case ARTL_ART_directive: 
        ARTPF_ART_directive();
        break;
      case ARTL_ART_domain_type: 
        ARTPF_ART_domain_type();
        break;
      case ARTL_ART_else_part: 
        ARTPF_ART_else_part();
        break;
      case ARTL_ART_entire_variable: 
        ARTPF_ART_entire_variable();
        break;
      case ARTL_ART_enumerated_type: 
        ARTPF_ART_enumerated_type();
        break;
      case ARTL_ART_expression: 
        ARTPF_ART_expression();
        break;
      case ARTL_ART_expression_11: 
        ARTPF_ART_expression_11();
        break;
      case ARTL_ART_factor: 
        ARTPF_ART_factor();
        break;
      case ARTL_ART_field_ID: 
        ARTPF_ART_field_ID();
        break;
      case ARTL_ART_field_designator: 
        ARTPF_ART_field_designator();
        break;
      case ARTL_ART_field_designator_ID: 
        ARTPF_ART_field_designator_ID();
        break;
      case ARTL_ART_field_list: 
        ARTPF_ART_field_list();
        break;
      case ARTL_ART_field_list_12: 
        ARTPF_ART_field_list_12();
        break;
      case ARTL_ART_field_list_13: 
        ARTPF_ART_field_list_13();
        break;
      case ARTL_ART_field_specifier: 
        ARTPF_ART_field_specifier();
        break;
      case ARTL_ART_file_type: 
        ARTPF_ART_file_type();
        break;
      case ARTL_ART_final_value: 
        ARTPF_ART_final_value();
        break;
      case ARTL_ART_fixed_part: 
        ARTPF_ART_fixed_part();
        break;
      case ARTL_ART_for_statement: 
        ARTPF_ART_for_statement();
        break;
      case ARTL_ART_for_statement_14: 
        ARTPF_ART_for_statement_14();
        break;
      case ARTL_ART_formal_parameter_list: 
        ARTPF_ART_formal_parameter_list();
        break;
      case ARTL_ART_formal_parameter_list_15: 
        ARTPF_ART_formal_parameter_list_15();
        break;
      case ARTL_ART_formal_parameter_section: 
        ARTPF_ART_formal_parameter_section();
        break;
      case ARTL_ART_fractional_part: 
        ARTPF_ART_fractional_part();
        break;
      case ARTL_ART_function_ID: 
        ARTPF_ART_function_ID();
        break;
      case ARTL_ART_function_block: 
        ARTPF_ART_function_block();
        break;
      case ARTL_ART_function_declaration: 
        ARTPF_ART_function_declaration();
        break;
      case ARTL_ART_function_designator: 
        ARTPF_ART_function_designator();
        break;
      case ARTL_ART_function_designator_16: 
        ARTPF_ART_function_designator_16();
        break;
      case ARTL_ART_function_heading: 
        ARTPF_ART_function_heading();
        break;
      case ARTL_ART_function_heading_17: 
        ARTPF_ART_function_heading_17();
        break;
      case ARTL_ART_function_identification: 
        ARTPF_ART_function_identification();
        break;
      case ARTL_ART_functional_parameter_specification: 
        ARTPF_ART_functional_parameter_specification();
        break;
      case ARTL_ART_goto_statement: 
        ARTPF_ART_goto_statement();
        break;
      case ARTL_ART_if_statement: 
        ARTPF_ART_if_statement();
        break;
      case ARTL_ART_if_statement_19: 
        ARTPF_ART_if_statement_19();
        break;
      case ARTL_ART_index_expression: 
        ARTPF_ART_index_expression();
        break;
      case ARTL_ART_index_type: 
        ARTPF_ART_index_type();
        break;
      case ARTL_ART_index_type_specification: 
        ARTPF_ART_index_type_specification();
        break;
      case ARTL_ART_indexed_variable: 
        ARTPF_ART_indexed_variable();
        break;
      case ARTL_ART_indexed_variable_20: 
        ARTPF_ART_indexed_variable_20();
        break;
      case ARTL_ART_initial_value: 
        ARTPF_ART_initial_value();
        break;
      case ARTL_ART_label: 
        ARTPF_ART_label();
        break;
      case ARTL_ART_label_declaration_part: 
        ARTPF_ART_label_declaration_part();
        break;
      case ARTL_ART_label_declaration_part_21: 
        ARTPF_ART_label_declaration_part_21();
        break;
      case ARTL_ART_label_declaration_part_22: 
        ARTPF_ART_label_declaration_part_22();
        break;
      case ARTL_ART_letter: 
        ARTPF_ART_letter();
        break;
      case ARTL_ART_member_designator: 
        ARTPF_ART_member_designator();
        break;
      case ARTL_ART_member_designator_23: 
        ARTPF_ART_member_designator_23();
        break;
      case ARTL_ART_multiplying_operator: 
        ARTPF_ART_multiplying_operator();
        break;
      case ARTL_ART_new_ordinal_type: 
        ARTPF_ART_new_ordinal_type();
        break;
      case ARTL_ART_new_pointer_type: 
        ARTPF_ART_new_pointer_type();
        break;
      case ARTL_ART_new_structured_type: 
        ARTPF_ART_new_structured_type();
        break;
      case ARTL_ART_new_structured_type_24: 
        ARTPF_ART_new_structured_type_24();
        break;
      case ARTL_ART_new_type: 
        ARTPF_ART_new_type();
        break;
      case ARTL_ART_ordinal_type: 
        ARTPF_ART_ordinal_type();
        break;
      case ARTL_ART_ordinal_type_ID: 
        ARTPF_ART_ordinal_type_ID();
        break;
      case ARTL_ART_packed_conformant_array_schema: 
        ARTPF_ART_packed_conformant_array_schema();
        break;
      case ARTL_ART_pointer_type: 
        ARTPF_ART_pointer_type();
        break;
      case ARTL_ART_pointer_type_ID: 
        ARTPF_ART_pointer_type_ID();
        break;
      case ARTL_ART_procedural_parameter_specification: 
        ARTPF_ART_procedural_parameter_specification();
        break;
      case ARTL_ART_procedure_ID: 
        ARTPF_ART_procedure_ID();
        break;
      case ARTL_ART_procedure_and_function_declaration_part: 
        ARTPF_ART_procedure_and_function_declaration_part();
        break;
      case ARTL_ART_procedure_and_function_declaration_part_25: 
        ARTPF_ART_procedure_and_function_declaration_part_25();
        break;
      case ARTL_ART_procedure_and_function_declaration_part_26: 
        ARTPF_ART_procedure_and_function_declaration_part_26();
        break;
      case ARTL_ART_procedure_and_function_heading_part: 
        ARTPF_ART_procedure_and_function_heading_part();
        break;
      case ARTL_ART_procedure_and_function_heading_part_27: 
        ARTPF_ART_procedure_and_function_heading_part_27();
        break;
      case ARTL_ART_procedure_block: 
        ARTPF_ART_procedure_block();
        break;
      case ARTL_ART_procedure_declaration: 
        ARTPF_ART_procedure_declaration();
        break;
      case ARTL_ART_procedure_heading: 
        ARTPF_ART_procedure_heading();
        break;
      case ARTL_ART_procedure_heading_28: 
        ARTPF_ART_procedure_heading_28();
        break;
      case ARTL_ART_procedure_identification: 
        ARTPF_ART_procedure_identification();
        break;
      case ARTL_ART_procedure_statement: 
        ARTPF_ART_procedure_statement();
        break;
      case ARTL_ART_procedure_statement_29: 
        ARTPF_ART_procedure_statement_29();
        break;
      case ARTL_ART_program: 
        ARTPF_ART_program();
        break;
      case ARTL_ART_program_block: 
        ARTPF_ART_program_block();
        break;
      case ARTL_ART_program_heading: 
        ARTPF_ART_program_heading();
        break;
      case ARTL_ART_program_heading_30: 
        ARTPF_ART_program_heading_30();
        break;
      case ARTL_ART_program_parameters: 
        ARTPF_ART_program_parameters();
        break;
      case ARTL_ART_read_parameter_list: 
        ARTPF_ART_read_parameter_list();
        break;
      case ARTL_ART_read_parameter_list_31: 
        ARTPF_ART_read_parameter_list_31();
        break;
      case ARTL_ART_readln_parameter_list: 
        ARTPF_ART_readln_parameter_list();
        break;
      case ARTL_ART_readln_parameter_list_32: 
        ARTPF_ART_readln_parameter_list_32();
        break;
      case ARTL_ART_readln_parameter_list_33: 
        ARTPF_ART_readln_parameter_list_33();
        break;
      case ARTL_ART_real_type_ID: 
        ARTPF_ART_real_type_ID();
        break;
      case ARTL_ART_record_section: 
        ARTPF_ART_record_section();
        break;
      case ARTL_ART_record_type: 
        ARTPF_ART_record_type();
        break;
      case ARTL_ART_record_variable_list: 
        ARTPF_ART_record_variable_list();
        break;
      case ARTL_ART_record_variable_list_34: 
        ARTPF_ART_record_variable_list_34();
        break;
      case ARTL_ART_relational_operator: 
        ARTPF_ART_relational_operator();
        break;
      case ARTL_ART_repeat_statement: 
        ARTPF_ART_repeat_statement();
        break;
      case ARTL_ART_repetitive_statement: 
        ARTPF_ART_repetitive_statement();
        break;
      case ARTL_ART_result_type: 
        ARTPF_ART_result_type();
        break;
      case ARTL_ART_scale_factor: 
        ARTPF_ART_scale_factor();
        break;
      case ARTL_ART_set_constructor: 
        ARTPF_ART_set_constructor();
        break;
      case ARTL_ART_set_constructor_35: 
        ARTPF_ART_set_constructor_35();
        break;
      case ARTL_ART_set_constructor_36: 
        ARTPF_ART_set_constructor_36();
        break;
      case ARTL_ART_set_type: 
        ARTPF_ART_set_type();
        break;
      case ARTL_ART_sign: 
        ARTPF_ART_sign();
        break;
      case ARTL_ART_signed_integer: 
        ARTPF_ART_signed_integer();
        break;
      case ARTL_ART_signed_integer_37: 
        ARTPF_ART_signed_integer_37();
        break;
      case ARTL_ART_signed_number: 
        ARTPF_ART_signed_number();
        break;
      case ARTL_ART_signed_real: 
        ARTPF_ART_signed_real();
        break;
      case ARTL_ART_signed_real_38: 
        ARTPF_ART_signed_real_38();
        break;
      case ARTL_ART_simple_expression: 
        ARTPF_ART_simple_expression();
        break;
      case ARTL_ART_simple_expression_39: 
        ARTPF_ART_simple_expression_39();
        break;
      case ARTL_ART_simple_expression_40: 
        ARTPF_ART_simple_expression_40();
        break;
      case ARTL_ART_simple_statement: 
        ARTPF_ART_simple_statement();
        break;
      case ARTL_ART_simple_statement_41: 
        ARTPF_ART_simple_statement_41();
        break;
      case ARTL_ART_simple_type: 
        ARTPF_ART_simple_type();
        break;
      case ARTL_ART_simple_type_ID: 
        ARTPF_ART_simple_type_ID();
        break;
      case ARTL_ART_statement: 
        ARTPF_ART_statement();
        break;
      case ARTL_ART_statement_42: 
        ARTPF_ART_statement_42();
        break;
      case ARTL_ART_statement_43: 
        ARTPF_ART_statement_43();
        break;
      case ARTL_ART_statement_part: 
        ARTPF_ART_statement_part();
        break;
      case ARTL_ART_statement_sequence: 
        ARTPF_ART_statement_sequence();
        break;
      case ARTL_ART_statement_sequence_44: 
        ARTPF_ART_statement_sequence_44();
        break;
      case ARTL_ART_string_character: 
        ARTPF_ART_string_character();
        break;
      case ARTL_ART_string_element: 
        ARTPF_ART_string_element();
        break;
      case ARTL_ART_structured_statement: 
        ARTPF_ART_structured_statement();
        break;
      case ARTL_ART_structured_type: 
        ARTPF_ART_structured_type();
        break;
      case ARTL_ART_structured_type_ID: 
        ARTPF_ART_structured_type_ID();
        break;
      case ARTL_ART_subrange_type: 
        ARTPF_ART_subrange_type();
        break;
      case ARTL_ART_tag_field: 
        ARTPF_ART_tag_field();
        break;
      case ARTL_ART_tag_type: 
        ARTPF_ART_tag_type();
        break;
      case ARTL_ART_term: 
        ARTPF_ART_term();
        break;
      case ARTL_ART_term_45: 
        ARTPF_ART_term_45();
        break;
      case ARTL_ART_type_ID: 
        ARTPF_ART_type_ID();
        break;
      case ARTL_ART_type_definition: 
        ARTPF_ART_type_definition();
        break;
      case ARTL_ART_type_definition_part: 
        ARTPF_ART_type_definition_part();
        break;
      case ARTL_ART_type_definition_part_46: 
        ARTPF_ART_type_definition_part_46();
        break;
      case ARTL_ART_type_definition_part_47: 
        ARTPF_ART_type_definition_part_47();
        break;
      case ARTL_ART_type_denoter: 
        ARTPF_ART_type_denoter();
        break;
      case ARTL_ART_unpacked_conformant_array_schema: 
        ARTPF_ART_unpacked_conformant_array_schema();
        break;
      case ARTL_ART_unpacked_conformant_array_schema_48: 
        ARTPF_ART_unpacked_conformant_array_schema_48();
        break;
      case ARTL_ART_unpacked_conformant_array_schema_49: 
        ARTPF_ART_unpacked_conformant_array_schema_49();
        break;
      case ARTL_ART_unpacked_structured_type: 
        ARTPF_ART_unpacked_structured_type();
        break;
      case ARTL_ART_unsigned_constant: 
        ARTPF_ART_unsigned_constant();
        break;
      case ARTL_ART_unsigned_integer: 
        ARTPF_ART_unsigned_integer();
        break;
      case ARTL_ART_unsigned_number: 
        ARTPF_ART_unsigned_number();
        break;
      case ARTL_ART_unsigned_real: 
        ARTPF_ART_unsigned_real();
        break;
      case ARTL_ART_value_conformant_array_specification: 
        ARTPF_ART_value_conformant_array_specification();
        break;
      case ARTL_ART_value_parameter_specification: 
        ARTPF_ART_value_parameter_specification();
        break;
      case ARTL_ART_variable_ID: 
        ARTPF_ART_variable_ID();
        break;
      case ARTL_ART_variable_access: 
        ARTPF_ART_variable_access();
        break;
      case ARTL_ART_variable_conformant_array_specification: 
        ARTPF_ART_variable_conformant_array_specification();
        break;
      case ARTL_ART_variable_declaration: 
        ARTPF_ART_variable_declaration();
        break;
      case ARTL_ART_variable_declaration_part: 
        ARTPF_ART_variable_declaration_part();
        break;
      case ARTL_ART_variable_declaration_part_50: 
        ARTPF_ART_variable_declaration_part_50();
        break;
      case ARTL_ART_variable_declaration_part_51: 
        ARTPF_ART_variable_declaration_part_51();
        break;
      case ARTL_ART_variable_parameter_specification: 
        ARTPF_ART_variable_parameter_specification();
        break;
      case ARTL_ART_variant: 
        ARTPF_ART_variant();
        break;
      case ARTL_ART_variant_part: 
        ARTPF_ART_variant_part();
        break;
      case ARTL_ART_variant_selector: 
        ARTPF_ART_variant_selector();
        break;
      case ARTL_ART_variant_selector_52: 
        ARTPF_ART_variant_selector_52();
        break;
      case ARTL_ART_while_statement: 
        ARTPF_ART_while_statement();
        break;
      case ARTL_ART_with_statement: 
        ARTPF_ART_with_statement();
        break;
      case ARTL_ART_write_parameter: 
        ARTPF_ART_write_parameter();
        break;
      case ARTL_ART_write_parameter_53: 
        ARTPF_ART_write_parameter_53();
        break;
      case ARTL_ART_write_parameter_54: 
        ARTPF_ART_write_parameter_54();
        break;
      case ARTL_ART_write_parameter_list: 
        ARTPF_ART_write_parameter_list();
        break;
      case ARTL_ART_write_parameter_list_57: 
        ARTPF_ART_write_parameter_list_57();
        break;
      case ARTL_ART_writeln_parameter_list: 
        ARTPF_ART_writeln_parameter_list();
        break;
      case ARTL_ART_writeln_parameter_list_55: 
        ARTPF_ART_writeln_parameter_list_55();
        break;
      case ARTL_ART_writeln_parameter_list_56: 
        ARTPF_ART_writeln_parameter_list_56();
        break;
      case ARTX_DESPATCH: 
        if (artNoDescriptors()) { 
          artCheckAcceptance();
          artLoadParseTime();
          artLoadEndMemory();
          return;
         }
        artUnloadDescriptor();
    }
}

public void ARTSet1initialise() {
  ARTSet1 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet1, 0, artSetExtent, false);
}

public void ARTSet189initialise() {
  ARTSet189 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet189, 0, artSetExtent, false);
  ARTSet189[ARTTS__LPAR] = true;
  ARTSet189[ARTL_ART_actual_parameter_list] = true;
  ARTSet189[ARTL_ART_function_designator_16] = true;
}

public void ARTSet282initialise() {
  ARTSet282 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet282, 0, artSetExtent, false);
  ARTSet282[ARTTS__LPAR] = true;
  ARTSet282[ARTL_ART_write_parameter_list] = true;
}

public void ARTSet309initialise() {
  ARTSet309 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet309, 0, artSetExtent, false);
  ARTSet309[ARTTS__LT] = true;
  ARTSet309[ARTTS__LT_EQUAL] = true;
  ARTSet309[ARTTS__LT_GT] = true;
  ARTSet309[ARTTS__EQUAL] = true;
  ARTSet309[ARTTS__GT] = true;
  ARTSet309[ARTTS__GT_EQUAL] = true;
  ARTSet309[ARTTS_in] = true;
}

public void ARTSet360initialise() {
  ARTSet360 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet360, 0, artSetExtent, false);
  ARTSet360[ARTTS_type_ID] = true;
  ARTSet360[ARTL_ART_real_type_ID] = true;
  ARTSet360[ARTL_ART_type_ID] = true;
}

public void ARTSet350initialise() {
  ARTSet350 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet350, 0, artSetExtent, false);
  ARTSet350[ARTTS__PLUS] = true;
  ARTSet350[ARTTS__MINUS] = true;
  ARTSet350[ARTTS_or] = true;
  ARTSet350[ARTL_ART_adding_operator] = true;
}

public void ARTSet248initialise() {
  ARTSet248 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet248, 0, artSetExtent, false);
  ARTSet248[ARTTS__UPARROW] = true;
  ARTSet248[ARTL_ART_new_pointer_type] = true;
}

public void ARTSet113initialise() {
  ARTSet113 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet113, 0, artSetExtent, false);
  ARTSet113[ARTTS_ID] = true;
  ARTSet113[ARTL_ART_ID] = true;
  ARTSet113[ARTL_ART_constant_definition] = true;
  ARTSet113[ARTL_ART_constant_definition_part_10] = true;
}

public void ARTSet136initialise() {
  ARTSet136 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet136, 0, artSetExtent, false);
  ARTSet136[ARTTS__LPAR] = true;
  ARTSet136[ARTTS_INTEGER] = true;
  ARTSet136[ARTTS_REAL] = true;
  ARTSet136[ARTTS_STRING] = true;
  ARTSet136[ARTTS__LBRACK] = true;
  ARTSet136[ARTTS_constant_ID] = true;
  ARTSet136[ARTTS_field_designator_ID] = true;
  ARTSet136[ARTTS_function_ID] = true;
  ARTSet136[ARTTS_nil] = true;
  ARTSet136[ARTTS_not] = true;
  ARTSet136[ARTTS_variable_ID] = true;
  ARTSet136[ARTL_ART_character_string] = true;
  ARTSet136[ARTL_ART_component_variable] = true;
  ARTSet136[ARTL_ART_constant_ID] = true;
  ARTSet136[ARTL_ART_digit_sequence] = true;
  ARTSet136[ARTL_ART_entire_variable] = true;
  ARTSet136[ARTL_ART_field_designator] = true;
  ARTSet136[ARTL_ART_field_designator_ID] = true;
  ARTSet136[ARTL_ART_function_ID] = true;
  ARTSet136[ARTL_ART_function_designator] = true;
  ARTSet136[ARTL_ART_indexed_variable] = true;
  ARTSet136[ARTL_ART_set_constructor] = true;
  ARTSet136[ARTL_ART_unsigned_constant] = true;
  ARTSet136[ARTL_ART_unsigned_integer] = true;
  ARTSet136[ARTL_ART_unsigned_number] = true;
  ARTSet136[ARTL_ART_unsigned_real] = true;
  ARTSet136[ARTL_ART_variable_ID] = true;
  ARTSet136[ARTL_ART_variable_access] = true;
}

public void ARTSet121initialise() {
  ARTSet121 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet121, 0, artSetExtent, false);
  ARTSet121[ARTTS_digit] = true;
}

public void ARTSet173initialise() {
  ARTSet173 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet173, 0, artSetExtent, false);
  ARTSet173[ARTTS__SEMICOLON] = true;
  ARTSet173[ARTL_ART_formal_parameter_list_15] = true;
}

public void ARTSet101initialise() {
  ARTSet101 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet101, 0, artSetExtent, false);
  ARTSet101[ARTTS__PLUS] = true;
  ARTSet101[ARTTS__MINUS] = true;
  ARTSet101[ARTL_ART_constant_7] = true;
  ARTSet101[ARTL_ART_sign] = true;
}

public void ARTSet355initialise() {
  ARTSet355 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet355, 0, artSetExtent, false);
  ARTSet355[ARTTS_procedure_ID] = true;
  ARTSet355[ARTTS_read] = true;
  ARTSet355[ARTTS_readln] = true;
  ARTSet355[ARTTS_write] = true;
  ARTSet355[ARTTS_writeln] = true;
  ARTSet355[ARTL_ART_procedure_ID] = true;
  ARTSet355[ARTL_ART_procedure_statement] = true;
}

public void ARTSet405initialise() {
  ARTSet405 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet405, 0, artSetExtent, false);
  ARTSet405[ARTTS_ID] = true;
  ARTSet405[ARTTS_begin] = true;
  ARTSet405[ARTTS_function] = true;
  ARTSet405[ARTTS_procedure] = true;
  ARTSet405[ARTTS_var] = true;
  ARTSet405[ARTL_ART_ID] = true;
  ARTSet405[ARTL_ART_compound_statement] = true;
  ARTSet405[ARTL_ART_function_declaration] = true;
  ARTSet405[ARTL_ART_function_heading] = true;
  ARTSet405[ARTL_ART_function_identification] = true;
  ARTSet405[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet405[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet405[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet405[ARTL_ART_procedure_declaration] = true;
  ARTSet405[ARTL_ART_procedure_heading] = true;
  ARTSet405[ARTL_ART_procedure_identification] = true;
  ARTSet405[ARTL_ART_statement_part] = true;
  ARTSet405[ARTL_ART_type_definition] = true;
  ARTSet405[ARTL_ART_variable_declaration_part] = true;
  ARTSet405[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet398initialise() {
  ARTSet398 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet398, 0, artSetExtent, false);
  ARTSet398[ARTTS_type] = true;
  ARTSet398[ARTL_ART_type_definition_part_46] = true;
}

public void ARTSet274initialise() {
  ARTSet274 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet274, 0, artSetExtent, false);
  ARTSet274[ARTTS__LPAR] = true;
  ARTSet274[ARTTS__SEMICOLON] = true;
  ARTSet274[ARTTS_else] = true;
  ARTSet274[ARTTS_end] = true;
  ARTSet274[ARTTS_until] = true;
  ARTSet274[ARTL_ART_actual_parameter_list] = true;
  ARTSet274[ARTL_ART_case_statement_5] = true;
  ARTSet274[ARTL_ART_case_statement_6] = true;
  ARTSet274[ARTL_ART_else_part] = true;
  ARTSet274[ARTL_ART_if_statement_19] = true;
  ARTSet274[ARTL_ART_procedure_statement_29] = true;
  ARTSet274[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet162initialise() {
  ARTSet162 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet162, 0, artSetExtent, false);
  ARTSet162[ARTTS__LPAR] = true;
  ARTSet162[ARTTS__PLUS] = true;
  ARTSet162[ARTTS__MINUS] = true;
  ARTSet162[ARTTS_INTEGER] = true;
  ARTSet162[ARTTS_REAL] = true;
  ARTSet162[ARTTS_STRING] = true;
  ARTSet162[ARTTS__LBRACK] = true;
  ARTSet162[ARTTS_constant_ID] = true;
  ARTSet162[ARTTS_field_designator_ID] = true;
  ARTSet162[ARTTS_function_ID] = true;
  ARTSet162[ARTTS_nil] = true;
  ARTSet162[ARTTS_not] = true;
  ARTSet162[ARTTS_variable_ID] = true;
  ARTSet162[ARTL_ART_character_string] = true;
  ARTSet162[ARTL_ART_component_variable] = true;
  ARTSet162[ARTL_ART_constant_ID] = true;
  ARTSet162[ARTL_ART_digit_sequence] = true;
  ARTSet162[ARTL_ART_entire_variable] = true;
  ARTSet162[ARTL_ART_expression] = true;
  ARTSet162[ARTL_ART_factor] = true;
  ARTSet162[ARTL_ART_field_designator] = true;
  ARTSet162[ARTL_ART_field_designator_ID] = true;
  ARTSet162[ARTL_ART_function_ID] = true;
  ARTSet162[ARTL_ART_function_designator] = true;
  ARTSet162[ARTL_ART_indexed_variable] = true;
  ARTSet162[ARTL_ART_initial_value] = true;
  ARTSet162[ARTL_ART_set_constructor] = true;
  ARTSet162[ARTL_ART_sign] = true;
  ARTSet162[ARTL_ART_simple_expression] = true;
  ARTSet162[ARTL_ART_term] = true;
  ARTSet162[ARTL_ART_unsigned_constant] = true;
  ARTSet162[ARTL_ART_unsigned_integer] = true;
  ARTSet162[ARTL_ART_unsigned_number] = true;
  ARTSet162[ARTL_ART_unsigned_real] = true;
  ARTSet162[ARTL_ART_variable_ID] = true;
  ARTSet162[ARTL_ART_variable_access] = true;
}

public void ARTSet229initialise() {
  ARTSet229 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet229, 0, artSetExtent, false);
  ARTSet229[ARTTS__STAR] = true;
  ARTSet229[ARTTS__SLASH] = true;
  ARTSet229[ARTTS_and] = true;
  ARTSet229[ARTTS_div] = true;
  ARTSet229[ARTTS_mod] = true;
}

public void ARTSet123initialise() {
  ARTSet123 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet123, 0, artSetExtent, false);
  ARTSet123[ARTTS__RPAR] = true;
  ARTSet123[ARTTS__STAR] = true;
  ARTSet123[ARTTS__PLUS] = true;
  ARTSet123[ARTTS__COMMA] = true;
  ARTSet123[ARTTS__MINUS] = true;
  ARTSet123[ARTTS__PERIOD_PERIOD] = true;
  ARTSet123[ARTTS__SLASH] = true;
  ARTSet123[ARTTS__COLON] = true;
  ARTSet123[ARTTS__SEMICOLON] = true;
  ARTSet123[ARTTS__LT] = true;
  ARTSet123[ARTTS__LT_EQUAL] = true;
  ARTSet123[ARTTS__LT_GT] = true;
  ARTSet123[ARTTS__EQUAL] = true;
  ARTSet123[ARTTS__GT] = true;
  ARTSet123[ARTTS__GT_EQUAL] = true;
  ARTSet123[ARTTS__RBRACK] = true;
  ARTSet123[ARTTS_and] = true;
  ARTSet123[ARTTS_div] = true;
  ARTSet123[ARTTS_do] = true;
  ARTSet123[ARTTS_downto] = true;
  ARTSet123[ARTTS_else] = true;
  ARTSet123[ARTTS_end] = true;
  ARTSet123[ARTTS_in] = true;
  ARTSet123[ARTTS_mod] = true;
  ARTSet123[ARTTS_of] = true;
  ARTSet123[ARTTS_or] = true;
  ARTSet123[ARTTS_then] = true;
  ARTSet123[ARTTS_to] = true;
  ARTSet123[ARTTS_until] = true;
  ARTSet123[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet123[ARTL_ART_adding_operator] = true;
  ARTSet123[ARTL_ART_array_type_2] = true;
  ARTSet123[ARTL_ART_case_constant_list_4] = true;
  ARTSet123[ARTL_ART_case_statement_5] = true;
  ARTSet123[ARTL_ART_case_statement_6] = true;
  ARTSet123[ARTL_ART_else_part] = true;
  ARTSet123[ARTL_ART_expression_11] = true;
  ARTSet123[ARTL_ART_for_statement_14] = true;
  ARTSet123[ARTL_ART_if_statement_19] = true;
  ARTSet123[ARTL_ART_indexed_variable_20] = true;
  ARTSet123[ARTL_ART_label_declaration_part_22] = true;
  ARTSet123[ARTL_ART_member_designator_23] = true;
  ARTSet123[ARTL_ART_multiplying_operator] = true;
  ARTSet123[ARTL_ART_relational_operator] = true;
  ARTSet123[ARTL_ART_set_constructor_36] = true;
  ARTSet123[ARTL_ART_simple_expression_39] = true;
  ARTSet123[ARTL_ART_simple_expression_40] = true;
  ARTSet123[ARTL_ART_statement_sequence_44] = true;
  ARTSet123[ARTL_ART_term_45] = true;
  ARTSet123[ARTL_ART_write_parameter_53] = true;
  ARTSet123[ARTL_ART_write_parameter_54] = true;
  ARTSet123[ARTL_ART_write_parameter_list_57] = true;
  ARTSet123[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet126initialise() {
  ARTSet126 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet126, 0, artSetExtent, false);
  ARTSet126[ARTTS__SEMICOLON] = true;
  ARTSet126[ARTTS_INTEGER] = true;
  ARTSet126[ARTTS_begin] = true;
  ARTSet126[ARTTS_case] = true;
  ARTSet126[ARTTS_else] = true;
  ARTSet126[ARTTS_end] = true;
  ARTSet126[ARTTS_field_designator_ID] = true;
  ARTSet126[ARTTS_for] = true;
  ARTSet126[ARTTS_function_ID] = true;
  ARTSet126[ARTTS_goto] = true;
  ARTSet126[ARTTS_if] = true;
  ARTSet126[ARTTS_procedure_ID] = true;
  ARTSet126[ARTTS_read] = true;
  ARTSet126[ARTTS_readln] = true;
  ARTSet126[ARTTS_repeat] = true;
  ARTSet126[ARTTS_until] = true;
  ARTSet126[ARTTS_variable_ID] = true;
  ARTSet126[ARTTS_while] = true;
  ARTSet126[ARTTS_with] = true;
  ARTSet126[ARTTS_write] = true;
  ARTSet126[ARTTS_writeln] = true;
  ARTSet126[ARTL_ART_assignment_statement] = true;
  ARTSet126[ARTL_ART_assignment_statement_3] = true;
  ARTSet126[ARTL_ART_case_statement] = true;
  ARTSet126[ARTL_ART_case_statement_5] = true;
  ARTSet126[ARTL_ART_case_statement_6] = true;
  ARTSet126[ARTL_ART_component_variable] = true;
  ARTSet126[ARTL_ART_compound_statement] = true;
  ARTSet126[ARTL_ART_conditional_statement] = true;
  ARTSet126[ARTL_ART_digit_sequence] = true;
  ARTSet126[ARTL_ART_else_part] = true;
  ARTSet126[ARTL_ART_entire_variable] = true;
  ARTSet126[ARTL_ART_field_designator] = true;
  ARTSet126[ARTL_ART_field_designator_ID] = true;
  ARTSet126[ARTL_ART_for_statement] = true;
  ARTSet126[ARTL_ART_function_ID] = true;
  ARTSet126[ARTL_ART_goto_statement] = true;
  ARTSet126[ARTL_ART_if_statement] = true;
  ARTSet126[ARTL_ART_if_statement_19] = true;
  ARTSet126[ARTL_ART_indexed_variable] = true;
  ARTSet126[ARTL_ART_label] = true;
  ARTSet126[ARTL_ART_procedure_ID] = true;
  ARTSet126[ARTL_ART_procedure_statement] = true;
  ARTSet126[ARTL_ART_repeat_statement] = true;
  ARTSet126[ARTL_ART_repetitive_statement] = true;
  ARTSet126[ARTL_ART_simple_statement] = true;
  ARTSet126[ARTL_ART_simple_statement_41] = true;
  ARTSet126[ARTL_ART_statement] = true;
  ARTSet126[ARTL_ART_statement_42] = true;
  ARTSet126[ARTL_ART_statement_43] = true;
  ARTSet126[ARTL_ART_statement_sequence_44] = true;
  ARTSet126[ARTL_ART_structured_statement] = true;
  ARTSet126[ARTL_ART_variable_ID] = true;
  ARTSet126[ARTL_ART_variable_access] = true;
  ARTSet126[ARTL_ART_while_statement] = true;
  ARTSet126[ARTL_ART_with_statement] = true;
}

public void ARTSet337initialise() {
  ARTSet337 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet337, 0, artSetExtent, false);
  ARTSet337[ARTTS_INTEGER] = true;
  ARTSet337[ARTL_ART_digit_sequence] = true;
  ARTSet337[ARTL_ART_unsigned_integer] = true;
}

public void ARTSet420initialise() {
  ARTSet420 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet420, 0, artSetExtent, false);
  ARTSet420[ARTTS_INTEGER] = true;
  ARTSet420[ARTTS_REAL] = true;
  ARTSet420[ARTTS_STRING] = true;
  ARTSet420[ARTTS_constant_ID] = true;
  ARTSet420[ARTTS_nil] = true;
  ARTSet420[ARTL_ART_character_string] = true;
  ARTSet420[ARTL_ART_constant_ID] = true;
  ARTSet420[ARTL_ART_digit_sequence] = true;
  ARTSet420[ARTL_ART_unsigned_integer] = true;
  ARTSet420[ARTL_ART_unsigned_number] = true;
  ARTSet420[ARTL_ART_unsigned_real] = true;
}

public void ARTSet23initialise() {
  ARTSet23 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet23, 0, artSetExtent, false);
  ARTSet23[ARTTS__COMMA] = true;
  ARTSet23[ARTL_ART_actual_parameter_list_1] = true;
}

public void ARTSet196initialise() {
  ARTSet196 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet196, 0, artSetExtent, false);
  ARTSet196[ARTTS__LPAR] = true;
  ARTSet196[ARTL_ART_formal_parameter_list] = true;
}

public void ARTSet88initialise() {
  ARTSet88 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet88, 0, artSetExtent, false);
  ARTSet88[ARTTS__SEMICOLON] = true;
  ARTSet88[ARTTS_INTEGER] = true;
  ARTSet88[ARTTS_begin] = true;
  ARTSet88[ARTTS_case] = true;
  ARTSet88[ARTTS_field_designator_ID] = true;
  ARTSet88[ARTTS_for] = true;
  ARTSet88[ARTTS_function_ID] = true;
  ARTSet88[ARTTS_goto] = true;
  ARTSet88[ARTTS_if] = true;
  ARTSet88[ARTTS_procedure_ID] = true;
  ARTSet88[ARTTS_read] = true;
  ARTSet88[ARTTS_readln] = true;
  ARTSet88[ARTTS_repeat] = true;
  ARTSet88[ARTTS_variable_ID] = true;
  ARTSet88[ARTTS_while] = true;
  ARTSet88[ARTTS_with] = true;
  ARTSet88[ARTTS_write] = true;
  ARTSet88[ARTTS_writeln] = true;
  ARTSet88[ARTL_ART_assignment_statement] = true;
  ARTSet88[ARTL_ART_assignment_statement_3] = true;
  ARTSet88[ARTL_ART_case_statement] = true;
  ARTSet88[ARTL_ART_component_variable] = true;
  ARTSet88[ARTL_ART_compound_statement] = true;
  ARTSet88[ARTL_ART_conditional_statement] = true;
  ARTSet88[ARTL_ART_digit_sequence] = true;
  ARTSet88[ARTL_ART_entire_variable] = true;
  ARTSet88[ARTL_ART_field_designator] = true;
  ARTSet88[ARTL_ART_field_designator_ID] = true;
  ARTSet88[ARTL_ART_for_statement] = true;
  ARTSet88[ARTL_ART_function_ID] = true;
  ARTSet88[ARTL_ART_goto_statement] = true;
  ARTSet88[ARTL_ART_if_statement] = true;
  ARTSet88[ARTL_ART_indexed_variable] = true;
  ARTSet88[ARTL_ART_label] = true;
  ARTSet88[ARTL_ART_procedure_ID] = true;
  ARTSet88[ARTL_ART_procedure_statement] = true;
  ARTSet88[ARTL_ART_repeat_statement] = true;
  ARTSet88[ARTL_ART_repetitive_statement] = true;
  ARTSet88[ARTL_ART_simple_statement] = true;
  ARTSet88[ARTL_ART_simple_statement_41] = true;
  ARTSet88[ARTL_ART_statement] = true;
  ARTSet88[ARTL_ART_statement_42] = true;
  ARTSet88[ARTL_ART_statement_43] = true;
  ARTSet88[ARTL_ART_statement_sequence] = true;
  ARTSet88[ARTL_ART_statement_sequence_44] = true;
  ARTSet88[ARTL_ART_structured_statement] = true;
  ARTSet88[ARTL_ART_variable_ID] = true;
  ARTSet88[ARTL_ART_variable_access] = true;
  ARTSet88[ARTL_ART_while_statement] = true;
  ARTSet88[ARTL_ART_with_statement] = true;
}

public void ARTSet176initialise() {
  ARTSet176 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet176, 0, artSetExtent, false);
  ARTSet176[ARTTS_var] = true;
  ARTSet176[ARTL_ART_variable_parameter_specification] = true;
}

public void ARTSet314initialise() {
  ARTSet314 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet314, 0, artSetExtent, false);
  ARTSet314[ARTTS__GT_EQUAL] = true;
}

public void ARTSet3initialise() {
  ARTSet3 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet3, 0, artSetExtent, false);
  ARTSet3[ARTTS__SEMICOLON] = true;
  ARTSet3[ARTTS_do] = true;
  ARTSet3[ARTTS_else] = true;
  ARTSet3[ARTTS_end] = true;
  ARTSet3[ARTTS_then] = true;
  ARTSet3[ARTTS_until] = true;
  ARTSet3[ARTL_ART_case_statement_5] = true;
  ARTSet3[ARTL_ART_case_statement_6] = true;
  ARTSet3[ARTL_ART_else_part] = true;
  ARTSet3[ARTL_ART_if_statement_19] = true;
  ARTSet3[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet287initialise() {
  ARTSet287 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet287, 0, artSetExtent, false);
  ARTSet287[ARTX_EOS] = true;
}

public void ARTSet363initialise() {
  ARTSet363 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet363, 0, artSetExtent, false);
  ARTSet363[ARTTS_INTEGER] = true;
  ARTSet363[ARTL_ART_digit_sequence] = true;
  ARTSet363[ARTL_ART_label] = true;
  ARTSet363[ARTL_ART_statement_42] = true;
}

public void ARTSet76initialise() {
  ARTSet76 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet76, 0, artSetExtent, false);
  ARTSet76[ARTTS__SEMICOLON] = true;
  ARTSet76[ARTL_ART_case_statement_6] = true;
}

public void ARTSet431initialise() {
  ARTSet431 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet431, 0, artSetExtent, false);
  ARTSet431[ARTTS_ID] = true;
  ARTSet431[ARTTS_begin] = true;
  ARTSet431[ARTTS_function] = true;
  ARTSet431[ARTTS_procedure] = true;
  ARTSet431[ARTL_ART_ID] = true;
  ARTSet431[ARTL_ART_ID_list] = true;
  ARTSet431[ARTL_ART_compound_statement] = true;
  ARTSet431[ARTL_ART_function_declaration] = true;
  ARTSet431[ARTL_ART_function_heading] = true;
  ARTSet431[ARTL_ART_function_identification] = true;
  ARTSet431[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet431[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet431[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet431[ARTL_ART_procedure_declaration] = true;
  ARTSet431[ARTL_ART_procedure_heading] = true;
  ARTSet431[ARTL_ART_procedure_identification] = true;
  ARTSet431[ARTL_ART_statement_part] = true;
  ARTSet431[ARTL_ART_variable_declaration] = true;
  ARTSet431[ARTL_ART_variable_declaration_part_51] = true;
}

public void ARTSet400initialise() {
  ARTSet400 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet400, 0, artSetExtent, false);
  ARTSet400[ARTTS_type] = true;
}

public void ARTSet18initialise() {
  ARTSet18 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet18, 0, artSetExtent, false);
  ARTSet18[ARTTS__RPAR] = true;
  ARTSet18[ARTTS__STAR] = true;
  ARTSet18[ARTTS__PLUS] = true;
  ARTSet18[ARTTS__COMMA] = true;
  ARTSet18[ARTTS__MINUS] = true;
  ARTSet18[ARTTS__PERIOD_PERIOD] = true;
  ARTSet18[ARTTS__SLASH] = true;
  ARTSet18[ARTTS__COLON] = true;
  ARTSet18[ARTTS__SEMICOLON] = true;
  ARTSet18[ARTTS__LT] = true;
  ARTSet18[ARTTS__LT_EQUAL] = true;
  ARTSet18[ARTTS__LT_GT] = true;
  ARTSet18[ARTTS__EQUAL] = true;
  ARTSet18[ARTTS__GT] = true;
  ARTSet18[ARTTS__GT_EQUAL] = true;
  ARTSet18[ARTTS__RBRACK] = true;
  ARTSet18[ARTTS_and] = true;
  ARTSet18[ARTTS_div] = true;
  ARTSet18[ARTTS_do] = true;
  ARTSet18[ARTTS_downto] = true;
  ARTSet18[ARTTS_else] = true;
  ARTSet18[ARTTS_end] = true;
  ARTSet18[ARTTS_in] = true;
  ARTSet18[ARTTS_mod] = true;
  ARTSet18[ARTTS_of] = true;
  ARTSet18[ARTTS_or] = true;
  ARTSet18[ARTTS_then] = true;
  ARTSet18[ARTTS_to] = true;
  ARTSet18[ARTTS_until] = true;
  ARTSet18[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet18[ARTL_ART_adding_operator] = true;
  ARTSet18[ARTL_ART_case_statement_5] = true;
  ARTSet18[ARTL_ART_case_statement_6] = true;
  ARTSet18[ARTL_ART_else_part] = true;
  ARTSet18[ARTL_ART_expression_11] = true;
  ARTSet18[ARTL_ART_for_statement_14] = true;
  ARTSet18[ARTL_ART_if_statement_19] = true;
  ARTSet18[ARTL_ART_indexed_variable_20] = true;
  ARTSet18[ARTL_ART_member_designator_23] = true;
  ARTSet18[ARTL_ART_multiplying_operator] = true;
  ARTSet18[ARTL_ART_relational_operator] = true;
  ARTSet18[ARTL_ART_set_constructor_36] = true;
  ARTSet18[ARTL_ART_simple_expression_39] = true;
  ARTSet18[ARTL_ART_simple_expression_40] = true;
  ARTSet18[ARTL_ART_statement_sequence_44] = true;
  ARTSet18[ARTL_ART_term_45] = true;
  ARTSet18[ARTL_ART_write_parameter_53] = true;
  ARTSet18[ARTL_ART_write_parameter_54] = true;
  ARTSet18[ARTL_ART_write_parameter_list_57] = true;
  ARTSet18[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet422initialise() {
  ARTSet422 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet422, 0, artSetExtent, false);
  ARTSet422[ARTTS_INTEGER] = true;
  ARTSet422[ARTTS_REAL] = true;
  ARTSet422[ARTL_ART_digit_sequence] = true;
  ARTSet422[ARTL_ART_unsigned_integer] = true;
  ARTSet422[ARTL_ART_unsigned_real] = true;
}

public void ARTSet345initialise() {
  ARTSet345 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet345, 0, artSetExtent, false);
  ARTSet345[ARTTS__PLUS] = true;
  ARTSet345[ARTTS__MINUS] = true;
  ARTSet345[ARTTS_or] = true;
  ARTSet345[ARTL_ART_adding_operator] = true;
  ARTSet345[ARTL_ART_simple_expression_39] = true;
}

public void ARTSet212initialise() {
  ARTSet212 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet212, 0, artSetExtent, false);
  ARTSet212[ARTTS__COMMA] = true;
  ARTSet212[ARTL_ART_indexed_variable_20] = true;
}

public void ARTSet415initialise() {
  ARTSet415 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet415, 0, artSetExtent, false);
  ARTSet415[ARTTS_array] = true;
  ARTSet415[ARTTS_file] = true;
  ARTSet415[ARTTS_record] = true;
  ARTSet415[ARTTS_set] = true;
  ARTSet415[ARTL_ART_array_type] = true;
  ARTSet415[ARTL_ART_file_type] = true;
  ARTSet415[ARTL_ART_record_type] = true;
  ARTSet415[ARTL_ART_set_type] = true;
}

public void ARTSet445initialise() {
  ARTSet445 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet445, 0, artSetExtent, false);
  ARTSet445[ARTTS__RPAR] = true;
  ARTSet445[ARTTS__COMMA] = true;
  ARTSet445[ARTL_ART_write_parameter_list_57] = true;
  ARTSet445[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet199initialise() {
  ARTSet199 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet199, 0, artSetExtent, false);
  ARTSet199[ARTTS_INTEGER] = true;
  ARTSet199[ARTL_ART_digit_sequence] = true;
  ARTSet199[ARTL_ART_label] = true;
}

public void ARTSet244initialise() {
  ARTSet244 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet244, 0, artSetExtent, false);
  ARTSet244[ARTTS_packed] = true;
}

public void ARTSet450initialise() {
  ARTSet450 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet450, 0, artSetExtent, false);
  ARTSet450[ARTTS__COLON] = true;
  ARTSet450[ARTL_ART_write_parameter_54] = true;
}

public void ARTSet455initialise() {
  ARTSet455 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet455, 0, artSetExtent, false);
  ARTSet455[ARTTS__LPAR] = true;
  ARTSet455[ARTL_ART_writeln_parameter_list_55] = true;
}

public void ARTSet42initialise() {
  ARTSet42 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet42, 0, artSetExtent, false);
  ARTSet42[ARTTS__SEMICOLON] = true;
  ARTSet42[ARTTS_else] = true;
  ARTSet42[ARTTS_end] = true;
  ARTSet42[ARTTS_until] = true;
  ARTSet42[ARTL_ART_case_statement_5] = true;
  ARTSet42[ARTL_ART_case_statement_6] = true;
  ARTSet42[ARTL_ART_else_part] = true;
  ARTSet42[ARTL_ART_if_statement_19] = true;
  ARTSet42[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet184initialise() {
  ARTSet184 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet184, 0, artSetExtent, false);
  ARTSet184[ARTTS_function] = true;
  ARTSet184[ARTL_ART_function_heading] = true;
}

public void ARTSet33initialise() {
  ARTSet33 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet33, 0, artSetExtent, false);
  ARTSet33[ARTTS__LPAR] = true;
  ARTSet33[ARTTS__PLUS] = true;
  ARTSet33[ARTTS__MINUS] = true;
  ARTSet33[ARTTS_INTEGER] = true;
  ARTSet33[ARTTS_REAL] = true;
  ARTSet33[ARTTS_STRING] = true;
  ARTSet33[ARTTS_constant_ID] = true;
  ARTSet33[ARTTS_type_ID] = true;
  ARTSet33[ARTL_ART_character_string] = true;
  ARTSet33[ARTL_ART_constant] = true;
  ARTSet33[ARTL_ART_constant_7] = true;
  ARTSet33[ARTL_ART_constant_8] = true;
  ARTSet33[ARTL_ART_constant_ID] = true;
  ARTSet33[ARTL_ART_digit_sequence] = true;
  ARTSet33[ARTL_ART_enumerated_type] = true;
  ARTSet33[ARTL_ART_index_type] = true;
  ARTSet33[ARTL_ART_new_ordinal_type] = true;
  ARTSet33[ARTL_ART_ordinal_type] = true;
  ARTSet33[ARTL_ART_ordinal_type_ID] = true;
  ARTSet33[ARTL_ART_sign] = true;
  ARTSet33[ARTL_ART_subrange_type] = true;
  ARTSet33[ARTL_ART_type_ID] = true;
  ARTSet33[ARTL_ART_unsigned_integer] = true;
  ARTSet33[ARTL_ART_unsigned_number] = true;
  ARTSet33[ARTL_ART_unsigned_real] = true;
}

public void ARTSet440initialise() {
  ARTSet440 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet440, 0, artSetExtent, false);
  ARTSet440[ARTTS_tag_field] = true;
  ARTSet440[ARTL_ART_tag_field] = true;
}

public void ARTSet451initialise() {
  ARTSet451 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet451, 0, artSetExtent, false);
  ARTSet451[ARTTS__LPAR] = true;
  ARTSet451[ARTTS__PLUS] = true;
  ARTSet451[ARTTS__MINUS] = true;
  ARTSet451[ARTTS_INTEGER] = true;
  ARTSet451[ARTTS_REAL] = true;
  ARTSet451[ARTTS_STRING] = true;
  ARTSet451[ARTTS__LBRACK] = true;
  ARTSet451[ARTTS_constant_ID] = true;
  ARTSet451[ARTTS_field_designator_ID] = true;
  ARTSet451[ARTTS_function_ID] = true;
  ARTSet451[ARTTS_nil] = true;
  ARTSet451[ARTTS_not] = true;
  ARTSet451[ARTTS_variable_ID] = true;
  ARTSet451[ARTL_ART_character_string] = true;
  ARTSet451[ARTL_ART_component_variable] = true;
  ARTSet451[ARTL_ART_constant_ID] = true;
  ARTSet451[ARTL_ART_digit_sequence] = true;
  ARTSet451[ARTL_ART_entire_variable] = true;
  ARTSet451[ARTL_ART_expression] = true;
  ARTSet451[ARTL_ART_factor] = true;
  ARTSet451[ARTL_ART_field_designator] = true;
  ARTSet451[ARTL_ART_field_designator_ID] = true;
  ARTSet451[ARTL_ART_function_ID] = true;
  ARTSet451[ARTL_ART_function_designator] = true;
  ARTSet451[ARTL_ART_indexed_variable] = true;
  ARTSet451[ARTL_ART_set_constructor] = true;
  ARTSet451[ARTL_ART_sign] = true;
  ARTSet451[ARTL_ART_simple_expression] = true;
  ARTSet451[ARTL_ART_term] = true;
  ARTSet451[ARTL_ART_unsigned_constant] = true;
  ARTSet451[ARTL_ART_unsigned_integer] = true;
  ARTSet451[ARTL_ART_unsigned_number] = true;
  ARTSet451[ARTL_ART_unsigned_real] = true;
  ARTSet451[ARTL_ART_variable_ID] = true;
  ARTSet451[ARTL_ART_variable_access] = true;
  ARTSet451[ARTL_ART_write_parameter] = true;
}

public void ARTSet428initialise() {
  ARTSet428 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet428, 0, artSetExtent, false);
  ARTSet428[ARTTS_var] = true;
}

public void ARTSet207initialise() {
  ARTSet207 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet207, 0, artSetExtent, false);
  ARTSet207[ARTTS__COMMA] = true;
  ARTSet207[ARTTS__RBRACK] = true;
  ARTSet207[ARTL_ART_indexed_variable_20] = true;
}

public void ARTSet404initialise() {
  ARTSet404 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet404, 0, artSetExtent, false);
  ARTSet404[ARTTS_ID] = true;
  ARTSet404[ARTTS_begin] = true;
  ARTSet404[ARTTS_function] = true;
  ARTSet404[ARTTS_procedure] = true;
  ARTSet404[ARTTS_var] = true;
  ARTSet404[ARTL_ART_ID] = true;
  ARTSet404[ARTL_ART_compound_statement] = true;
  ARTSet404[ARTL_ART_function_declaration] = true;
  ARTSet404[ARTL_ART_function_heading] = true;
  ARTSet404[ARTL_ART_function_identification] = true;
  ARTSet404[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet404[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet404[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet404[ARTL_ART_procedure_declaration] = true;
  ARTSet404[ARTL_ART_procedure_heading] = true;
  ARTSet404[ARTL_ART_procedure_identification] = true;
  ARTSet404[ARTL_ART_statement_part] = true;
  ARTSet404[ARTL_ART_type_definition] = true;
  ARTSet404[ARTL_ART_type_definition_part_47] = true;
  ARTSet404[ARTL_ART_variable_declaration_part] = true;
  ARTSet404[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet74initialise() {
  ARTSet74 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet74, 0, artSetExtent, false);
  ARTSet74[ARTTS__SEMICOLON] = true;
  ARTSet74[ARTL_ART_case_statement_5] = true;
}

public void ARTSet147initialise() {
  ARTSet147 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet147, 0, artSetExtent, false);
  ARTSet147[ARTTS_ID] = true;
  ARTSet147[ARTTS_case] = true;
  ARTSet147[ARTL_ART_ID] = true;
  ARTSet147[ARTL_ART_ID_list] = true;
  ARTSet147[ARTL_ART_field_list_12] = true;
  ARTSet147[ARTL_ART_fixed_part] = true;
  ARTSet147[ARTL_ART_record_section] = true;
  ARTSet147[ARTL_ART_variant_part] = true;
}

public void ARTSet266initialise() {
  ARTSet266 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet266, 0, artSetExtent, false);
  ARTSet266[ARTTS_function] = true;
  ARTSet266[ARTTS_procedure] = true;
  ARTSet266[ARTL_ART_function_heading] = true;
  ARTSet266[ARTL_ART_procedure_heading] = true;
}

public void ARTSet449initialise() {
  ARTSet449 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet449, 0, artSetExtent, false);
  ARTSet449[ARTTS__RPAR] = true;
  ARTSet449[ARTTS__COMMA] = true;
  ARTSet449[ARTTS__COLON] = true;
  ARTSet449[ARTL_ART_write_parameter_54] = true;
  ARTSet449[ARTL_ART_write_parameter_list_57] = true;
  ARTSet449[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet456initialise() {
  ARTSet456 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet456, 0, artSetExtent, false);
  ARTSet456[ARTTS__LPAR] = true;
  ARTSet456[ARTTS__SEMICOLON] = true;
  ARTSet456[ARTTS_else] = true;
  ARTSet456[ARTTS_end] = true;
  ARTSet456[ARTTS_until] = true;
  ARTSet456[ARTL_ART_case_statement_5] = true;
  ARTSet456[ARTL_ART_case_statement_6] = true;
  ARTSet456[ARTL_ART_else_part] = true;
  ARTSet456[ARTL_ART_if_statement_19] = true;
  ARTSet456[ARTL_ART_statement_sequence_44] = true;
  ARTSet456[ARTL_ART_writeln_parameter_list_55] = true;
}

public void ARTSet100initialise() {
  ARTSet100 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet100, 0, artSetExtent, false);
  ARTSet100[ARTTS__PLUS] = true;
  ARTSet100[ARTTS__MINUS] = true;
  ARTSet100[ARTTS_INTEGER] = true;
  ARTSet100[ARTTS_REAL] = true;
  ARTSet100[ARTTS_constant_ID] = true;
  ARTSet100[ARTL_ART_constant_7] = true;
  ARTSet100[ARTL_ART_constant_8] = true;
  ARTSet100[ARTL_ART_constant_ID] = true;
  ARTSet100[ARTL_ART_digit_sequence] = true;
  ARTSet100[ARTL_ART_sign] = true;
  ARTSet100[ARTL_ART_unsigned_integer] = true;
  ARTSet100[ARTL_ART_unsigned_number] = true;
  ARTSet100[ARTL_ART_unsigned_real] = true;
}

public void ARTSet447initialise() {
  ARTSet447 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet447, 0, artSetExtent, false);
  ARTSet447[ARTTS__COLON] = true;
  ARTSet447[ARTL_ART_write_parameter_53] = true;
}

public void ARTSet228initialise() {
  ARTSet228 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet228, 0, artSetExtent, false);
  ARTSet228[ARTTS__PERIOD_PERIOD] = true;
  ARTSet228[ARTL_ART_member_designator_23] = true;
}

public void ARTSet138initialise() {
  ARTSet138 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet138, 0, artSetExtent, false);
  ARTSet138[ARTTS_function_ID] = true;
  ARTSet138[ARTL_ART_function_ID] = true;
  ARTSet138[ARTL_ART_function_designator] = true;
}

public void ARTSet135initialise() {
  ARTSet135 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet135, 0, artSetExtent, false);
  ARTSet135[ARTTS__LT] = true;
  ARTSet135[ARTTS__LT_EQUAL] = true;
  ARTSet135[ARTTS__LT_GT] = true;
  ARTSet135[ARTTS__EQUAL] = true;
  ARTSet135[ARTTS__GT] = true;
  ARTSet135[ARTTS__GT_EQUAL] = true;
  ARTSet135[ARTTS_in] = true;
  ARTSet135[ARTL_ART_relational_operator] = true;
}

public void ARTSet7initialise() {
  ARTSet7 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet7, 0, artSetExtent, false);
  ARTSet7[ARTTS_ID] = true;
  ARTSet7[ARTL_ART_ID] = true;
}

public void ARTSet349initialise() {
  ARTSet349 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet349, 0, artSetExtent, false);
  ARTSet349[ARTTS__PLUS] = true;
  ARTSet349[ARTTS__MINUS] = true;
  ARTSet349[ARTTS_or] = true;
  ARTSet349[ARTL_ART_adding_operator] = true;
  ARTSet349[ARTL_ART_simple_expression_39] = true;
}

public void ARTSet213initialise() {
  ARTSet213 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet213, 0, artSetExtent, false);
  ARTSet213[ARTTS__COMMA] = true;
  ARTSet213[ARTL_ART_indexed_variable_20] = true;
}

public void ARTSet73initialise() {
  ARTSet73 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet73, 0, artSetExtent, false);
  ARTSet73[ARTTS__PLUS] = true;
  ARTSet73[ARTTS__MINUS] = true;
  ARTSet73[ARTTS_INTEGER] = true;
  ARTSet73[ARTTS_REAL] = true;
  ARTSet73[ARTTS_STRING] = true;
  ARTSet73[ARTTS_constant_ID] = true;
  ARTSet73[ARTL_ART_case_constant] = true;
  ARTSet73[ARTL_ART_case_constant_list] = true;
  ARTSet73[ARTL_ART_case_list_element] = true;
  ARTSet73[ARTL_ART_character_string] = true;
  ARTSet73[ARTL_ART_constant] = true;
  ARTSet73[ARTL_ART_constant_7] = true;
  ARTSet73[ARTL_ART_constant_8] = true;
  ARTSet73[ARTL_ART_constant_ID] = true;
  ARTSet73[ARTL_ART_digit_sequence] = true;
  ARTSet73[ARTL_ART_sign] = true;
  ARTSet73[ARTL_ART_unsigned_integer] = true;
  ARTSet73[ARTL_ART_unsigned_number] = true;
  ARTSet73[ARTL_ART_unsigned_real] = true;
}

public void ARTSet302initialise() {
  ARTSet302 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet302, 0, artSetExtent, false);
  ARTSet302[ARTTS_record] = true;
}

public void ARTSet129initialise() {
  ARTSet129 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet129, 0, artSetExtent, false);
  ARTSet129[ARTTS_ID] = true;
  ARTSet129[ARTL_ART_ID] = true;
  ARTSet129[ARTL_ART_ID_list] = true;
}

public void ARTSet48initialise() {
  ARTSet48 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet48, 0, artSetExtent, false);
  ARTSet48[ARTTS_begin] = true;
  ARTSet48[ARTTS_const] = true;
  ARTSet48[ARTTS_function] = true;
  ARTSet48[ARTTS_label] = true;
  ARTSet48[ARTTS_procedure] = true;
  ARTSet48[ARTTS_type] = true;
  ARTSet48[ARTTS_var] = true;
  ARTSet48[ARTL_ART_compound_statement] = true;
  ARTSet48[ARTL_ART_constant_definition_part] = true;
  ARTSet48[ARTL_ART_constant_definition_part_9] = true;
  ARTSet48[ARTL_ART_function_declaration] = true;
  ARTSet48[ARTL_ART_function_heading] = true;
  ARTSet48[ARTL_ART_function_identification] = true;
  ARTSet48[ARTL_ART_label_declaration_part] = true;
  ARTSet48[ARTL_ART_label_declaration_part_21] = true;
  ARTSet48[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet48[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet48[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet48[ARTL_ART_procedure_declaration] = true;
  ARTSet48[ARTL_ART_procedure_heading] = true;
  ARTSet48[ARTL_ART_procedure_identification] = true;
  ARTSet48[ARTL_ART_statement_part] = true;
  ARTSet48[ARTL_ART_type_definition_part] = true;
  ARTSet48[ARTL_ART_type_definition_part_46] = true;
  ARTSet48[ARTL_ART_variable_declaration_part] = true;
  ARTSet48[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet300initialise() {
  ARTSet300 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet300, 0, artSetExtent, false);
  ARTSet300[ARTTS__COMMA] = true;
  ARTSet300[ARTL_ART_readln_parameter_list_33] = true;
}

public void ARTSet250initialise() {
  ARTSet250 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet250, 0, artSetExtent, false);
  ARTSet250[ARTTS__RPAR] = true;
  ARTSet250[ARTTS__COMMA] = true;
  ARTSet250[ARTTS__SEMICOLON] = true;
  ARTSet250[ARTTS__RBRACK] = true;
  ARTSet250[ARTTS_end] = true;
  ARTSet250[ARTTS_of] = true;
  ARTSet250[ARTL_ART_array_type_2] = true;
  ARTSet250[ARTL_ART_unpacked_conformant_array_schema_48] = true;
}

public void ARTSet446initialise() {
  ARTSet446 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet446, 0, artSetExtent, false);
  ARTSet446[ARTTS__RPAR] = true;
  ARTSet446[ARTTS__COMMA] = true;
  ARTSet446[ARTTS__COLON] = true;
  ARTSet446[ARTL_ART_write_parameter_53] = true;
  ARTSet446[ARTL_ART_write_parameter_list_57] = true;
  ARTSet446[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet325initialise() {
  ARTSet325 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet325, 0, artSetExtent, false);
  ARTSet325[ARTTS__LPAR] = true;
  ARTSet325[ARTTS__PLUS] = true;
  ARTSet325[ARTTS__MINUS] = true;
  ARTSet325[ARTTS_INTEGER] = true;
  ARTSet325[ARTTS_REAL] = true;
  ARTSet325[ARTTS_STRING] = true;
  ARTSet325[ARTTS__LBRACK] = true;
  ARTSet325[ARTTS__RBRACK] = true;
  ARTSet325[ARTTS_constant_ID] = true;
  ARTSet325[ARTTS_field_designator_ID] = true;
  ARTSet325[ARTTS_function_ID] = true;
  ARTSet325[ARTTS_nil] = true;
  ARTSet325[ARTTS_not] = true;
  ARTSet325[ARTTS_variable_ID] = true;
  ARTSet325[ARTL_ART_character_string] = true;
  ARTSet325[ARTL_ART_component_variable] = true;
  ARTSet325[ARTL_ART_constant_ID] = true;
  ARTSet325[ARTL_ART_digit_sequence] = true;
  ARTSet325[ARTL_ART_entire_variable] = true;
  ARTSet325[ARTL_ART_expression] = true;
  ARTSet325[ARTL_ART_factor] = true;
  ARTSet325[ARTL_ART_field_designator] = true;
  ARTSet325[ARTL_ART_field_designator_ID] = true;
  ARTSet325[ARTL_ART_function_ID] = true;
  ARTSet325[ARTL_ART_function_designator] = true;
  ARTSet325[ARTL_ART_indexed_variable] = true;
  ARTSet325[ARTL_ART_member_designator] = true;
  ARTSet325[ARTL_ART_set_constructor] = true;
  ARTSet325[ARTL_ART_set_constructor_35] = true;
  ARTSet325[ARTL_ART_sign] = true;
  ARTSet325[ARTL_ART_simple_expression] = true;
  ARTSet325[ARTL_ART_term] = true;
  ARTSet325[ARTL_ART_unsigned_constant] = true;
  ARTSet325[ARTL_ART_unsigned_integer] = true;
  ARTSet325[ARTL_ART_unsigned_number] = true;
  ARTSet325[ARTL_ART_unsigned_real] = true;
  ARTSet325[ARTL_ART_variable_ID] = true;
  ARTSet325[ARTL_ART_variable_access] = true;
}

public void ARTSet330initialise() {
  ARTSet330 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet330, 0, artSetExtent, false);
  ARTSet330[ARTTS__COMMA] = true;
  ARTSet330[ARTL_ART_set_constructor_36] = true;
}

public void ARTSet395initialise() {
  ARTSet395 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet395, 0, artSetExtent, false);
  ARTSet395[ARTTS__STAR] = true;
  ARTSet395[ARTTS__SLASH] = true;
  ARTSet395[ARTTS_and] = true;
  ARTSet395[ARTTS_div] = true;
  ARTSet395[ARTTS_mod] = true;
  ARTSet395[ARTL_ART_multiplying_operator] = true;
}

public void ARTSet457initialise() {
  ARTSet457 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet457, 0, artSetExtent, false);
  ARTSet457[ARTTS__RPAR] = true;
  ARTSet457[ARTTS__COMMA] = true;
  ARTSet457[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet17initialise() {
  ARTSet17 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet17, 0, artSetExtent, false);
  ARTSet17[ARTTS__LPAR] = true;
}

public void ARTSet21initialise() {
  ARTSet21 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet21, 0, artSetExtent, false);
  ARTSet21[ARTTS__RPAR] = true;
}

public void ARTSet180initialise() {
  ARTSet180 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet180, 0, artSetExtent, false);
  ARTSet180[ARTTS_function_ID] = true;
}

public void ARTSet230initialise() {
  ARTSet230 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet230, 0, artSetExtent, false);
  ARTSet230[ARTTS__STAR] = true;
}

public void ARTSet26initialise() {
  ARTSet26 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet26, 0, artSetExtent, false);
  ARTSet26[ARTTS__PLUS] = true;
}

public void ARTSet13initialise() {
  ARTSet13 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet13, 0, artSetExtent, false);
  ARTSet13[ARTTS__COMMA] = true;
}

public void ARTSet27initialise() {
  ARTSet27 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet27, 0, artSetExtent, false);
  ARTSet27[ARTTS__MINUS] = true;
}

public void ARTSet75initialise() {
  ARTSet75 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet75, 0, artSetExtent, false);
  ARTSet75[ARTTS__SEMICOLON] = true;
  ARTSet75[ARTTS_end] = true;
  ARTSet75[ARTL_ART_case_statement_6] = true;
}

public void ARTSet69initialise() {
  ARTSet69 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet69, 0, artSetExtent, false);
  ARTSet69[ARTTS_INTEGER] = true;
  ARTSet69[ARTTS_begin] = true;
  ARTSet69[ARTTS_case] = true;
  ARTSet69[ARTTS_field_designator_ID] = true;
  ARTSet69[ARTTS_for] = true;
  ARTSet69[ARTTS_function_ID] = true;
  ARTSet69[ARTTS_goto] = true;
  ARTSet69[ARTTS_if] = true;
  ARTSet69[ARTTS_procedure_ID] = true;
  ARTSet69[ARTTS_read] = true;
  ARTSet69[ARTTS_readln] = true;
  ARTSet69[ARTTS_repeat] = true;
  ARTSet69[ARTTS_variable_ID] = true;
  ARTSet69[ARTTS_while] = true;
  ARTSet69[ARTTS_with] = true;
  ARTSet69[ARTTS_write] = true;
  ARTSet69[ARTTS_writeln] = true;
  ARTSet69[ARTL_ART_assignment_statement] = true;
  ARTSet69[ARTL_ART_assignment_statement_3] = true;
  ARTSet69[ARTL_ART_case_statement] = true;
  ARTSet69[ARTL_ART_component_variable] = true;
  ARTSet69[ARTL_ART_compound_statement] = true;
  ARTSet69[ARTL_ART_conditional_statement] = true;
  ARTSet69[ARTL_ART_digit_sequence] = true;
  ARTSet69[ARTL_ART_entire_variable] = true;
  ARTSet69[ARTL_ART_field_designator] = true;
  ARTSet69[ARTL_ART_field_designator_ID] = true;
  ARTSet69[ARTL_ART_for_statement] = true;
  ARTSet69[ARTL_ART_function_ID] = true;
  ARTSet69[ARTL_ART_goto_statement] = true;
  ARTSet69[ARTL_ART_if_statement] = true;
  ARTSet69[ARTL_ART_indexed_variable] = true;
  ARTSet69[ARTL_ART_label] = true;
  ARTSet69[ARTL_ART_procedure_ID] = true;
  ARTSet69[ARTL_ART_procedure_statement] = true;
  ARTSet69[ARTL_ART_repeat_statement] = true;
  ARTSet69[ARTL_ART_repetitive_statement] = true;
  ARTSet69[ARTL_ART_simple_statement] = true;
  ARTSet69[ARTL_ART_simple_statement_41] = true;
  ARTSet69[ARTL_ART_statement] = true;
  ARTSet69[ARTL_ART_statement_42] = true;
  ARTSet69[ARTL_ART_statement_43] = true;
  ARTSet69[ARTL_ART_structured_statement] = true;
  ARTSet69[ARTL_ART_variable_ID] = true;
  ARTSet69[ARTL_ART_variable_access] = true;
  ARTSet69[ARTL_ART_while_statement] = true;
  ARTSet69[ARTL_ART_with_statement] = true;
}

public void ARTSet143initialise() {
  ARTSet143 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet143, 0, artSetExtent, false);
  ARTSet143[ARTTS__PERIOD] = true;
}

public void ARTSet231initialise() {
  ARTSet231 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet231, 0, artSetExtent, false);
  ARTSet231[ARTTS__SLASH] = true;
}

public void ARTSet297initialise() {
  ARTSet297 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet297, 0, artSetExtent, false);
  ARTSet297[ARTTS__LPAR] = true;
  ARTSet297[ARTL_ART_readln_parameter_list_32] = true;
}

public void ARTSet72initialise() {
  ARTSet72 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet72, 0, artSetExtent, false);
  ARTSet72[ARTTS__LPAR] = true;
  ARTSet72[ARTTS__PLUS] = true;
  ARTSet72[ARTTS__MINUS] = true;
  ARTSet72[ARTTS_INTEGER] = true;
  ARTSet72[ARTTS_REAL] = true;
  ARTSet72[ARTTS_STRING] = true;
  ARTSet72[ARTTS__LBRACK] = true;
  ARTSet72[ARTTS_constant_ID] = true;
  ARTSet72[ARTTS_field_designator_ID] = true;
  ARTSet72[ARTTS_function_ID] = true;
  ARTSet72[ARTTS_nil] = true;
  ARTSet72[ARTTS_not] = true;
  ARTSet72[ARTTS_variable_ID] = true;
  ARTSet72[ARTL_ART_case_index] = true;
  ARTSet72[ARTL_ART_character_string] = true;
  ARTSet72[ARTL_ART_component_variable] = true;
  ARTSet72[ARTL_ART_constant_ID] = true;
  ARTSet72[ARTL_ART_digit_sequence] = true;
  ARTSet72[ARTL_ART_entire_variable] = true;
  ARTSet72[ARTL_ART_expression] = true;
  ARTSet72[ARTL_ART_factor] = true;
  ARTSet72[ARTL_ART_field_designator] = true;
  ARTSet72[ARTL_ART_field_designator_ID] = true;
  ARTSet72[ARTL_ART_function_ID] = true;
  ARTSet72[ARTL_ART_function_designator] = true;
  ARTSet72[ARTL_ART_indexed_variable] = true;
  ARTSet72[ARTL_ART_set_constructor] = true;
  ARTSet72[ARTL_ART_sign] = true;
  ARTSet72[ARTL_ART_simple_expression] = true;
  ARTSet72[ARTL_ART_term] = true;
  ARTSet72[ARTL_ART_unsigned_constant] = true;
  ARTSet72[ARTL_ART_unsigned_integer] = true;
  ARTSet72[ARTL_ART_unsigned_number] = true;
  ARTSet72[ARTL_ART_unsigned_real] = true;
  ARTSet72[ARTL_ART_variable_ID] = true;
  ARTSet72[ARTL_ART_variable_access] = true;
}

public void ARTSet365initialise() {
  ARTSet365 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet365, 0, artSetExtent, false);
  ARTSet365[ARTTS_begin] = true;
  ARTSet365[ARTTS_case] = true;
  ARTSet365[ARTTS_field_designator_ID] = true;
  ARTSet365[ARTTS_for] = true;
  ARTSet365[ARTTS_function_ID] = true;
  ARTSet365[ARTTS_goto] = true;
  ARTSet365[ARTTS_if] = true;
  ARTSet365[ARTTS_procedure_ID] = true;
  ARTSet365[ARTTS_read] = true;
  ARTSet365[ARTTS_readln] = true;
  ARTSet365[ARTTS_repeat] = true;
  ARTSet365[ARTTS_variable_ID] = true;
  ARTSet365[ARTTS_while] = true;
  ARTSet365[ARTTS_with] = true;
  ARTSet365[ARTTS_write] = true;
  ARTSet365[ARTTS_writeln] = true;
  ARTSet365[ARTL_ART_assignment_statement] = true;
  ARTSet365[ARTL_ART_assignment_statement_3] = true;
  ARTSet365[ARTL_ART_case_statement] = true;
  ARTSet365[ARTL_ART_component_variable] = true;
  ARTSet365[ARTL_ART_compound_statement] = true;
  ARTSet365[ARTL_ART_conditional_statement] = true;
  ARTSet365[ARTL_ART_entire_variable] = true;
  ARTSet365[ARTL_ART_field_designator] = true;
  ARTSet365[ARTL_ART_field_designator_ID] = true;
  ARTSet365[ARTL_ART_for_statement] = true;
  ARTSet365[ARTL_ART_function_ID] = true;
  ARTSet365[ARTL_ART_goto_statement] = true;
  ARTSet365[ARTL_ART_if_statement] = true;
  ARTSet365[ARTL_ART_indexed_variable] = true;
  ARTSet365[ARTL_ART_procedure_ID] = true;
  ARTSet365[ARTL_ART_procedure_statement] = true;
  ARTSet365[ARTL_ART_repeat_statement] = true;
  ARTSet365[ARTL_ART_repetitive_statement] = true;
  ARTSet365[ARTL_ART_simple_statement] = true;
  ARTSet365[ARTL_ART_simple_statement_41] = true;
  ARTSet365[ARTL_ART_statement_43] = true;
  ARTSet365[ARTL_ART_structured_statement] = true;
  ARTSet365[ARTL_ART_variable_ID] = true;
  ARTSet365[ARTL_ART_variable_access] = true;
  ARTSet365[ARTL_ART_while_statement] = true;
  ARTSet365[ARTL_ART_with_statement] = true;
}

public void ARTSet85initialise() {
  ARTSet85 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet85, 0, artSetExtent, false);
  ARTSet85[ARTTS_begin] = true;
}

public void ARTSet214initialise() {
  ARTSet214 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet214, 0, artSetExtent, false);
  ARTSet214[ARTTS__COMMA] = true;
  ARTSet214[ARTTS__COLON] = true;
  ARTSet214[ARTTS__SEMICOLON] = true;
  ARTSet214[ARTTS_else] = true;
  ARTSet214[ARTTS_end] = true;
  ARTSet214[ARTTS_until] = true;
  ARTSet214[ARTL_ART_case_statement_5] = true;
  ARTSet214[ARTL_ART_case_statement_6] = true;
  ARTSet214[ARTL_ART_else_part] = true;
  ARTSet214[ARTL_ART_if_statement_19] = true;
  ARTSet214[ARTL_ART_label_declaration_part_22] = true;
  ARTSet214[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet458initialise() {
  ARTSet458 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet458, 0, artSetExtent, false);
  ARTSet458[ARTTS__COMMA] = true;
  ARTSet458[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet63initialise() {
  ARTSet63 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet63, 0, artSetExtent, false);
  ARTSet63[ARTTS__COLON] = true;
}

public void ARTSet79initialise() {
  ARTSet79 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet79, 0, artSetExtent, false);
  ARTSet79[ARTTS__SEMICOLON] = true;
}

public void ARTSet369initialise() {
  ARTSet369 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet369, 0, artSetExtent, false);
  ARTSet369[ARTTS__SEMICOLON] = true;
  ARTSet369[ARTTS_else] = true;
  ARTSet369[ARTTS_end] = true;
  ARTSet369[ARTTS_field_designator_ID] = true;
  ARTSet369[ARTTS_function_ID] = true;
  ARTSet369[ARTTS_goto] = true;
  ARTSet369[ARTTS_procedure_ID] = true;
  ARTSet369[ARTTS_read] = true;
  ARTSet369[ARTTS_readln] = true;
  ARTSet369[ARTTS_until] = true;
  ARTSet369[ARTTS_variable_ID] = true;
  ARTSet369[ARTTS_write] = true;
  ARTSet369[ARTTS_writeln] = true;
  ARTSet369[ARTL_ART_assignment_statement] = true;
  ARTSet369[ARTL_ART_assignment_statement_3] = true;
  ARTSet369[ARTL_ART_case_statement_5] = true;
  ARTSet369[ARTL_ART_case_statement_6] = true;
  ARTSet369[ARTL_ART_component_variable] = true;
  ARTSet369[ARTL_ART_else_part] = true;
  ARTSet369[ARTL_ART_entire_variable] = true;
  ARTSet369[ARTL_ART_field_designator] = true;
  ARTSet369[ARTL_ART_field_designator_ID] = true;
  ARTSet369[ARTL_ART_function_ID] = true;
  ARTSet369[ARTL_ART_goto_statement] = true;
  ARTSet369[ARTL_ART_if_statement_19] = true;
  ARTSet369[ARTL_ART_indexed_variable] = true;
  ARTSet369[ARTL_ART_procedure_ID] = true;
  ARTSet369[ARTL_ART_procedure_statement] = true;
  ARTSet369[ARTL_ART_simple_statement] = true;
  ARTSet369[ARTL_ART_simple_statement_41] = true;
  ARTSet369[ARTL_ART_statement_sequence_44] = true;
  ARTSet369[ARTL_ART_variable_ID] = true;
  ARTSet369[ARTL_ART_variable_access] = true;
}

public void ARTSet311initialise() {
  ARTSet311 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet311, 0, artSetExtent, false);
  ARTSet311[ARTTS__LT] = true;
}

public void ARTSet110initialise() {
  ARTSet110 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet110, 0, artSetExtent, false);
  ARTSet110[ARTTS__EQUAL] = true;
}

public void ARTSet4initialise() {
  ARTSet4 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet4, 0, artSetExtent, false);
}

public void ARTSet312initialise() {
  ARTSet312 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet312, 0, artSetExtent, false);
  ARTSet312[ARTTS__GT] = true;
}

public void ARTSet299initialise() {
  ARTSet299 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet299, 0, artSetExtent, false);
  ARTSet299[ARTTS__RPAR] = true;
  ARTSet299[ARTTS__COMMA] = true;
  ARTSet299[ARTL_ART_readln_parameter_list_33] = true;
}

public void ARTSet19initialise() {
  ARTSet19 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet19, 0, artSetExtent, false);
  ARTSet19[ARTTS__LPAR] = true;
  ARTSet19[ARTTS__PLUS] = true;
  ARTSet19[ARTTS__MINUS] = true;
  ARTSet19[ARTTS_INTEGER] = true;
  ARTSet19[ARTTS_REAL] = true;
  ARTSet19[ARTTS_STRING] = true;
  ARTSet19[ARTTS__LBRACK] = true;
  ARTSet19[ARTTS_constant_ID] = true;
  ARTSet19[ARTTS_field_designator_ID] = true;
  ARTSet19[ARTTS_function_ID] = true;
  ARTSet19[ARTTS_nil] = true;
  ARTSet19[ARTTS_not] = true;
  ARTSet19[ARTTS_procedure_ID] = true;
  ARTSet19[ARTTS_variable_ID] = true;
  ARTSet19[ARTL_ART_actual_parameter] = true;
  ARTSet19[ARTL_ART_character_string] = true;
  ARTSet19[ARTL_ART_component_variable] = true;
  ARTSet19[ARTL_ART_constant_ID] = true;
  ARTSet19[ARTL_ART_digit_sequence] = true;
  ARTSet19[ARTL_ART_entire_variable] = true;
  ARTSet19[ARTL_ART_expression] = true;
  ARTSet19[ARTL_ART_factor] = true;
  ARTSet19[ARTL_ART_field_designator] = true;
  ARTSet19[ARTL_ART_field_designator_ID] = true;
  ARTSet19[ARTL_ART_function_ID] = true;
  ARTSet19[ARTL_ART_function_designator] = true;
  ARTSet19[ARTL_ART_indexed_variable] = true;
  ARTSet19[ARTL_ART_procedure_ID] = true;
  ARTSet19[ARTL_ART_set_constructor] = true;
  ARTSet19[ARTL_ART_sign] = true;
  ARTSet19[ARTL_ART_simple_expression] = true;
  ARTSet19[ARTL_ART_term] = true;
  ARTSet19[ARTL_ART_unsigned_constant] = true;
  ARTSet19[ARTL_ART_unsigned_integer] = true;
  ARTSet19[ARTL_ART_unsigned_number] = true;
  ARTSet19[ARTL_ART_unsigned_real] = true;
  ARTSet19[ARTL_ART_variable_ID] = true;
  ARTSet19[ARTL_ART_variable_access] = true;
}

public void ARTSet354initialise() {
  ARTSet354 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet354, 0, artSetExtent, false);
  ARTSet354[ARTTS__SEMICOLON] = true;
  ARTSet354[ARTTS_else] = true;
  ARTSet354[ARTTS_end] = true;
  ARTSet354[ARTTS_field_designator_ID] = true;
  ARTSet354[ARTTS_function_ID] = true;
  ARTSet354[ARTTS_until] = true;
  ARTSet354[ARTTS_variable_ID] = true;
  ARTSet354[ARTL_ART_assignment_statement] = true;
  ARTSet354[ARTL_ART_assignment_statement_3] = true;
  ARTSet354[ARTL_ART_case_statement_5] = true;
  ARTSet354[ARTL_ART_case_statement_6] = true;
  ARTSet354[ARTL_ART_component_variable] = true;
  ARTSet354[ARTL_ART_else_part] = true;
  ARTSet354[ARTL_ART_entire_variable] = true;
  ARTSet354[ARTL_ART_field_designator] = true;
  ARTSet354[ARTL_ART_field_designator_ID] = true;
  ARTSet354[ARTL_ART_function_ID] = true;
  ARTSet354[ARTL_ART_if_statement_19] = true;
  ARTSet354[ARTL_ART_indexed_variable] = true;
  ARTSet354[ARTL_ART_simple_statement_41] = true;
  ARTSet354[ARTL_ART_statement_sequence_44] = true;
  ARTSet354[ARTL_ART_variable_ID] = true;
  ARTSet354[ARTL_ART_variable_access] = true;
}

public void ARTSet257initialise() {
  ARTSet257 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet257, 0, artSetExtent, false);
  ARTSet257[ARTTS_function] = true;
  ARTSet257[ARTTS_procedure] = true;
  ARTSet257[ARTL_ART_function_declaration] = true;
  ARTSet257[ARTL_ART_function_heading] = true;
  ARTSet257[ARTL_ART_function_identification] = true;
  ARTSet257[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet257[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet257[ARTL_ART_procedure_declaration] = true;
  ARTSet257[ARTL_ART_procedure_heading] = true;
  ARTSet257[ARTL_ART_procedure_identification] = true;
}

public void ARTSet116initialise() {
  ARTSet116 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet116, 0, artSetExtent, false);
  ARTSet116[ARTTS_ID] = true;
  ARTSet116[ARTL_ART_ID] = true;
  ARTSet116[ARTL_ART_constant_definition] = true;
}

public void ARTSet137initialise() {
  ARTSet137 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet137, 0, artSetExtent, false);
  ARTSet137[ARTTS_INTEGER] = true;
  ARTSet137[ARTTS_REAL] = true;
  ARTSet137[ARTTS_STRING] = true;
  ARTSet137[ARTTS_constant_ID] = true;
  ARTSet137[ARTTS_nil] = true;
  ARTSet137[ARTL_ART_character_string] = true;
  ARTSet137[ARTL_ART_constant_ID] = true;
  ARTSet137[ARTL_ART_digit_sequence] = true;
  ARTSet137[ARTL_ART_unsigned_constant] = true;
  ARTSet137[ARTL_ART_unsigned_integer] = true;
  ARTSet137[ARTL_ART_unsigned_number] = true;
  ARTSet137[ARTL_ART_unsigned_real] = true;
}

public void ARTSet327initialise() {
  ARTSet327 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet327, 0, artSetExtent, false);
  ARTSet327[ARTTS__LPAR] = true;
  ARTSet327[ARTTS__PLUS] = true;
  ARTSet327[ARTTS__MINUS] = true;
  ARTSet327[ARTTS_INTEGER] = true;
  ARTSet327[ARTTS_REAL] = true;
  ARTSet327[ARTTS_STRING] = true;
  ARTSet327[ARTTS__LBRACK] = true;
  ARTSet327[ARTTS_constant_ID] = true;
  ARTSet327[ARTTS_field_designator_ID] = true;
  ARTSet327[ARTTS_function_ID] = true;
  ARTSet327[ARTTS_nil] = true;
  ARTSet327[ARTTS_not] = true;
  ARTSet327[ARTTS_variable_ID] = true;
  ARTSet327[ARTL_ART_character_string] = true;
  ARTSet327[ARTL_ART_component_variable] = true;
  ARTSet327[ARTL_ART_constant_ID] = true;
  ARTSet327[ARTL_ART_digit_sequence] = true;
  ARTSet327[ARTL_ART_entire_variable] = true;
  ARTSet327[ARTL_ART_expression] = true;
  ARTSet327[ARTL_ART_factor] = true;
  ARTSet327[ARTL_ART_field_designator] = true;
  ARTSet327[ARTL_ART_field_designator_ID] = true;
  ARTSet327[ARTL_ART_function_ID] = true;
  ARTSet327[ARTL_ART_function_designator] = true;
  ARTSet327[ARTL_ART_indexed_variable] = true;
  ARTSet327[ARTL_ART_member_designator] = true;
  ARTSet327[ARTL_ART_set_constructor] = true;
  ARTSet327[ARTL_ART_sign] = true;
  ARTSet327[ARTL_ART_simple_expression] = true;
  ARTSet327[ARTL_ART_term] = true;
  ARTSet327[ARTL_ART_unsigned_constant] = true;
  ARTSet327[ARTL_ART_unsigned_integer] = true;
  ARTSet327[ARTL_ART_unsigned_number] = true;
  ARTSet327[ARTL_ART_unsigned_real] = true;
  ARTSet327[ARTL_ART_variable_ID] = true;
  ARTSet327[ARTL_ART_variable_access] = true;
}

public void ARTSet418initialise() {
  ARTSet418 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet418, 0, artSetExtent, false);
  ARTSet418[ARTTS_set] = true;
  ARTSet418[ARTL_ART_set_type] = true;
}

public void ARTSet87initialise() {
  ARTSet87 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet87, 0, artSetExtent, false);
  ARTSet87[ARTTS__SEMICOLON] = true;
  ARTSet87[ARTTS_INTEGER] = true;
  ARTSet87[ARTTS_begin] = true;
  ARTSet87[ARTTS_case] = true;
  ARTSet87[ARTTS_end] = true;
  ARTSet87[ARTTS_field_designator_ID] = true;
  ARTSet87[ARTTS_for] = true;
  ARTSet87[ARTTS_function_ID] = true;
  ARTSet87[ARTTS_goto] = true;
  ARTSet87[ARTTS_if] = true;
  ARTSet87[ARTTS_procedure_ID] = true;
  ARTSet87[ARTTS_read] = true;
  ARTSet87[ARTTS_readln] = true;
  ARTSet87[ARTTS_repeat] = true;
  ARTSet87[ARTTS_variable_ID] = true;
  ARTSet87[ARTTS_while] = true;
  ARTSet87[ARTTS_with] = true;
  ARTSet87[ARTTS_write] = true;
  ARTSet87[ARTTS_writeln] = true;
  ARTSet87[ARTL_ART_assignment_statement] = true;
  ARTSet87[ARTL_ART_assignment_statement_3] = true;
  ARTSet87[ARTL_ART_case_statement] = true;
  ARTSet87[ARTL_ART_component_variable] = true;
  ARTSet87[ARTL_ART_compound_statement] = true;
  ARTSet87[ARTL_ART_conditional_statement] = true;
  ARTSet87[ARTL_ART_digit_sequence] = true;
  ARTSet87[ARTL_ART_entire_variable] = true;
  ARTSet87[ARTL_ART_field_designator] = true;
  ARTSet87[ARTL_ART_field_designator_ID] = true;
  ARTSet87[ARTL_ART_for_statement] = true;
  ARTSet87[ARTL_ART_function_ID] = true;
  ARTSet87[ARTL_ART_goto_statement] = true;
  ARTSet87[ARTL_ART_if_statement] = true;
  ARTSet87[ARTL_ART_indexed_variable] = true;
  ARTSet87[ARTL_ART_label] = true;
  ARTSet87[ARTL_ART_procedure_ID] = true;
  ARTSet87[ARTL_ART_procedure_statement] = true;
  ARTSet87[ARTL_ART_repeat_statement] = true;
  ARTSet87[ARTL_ART_repetitive_statement] = true;
  ARTSet87[ARTL_ART_simple_statement] = true;
  ARTSet87[ARTL_ART_simple_statement_41] = true;
  ARTSet87[ARTL_ART_statement] = true;
  ARTSet87[ARTL_ART_statement_42] = true;
  ARTSet87[ARTL_ART_statement_43] = true;
  ARTSet87[ARTL_ART_statement_sequence] = true;
  ARTSet87[ARTL_ART_statement_sequence_44] = true;
  ARTSet87[ARTL_ART_structured_statement] = true;
  ARTSet87[ARTL_ART_variable_ID] = true;
  ARTSet87[ARTL_ART_variable_access] = true;
  ARTSet87[ARTL_ART_while_statement] = true;
  ARTSet87[ARTL_ART_with_statement] = true;
}

public void ARTSet32initialise() {
  ARTSet32 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet32, 0, artSetExtent, false);
  ARTSet32[ARTTS__LBRACK] = true;
}

public void ARTSet36initialise() {
  ARTSet36 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet36, 0, artSetExtent, false);
  ARTSet36[ARTTS__RBRACK] = true;
}

public void ARTSet238initialise() {
  ARTSet238 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet238, 0, artSetExtent, false);
  ARTSet238[ARTTS__UPARROW] = true;
}

public void ARTSet295initialise() {
  ARTSet295 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet295, 0, artSetExtent, false);
  ARTSet295[ARTTS__COMMA] = true;
  ARTSet295[ARTL_ART_read_parameter_list_31] = true;
}

public void ARTSet331initialise() {
  ARTSet331 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet331, 0, artSetExtent, false);
  ARTSet331[ARTTS_set] = true;
}

public void ARTSet294initialise() {
  ARTSet294 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet294, 0, artSetExtent, false);
  ARTSet294[ARTTS__RPAR] = true;
  ARTSet294[ARTTS__COMMA] = true;
  ARTSet294[ARTL_ART_read_parameter_list_31] = true;
}

public void ARTSet2initialise() {
  ARTSet2 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet2, 0, artSetExtent, false);
  ARTSet2[ARTTS__LPAR] = true;
  ARTSet2[ARTTS__PLUS] = true;
  ARTSet2[ARTTS__MINUS] = true;
  ARTSet2[ARTTS_INTEGER] = true;
  ARTSet2[ARTTS_REAL] = true;
  ARTSet2[ARTTS_STRING] = true;
  ARTSet2[ARTTS__LBRACK] = true;
  ARTSet2[ARTTS_constant_ID] = true;
  ARTSet2[ARTTS_field_designator_ID] = true;
  ARTSet2[ARTTS_function_ID] = true;
  ARTSet2[ARTTS_nil] = true;
  ARTSet2[ARTTS_not] = true;
  ARTSet2[ARTTS_variable_ID] = true;
  ARTSet2[ARTL_ART_character_string] = true;
  ARTSet2[ARTL_ART_component_variable] = true;
  ARTSet2[ARTL_ART_constant_ID] = true;
  ARTSet2[ARTL_ART_digit_sequence] = true;
  ARTSet2[ARTL_ART_entire_variable] = true;
  ARTSet2[ARTL_ART_expression] = true;
  ARTSet2[ARTL_ART_factor] = true;
  ARTSet2[ARTL_ART_field_designator] = true;
  ARTSet2[ARTL_ART_field_designator_ID] = true;
  ARTSet2[ARTL_ART_function_ID] = true;
  ARTSet2[ARTL_ART_function_designator] = true;
  ARTSet2[ARTL_ART_indexed_variable] = true;
  ARTSet2[ARTL_ART_set_constructor] = true;
  ARTSet2[ARTL_ART_sign] = true;
  ARTSet2[ARTL_ART_simple_expression] = true;
  ARTSet2[ARTL_ART_term] = true;
  ARTSet2[ARTL_ART_unsigned_constant] = true;
  ARTSet2[ARTL_ART_unsigned_integer] = true;
  ARTSet2[ARTL_ART_unsigned_number] = true;
  ARTSet2[ARTL_ART_unsigned_real] = true;
  ARTSet2[ARTL_ART_variable_ID] = true;
  ARTSet2[ARTL_ART_variable_access] = true;
}

public void ARTSet352initialise() {
  ARTSet352 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet352, 0, artSetExtent, false);
  ARTSet352[ARTTS_field_designator_ID] = true;
  ARTSet352[ARTTS_function_ID] = true;
  ARTSet352[ARTTS_goto] = true;
  ARTSet352[ARTTS_procedure_ID] = true;
  ARTSet352[ARTTS_read] = true;
  ARTSet352[ARTTS_readln] = true;
  ARTSet352[ARTTS_variable_ID] = true;
  ARTSet352[ARTTS_write] = true;
  ARTSet352[ARTTS_writeln] = true;
  ARTSet352[ARTL_ART_assignment_statement] = true;
  ARTSet352[ARTL_ART_assignment_statement_3] = true;
  ARTSet352[ARTL_ART_component_variable] = true;
  ARTSet352[ARTL_ART_entire_variable] = true;
  ARTSet352[ARTL_ART_field_designator] = true;
  ARTSet352[ARTL_ART_field_designator_ID] = true;
  ARTSet352[ARTL_ART_function_ID] = true;
  ARTSet352[ARTL_ART_goto_statement] = true;
  ARTSet352[ARTL_ART_indexed_variable] = true;
  ARTSet352[ARTL_ART_procedure_ID] = true;
  ARTSet352[ARTL_ART_procedure_statement] = true;
  ARTSet352[ARTL_ART_simple_statement_41] = true;
  ARTSet352[ARTL_ART_variable_ID] = true;
  ARTSet352[ARTL_ART_variable_access] = true;
}

public void ARTSet366initialise() {
  ARTSet366 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet366, 0, artSetExtent, false);
  ARTSet366[ARTTS_INTEGER] = true;
  ARTSet366[ARTL_ART_digit_sequence] = true;
  ARTSet366[ARTL_ART_label] = true;
}

public void ARTSet375initialise() {
  ARTSet375 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet375, 0, artSetExtent, false);
  ARTSet375[ARTTS__SEMICOLON] = true;
  ARTSet375[ARTTS_end] = true;
  ARTSet375[ARTTS_until] = true;
  ARTSet375[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet49initialise() {
  ARTSet49 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet49, 0, artSetExtent, false);
  ARTSet49[ARTX_EOS] = true;
  ARTSet49[ARTTS__SEMICOLON] = true;
}

public void ARTSet326initialise() {
  ARTSet326 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet326, 0, artSetExtent, false);
  ARTSet326[ARTTS__LPAR] = true;
  ARTSet326[ARTTS__PLUS] = true;
  ARTSet326[ARTTS__MINUS] = true;
  ARTSet326[ARTTS_INTEGER] = true;
  ARTSet326[ARTTS_REAL] = true;
  ARTSet326[ARTTS_STRING] = true;
  ARTSet326[ARTTS__LBRACK] = true;
  ARTSet326[ARTTS_constant_ID] = true;
  ARTSet326[ARTTS_field_designator_ID] = true;
  ARTSet326[ARTTS_function_ID] = true;
  ARTSet326[ARTTS_nil] = true;
  ARTSet326[ARTTS_not] = true;
  ARTSet326[ARTTS_variable_ID] = true;
  ARTSet326[ARTL_ART_character_string] = true;
  ARTSet326[ARTL_ART_component_variable] = true;
  ARTSet326[ARTL_ART_constant_ID] = true;
  ARTSet326[ARTL_ART_digit_sequence] = true;
  ARTSet326[ARTL_ART_entire_variable] = true;
  ARTSet326[ARTL_ART_expression] = true;
  ARTSet326[ARTL_ART_factor] = true;
  ARTSet326[ARTL_ART_field_designator] = true;
  ARTSet326[ARTL_ART_field_designator_ID] = true;
  ARTSet326[ARTL_ART_function_ID] = true;
  ARTSet326[ARTL_ART_function_designator] = true;
  ARTSet326[ARTL_ART_indexed_variable] = true;
  ARTSet326[ARTL_ART_member_designator] = true;
  ARTSet326[ARTL_ART_set_constructor] = true;
  ARTSet326[ARTL_ART_set_constructor_35] = true;
  ARTSet326[ARTL_ART_sign] = true;
  ARTSet326[ARTL_ART_simple_expression] = true;
  ARTSet326[ARTL_ART_term] = true;
  ARTSet326[ARTL_ART_unsigned_constant] = true;
  ARTSet326[ARTL_ART_unsigned_integer] = true;
  ARTSet326[ARTL_ART_unsigned_number] = true;
  ARTSet326[ARTL_ART_unsigned_real] = true;
  ARTSet326[ARTL_ART_variable_ID] = true;
  ARTSet326[ARTL_ART_variable_access] = true;
}

public void ARTSet197initialise() {
  ARTSet197 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet197, 0, artSetExtent, false);
  ARTSet197[ARTTS__LPAR] = true;
  ARTSet197[ARTL_ART_formal_parameter_list] = true;
}

public void ARTSet413initialise() {
  ARTSet413 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet413, 0, artSetExtent, false);
  ARTSet413[ARTTS_array] = true;
  ARTSet413[ARTTS_packed] = true;
  ARTSet413[ARTTS_type_ID] = true;
  ARTSet413[ARTL_ART_conformant_array_schema] = true;
  ARTSet413[ARTL_ART_packed_conformant_array_schema] = true;
  ARTSet413[ARTL_ART_type_ID] = true;
  ARTSet413[ARTL_ART_unpacked_conformant_array_schema] = true;
}

public void ARTSet364initialise() {
  ARTSet364 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet364, 0, artSetExtent, false);
  ARTSet364[ARTTS__SEMICOLON] = true;
  ARTSet364[ARTTS_begin] = true;
  ARTSet364[ARTTS_case] = true;
  ARTSet364[ARTTS_else] = true;
  ARTSet364[ARTTS_end] = true;
  ARTSet364[ARTTS_field_designator_ID] = true;
  ARTSet364[ARTTS_for] = true;
  ARTSet364[ARTTS_function_ID] = true;
  ARTSet364[ARTTS_goto] = true;
  ARTSet364[ARTTS_if] = true;
  ARTSet364[ARTTS_procedure_ID] = true;
  ARTSet364[ARTTS_read] = true;
  ARTSet364[ARTTS_readln] = true;
  ARTSet364[ARTTS_repeat] = true;
  ARTSet364[ARTTS_until] = true;
  ARTSet364[ARTTS_variable_ID] = true;
  ARTSet364[ARTTS_while] = true;
  ARTSet364[ARTTS_with] = true;
  ARTSet364[ARTTS_write] = true;
  ARTSet364[ARTTS_writeln] = true;
  ARTSet364[ARTL_ART_assignment_statement] = true;
  ARTSet364[ARTL_ART_assignment_statement_3] = true;
  ARTSet364[ARTL_ART_case_statement] = true;
  ARTSet364[ARTL_ART_case_statement_5] = true;
  ARTSet364[ARTL_ART_case_statement_6] = true;
  ARTSet364[ARTL_ART_component_variable] = true;
  ARTSet364[ARTL_ART_compound_statement] = true;
  ARTSet364[ARTL_ART_conditional_statement] = true;
  ARTSet364[ARTL_ART_else_part] = true;
  ARTSet364[ARTL_ART_entire_variable] = true;
  ARTSet364[ARTL_ART_field_designator] = true;
  ARTSet364[ARTL_ART_field_designator_ID] = true;
  ARTSet364[ARTL_ART_for_statement] = true;
  ARTSet364[ARTL_ART_function_ID] = true;
  ARTSet364[ARTL_ART_goto_statement] = true;
  ARTSet364[ARTL_ART_if_statement] = true;
  ARTSet364[ARTL_ART_if_statement_19] = true;
  ARTSet364[ARTL_ART_indexed_variable] = true;
  ARTSet364[ARTL_ART_procedure_ID] = true;
  ARTSet364[ARTL_ART_procedure_statement] = true;
  ARTSet364[ARTL_ART_repeat_statement] = true;
  ARTSet364[ARTL_ART_repetitive_statement] = true;
  ARTSet364[ARTL_ART_simple_statement] = true;
  ARTSet364[ARTL_ART_simple_statement_41] = true;
  ARTSet364[ARTL_ART_statement_43] = true;
  ARTSet364[ARTL_ART_statement_sequence_44] = true;
  ARTSet364[ARTL_ART_structured_statement] = true;
  ARTSet364[ARTL_ART_variable_ID] = true;
  ARTSet364[ARTL_ART_variable_access] = true;
  ARTSet364[ARTL_ART_while_statement] = true;
  ARTSet364[ARTL_ART_with_statement] = true;
}

public void ARTSet242initialise() {
  ARTSet242 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet242, 0, artSetExtent, false);
  ARTSet242[ARTTS_array] = true;
  ARTSet242[ARTTS_file] = true;
  ARTSet242[ARTTS_record] = true;
  ARTSet242[ARTTS_set] = true;
  ARTSet242[ARTL_ART_array_type] = true;
  ARTSet242[ARTL_ART_file_type] = true;
  ARTSet242[ARTL_ART_record_type] = true;
  ARTSet242[ARTL_ART_set_type] = true;
  ARTSet242[ARTL_ART_unpacked_structured_type] = true;
}

public void ARTSet296initialise() {
  ARTSet296 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet296, 0, artSetExtent, false);
  ARTSet296[ARTTS__COMMA] = true;
  ARTSet296[ARTL_ART_read_parameter_list_31] = true;
}

public void ARTSet407initialise() {
  ARTSet407 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet407, 0, artSetExtent, false);
  ARTSet407[ARTTS__LPAR] = true;
  ARTSet407[ARTTS__PLUS] = true;
  ARTSet407[ARTTS__MINUS] = true;
  ARTSet407[ARTTS_INTEGER] = true;
  ARTSet407[ARTTS_REAL] = true;
  ARTSet407[ARTTS_STRING] = true;
  ARTSet407[ARTTS__UPARROW] = true;
  ARTSet407[ARTTS_array] = true;
  ARTSet407[ARTTS_constant_ID] = true;
  ARTSet407[ARTTS_file] = true;
  ARTSet407[ARTTS_packed] = true;
  ARTSet407[ARTTS_record] = true;
  ARTSet407[ARTTS_set] = true;
  ARTSet407[ARTTS_type_ID] = true;
  ARTSet407[ARTL_ART_array_type] = true;
  ARTSet407[ARTL_ART_character_string] = true;
  ARTSet407[ARTL_ART_constant] = true;
  ARTSet407[ARTL_ART_constant_7] = true;
  ARTSet407[ARTL_ART_constant_8] = true;
  ARTSet407[ARTL_ART_constant_ID] = true;
  ARTSet407[ARTL_ART_digit_sequence] = true;
  ARTSet407[ARTL_ART_enumerated_type] = true;
  ARTSet407[ARTL_ART_file_type] = true;
  ARTSet407[ARTL_ART_new_ordinal_type] = true;
  ARTSet407[ARTL_ART_new_pointer_type] = true;
  ARTSet407[ARTL_ART_new_structured_type] = true;
  ARTSet407[ARTL_ART_new_structured_type_24] = true;
  ARTSet407[ARTL_ART_new_type] = true;
  ARTSet407[ARTL_ART_record_type] = true;
  ARTSet407[ARTL_ART_set_type] = true;
  ARTSet407[ARTL_ART_sign] = true;
  ARTSet407[ARTL_ART_subrange_type] = true;
  ARTSet407[ARTL_ART_type_ID] = true;
  ARTSet407[ARTL_ART_unpacked_structured_type] = true;
  ARTSet407[ARTL_ART_unsigned_integer] = true;
  ARTSet407[ARTL_ART_unsigned_number] = true;
  ARTSet407[ARTL_ART_unsigned_real] = true;
}

public void ARTSet158initialise() {
  ARTSet158 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet158, 0, artSetExtent, false);
  ARTSet158[ARTTS_do] = true;
}

public void ARTSet277initialise() {
  ARTSet277 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet277, 0, artSetExtent, false);
  ARTSet277[ARTTS__LPAR] = true;
  ARTSet277[ARTL_ART_read_parameter_list] = true;
}

public void ARTSet243initialise() {
  ARTSet243 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet243, 0, artSetExtent, false);
  ARTSet243[ARTTS_packed] = true;
}

public void ARTSet232initialise() {
  ARTSet232 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet232, 0, artSetExtent, false);
  ARTSet232[ARTTS_div] = true;
}

public void ARTSet323initialise() {
  ARTSet323 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet323, 0, artSetExtent, false);
  ARTSet323[ARTTS_type_ID] = true;
  ARTSet323[ARTL_ART_simple_type_ID] = true;
  ARTSet323[ARTL_ART_type_ID] = true;
}

public void ARTSet240initialise() {
  ARTSet240 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet240, 0, artSetExtent, false);
  ARTSet240[ARTTS_array] = true;
  ARTSet240[ARTTS_file] = true;
  ARTSet240[ARTTS_packed] = true;
  ARTSet240[ARTTS_record] = true;
  ARTSet240[ARTTS_set] = true;
  ARTSet240[ARTL_ART_array_type] = true;
  ARTSet240[ARTL_ART_file_type] = true;
  ARTSet240[ARTL_ART_new_structured_type_24] = true;
  ARTSet240[ARTL_ART_record_type] = true;
  ARTSet240[ARTL_ART_set_type] = true;
  ARTSet240[ARTL_ART_unpacked_structured_type] = true;
}

public void ARTSet442initialise() {
  ARTSet442 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet442, 0, artSetExtent, false);
  ARTSet442[ARTTS_while] = true;
}

public void ARTSet186initialise() {
  ARTSet186 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet186, 0, artSetExtent, false);
  ARTSet186[ARTTS_function] = true;
  ARTSet186[ARTL_ART_function_identification] = true;
}

public void ARTSet256initialise() {
  ARTSet256 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet256, 0, artSetExtent, false);
  ARTSet256[ARTTS__LPAR] = true;
  ARTSet256[ARTTS__RPAR] = true;
  ARTSet256[ARTTS__COMMA] = true;
  ARTSet256[ARTTS__SEMICOLON] = true;
  ARTSet256[ARTTS_else] = true;
  ARTSet256[ARTTS_end] = true;
  ARTSet256[ARTTS_until] = true;
  ARTSet256[ARTL_ART_actual_parameter_list] = true;
  ARTSet256[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet256[ARTL_ART_case_statement_5] = true;
  ARTSet256[ARTL_ART_case_statement_6] = true;
  ARTSet256[ARTL_ART_else_part] = true;
  ARTSet256[ARTL_ART_if_statement_19] = true;
  ARTSet256[ARTL_ART_procedure_statement_29] = true;
  ARTSet256[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet272initialise() {
  ARTSet272 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet272, 0, artSetExtent, false);
  ARTSet272[ARTTS__LPAR] = true;
  ARTSet272[ARTL_ART_formal_parameter_list] = true;
  ARTSet272[ARTL_ART_procedure_heading_28] = true;
}

public void ARTSet163initialise() {
  ARTSet163 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet163, 0, artSetExtent, false);
  ARTSet163[ARTTS_downto] = true;
  ARTSet163[ARTTS_to] = true;
  ARTSet163[ARTL_ART_for_statement_14] = true;
}

public void ARTSet348initialise() {
  ARTSet348 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet348, 0, artSetExtent, false);
  ARTSet348[ARTTS__RPAR] = true;
  ARTSet348[ARTTS__PLUS] = true;
  ARTSet348[ARTTS__COMMA] = true;
  ARTSet348[ARTTS__MINUS] = true;
  ARTSet348[ARTTS__PERIOD_PERIOD] = true;
  ARTSet348[ARTTS__COLON] = true;
  ARTSet348[ARTTS__SEMICOLON] = true;
  ARTSet348[ARTTS__LT] = true;
  ARTSet348[ARTTS__LT_EQUAL] = true;
  ARTSet348[ARTTS__LT_GT] = true;
  ARTSet348[ARTTS__EQUAL] = true;
  ARTSet348[ARTTS__GT] = true;
  ARTSet348[ARTTS__GT_EQUAL] = true;
  ARTSet348[ARTTS__RBRACK] = true;
  ARTSet348[ARTTS_do] = true;
  ARTSet348[ARTTS_downto] = true;
  ARTSet348[ARTTS_else] = true;
  ARTSet348[ARTTS_end] = true;
  ARTSet348[ARTTS_in] = true;
  ARTSet348[ARTTS_of] = true;
  ARTSet348[ARTTS_or] = true;
  ARTSet348[ARTTS_then] = true;
  ARTSet348[ARTTS_to] = true;
  ARTSet348[ARTTS_until] = true;
  ARTSet348[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet348[ARTL_ART_adding_operator] = true;
  ARTSet348[ARTL_ART_case_statement_5] = true;
  ARTSet348[ARTL_ART_case_statement_6] = true;
  ARTSet348[ARTL_ART_else_part] = true;
  ARTSet348[ARTL_ART_expression_11] = true;
  ARTSet348[ARTL_ART_for_statement_14] = true;
  ARTSet348[ARTL_ART_if_statement_19] = true;
  ARTSet348[ARTL_ART_indexed_variable_20] = true;
  ARTSet348[ARTL_ART_member_designator_23] = true;
  ARTSet348[ARTL_ART_relational_operator] = true;
  ARTSet348[ARTL_ART_set_constructor_36] = true;
  ARTSet348[ARTL_ART_statement_sequence_44] = true;
  ARTSet348[ARTL_ART_write_parameter_53] = true;
  ARTSet348[ARTL_ART_write_parameter_54] = true;
  ARTSet348[ARTL_ART_write_parameter_list_57] = true;
  ARTSet348[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet182initialise() {
  ARTSet182 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet182, 0, artSetExtent, false);
  ARTSet182[ARTTS_begin] = true;
  ARTSet182[ARTTS_const] = true;
  ARTSet182[ARTTS_function] = true;
  ARTSet182[ARTTS_label] = true;
  ARTSet182[ARTTS_procedure] = true;
  ARTSet182[ARTTS_type] = true;
  ARTSet182[ARTTS_var] = true;
  ARTSet182[ARTL_ART_block] = true;
  ARTSet182[ARTL_ART_compound_statement] = true;
  ARTSet182[ARTL_ART_constant_definition_part] = true;
  ARTSet182[ARTL_ART_constant_definition_part_9] = true;
  ARTSet182[ARTL_ART_function_declaration] = true;
  ARTSet182[ARTL_ART_function_heading] = true;
  ARTSet182[ARTL_ART_function_identification] = true;
  ARTSet182[ARTL_ART_label_declaration_part] = true;
  ARTSet182[ARTL_ART_label_declaration_part_21] = true;
  ARTSet182[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet182[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet182[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet182[ARTL_ART_procedure_declaration] = true;
  ARTSet182[ARTL_ART_procedure_heading] = true;
  ARTSet182[ARTL_ART_procedure_identification] = true;
  ARTSet182[ARTL_ART_statement_part] = true;
  ARTSet182[ARTL_ART_type_definition_part] = true;
  ARTSet182[ARTL_ART_type_definition_part_46] = true;
  ARTSet182[ARTL_ART_variable_declaration_part] = true;
  ARTSet182[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet437initialise() {
  ARTSet437 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet437, 0, artSetExtent, false);
  ARTSet437[ARTTS_tag_field] = true;
  ARTSet437[ARTTS_type_ID] = true;
  ARTSet437[ARTL_ART_ordinal_type_ID] = true;
  ARTSet437[ARTL_ART_tag_field] = true;
  ARTSet437[ARTL_ART_tag_type] = true;
  ARTSet437[ARTL_ART_type_ID] = true;
  ARTSet437[ARTL_ART_variant_selector_52] = true;
}

public void ARTSet156initialise() {
  ARTSet156 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet156, 0, artSetExtent, false);
  ARTSet156[ARTTS_field_ID] = true;
  ARTSet156[ARTL_ART_field_ID] = true;
}

public void ARTSet341initialise() {
  ARTSet341 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet341, 0, artSetExtent, false);
  ARTSet341[ARTTS__PLUS] = true;
  ARTSet341[ARTTS__MINUS] = true;
  ARTSet341[ARTL_ART_sign] = true;
  ARTSet341[ARTL_ART_signed_real_38] = true;
}

public void ARTSet226initialise() {
  ARTSet226 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet226, 0, artSetExtent, false);
  ARTSet226[ARTTS__PERIOD_PERIOD] = true;
  ARTSet226[ARTL_ART_member_designator_23] = true;
}

public void ARTSet103initialise() {
  ARTSet103 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet103, 0, artSetExtent, false);
  ARTSet103[ARTTS_STRING] = true;
  ARTSet103[ARTL_ART_character_string] = true;
}

public void ARTSet117initialise() {
  ARTSet117 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet117, 0, artSetExtent, false);
  ARTSet117[ARTTS_const] = true;
}

public void ARTSet206initialise() {
  ARTSet206 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet206, 0, artSetExtent, false);
  ARTSet206[ARTTS_else] = true;
  ARTSet206[ARTL_ART_else_part] = true;
}

public void ARTSet380initialise() {
  ARTSet380 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet380, 0, artSetExtent, false);
  ARTSet380[ARTTS_one_of_a_set_of_implementation_defined_characters] = true;
}

public void ARTSet160initialise() {
  ARTSet160 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet160, 0, artSetExtent, false);
  ARTSet160[ARTTS_for] = true;
}

public void ARTSet332initialise() {
  ARTSet332 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet332, 0, artSetExtent, false);
  ARTSet332[ARTTS__LPAR] = true;
  ARTSet332[ARTTS__PLUS] = true;
  ARTSet332[ARTTS__MINUS] = true;
  ARTSet332[ARTTS_INTEGER] = true;
  ARTSet332[ARTTS_REAL] = true;
  ARTSet332[ARTTS_STRING] = true;
  ARTSet332[ARTTS_constant_ID] = true;
  ARTSet332[ARTTS_type_ID] = true;
  ARTSet332[ARTL_ART_base_type] = true;
  ARTSet332[ARTL_ART_character_string] = true;
  ARTSet332[ARTL_ART_constant] = true;
  ARTSet332[ARTL_ART_constant_7] = true;
  ARTSet332[ARTL_ART_constant_8] = true;
  ARTSet332[ARTL_ART_constant_ID] = true;
  ARTSet332[ARTL_ART_digit_sequence] = true;
  ARTSet332[ARTL_ART_enumerated_type] = true;
  ARTSet332[ARTL_ART_new_ordinal_type] = true;
  ARTSet332[ARTL_ART_ordinal_type] = true;
  ARTSet332[ARTL_ART_ordinal_type_ID] = true;
  ARTSet332[ARTL_ART_sign] = true;
  ARTSet332[ARTL_ART_subrange_type] = true;
  ARTSet332[ARTL_ART_type_ID] = true;
  ARTSet332[ARTL_ART_unsigned_integer] = true;
  ARTSet332[ARTL_ART_unsigned_number] = true;
  ARTSet332[ARTL_ART_unsigned_real] = true;
}

public void ARTSet159initialise() {
  ARTSet159 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet159, 0, artSetExtent, false);
  ARTSet159[ARTTS_ID] = true;
  ARTSet159[ARTL_ART_ID] = true;
  ARTSet159[ARTL_ART_ID_list] = true;
  ARTSet159[ARTL_ART_record_section] = true;
}

public void ARTSet22initialise() {
  ARTSet22 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet22, 0, artSetExtent, false);
  ARTSet22[ARTTS__RPAR] = true;
  ARTSet22[ARTTS__COMMA] = true;
}

public void ARTSet108initialise() {
  ARTSet108 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet108, 0, artSetExtent, false);
  ARTSet108[ARTTS_constant_ID] = true;
  ARTSet108[ARTL_ART_constant_ID] = true;
}

public void ARTSet371initialise() {
  ARTSet371 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet371, 0, artSetExtent, false);
  ARTSet371[ARTTS_begin] = true;
  ARTSet371[ARTL_ART_compound_statement] = true;
}

public void ARTSet333initialise() {
  ARTSet333 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet333, 0, artSetExtent, false);
  ARTSet333[ARTTS__PLUS] = true;
  ARTSet333[ARTTS__MINUS] = true;
}

public void ARTSet120initialise() {
  ARTSet120 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet120, 0, artSetExtent, false);
  ARTSet120[ARTTS_variable_ID] = true;
  ARTSet120[ARTL_ART_entire_variable] = true;
  ARTSet120[ARTL_ART_variable_ID] = true;
}

public void ARTSet77initialise() {
  ARTSet77 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet77, 0, artSetExtent, false);
  ARTSet77[ARTTS_end] = true;
}

public void ARTSet169initialise() {
  ARTSet169 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet169, 0, artSetExtent, false);
  ARTSet169[ARTTS_ID] = true;
  ARTSet169[ARTTS_function] = true;
  ARTSet169[ARTTS_procedure] = true;
  ARTSet169[ARTTS_var] = true;
  ARTSet169[ARTL_ART_ID] = true;
  ARTSet169[ARTL_ART_ID_list] = true;
  ARTSet169[ARTL_ART_formal_parameter_section] = true;
  ARTSet169[ARTL_ART_function_heading] = true;
  ARTSet169[ARTL_ART_functional_parameter_specification] = true;
  ARTSet169[ARTL_ART_procedural_parameter_specification] = true;
  ARTSet169[ARTL_ART_procedure_heading] = true;
  ARTSet169[ARTL_ART_value_parameter_specification] = true;
  ARTSet169[ARTL_ART_variable_parameter_specification] = true;
}

public void ARTSet56initialise() {
  ARTSet56 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet56, 0, artSetExtent, false);
  ARTSet56[ARTTS_var] = true;
  ARTSet56[ARTL_ART_variable_declaration_part] = true;
  ARTSet56[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet105initialise() {
  ARTSet105 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet105, 0, artSetExtent, false);
  ARTSet105[ARTTS__PLUS] = true;
  ARTSet105[ARTTS__MINUS] = true;
  ARTSet105[ARTL_ART_sign] = true;
}

public void ARTSet8initialise() {
  ARTSet8 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet8, 0, artSetExtent, false);
  ARTSet8[ARTTS__RPAR] = true;
  ARTSet8[ARTTS__COLON] = true;
}

public void ARTSet172initialise() {
  ARTSet172 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet172, 0, artSetExtent, false);
  ARTSet172[ARTTS__RPAR] = true;
  ARTSet172[ARTTS__SEMICOLON] = true;
}

public void ARTSet55initialise() {
  ARTSet55 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet55, 0, artSetExtent, false);
  ARTSet55[ARTTS_begin] = true;
  ARTSet55[ARTTS_function] = true;
  ARTSet55[ARTTS_procedure] = true;
  ARTSet55[ARTTS_var] = true;
  ARTSet55[ARTL_ART_compound_statement] = true;
  ARTSet55[ARTL_ART_function_declaration] = true;
  ARTSet55[ARTL_ART_function_heading] = true;
  ARTSet55[ARTL_ART_function_identification] = true;
  ARTSet55[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet55[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet55[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet55[ARTL_ART_procedure_declaration] = true;
  ARTSet55[ARTL_ART_procedure_heading] = true;
  ARTSet55[ARTL_ART_procedure_identification] = true;
  ARTSet55[ARTL_ART_statement_part] = true;
  ARTSet55[ARTL_ART_variable_declaration_part] = true;
  ARTSet55[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet65initialise() {
  ARTSet65 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet65, 0, artSetExtent, false);
  ARTSet65[ARTTS__COMMA] = true;
  ARTSet65[ARTTS__COLON] = true;
}

public void ARTSet292initialise() {
  ARTSet292 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet292, 0, artSetExtent, false);
  ARTSet292[ARTTS__LPAR] = true;
}

public void ARTSet221initialise() {
  ARTSet221 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet221, 0, artSetExtent, false);
  ARTSet221[ARTTS__COMMA] = true;
  ARTSet221[ARTTS__SEMICOLON] = true;
}

public void ARTSet216initialise() {
  ARTSet216 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet216, 0, artSetExtent, false);
  ARTSet216[ARTTS_begin] = true;
  ARTSet216[ARTTS_const] = true;
  ARTSet216[ARTTS_function] = true;
  ARTSet216[ARTTS_label] = true;
  ARTSet216[ARTTS_procedure] = true;
  ARTSet216[ARTTS_type] = true;
  ARTSet216[ARTTS_var] = true;
  ARTSet216[ARTL_ART_compound_statement] = true;
  ARTSet216[ARTL_ART_constant_definition_part] = true;
  ARTSet216[ARTL_ART_constant_definition_part_9] = true;
  ARTSet216[ARTL_ART_function_declaration] = true;
  ARTSet216[ARTL_ART_function_heading] = true;
  ARTSet216[ARTL_ART_function_identification] = true;
  ARTSet216[ARTL_ART_label_declaration_part_21] = true;
  ARTSet216[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet216[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet216[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet216[ARTL_ART_procedure_declaration] = true;
  ARTSet216[ARTL_ART_procedure_heading] = true;
  ARTSet216[ARTL_ART_procedure_identification] = true;
  ARTSet216[ARTL_ART_statement_part] = true;
  ARTSet216[ARTL_ART_type_definition_part] = true;
  ARTSet216[ARTL_ART_type_definition_part_46] = true;
  ARTSet216[ARTL_ART_variable_declaration_part] = true;
  ARTSet216[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet218initialise() {
  ARTSet218 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet218, 0, artSetExtent, false);
  ARTSet218[ARTTS_label] = true;
}

public void ARTSet448initialise() {
  ARTSet448 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet448, 0, artSetExtent, false);
  ARTSet448[ARTTS__COLON] = true;
}

public void ARTSet80initialise() {
  ARTSet80 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet80, 0, artSetExtent, false);
  ARTSet80[ARTTS__SEMICOLON] = true;
}

public void ARTSet50initialise() {
  ARTSet50 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet50, 0, artSetExtent, false);
  ARTSet50[ARTTS_label] = true;
  ARTSet50[ARTL_ART_label_declaration_part] = true;
  ARTSet50[ARTL_ART_label_declaration_part_21] = true;
}

public void ARTSet84initialise() {
  ARTSet84 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet84, 0, artSetExtent, false);
  ARTSet84[ARTTS__RPAR] = true;
  ARTSet84[ARTTS__STAR] = true;
  ARTSet84[ARTTS__PLUS] = true;
  ARTSet84[ARTTS__COMMA] = true;
  ARTSet84[ARTTS__MINUS] = true;
  ARTSet84[ARTTS__PERIOD] = true;
  ARTSet84[ARTTS__PERIOD_PERIOD] = true;
  ARTSet84[ARTTS__SLASH] = true;
  ARTSet84[ARTTS__COLON] = true;
  ARTSet84[ARTTS__COLON_EQUAL] = true;
  ARTSet84[ARTTS__SEMICOLON] = true;
  ARTSet84[ARTTS__LT] = true;
  ARTSet84[ARTTS__LT_EQUAL] = true;
  ARTSet84[ARTTS__LT_GT] = true;
  ARTSet84[ARTTS__EQUAL] = true;
  ARTSet84[ARTTS__GT] = true;
  ARTSet84[ARTTS__GT_EQUAL] = true;
  ARTSet84[ARTTS__LBRACK] = true;
  ARTSet84[ARTTS__RBRACK] = true;
  ARTSet84[ARTTS__UPARROW] = true;
  ARTSet84[ARTTS_and] = true;
  ARTSet84[ARTTS_div] = true;
  ARTSet84[ARTTS_do] = true;
  ARTSet84[ARTTS_downto] = true;
  ARTSet84[ARTTS_else] = true;
  ARTSet84[ARTTS_end] = true;
  ARTSet84[ARTTS_in] = true;
  ARTSet84[ARTTS_mod] = true;
  ARTSet84[ARTTS_of] = true;
  ARTSet84[ARTTS_or] = true;
  ARTSet84[ARTTS_then] = true;
  ARTSet84[ARTTS_to] = true;
  ARTSet84[ARTTS_until] = true;
  ARTSet84[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet84[ARTL_ART_adding_operator] = true;
  ARTSet84[ARTL_ART_case_statement_5] = true;
  ARTSet84[ARTL_ART_case_statement_6] = true;
  ARTSet84[ARTL_ART_else_part] = true;
  ARTSet84[ARTL_ART_expression_11] = true;
  ARTSet84[ARTL_ART_for_statement_14] = true;
  ARTSet84[ARTL_ART_if_statement_19] = true;
  ARTSet84[ARTL_ART_indexed_variable_20] = true;
  ARTSet84[ARTL_ART_member_designator_23] = true;
  ARTSet84[ARTL_ART_multiplying_operator] = true;
  ARTSet84[ARTL_ART_read_parameter_list_31] = true;
  ARTSet84[ARTL_ART_readln_parameter_list_33] = true;
  ARTSet84[ARTL_ART_record_variable_list_34] = true;
  ARTSet84[ARTL_ART_relational_operator] = true;
  ARTSet84[ARTL_ART_set_constructor_36] = true;
  ARTSet84[ARTL_ART_simple_expression_39] = true;
  ARTSet84[ARTL_ART_simple_expression_40] = true;
  ARTSet84[ARTL_ART_statement_sequence_44] = true;
  ARTSet84[ARTL_ART_term_45] = true;
  ARTSet84[ARTL_ART_write_parameter_53] = true;
  ARTSet84[ARTL_ART_write_parameter_54] = true;
  ARTSet84[ARTL_ART_write_parameter_list_57] = true;
  ARTSet84[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet58initialise() {
  ARTSet58 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet58, 0, artSetExtent, false);
  ARTSet58[ARTTS_function] = true;
  ARTSet58[ARTTS_procedure] = true;
  ARTSet58[ARTL_ART_function_declaration] = true;
  ARTSet58[ARTL_ART_function_heading] = true;
  ARTSet58[ARTL_ART_function_identification] = true;
  ARTSet58[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet58[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet58[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet58[ARTL_ART_procedure_declaration] = true;
  ARTSet58[ARTL_ART_procedure_heading] = true;
  ARTSet58[ARTL_ART_procedure_identification] = true;
}

public void ARTSet443initialise() {
  ARTSet443 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet443, 0, artSetExtent, false);
  ARTSet443[ARTTS_with] = true;
}

public void ARTSet374initialise() {
  ARTSet374 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet374, 0, artSetExtent, false);
  ARTSet374[ARTTS__SEMICOLON] = true;
  ARTSet374[ARTTS_INTEGER] = true;
  ARTSet374[ARTTS_begin] = true;
  ARTSet374[ARTTS_case] = true;
  ARTSet374[ARTTS_end] = true;
  ARTSet374[ARTTS_field_designator_ID] = true;
  ARTSet374[ARTTS_for] = true;
  ARTSet374[ARTTS_function_ID] = true;
  ARTSet374[ARTTS_goto] = true;
  ARTSet374[ARTTS_if] = true;
  ARTSet374[ARTTS_procedure_ID] = true;
  ARTSet374[ARTTS_read] = true;
  ARTSet374[ARTTS_readln] = true;
  ARTSet374[ARTTS_repeat] = true;
  ARTSet374[ARTTS_until] = true;
  ARTSet374[ARTTS_variable_ID] = true;
  ARTSet374[ARTTS_while] = true;
  ARTSet374[ARTTS_with] = true;
  ARTSet374[ARTTS_write] = true;
  ARTSet374[ARTTS_writeln] = true;
  ARTSet374[ARTL_ART_assignment_statement] = true;
  ARTSet374[ARTL_ART_assignment_statement_3] = true;
  ARTSet374[ARTL_ART_case_statement] = true;
  ARTSet374[ARTL_ART_component_variable] = true;
  ARTSet374[ARTL_ART_compound_statement] = true;
  ARTSet374[ARTL_ART_conditional_statement] = true;
  ARTSet374[ARTL_ART_digit_sequence] = true;
  ARTSet374[ARTL_ART_entire_variable] = true;
  ARTSet374[ARTL_ART_field_designator] = true;
  ARTSet374[ARTL_ART_field_designator_ID] = true;
  ARTSet374[ARTL_ART_for_statement] = true;
  ARTSet374[ARTL_ART_function_ID] = true;
  ARTSet374[ARTL_ART_goto_statement] = true;
  ARTSet374[ARTL_ART_if_statement] = true;
  ARTSet374[ARTL_ART_indexed_variable] = true;
  ARTSet374[ARTL_ART_label] = true;
  ARTSet374[ARTL_ART_procedure_ID] = true;
  ARTSet374[ARTL_ART_procedure_statement] = true;
  ARTSet374[ARTL_ART_repeat_statement] = true;
  ARTSet374[ARTL_ART_repetitive_statement] = true;
  ARTSet374[ARTL_ART_simple_statement] = true;
  ARTSet374[ARTL_ART_simple_statement_41] = true;
  ARTSet374[ARTL_ART_statement] = true;
  ARTSet374[ARTL_ART_statement_42] = true;
  ARTSet374[ARTL_ART_statement_43] = true;
  ARTSet374[ARTL_ART_statement_sequence_44] = true;
  ARTSet374[ARTL_ART_structured_statement] = true;
  ARTSet374[ARTL_ART_variable_ID] = true;
  ARTSet374[ARTL_ART_variable_access] = true;
  ARTSet374[ARTL_ART_while_statement] = true;
  ARTSet374[ARTL_ART_with_statement] = true;
}

public void ARTSet318initialise() {
  ARTSet318 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet318, 0, artSetExtent, false);
  ARTSet318[ARTTS_until] = true;
}

public void ARTSet391initialise() {
  ARTSet391 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet391, 0, artSetExtent, false);
  ARTSet391[ARTTS__RPAR] = true;
  ARTSet391[ARTTS__PLUS] = true;
  ARTSet391[ARTTS__COMMA] = true;
  ARTSet391[ARTTS__MINUS] = true;
  ARTSet391[ARTTS__PERIOD_PERIOD] = true;
  ARTSet391[ARTTS__COLON] = true;
  ARTSet391[ARTTS__SEMICOLON] = true;
  ARTSet391[ARTTS__LT] = true;
  ARTSet391[ARTTS__LT_EQUAL] = true;
  ARTSet391[ARTTS__LT_GT] = true;
  ARTSet391[ARTTS__EQUAL] = true;
  ARTSet391[ARTTS__GT] = true;
  ARTSet391[ARTTS__GT_EQUAL] = true;
  ARTSet391[ARTTS__RBRACK] = true;
  ARTSet391[ARTTS_do] = true;
  ARTSet391[ARTTS_downto] = true;
  ARTSet391[ARTTS_else] = true;
  ARTSet391[ARTTS_end] = true;
  ARTSet391[ARTTS_in] = true;
  ARTSet391[ARTTS_of] = true;
  ARTSet391[ARTTS_or] = true;
  ARTSet391[ARTTS_then] = true;
  ARTSet391[ARTTS_to] = true;
  ARTSet391[ARTTS_until] = true;
  ARTSet391[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet391[ARTL_ART_adding_operator] = true;
  ARTSet391[ARTL_ART_case_statement_5] = true;
  ARTSet391[ARTL_ART_case_statement_6] = true;
  ARTSet391[ARTL_ART_else_part] = true;
  ARTSet391[ARTL_ART_expression_11] = true;
  ARTSet391[ARTL_ART_for_statement_14] = true;
  ARTSet391[ARTL_ART_if_statement_19] = true;
  ARTSet391[ARTL_ART_indexed_variable_20] = true;
  ARTSet391[ARTL_ART_member_designator_23] = true;
  ARTSet391[ARTL_ART_relational_operator] = true;
  ARTSet391[ARTL_ART_set_constructor_36] = true;
  ARTSet391[ARTL_ART_simple_expression_39] = true;
  ARTSet391[ARTL_ART_simple_expression_40] = true;
  ARTSet391[ARTL_ART_statement_sequence_44] = true;
  ARTSet391[ARTL_ART_write_parameter_53] = true;
  ARTSet391[ARTL_ART_write_parameter_54] = true;
  ARTSet391[ARTL_ART_write_parameter_list_57] = true;
  ARTSet391[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet39initialise() {
  ARTSet39 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet39, 0, artSetExtent, false);
  ARTSet39[ARTTS__COMMA] = true;
  ARTSet39[ARTTS__RBRACK] = true;
}

public void ARTSet94initialise() {
  ARTSet94 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet94, 0, artSetExtent, false);
  ARTSet94[ARTTS_var] = true;
  ARTSet94[ARTL_ART_variable_conformant_array_specification] = true;
}

public void ARTSet102initialise() {
  ARTSet102 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet102, 0, artSetExtent, false);
  ARTSet102[ARTTS_INTEGER] = true;
  ARTSet102[ARTTS_REAL] = true;
  ARTSet102[ARTTS_constant_ID] = true;
  ARTSet102[ARTL_ART_constant_8] = true;
  ARTSet102[ARTL_ART_constant_ID] = true;
  ARTSet102[ARTL_ART_digit_sequence] = true;
  ARTSet102[ARTL_ART_unsigned_integer] = true;
  ARTSet102[ARTL_ART_unsigned_number] = true;
  ARTSet102[ARTL_ART_unsigned_real] = true;
}

public void ARTSet321initialise() {
  ARTSet321 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet321, 0, artSetExtent, false);
  ARTSet321[ARTTS_while] = true;
  ARTSet321[ARTL_ART_while_statement] = true;
}

public void ARTSet205initialise() {
  ARTSet205 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet205, 0, artSetExtent, false);
  ARTSet205[ARTTS_else] = true;
  ARTSet205[ARTL_ART_else_part] = true;
}

public void ARTSet155initialise() {
  ARTSet155 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet155, 0, artSetExtent, false);
  ARTSet155[ARTTS_ID] = true;
  ARTSet155[ARTL_ART_ID] = true;
  ARTSet155[ARTL_ART_ID_list] = true;
  ARTSet155[ARTL_ART_fixed_part] = true;
  ARTSet155[ARTL_ART_record_section] = true;
}

public void ARTSet388initialise() {
  ARTSet388 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet388, 0, artSetExtent, false);
  ARTSet388[ARTTS_array] = true;
  ARTSet388[ARTTS_file] = true;
  ARTSet388[ARTTS_packed] = true;
  ARTSet388[ARTTS_record] = true;
  ARTSet388[ARTTS_set] = true;
  ARTSet388[ARTTS_type_ID] = true;
  ARTSet388[ARTL_ART_array_type] = true;
  ARTSet388[ARTL_ART_file_type] = true;
  ARTSet388[ARTL_ART_new_structured_type] = true;
  ARTSet388[ARTL_ART_new_structured_type_24] = true;
  ARTSet388[ARTL_ART_record_type] = true;
  ARTSet388[ARTL_ART_set_type] = true;
  ARTSet388[ARTL_ART_structured_type_ID] = true;
  ARTSet388[ARTL_ART_type_ID] = true;
  ARTSet388[ARTL_ART_unpacked_structured_type] = true;
}

public void ARTSet263initialise() {
  ARTSet263 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet263, 0, artSetExtent, false);
  ARTSet263[ARTTS_procedure] = true;
  ARTSet263[ARTL_ART_procedure_declaration] = true;
  ARTSet263[ARTL_ART_procedure_heading] = true;
  ARTSet263[ARTL_ART_procedure_identification] = true;
}

public void ARTSet411initialise() {
  ARTSet411 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet411, 0, artSetExtent, false);
  ARTSet411[ARTTS__SEMICOLON] = true;
  ARTSet411[ARTTS__RBRACK] = true;
}

public void ARTSet389initialise() {
  ARTSet389 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet389, 0, artSetExtent, false);
  ARTSet389[ARTTS_type_ID] = true;
  ARTSet389[ARTL_ART_structured_type_ID] = true;
  ARTSet389[ARTL_ART_type_ID] = true;
}

public void ARTSet424initialise() {
  ARTSet424 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet424, 0, artSetExtent, false);
  ARTSet424[ARTTS_variable_ID] = true;
}

public void ARTSet83initialise() {
  ARTSet83 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet83, 0, artSetExtent, false);
  ARTSet83[ARTTS__LPAR] = true;
  ARTSet83[ARTTS__PLUS] = true;
  ARTSet83[ARTTS__MINUS] = true;
  ARTSet83[ARTTS_INTEGER] = true;
  ARTSet83[ARTTS_REAL] = true;
  ARTSet83[ARTTS_STRING] = true;
  ARTSet83[ARTTS__UPARROW] = true;
  ARTSet83[ARTTS_array] = true;
  ARTSet83[ARTTS_constant_ID] = true;
  ARTSet83[ARTTS_file] = true;
  ARTSet83[ARTTS_packed] = true;
  ARTSet83[ARTTS_record] = true;
  ARTSet83[ARTTS_set] = true;
  ARTSet83[ARTTS_type_ID] = true;
  ARTSet83[ARTL_ART_array_type] = true;
  ARTSet83[ARTL_ART_character_string] = true;
  ARTSet83[ARTL_ART_constant] = true;
  ARTSet83[ARTL_ART_constant_7] = true;
  ARTSet83[ARTL_ART_constant_8] = true;
  ARTSet83[ARTL_ART_constant_ID] = true;
  ARTSet83[ARTL_ART_digit_sequence] = true;
  ARTSet83[ARTL_ART_enumerated_type] = true;
  ARTSet83[ARTL_ART_file_type] = true;
  ARTSet83[ARTL_ART_new_ordinal_type] = true;
  ARTSet83[ARTL_ART_new_pointer_type] = true;
  ARTSet83[ARTL_ART_new_structured_type] = true;
  ARTSet83[ARTL_ART_new_structured_type_24] = true;
  ARTSet83[ARTL_ART_new_type] = true;
  ARTSet83[ARTL_ART_record_type] = true;
  ARTSet83[ARTL_ART_set_type] = true;
  ARTSet83[ARTL_ART_sign] = true;
  ARTSet83[ARTL_ART_subrange_type] = true;
  ARTSet83[ARTL_ART_type_ID] = true;
  ARTSet83[ARTL_ART_type_denoter] = true;
  ARTSet83[ARTL_ART_unpacked_structured_type] = true;
  ARTSet83[ARTL_ART_unsigned_integer] = true;
  ARTSet83[ARTL_ART_unsigned_number] = true;
  ARTSet83[ARTL_ART_unsigned_real] = true;
}

public void ARTSet439initialise() {
  ARTSet439 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet439, 0, artSetExtent, false);
  ARTSet439[ARTTS_type_ID] = true;
  ARTSet439[ARTL_ART_ordinal_type_ID] = true;
  ARTSet439[ARTL_ART_tag_type] = true;
  ARTSet439[ARTL_ART_type_ID] = true;
}

public void ARTSet82initialise() {
  ARTSet82 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet82, 0, artSetExtent, false);
  ARTSet82[ARTTS__RPAR] = true;
  ARTSet82[ARTTS__STAR] = true;
  ARTSet82[ARTTS__PLUS] = true;
  ARTSet82[ARTTS__COMMA] = true;
  ARTSet82[ARTTS__MINUS] = true;
  ARTSet82[ARTTS__PERIOD_PERIOD] = true;
  ARTSet82[ARTTS__SLASH] = true;
  ARTSet82[ARTTS__COLON] = true;
  ARTSet82[ARTTS__SEMICOLON] = true;
  ARTSet82[ARTTS__LT] = true;
  ARTSet82[ARTTS__LT_EQUAL] = true;
  ARTSet82[ARTTS__LT_GT] = true;
  ARTSet82[ARTTS__EQUAL] = true;
  ARTSet82[ARTTS__GT] = true;
  ARTSet82[ARTTS__GT_EQUAL] = true;
  ARTSet82[ARTTS__RBRACK] = true;
  ARTSet82[ARTTS_and] = true;
  ARTSet82[ARTTS_div] = true;
  ARTSet82[ARTTS_do] = true;
  ARTSet82[ARTTS_downto] = true;
  ARTSet82[ARTTS_else] = true;
  ARTSet82[ARTTS_end] = true;
  ARTSet82[ARTTS_in] = true;
  ARTSet82[ARTTS_mod] = true;
  ARTSet82[ARTTS_of] = true;
  ARTSet82[ARTTS_or] = true;
  ARTSet82[ARTTS_then] = true;
  ARTSet82[ARTTS_to] = true;
  ARTSet82[ARTTS_until] = true;
  ARTSet82[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet82[ARTL_ART_adding_operator] = true;
  ARTSet82[ARTL_ART_array_type_2] = true;
  ARTSet82[ARTL_ART_case_constant_list_4] = true;
  ARTSet82[ARTL_ART_case_statement_5] = true;
  ARTSet82[ARTL_ART_case_statement_6] = true;
  ARTSet82[ARTL_ART_else_part] = true;
  ARTSet82[ARTL_ART_expression_11] = true;
  ARTSet82[ARTL_ART_for_statement_14] = true;
  ARTSet82[ARTL_ART_if_statement_19] = true;
  ARTSet82[ARTL_ART_indexed_variable_20] = true;
  ARTSet82[ARTL_ART_member_designator_23] = true;
  ARTSet82[ARTL_ART_multiplying_operator] = true;
  ARTSet82[ARTL_ART_relational_operator] = true;
  ARTSet82[ARTL_ART_set_constructor_36] = true;
  ARTSet82[ARTL_ART_simple_expression_39] = true;
  ARTSet82[ARTL_ART_simple_expression_40] = true;
  ARTSet82[ARTL_ART_statement_sequence_44] = true;
  ARTSet82[ARTL_ART_term_45] = true;
  ARTSet82[ARTL_ART_write_parameter_53] = true;
  ARTSet82[ARTL_ART_write_parameter_54] = true;
  ARTSet82[ARTL_ART_write_parameter_list_57] = true;
  ARTSet82[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet246initialise() {
  ARTSet246 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet246, 0, artSetExtent, false);
  ARTSet246[ARTTS__LPAR] = true;
  ARTSet246[ARTTS__PLUS] = true;
  ARTSet246[ARTTS__MINUS] = true;
  ARTSet246[ARTTS_INTEGER] = true;
  ARTSet246[ARTTS_REAL] = true;
  ARTSet246[ARTTS_STRING] = true;
  ARTSet246[ARTTS_constant_ID] = true;
  ARTSet246[ARTL_ART_character_string] = true;
  ARTSet246[ARTL_ART_constant] = true;
  ARTSet246[ARTL_ART_constant_7] = true;
  ARTSet246[ARTL_ART_constant_8] = true;
  ARTSet246[ARTL_ART_constant_ID] = true;
  ARTSet246[ARTL_ART_digit_sequence] = true;
  ARTSet246[ARTL_ART_enumerated_type] = true;
  ARTSet246[ARTL_ART_new_ordinal_type] = true;
  ARTSet246[ARTL_ART_sign] = true;
  ARTSet246[ARTL_ART_subrange_type] = true;
  ARTSet246[ARTL_ART_unsigned_integer] = true;
  ARTSet246[ARTL_ART_unsigned_number] = true;
  ARTSet246[ARTL_ART_unsigned_real] = true;
}

public void ARTSet283initialise() {
  ARTSet283 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet283, 0, artSetExtent, false);
  ARTSet283[ARTTS_writeln] = true;
}

public void ARTSet5initialise() {
  ARTSet5 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet5, 0, artSetExtent, false);
  ARTSet5[ARTTS_ID] = true;
}

public void ARTSet429initialise() {
  ARTSet429 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet429, 0, artSetExtent, false);
  ARTSet429[ARTTS_ID] = true;
  ARTSet429[ARTL_ART_ID] = true;
  ARTSet429[ARTL_ART_ID_list] = true;
  ARTSet429[ARTL_ART_variable_declaration] = true;
}

public void ARTSet200initialise() {
  ARTSet200 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet200, 0, artSetExtent, false);
  ARTSet200[ARTTS_if] = true;
}

public void ARTSet340initialise() {
  ARTSet340 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet340, 0, artSetExtent, false);
  ARTSet340[ARTTS__PLUS] = true;
  ARTSet340[ARTTS__MINUS] = true;
  ARTSet340[ARTTS_REAL] = true;
  ARTSet340[ARTL_ART_sign] = true;
  ARTSet340[ARTL_ART_signed_real_38] = true;
  ARTSet340[ARTL_ART_unsigned_real] = true;
}

public void ARTSet125initialise() {
  ARTSet125 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet125, 0, artSetExtent, false);
  ARTSet125[ARTTS_else] = true;
}

public void ARTSet396initialise() {
  ARTSet396 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet396, 0, artSetExtent, false);
  ARTSet396[ARTTS_type_ID] = true;
}

public void ARTSet111initialise() {
  ARTSet111 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet111, 0, artSetExtent, false);
  ARTSet111[ARTTS_const] = true;
  ARTSet111[ARTL_ART_constant_definition_part_9] = true;
}

public void ARTSet127initialise() {
  ARTSet127 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet127, 0, artSetExtent, false);
  ARTSet127[ARTTS_variable_ID] = true;
  ARTSet127[ARTL_ART_variable_ID] = true;
}

public void ARTSet190initialise() {
  ARTSet190 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet190, 0, artSetExtent, false);
  ARTSet190[ARTTS__LPAR] = true;
  ARTSet190[ARTL_ART_actual_parameter_list] = true;
}

public void ARTSet315initialise() {
  ARTSet315 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet315, 0, artSetExtent, false);
  ARTSet315[ARTTS_in] = true;
}

public void ARTSet268initialise() {
  ARTSet268 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet268, 0, artSetExtent, false);
  ARTSet268[ARTTS_procedure] = true;
  ARTSet268[ARTL_ART_procedure_identification] = true;
}

public void ARTSet403initialise() {
  ARTSet403 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet403, 0, artSetExtent, false);
  ARTSet403[ARTTS_ID] = true;
  ARTSet403[ARTL_ART_ID] = true;
  ARTSet403[ARTL_ART_type_definition] = true;
  ARTSet403[ARTL_ART_type_definition_part_47] = true;
}

public void ARTSet342initialise() {
  ARTSet342 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet342, 0, artSetExtent, false);
  ARTSet342[ARTTS_REAL] = true;
  ARTSet342[ARTL_ART_unsigned_real] = true;
}

public void ARTSet171initialise() {
  ARTSet171 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet171, 0, artSetExtent, false);
  ARTSet171[ARTTS__SEMICOLON] = true;
  ARTSet171[ARTL_ART_formal_parameter_list_15] = true;
}

public void ARTSet382initialise() {
  ARTSet382 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet382, 0, artSetExtent, false);
  ARTSet382[ARTTS__BACKSLASH_DBLQUOTE] = true;
  ARTSet382[ARTL_ART_apostrophe_image] = true;
}

public void ARTSet339initialise() {
  ARTSet339 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet339, 0, artSetExtent, false);
  ARTSet339[ARTTS__PLUS] = true;
  ARTSet339[ARTTS__MINUS] = true;
  ARTSet339[ARTTS_REAL] = true;
  ARTSet339[ARTL_ART_sign] = true;
  ARTSet339[ARTL_ART_signed_real] = true;
  ARTSet339[ARTL_ART_signed_real_38] = true;
  ARTSet339[ARTL_ART_unsigned_real] = true;
}

public void ARTSet286initialise() {
  ARTSet286 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet286, 0, artSetExtent, false);
  ARTSet286[ARTTS_program] = true;
  ARTSet286[ARTL_ART_program_heading] = true;
}

public void ARTSet307initialise() {
  ARTSet307 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet307, 0, artSetExtent, false);
  ARTSet307[ARTTS__COMMA] = true;
  ARTSet307[ARTTS_do] = true;
}

public void ARTSet338initialise() {
  ARTSet338 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet338, 0, artSetExtent, false);
  ARTSet338[ARTTS__PLUS] = true;
  ARTSet338[ARTTS__MINUS] = true;
  ARTSet338[ARTTS_INTEGER] = true;
  ARTSet338[ARTTS_REAL] = true;
  ARTSet338[ARTL_ART_digit_sequence] = true;
  ARTSet338[ARTL_ART_sign] = true;
  ARTSet338[ARTL_ART_signed_integer] = true;
  ARTSet338[ARTL_ART_signed_integer_37] = true;
  ARTSet338[ARTL_ART_signed_real] = true;
  ARTSet338[ARTL_ART_signed_real_38] = true;
  ARTSet338[ARTL_ART_unsigned_integer] = true;
  ARTSet338[ARTL_ART_unsigned_real] = true;
}

public void ARTSet252initialise() {
  ARTSet252 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet252, 0, artSetExtent, false);
  ARTSet252[ARTTS__UPARROW] = true;
  ARTSet252[ARTTS_type_ID] = true;
  ARTSet252[ARTL_ART_new_pointer_type] = true;
  ARTSet252[ARTL_ART_pointer_type_ID] = true;
  ARTSet252[ARTL_ART_type_ID] = true;
}

public void ARTSet237initialise() {
  ARTSet237 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet237, 0, artSetExtent, false);
  ARTSet237[ARTTS__PLUS] = true;
  ARTSet237[ARTTS__MINUS] = true;
  ARTSet237[ARTTS_INTEGER] = true;
  ARTSet237[ARTTS_REAL] = true;
  ARTSet237[ARTTS_STRING] = true;
  ARTSet237[ARTTS_constant_ID] = true;
  ARTSet237[ARTL_ART_character_string] = true;
  ARTSet237[ARTL_ART_constant] = true;
  ARTSet237[ARTL_ART_constant_7] = true;
  ARTSet237[ARTL_ART_constant_8] = true;
  ARTSet237[ARTL_ART_constant_ID] = true;
  ARTSet237[ARTL_ART_digit_sequence] = true;
  ARTSet237[ARTL_ART_sign] = true;
  ARTSet237[ARTL_ART_subrange_type] = true;
  ARTSet237[ARTL_ART_unsigned_integer] = true;
  ARTSet237[ARTL_ART_unsigned_number] = true;
  ARTSet237[ARTL_ART_unsigned_real] = true;
}

public void ARTSet430initialise() {
  ARTSet430 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet430, 0, artSetExtent, false);
  ARTSet430[ARTTS_ID] = true;
  ARTSet430[ARTL_ART_ID] = true;
  ARTSet430[ARTL_ART_ID_list] = true;
  ARTSet430[ARTL_ART_variable_declaration] = true;
  ARTSet430[ARTL_ART_variable_declaration_part_51] = true;
}

public void ARTSet170initialise() {
  ARTSet170 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet170, 0, artSetExtent, false);
  ARTSet170[ARTTS__RPAR] = true;
  ARTSet170[ARTTS__SEMICOLON] = true;
  ARTSet170[ARTL_ART_formal_parameter_list_15] = true;
}

public void ARTSet139initialise() {
  ARTSet139 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet139, 0, artSetExtent, false);
  ARTSet139[ARTTS__LBRACK] = true;
  ARTSet139[ARTL_ART_set_constructor] = true;
}

public void ARTSet51initialise() {
  ARTSet51 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet51, 0, artSetExtent, false);
  ARTSet51[ARTTS_begin] = true;
  ARTSet51[ARTTS_const] = true;
  ARTSet51[ARTTS_function] = true;
  ARTSet51[ARTTS_procedure] = true;
  ARTSet51[ARTTS_type] = true;
  ARTSet51[ARTTS_var] = true;
  ARTSet51[ARTL_ART_compound_statement] = true;
  ARTSet51[ARTL_ART_constant_definition_part] = true;
  ARTSet51[ARTL_ART_constant_definition_part_9] = true;
  ARTSet51[ARTL_ART_function_declaration] = true;
  ARTSet51[ARTL_ART_function_heading] = true;
  ARTSet51[ARTL_ART_function_identification] = true;
  ARTSet51[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet51[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet51[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet51[ARTL_ART_procedure_declaration] = true;
  ARTSet51[ARTL_ART_procedure_heading] = true;
  ARTSet51[ARTL_ART_procedure_identification] = true;
  ARTSet51[ARTL_ART_statement_part] = true;
  ARTSet51[ARTL_ART_type_definition_part] = true;
  ARTSet51[ARTL_ART_type_definition_part_46] = true;
  ARTSet51[ARTL_ART_variable_declaration_part] = true;
  ARTSet51[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet385initialise() {
  ARTSet385 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet385, 0, artSetExtent, false);
  ARTSet385[ARTTS_case] = true;
  ARTSet385[ARTTS_if] = true;
  ARTSet385[ARTL_ART_case_statement] = true;
  ARTSet385[ARTL_ART_conditional_statement] = true;
  ARTSet385[ARTL_ART_if_statement] = true;
}

public void ARTSet262initialise() {
  ARTSet262 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet262, 0, artSetExtent, false);
  ARTSet262[ARTTS_function] = true;
  ARTSet262[ARTTS_procedure] = true;
  ARTSet262[ARTL_ART_function_declaration] = true;
  ARTSet262[ARTL_ART_function_heading] = true;
  ARTSet262[ARTL_ART_function_identification] = true;
  ARTSet262[ARTL_ART_procedure_declaration] = true;
  ARTSet262[ARTL_ART_procedure_heading] = true;
  ARTSet262[ARTL_ART_procedure_identification] = true;
}

public void ARTSet336initialise() {
  ARTSet336 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet336, 0, artSetExtent, false);
  ARTSet336[ARTTS__PLUS] = true;
  ARTSet336[ARTTS__MINUS] = true;
  ARTSet336[ARTL_ART_sign] = true;
  ARTSet336[ARTL_ART_signed_integer_37] = true;
}

public void ARTSet459initialise() {
  ARTSet459 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet459, 0, artSetExtent, false);
  ARTSet459[ARTTS__COMMA] = true;
  ARTSet459[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet92initialise() {
  ARTSet92 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet92, 0, artSetExtent, false);
  ARTSet92[ARTTS_ID] = true;
  ARTSet92[ARTTS_var] = true;
  ARTSet92[ARTL_ART_ID] = true;
  ARTSet92[ARTL_ART_ID_list] = true;
  ARTSet92[ARTL_ART_value_conformant_array_specification] = true;
  ARTSet92[ARTL_ART_variable_conformant_array_specification] = true;
}

public void ARTSet322initialise() {
  ARTSet322 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet322, 0, artSetExtent, false);
  ARTSet322[ARTTS_for] = true;
  ARTSet322[ARTL_ART_for_statement] = true;
}

public void ARTSet444initialise() {
  ARTSet444 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet444, 0, artSetExtent, false);
  ARTSet444[ARTTS_field_designator_ID] = true;
  ARTSet444[ARTTS_variable_ID] = true;
  ARTSet444[ARTL_ART_component_variable] = true;
  ARTSet444[ARTL_ART_entire_variable] = true;
  ARTSet444[ARTL_ART_field_designator] = true;
  ARTSet444[ARTL_ART_field_designator_ID] = true;
  ARTSet444[ARTL_ART_indexed_variable] = true;
  ARTSet444[ARTL_ART_record_variable_list] = true;
  ARTSet444[ARTL_ART_variable_ID] = true;
  ARTSet444[ARTL_ART_variable_access] = true;
}

public void ARTSet107initialise() {
  ARTSet107 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet107, 0, artSetExtent, false);
  ARTSet107[ARTTS_INTEGER] = true;
  ARTSet107[ARTTS_REAL] = true;
  ARTSet107[ARTL_ART_digit_sequence] = true;
  ARTSet107[ARTL_ART_unsigned_integer] = true;
  ARTSet107[ARTL_ART_unsigned_number] = true;
  ARTSet107[ARTL_ART_unsigned_real] = true;
}

public void ARTSet115initialise() {
  ARTSet115 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet115, 0, artSetExtent, false);
  ARTSet115[ARTTS_ID] = true;
  ARTSet115[ARTL_ART_ID] = true;
  ARTSet115[ARTL_ART_constant_definition] = true;
  ARTSet115[ARTL_ART_constant_definition_part_10] = true;
}

public void ARTSet12initialise() {
  ARTSet12 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet12, 0, artSetExtent, false);
  ARTSet12[ARTTS__COMMA] = true;
  ARTSet12[ARTL_ART_ID_list_18] = true;
}

public void ARTSet157initialise() {
  ARTSet157 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet157, 0, artSetExtent, false);
  ARTSet157[ARTTS_file] = true;
}

public void ARTSet210initialise() {
  ARTSet210 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet210, 0, artSetExtent, false);
  ARTSet210[ARTTS_type_ID] = true;
  ARTSet210[ARTL_ART_ordinal_type_ID] = true;
  ARTSet210[ARTL_ART_type_ID] = true;
}

public void ARTSet303initialise() {
  ARTSet303 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet303, 0, artSetExtent, false);
  ARTSet303[ARTTS_ID] = true;
  ARTSet303[ARTTS_case] = true;
  ARTSet303[ARTTS_end] = true;
  ARTSet303[ARTL_ART_ID] = true;
  ARTSet303[ARTL_ART_ID_list] = true;
  ARTSet303[ARTL_ART_field_list] = true;
  ARTSet303[ARTL_ART_field_list_12] = true;
  ARTSet303[ARTL_ART_fixed_part] = true;
  ARTSet303[ARTL_ART_record_section] = true;
  ARTSet303[ARTL_ART_variant_part] = true;
}

public void ARTSet133initialise() {
  ARTSet133 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet133, 0, artSetExtent, false);
  ARTSet133[ARTTS__LT] = true;
  ARTSet133[ARTTS__LT_EQUAL] = true;
  ARTSet133[ARTTS__LT_GT] = true;
  ARTSet133[ARTTS__EQUAL] = true;
  ARTSet133[ARTTS__GT] = true;
  ARTSet133[ARTTS__GT_EQUAL] = true;
  ARTSet133[ARTTS_in] = true;
  ARTSet133[ARTL_ART_expression_11] = true;
  ARTSet133[ARTL_ART_relational_operator] = true;
}

public void ARTSet203initialise() {
  ARTSet203 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet203, 0, artSetExtent, false);
  ARTSet203[ARTTS_INTEGER] = true;
  ARTSet203[ARTTS_begin] = true;
  ARTSet203[ARTTS_case] = true;
  ARTSet203[ARTTS_else] = true;
  ARTSet203[ARTTS_field_designator_ID] = true;
  ARTSet203[ARTTS_for] = true;
  ARTSet203[ARTTS_function_ID] = true;
  ARTSet203[ARTTS_goto] = true;
  ARTSet203[ARTTS_if] = true;
  ARTSet203[ARTTS_procedure_ID] = true;
  ARTSet203[ARTTS_read] = true;
  ARTSet203[ARTTS_readln] = true;
  ARTSet203[ARTTS_repeat] = true;
  ARTSet203[ARTTS_variable_ID] = true;
  ARTSet203[ARTTS_while] = true;
  ARTSet203[ARTTS_with] = true;
  ARTSet203[ARTTS_write] = true;
  ARTSet203[ARTTS_writeln] = true;
  ARTSet203[ARTL_ART_assignment_statement] = true;
  ARTSet203[ARTL_ART_assignment_statement_3] = true;
  ARTSet203[ARTL_ART_case_statement] = true;
  ARTSet203[ARTL_ART_component_variable] = true;
  ARTSet203[ARTL_ART_compound_statement] = true;
  ARTSet203[ARTL_ART_conditional_statement] = true;
  ARTSet203[ARTL_ART_digit_sequence] = true;
  ARTSet203[ARTL_ART_else_part] = true;
  ARTSet203[ARTL_ART_entire_variable] = true;
  ARTSet203[ARTL_ART_field_designator] = true;
  ARTSet203[ARTL_ART_field_designator_ID] = true;
  ARTSet203[ARTL_ART_for_statement] = true;
  ARTSet203[ARTL_ART_function_ID] = true;
  ARTSet203[ARTL_ART_goto_statement] = true;
  ARTSet203[ARTL_ART_if_statement] = true;
  ARTSet203[ARTL_ART_if_statement_19] = true;
  ARTSet203[ARTL_ART_indexed_variable] = true;
  ARTSet203[ARTL_ART_label] = true;
  ARTSet203[ARTL_ART_procedure_ID] = true;
  ARTSet203[ARTL_ART_procedure_statement] = true;
  ARTSet203[ARTL_ART_repeat_statement] = true;
  ARTSet203[ARTL_ART_repetitive_statement] = true;
  ARTSet203[ARTL_ART_simple_statement] = true;
  ARTSet203[ARTL_ART_simple_statement_41] = true;
  ARTSet203[ARTL_ART_statement] = true;
  ARTSet203[ARTL_ART_statement_42] = true;
  ARTSet203[ARTL_ART_statement_43] = true;
  ARTSet203[ARTL_ART_structured_statement] = true;
  ARTSet203[ARTL_ART_variable_ID] = true;
  ARTSet203[ARTL_ART_variable_access] = true;
  ARTSet203[ARTL_ART_while_statement] = true;
  ARTSet203[ARTL_ART_with_statement] = true;
}

public void ARTSet436initialise() {
  ARTSet436 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet436, 0, artSetExtent, false);
  ARTSet436[ARTTS__PLUS] = true;
  ARTSet436[ARTTS__MINUS] = true;
  ARTSet436[ARTTS_INTEGER] = true;
  ARTSet436[ARTTS_REAL] = true;
  ARTSet436[ARTTS_STRING] = true;
  ARTSet436[ARTTS_constant_ID] = true;
  ARTSet436[ARTL_ART_case_constant] = true;
  ARTSet436[ARTL_ART_case_constant_list] = true;
  ARTSet436[ARTL_ART_character_string] = true;
  ARTSet436[ARTL_ART_constant] = true;
  ARTSet436[ARTL_ART_constant_7] = true;
  ARTSet436[ARTL_ART_constant_8] = true;
  ARTSet436[ARTL_ART_constant_ID] = true;
  ARTSet436[ARTL_ART_digit_sequence] = true;
  ARTSet436[ARTL_ART_sign] = true;
  ARTSet436[ARTL_ART_unsigned_integer] = true;
  ARTSet436[ARTL_ART_unsigned_number] = true;
  ARTSet436[ARTL_ART_unsigned_real] = true;
  ARTSet436[ARTL_ART_variant] = true;
}

public void ARTSet236initialise() {
  ARTSet236 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet236, 0, artSetExtent, false);
  ARTSet236[ARTTS__LPAR] = true;
  ARTSet236[ARTL_ART_enumerated_type] = true;
}

public void ARTSet53initialise() {
  ARTSet53 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet53, 0, artSetExtent, false);
  ARTSet53[ARTTS_begin] = true;
  ARTSet53[ARTTS_function] = true;
  ARTSet53[ARTTS_procedure] = true;
  ARTSet53[ARTTS_type] = true;
  ARTSet53[ARTTS_var] = true;
  ARTSet53[ARTL_ART_compound_statement] = true;
  ARTSet53[ARTL_ART_function_declaration] = true;
  ARTSet53[ARTL_ART_function_heading] = true;
  ARTSet53[ARTL_ART_function_identification] = true;
  ARTSet53[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet53[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet53[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet53[ARTL_ART_procedure_declaration] = true;
  ARTSet53[ARTL_ART_procedure_heading] = true;
  ARTSet53[ARTL_ART_procedure_identification] = true;
  ARTSet53[ARTL_ART_statement_part] = true;
  ARTSet53[ARTL_ART_type_definition_part] = true;
  ARTSet53[ARTL_ART_type_definition_part_46] = true;
  ARTSet53[ARTL_ART_variable_declaration_part] = true;
  ARTSet53[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet308initialise() {
  ARTSet308 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet308, 0, artSetExtent, false);
  ARTSet308[ARTTS__COMMA] = true;
  ARTSet308[ARTL_ART_record_variable_list_34] = true;
}

public void ARTSet25initialise() {
  ARTSet25 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet25, 0, artSetExtent, false);
  ARTSet25[ARTTS__LPAR] = true;
  ARTSet25[ARTTS_INTEGER] = true;
  ARTSet25[ARTTS_REAL] = true;
  ARTSet25[ARTTS_STRING] = true;
  ARTSet25[ARTTS__LBRACK] = true;
  ARTSet25[ARTTS_constant_ID] = true;
  ARTSet25[ARTTS_field_designator_ID] = true;
  ARTSet25[ARTTS_function_ID] = true;
  ARTSet25[ARTTS_nil] = true;
  ARTSet25[ARTTS_not] = true;
  ARTSet25[ARTTS_variable_ID] = true;
  ARTSet25[ARTL_ART_character_string] = true;
  ARTSet25[ARTL_ART_component_variable] = true;
  ARTSet25[ARTL_ART_constant_ID] = true;
  ARTSet25[ARTL_ART_digit_sequence] = true;
  ARTSet25[ARTL_ART_entire_variable] = true;
  ARTSet25[ARTL_ART_factor] = true;
  ARTSet25[ARTL_ART_field_designator] = true;
  ARTSet25[ARTL_ART_field_designator_ID] = true;
  ARTSet25[ARTL_ART_function_ID] = true;
  ARTSet25[ARTL_ART_function_designator] = true;
  ARTSet25[ARTL_ART_indexed_variable] = true;
  ARTSet25[ARTL_ART_set_constructor] = true;
  ARTSet25[ARTL_ART_term] = true;
  ARTSet25[ARTL_ART_unsigned_constant] = true;
  ARTSet25[ARTL_ART_unsigned_integer] = true;
  ARTSet25[ARTL_ART_unsigned_number] = true;
  ARTSet25[ARTL_ART_unsigned_real] = true;
  ARTSet25[ARTL_ART_variable_ID] = true;
  ARTSet25[ARTL_ART_variable_access] = true;
}

public void ARTSet198initialise() {
  ARTSet198 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet198, 0, artSetExtent, false);
  ARTSet198[ARTTS_goto] = true;
}

public void ARTSet227initialise() {
  ARTSet227 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet227, 0, artSetExtent, false);
  ARTSet227[ARTTS__COMMA] = true;
  ARTSet227[ARTTS__PERIOD_PERIOD] = true;
  ARTSet227[ARTTS__RBRACK] = true;
  ARTSet227[ARTL_ART_set_constructor_36] = true;
}

public void ARTSet284initialise() {
  ARTSet284 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet284, 0, artSetExtent, false);
  ARTSet284[ARTTS__LPAR] = true;
  ARTSet284[ARTL_ART_writeln_parameter_list] = true;
  ARTSet284[ARTL_ART_writeln_parameter_list_55] = true;
}

public void ARTSet150initialise() {
  ARTSet150 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet150, 0, artSetExtent, false);
  ARTSet150[ARTTS__RPAR] = true;
  ARTSet150[ARTTS_ID] = true;
  ARTSet150[ARTTS_end] = true;
  ARTSet150[ARTL_ART_ID] = true;
  ARTSet150[ARTL_ART_ID_list] = true;
  ARTSet150[ARTL_ART_field_list_12] = true;
  ARTSet150[ARTL_ART_fixed_part] = true;
  ARTSet150[ARTL_ART_record_section] = true;
}

public void ARTSet317initialise() {
  ARTSet317 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet317, 0, artSetExtent, false);
  ARTSet317[ARTTS__SEMICOLON] = true;
  ARTSet317[ARTTS_INTEGER] = true;
  ARTSet317[ARTTS_begin] = true;
  ARTSet317[ARTTS_case] = true;
  ARTSet317[ARTTS_field_designator_ID] = true;
  ARTSet317[ARTTS_for] = true;
  ARTSet317[ARTTS_function_ID] = true;
  ARTSet317[ARTTS_goto] = true;
  ARTSet317[ARTTS_if] = true;
  ARTSet317[ARTTS_procedure_ID] = true;
  ARTSet317[ARTTS_read] = true;
  ARTSet317[ARTTS_readln] = true;
  ARTSet317[ARTTS_repeat] = true;
  ARTSet317[ARTTS_until] = true;
  ARTSet317[ARTTS_variable_ID] = true;
  ARTSet317[ARTTS_while] = true;
  ARTSet317[ARTTS_with] = true;
  ARTSet317[ARTTS_write] = true;
  ARTSet317[ARTTS_writeln] = true;
  ARTSet317[ARTL_ART_assignment_statement] = true;
  ARTSet317[ARTL_ART_assignment_statement_3] = true;
  ARTSet317[ARTL_ART_case_statement] = true;
  ARTSet317[ARTL_ART_component_variable] = true;
  ARTSet317[ARTL_ART_compound_statement] = true;
  ARTSet317[ARTL_ART_conditional_statement] = true;
  ARTSet317[ARTL_ART_digit_sequence] = true;
  ARTSet317[ARTL_ART_entire_variable] = true;
  ARTSet317[ARTL_ART_field_designator] = true;
  ARTSet317[ARTL_ART_field_designator_ID] = true;
  ARTSet317[ARTL_ART_for_statement] = true;
  ARTSet317[ARTL_ART_function_ID] = true;
  ARTSet317[ARTL_ART_goto_statement] = true;
  ARTSet317[ARTL_ART_if_statement] = true;
  ARTSet317[ARTL_ART_indexed_variable] = true;
  ARTSet317[ARTL_ART_label] = true;
  ARTSet317[ARTL_ART_procedure_ID] = true;
  ARTSet317[ARTL_ART_procedure_statement] = true;
  ARTSet317[ARTL_ART_repeat_statement] = true;
  ARTSet317[ARTL_ART_repetitive_statement] = true;
  ARTSet317[ARTL_ART_simple_statement] = true;
  ARTSet317[ARTL_ART_simple_statement_41] = true;
  ARTSet317[ARTL_ART_statement] = true;
  ARTSet317[ARTL_ART_statement_42] = true;
  ARTSet317[ARTL_ART_statement_43] = true;
  ARTSet317[ARTL_ART_statement_sequence] = true;
  ARTSet317[ARTL_ART_statement_sequence_44] = true;
  ARTSet317[ARTL_ART_structured_statement] = true;
  ARTSet317[ARTL_ART_variable_ID] = true;
  ARTSet317[ARTL_ART_variable_access] = true;
  ARTSet317[ARTL_ART_while_statement] = true;
  ARTSet317[ARTL_ART_with_statement] = true;
}

public void ARTSet270initialise() {
  ARTSet270 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet270, 0, artSetExtent, false);
  ARTSet270[ARTTS_procedure] = true;
}

public void ARTSet324initialise() {
  ARTSet324 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet324, 0, artSetExtent, false);
  ARTSet324[ARTTS__PLUS] = true;
  ARTSet324[ARTTS__MINUS] = true;
  ARTSet324[ARTTS_INTEGER] = true;
  ARTSet324[ARTL_ART_digit_sequence] = true;
  ARTSet324[ARTL_ART_sign] = true;
  ARTSet324[ARTL_ART_signed_integer] = true;
  ARTSet324[ARTL_ART_signed_integer_37] = true;
  ARTSet324[ARTL_ART_unsigned_integer] = true;
}

public void ARTSet124initialise() {
  ARTSet124 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet124, 0, artSetExtent, false);
  ARTSet124[ARTTS_type_ID] = true;
  ARTSet124[ARTL_ART_type_ID] = true;
}

public void ARTSet148initialise() {
  ARTSet148 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet148, 0, artSetExtent, false);
  ARTSet148[ARTTS__RPAR] = true;
  ARTSet148[ARTTS_end] = true;
}

public void ARTSet44initialise() {
  ARTSet44 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet44, 0, artSetExtent, false);
  ARTSet44[ARTTS_field_designator_ID] = true;
  ARTSet44[ARTTS_function_ID] = true;
  ARTSet44[ARTTS_variable_ID] = true;
  ARTSet44[ARTL_ART_component_variable] = true;
  ARTSet44[ARTL_ART_entire_variable] = true;
  ARTSet44[ARTL_ART_field_designator] = true;
  ARTSet44[ARTL_ART_field_designator_ID] = true;
  ARTSet44[ARTL_ART_function_ID] = true;
  ARTSet44[ARTL_ART_indexed_variable] = true;
  ARTSet44[ARTL_ART_variable_ID] = true;
  ARTSet44[ARTL_ART_variable_access] = true;
}

public void ARTSet153initialise() {
  ARTSet153 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet153, 0, artSetExtent, false);
  ARTSet153[ARTTS__RPAR] = true;
  ARTSet153[ARTTS__SEMICOLON] = true;
  ARTSet153[ARTTS_end] = true;
  ARTSet153[ARTL_ART_field_list_13] = true;
}

public void ARTSet11initialise() {
  ARTSet11 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet11, 0, artSetExtent, false);
  ARTSet11[ARTTS__RPAR] = true;
  ARTSet11[ARTTS__COMMA] = true;
  ARTSet11[ARTTS__COLON] = true;
}

public void ARTSet362initialise() {
  ARTSet362 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet362, 0, artSetExtent, false);
  ARTSet362[ARTTS__SEMICOLON] = true;
  ARTSet362[ARTTS_INTEGER] = true;
  ARTSet362[ARTTS_begin] = true;
  ARTSet362[ARTTS_case] = true;
  ARTSet362[ARTTS_else] = true;
  ARTSet362[ARTTS_end] = true;
  ARTSet362[ARTTS_field_designator_ID] = true;
  ARTSet362[ARTTS_for] = true;
  ARTSet362[ARTTS_function_ID] = true;
  ARTSet362[ARTTS_goto] = true;
  ARTSet362[ARTTS_if] = true;
  ARTSet362[ARTTS_procedure_ID] = true;
  ARTSet362[ARTTS_read] = true;
  ARTSet362[ARTTS_readln] = true;
  ARTSet362[ARTTS_repeat] = true;
  ARTSet362[ARTTS_until] = true;
  ARTSet362[ARTTS_variable_ID] = true;
  ARTSet362[ARTTS_while] = true;
  ARTSet362[ARTTS_with] = true;
  ARTSet362[ARTTS_write] = true;
  ARTSet362[ARTTS_writeln] = true;
  ARTSet362[ARTL_ART_assignment_statement] = true;
  ARTSet362[ARTL_ART_assignment_statement_3] = true;
  ARTSet362[ARTL_ART_case_statement] = true;
  ARTSet362[ARTL_ART_case_statement_5] = true;
  ARTSet362[ARTL_ART_case_statement_6] = true;
  ARTSet362[ARTL_ART_component_variable] = true;
  ARTSet362[ARTL_ART_compound_statement] = true;
  ARTSet362[ARTL_ART_conditional_statement] = true;
  ARTSet362[ARTL_ART_digit_sequence] = true;
  ARTSet362[ARTL_ART_else_part] = true;
  ARTSet362[ARTL_ART_entire_variable] = true;
  ARTSet362[ARTL_ART_field_designator] = true;
  ARTSet362[ARTL_ART_field_designator_ID] = true;
  ARTSet362[ARTL_ART_for_statement] = true;
  ARTSet362[ARTL_ART_function_ID] = true;
  ARTSet362[ARTL_ART_goto_statement] = true;
  ARTSet362[ARTL_ART_if_statement] = true;
  ARTSet362[ARTL_ART_if_statement_19] = true;
  ARTSet362[ARTL_ART_indexed_variable] = true;
  ARTSet362[ARTL_ART_label] = true;
  ARTSet362[ARTL_ART_procedure_ID] = true;
  ARTSet362[ARTL_ART_procedure_statement] = true;
  ARTSet362[ARTL_ART_repeat_statement] = true;
  ARTSet362[ARTL_ART_repetitive_statement] = true;
  ARTSet362[ARTL_ART_simple_statement] = true;
  ARTSet362[ARTL_ART_simple_statement_41] = true;
  ARTSet362[ARTL_ART_statement_42] = true;
  ARTSet362[ARTL_ART_statement_43] = true;
  ARTSet362[ARTL_ART_statement_sequence_44] = true;
  ARTSet362[ARTL_ART_structured_statement] = true;
  ARTSet362[ARTL_ART_variable_ID] = true;
  ARTSet362[ARTL_ART_variable_access] = true;
  ARTSet362[ARTL_ART_while_statement] = true;
  ARTSet362[ARTL_ART_with_statement] = true;
}

public void ARTSet99initialise() {
  ARTSet99 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet99, 0, artSetExtent, false);
  ARTSet99[ARTTS__RPAR] = true;
  ARTSet99[ARTTS__COMMA] = true;
  ARTSet99[ARTTS__PERIOD_PERIOD] = true;
  ARTSet99[ARTTS__COLON] = true;
  ARTSet99[ARTTS__SEMICOLON] = true;
  ARTSet99[ARTTS__RBRACK] = true;
  ARTSet99[ARTTS_end] = true;
  ARTSet99[ARTL_ART_array_type_2] = true;
  ARTSet99[ARTL_ART_case_constant_list_4] = true;
}

public void ARTSet376initialise() {
  ARTSet376 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet376, 0, artSetExtent, false);
  ARTSet376[ARTTS__SEMICOLON] = true;
  ARTSet376[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet46initialise() {
  ARTSet46 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet46, 0, artSetExtent, false);
  ARTSet46[ARTTS_function_ID] = true;
  ARTSet46[ARTL_ART_function_ID] = true;
}

public void ARTSet104initialise() {
  ARTSet104 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet104, 0, artSetExtent, false);
  ARTSet104[ARTTS__PLUS] = true;
  ARTSet104[ARTTS__MINUS] = true;
  ARTSet104[ARTL_ART_sign] = true;
}

public void ARTSet409initialise() {
  ARTSet409 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet409, 0, artSetExtent, false);
  ARTSet409[ARTTS__SEMICOLON] = true;
  ARTSet409[ARTL_ART_unpacked_conformant_array_schema_48] = true;
}

public void ARTSet122initialise() {
  ARTSet122 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet122, 0, artSetExtent, false);
  ARTSet122[ARTTS_INTEGER] = true;
}

public void ARTSet192initialise() {
  ARTSet192 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet192, 0, artSetExtent, false);
  ARTSet192[ARTTS_function] = true;
}

public void ARTSet66initialise() {
  ARTSet66 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet66, 0, artSetExtent, false);
  ARTSet66[ARTTS__COMMA] = true;
  ARTSet66[ARTL_ART_case_constant_list_4] = true;
}

public void ARTSet384initialise() {
  ARTSet384 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet384, 0, artSetExtent, false);
  ARTSet384[ARTTS_begin] = true;
  ARTSet384[ARTTS_case] = true;
  ARTSet384[ARTTS_for] = true;
  ARTSet384[ARTTS_if] = true;
  ARTSet384[ARTTS_repeat] = true;
  ARTSet384[ARTTS_while] = true;
  ARTSet384[ARTTS_with] = true;
  ARTSet384[ARTL_ART_case_statement] = true;
  ARTSet384[ARTL_ART_compound_statement] = true;
  ARTSet384[ARTL_ART_conditional_statement] = true;
  ARTSet384[ARTL_ART_for_statement] = true;
  ARTSet384[ARTL_ART_if_statement] = true;
  ARTSet384[ARTL_ART_repeat_statement] = true;
  ARTSet384[ARTL_ART_repetitive_statement] = true;
  ARTSet384[ARTL_ART_while_statement] = true;
  ARTSet384[ARTL_ART_with_statement] = true;
}

public void ARTSet10initialise() {
  ARTSet10 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet10, 0, artSetExtent, false);
  ARTSet10[ARTTS__COMMA] = true;
  ARTSet10[ARTL_ART_ID_list_18] = true;
}

public void ARTSet70initialise() {
  ARTSet70 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet70, 0, artSetExtent, false);
  ARTSet70[ARTTS__SEMICOLON] = true;
  ARTSet70[ARTTS_INTEGER] = true;
  ARTSet70[ARTTS_begin] = true;
  ARTSet70[ARTTS_case] = true;
  ARTSet70[ARTTS_end] = true;
  ARTSet70[ARTTS_field_designator_ID] = true;
  ARTSet70[ARTTS_for] = true;
  ARTSet70[ARTTS_function_ID] = true;
  ARTSet70[ARTTS_goto] = true;
  ARTSet70[ARTTS_if] = true;
  ARTSet70[ARTTS_procedure_ID] = true;
  ARTSet70[ARTTS_read] = true;
  ARTSet70[ARTTS_readln] = true;
  ARTSet70[ARTTS_repeat] = true;
  ARTSet70[ARTTS_variable_ID] = true;
  ARTSet70[ARTTS_while] = true;
  ARTSet70[ARTTS_with] = true;
  ARTSet70[ARTTS_write] = true;
  ARTSet70[ARTTS_writeln] = true;
  ARTSet70[ARTL_ART_assignment_statement] = true;
  ARTSet70[ARTL_ART_assignment_statement_3] = true;
  ARTSet70[ARTL_ART_case_statement] = true;
  ARTSet70[ARTL_ART_case_statement_5] = true;
  ARTSet70[ARTL_ART_case_statement_6] = true;
  ARTSet70[ARTL_ART_component_variable] = true;
  ARTSet70[ARTL_ART_compound_statement] = true;
  ARTSet70[ARTL_ART_conditional_statement] = true;
  ARTSet70[ARTL_ART_digit_sequence] = true;
  ARTSet70[ARTL_ART_entire_variable] = true;
  ARTSet70[ARTL_ART_field_designator] = true;
  ARTSet70[ARTL_ART_field_designator_ID] = true;
  ARTSet70[ARTL_ART_for_statement] = true;
  ARTSet70[ARTL_ART_function_ID] = true;
  ARTSet70[ARTL_ART_goto_statement] = true;
  ARTSet70[ARTL_ART_if_statement] = true;
  ARTSet70[ARTL_ART_indexed_variable] = true;
  ARTSet70[ARTL_ART_label] = true;
  ARTSet70[ARTL_ART_procedure_ID] = true;
  ARTSet70[ARTL_ART_procedure_statement] = true;
  ARTSet70[ARTL_ART_repeat_statement] = true;
  ARTSet70[ARTL_ART_repetitive_statement] = true;
  ARTSet70[ARTL_ART_simple_statement] = true;
  ARTSet70[ARTL_ART_simple_statement_41] = true;
  ARTSet70[ARTL_ART_statement] = true;
  ARTSet70[ARTL_ART_statement_42] = true;
  ARTSet70[ARTL_ART_statement_43] = true;
  ARTSet70[ARTL_ART_structured_statement] = true;
  ARTSet70[ARTL_ART_variable_ID] = true;
  ARTSet70[ARTL_ART_variable_access] = true;
  ARTSet70[ARTL_ART_while_statement] = true;
  ARTSet70[ARTL_ART_with_statement] = true;
}

public void ARTSet91initialise() {
  ARTSet91 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet91, 0, artSetExtent, false);
  ARTSet91[ARTTS_case] = true;
  ARTSet91[ARTL_ART_case_statement] = true;
}

public void ARTSet97initialise() {
  ARTSet97 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet97, 0, artSetExtent, false);
  ARTSet97[ARTTS_array] = true;
  ARTSet97[ARTL_ART_unpacked_conformant_array_schema] = true;
}

public void ARTSet276initialise() {
  ARTSet276 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet276, 0, artSetExtent, false);
  ARTSet276[ARTTS_read] = true;
}

public void ARTSet14initialise() {
  ARTSet14 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet14, 0, artSetExtent, false);
  ARTSet14[ARTTS__LPAR] = true;
  ARTSet14[ARTTS__PLUS] = true;
  ARTSet14[ARTTS__MINUS] = true;
  ARTSet14[ARTTS_INTEGER] = true;
  ARTSet14[ARTTS_REAL] = true;
  ARTSet14[ARTTS_STRING] = true;
  ARTSet14[ARTTS__LBRACK] = true;
  ARTSet14[ARTTS_constant_ID] = true;
  ARTSet14[ARTTS_field_designator_ID] = true;
  ARTSet14[ARTTS_function_ID] = true;
  ARTSet14[ARTTS_nil] = true;
  ARTSet14[ARTTS_not] = true;
  ARTSet14[ARTTS_procedure_ID] = true;
  ARTSet14[ARTTS_variable_ID] = true;
  ARTSet14[ARTL_ART_character_string] = true;
  ARTSet14[ARTL_ART_component_variable] = true;
  ARTSet14[ARTL_ART_constant_ID] = true;
  ARTSet14[ARTL_ART_digit_sequence] = true;
  ARTSet14[ARTL_ART_entire_variable] = true;
  ARTSet14[ARTL_ART_expression] = true;
  ARTSet14[ARTL_ART_factor] = true;
  ARTSet14[ARTL_ART_field_designator] = true;
  ARTSet14[ARTL_ART_field_designator_ID] = true;
  ARTSet14[ARTL_ART_function_ID] = true;
  ARTSet14[ARTL_ART_function_designator] = true;
  ARTSet14[ARTL_ART_indexed_variable] = true;
  ARTSet14[ARTL_ART_procedure_ID] = true;
  ARTSet14[ARTL_ART_set_constructor] = true;
  ARTSet14[ARTL_ART_sign] = true;
  ARTSet14[ARTL_ART_simple_expression] = true;
  ARTSet14[ARTL_ART_term] = true;
  ARTSet14[ARTL_ART_unsigned_constant] = true;
  ARTSet14[ARTL_ART_unsigned_integer] = true;
  ARTSet14[ARTL_ART_unsigned_number] = true;
  ARTSet14[ARTL_ART_unsigned_real] = true;
  ARTSet14[ARTL_ART_variable_ID] = true;
  ARTSet14[ARTL_ART_variable_access] = true;
}

public void ARTSet144initialise() {
  ARTSet144 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet144, 0, artSetExtent, false);
  ARTSet144[ARTTS_field_ID] = true;
  ARTSet144[ARTL_ART_field_ID] = true;
  ARTSet144[ARTL_ART_field_specifier] = true;
}

public void ARTSet217initialise() {
  ARTSet217 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet217, 0, artSetExtent, false);
  ARTSet217[ARTTS_label] = true;
}

public void ARTSet419initialise() {
  ARTSet419 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet419, 0, artSetExtent, false);
  ARTSet419[ARTTS_file] = true;
  ARTSet419[ARTL_ART_file_type] = true;
}

public void ARTSet16initialise() {
  ARTSet16 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet16, 0, artSetExtent, false);
  ARTSet16[ARTTS_procedure_ID] = true;
  ARTSet16[ARTL_ART_procedure_ID] = true;
}

public void ARTSet174initialise() {
  ARTSet174 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet174, 0, artSetExtent, false);
  ARTSet174[ARTTS_ID] = true;
  ARTSet174[ARTTS_function] = true;
  ARTSet174[ARTTS_procedure] = true;
  ARTSet174[ARTTS_var] = true;
  ARTSet174[ARTL_ART_ID] = true;
  ARTSet174[ARTL_ART_ID_list] = true;
  ARTSet174[ARTL_ART_function_heading] = true;
  ARTSet174[ARTL_ART_functional_parameter_specification] = true;
  ARTSet174[ARTL_ART_procedural_parameter_specification] = true;
  ARTSet174[ARTL_ART_procedure_heading] = true;
  ARTSet174[ARTL_ART_value_parameter_specification] = true;
  ARTSet174[ARTL_ART_variable_parameter_specification] = true;
}

public void ARTSet280initialise() {
  ARTSet280 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet280, 0, artSetExtent, false);
  ARTSet280[ARTTS__LPAR] = true;
  ARTSet280[ARTTS__SEMICOLON] = true;
  ARTSet280[ARTTS_else] = true;
  ARTSet280[ARTTS_end] = true;
  ARTSet280[ARTTS_until] = true;
  ARTSet280[ARTL_ART_case_statement_5] = true;
  ARTSet280[ARTL_ART_case_statement_6] = true;
  ARTSet280[ARTL_ART_else_part] = true;
  ARTSet280[ARTL_ART_if_statement_19] = true;
  ARTSet280[ARTL_ART_readln_parameter_list] = true;
  ARTSet280[ARTL_ART_readln_parameter_list_32] = true;
  ARTSet280[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet208initialise() {
  ARTSet208 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet208, 0, artSetExtent, false);
  ARTSet208[ARTTS__SEMICOLON] = true;
  ARTSet208[ARTTS__RBRACK] = true;
  ARTSet208[ARTL_ART_unpacked_conformant_array_schema_48] = true;
}

public void ARTSet209initialise() {
  ARTSet209 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet209, 0, artSetExtent, false);
  ARTSet209[ARTTS__PERIOD_PERIOD] = true;
}

public void ARTSet423initialise() {
  ARTSet423 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet423, 0, artSetExtent, false);
  ARTSet423[ARTTS_REAL] = true;
}

public void ARTSet141initialise() {
  ARTSet141 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet141, 0, artSetExtent, false);
  ARTSet141[ARTTS__LPAR] = true;
  ARTSet141[ARTTS_INTEGER] = true;
  ARTSet141[ARTTS_REAL] = true;
  ARTSet141[ARTTS_STRING] = true;
  ARTSet141[ARTTS__LBRACK] = true;
  ARTSet141[ARTTS_constant_ID] = true;
  ARTSet141[ARTTS_field_designator_ID] = true;
  ARTSet141[ARTTS_function_ID] = true;
  ARTSet141[ARTTS_nil] = true;
  ARTSet141[ARTTS_not] = true;
  ARTSet141[ARTTS_variable_ID] = true;
  ARTSet141[ARTL_ART_character_string] = true;
  ARTSet141[ARTL_ART_component_variable] = true;
  ARTSet141[ARTL_ART_constant_ID] = true;
  ARTSet141[ARTL_ART_digit_sequence] = true;
  ARTSet141[ARTL_ART_entire_variable] = true;
  ARTSet141[ARTL_ART_factor] = true;
  ARTSet141[ARTL_ART_field_designator] = true;
  ARTSet141[ARTL_ART_field_designator_ID] = true;
  ARTSet141[ARTL_ART_function_ID] = true;
  ARTSet141[ARTL_ART_function_designator] = true;
  ARTSet141[ARTL_ART_indexed_variable] = true;
  ARTSet141[ARTL_ART_set_constructor] = true;
  ARTSet141[ARTL_ART_unsigned_constant] = true;
  ARTSet141[ARTL_ART_unsigned_integer] = true;
  ARTSet141[ARTL_ART_unsigned_number] = true;
  ARTSet141[ARTL_ART_unsigned_real] = true;
  ARTSet141[ARTL_ART_variable_ID] = true;
  ARTSet141[ARTL_ART_variable_access] = true;
}

public void ARTSet290initialise() {
  ARTSet290 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet290, 0, artSetExtent, false);
  ARTSet290[ARTTS__LPAR] = true;
  ARTSet290[ARTTS__SEMICOLON] = true;
  ARTSet290[ARTL_ART_program_heading_30] = true;
}

public void ARTSet130initialise() {
  ARTSet130 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet130, 0, artSetExtent, false);
  ARTSet130[ARTTS__LPAR] = true;
  ARTSet130[ARTTS__PLUS] = true;
  ARTSet130[ARTTS__MINUS] = true;
  ARTSet130[ARTTS_INTEGER] = true;
  ARTSet130[ARTTS_REAL] = true;
  ARTSet130[ARTTS_STRING] = true;
  ARTSet130[ARTTS__LBRACK] = true;
  ARTSet130[ARTTS_constant_ID] = true;
  ARTSet130[ARTTS_field_designator_ID] = true;
  ARTSet130[ARTTS_function_ID] = true;
  ARTSet130[ARTTS_nil] = true;
  ARTSet130[ARTTS_not] = true;
  ARTSet130[ARTTS_variable_ID] = true;
  ARTSet130[ARTL_ART_character_string] = true;
  ARTSet130[ARTL_ART_component_variable] = true;
  ARTSet130[ARTL_ART_constant_ID] = true;
  ARTSet130[ARTL_ART_digit_sequence] = true;
  ARTSet130[ARTL_ART_entire_variable] = true;
  ARTSet130[ARTL_ART_factor] = true;
  ARTSet130[ARTL_ART_field_designator] = true;
  ARTSet130[ARTL_ART_field_designator_ID] = true;
  ARTSet130[ARTL_ART_function_ID] = true;
  ARTSet130[ARTL_ART_function_designator] = true;
  ARTSet130[ARTL_ART_indexed_variable] = true;
  ARTSet130[ARTL_ART_set_constructor] = true;
  ARTSet130[ARTL_ART_sign] = true;
  ARTSet130[ARTL_ART_simple_expression] = true;
  ARTSet130[ARTL_ART_term] = true;
  ARTSet130[ARTL_ART_unsigned_constant] = true;
  ARTSet130[ARTL_ART_unsigned_integer] = true;
  ARTSet130[ARTL_ART_unsigned_number] = true;
  ARTSet130[ARTL_ART_unsigned_real] = true;
  ARTSet130[ARTL_ART_variable_ID] = true;
  ARTSet130[ARTL_ART_variable_access] = true;
}

public void ARTSet177initialise() {
  ARTSet177 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet177, 0, artSetExtent, false);
  ARTSet177[ARTTS_procedure] = true;
  ARTSet177[ARTL_ART_procedural_parameter_specification] = true;
  ARTSet177[ARTL_ART_procedure_heading] = true;
}

public void ARTSet278initialise() {
  ARTSet278 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet278, 0, artSetExtent, false);
  ARTSet278[ARTTS_readln] = true;
}

public void ARTSet234initialise() {
  ARTSet234 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet234, 0, artSetExtent, false);
  ARTSet234[ARTTS_and] = true;
}

public void ARTSet37initialise() {
  ARTSet37 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet37, 0, artSetExtent, false);
  ARTSet37[ARTTS_of] = true;
}

public void ARTSet128initialise() {
  ARTSet128 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet128, 0, artSetExtent, false);
  ARTSet128[ARTTS__RPAR] = true;
  ARTSet128[ARTTS__COMMA] = true;
  ARTSet128[ARTTS__SEMICOLON] = true;
  ARTSet128[ARTTS__RBRACK] = true;
  ARTSet128[ARTTS_end] = true;
  ARTSet128[ARTL_ART_array_type_2] = true;
}

public void ARTSet179initialise() {
  ARTSet179 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet179, 0, artSetExtent, false);
  ARTSet179[ARTTS_INTEGER] = true;
  ARTSet179[ARTL_ART_digit_sequence] = true;
}

public void ARTSet279initialise() {
  ARTSet279 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet279, 0, artSetExtent, false);
  ARTSet279[ARTTS__LPAR] = true;
  ARTSet279[ARTL_ART_readln_parameter_list] = true;
  ARTSet279[ARTL_ART_readln_parameter_list_32] = true;
}

public void ARTSet222initialise() {
  ARTSet222 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet222, 0, artSetExtent, false);
  ARTSet222[ARTTS__COMMA] = true;
  ARTSet222[ARTL_ART_label_declaration_part_22] = true;
}

public void ARTSet316initialise() {
  ARTSet316 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet316, 0, artSetExtent, false);
  ARTSet316[ARTTS_repeat] = true;
}

public void ARTSet142initialise() {
  ARTSet142 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet142, 0, artSetExtent, false);
  ARTSet142[ARTTS_field_ID] = true;
}

public void ARTSet291initialise() {
  ARTSet291 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet291, 0, artSetExtent, false);
  ARTSet291[ARTTS__LPAR] = true;
  ARTSet291[ARTL_ART_program_heading_30] = true;
}

public void ARTSet351initialise() {
  ARTSet351 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet351, 0, artSetExtent, false);
  ARTSet351[ARTTS__PLUS] = true;
  ARTSet351[ARTTS__MINUS] = true;
  ARTSet351[ARTTS_or] = true;
  ARTSet351[ARTL_ART_adding_operator] = true;
  ARTSet351[ARTL_ART_simple_expression_40] = true;
}

public void ARTSet28initialise() {
  ARTSet28 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet28, 0, artSetExtent, false);
  ARTSet28[ARTTS_or] = true;
}

public void ARTSet273initialise() {
  ARTSet273 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet273, 0, artSetExtent, false);
  ARTSet273[ARTTS_procedure_ID] = true;
  ARTSet273[ARTTS_read] = true;
  ARTSet273[ARTTS_readln] = true;
  ARTSet273[ARTTS_write] = true;
  ARTSet273[ARTTS_writeln] = true;
  ARTSet273[ARTL_ART_procedure_ID] = true;
}

public void ARTSet293initialise() {
  ARTSet293 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet293, 0, artSetExtent, false);
  ARTSet293[ARTTS_ID] = true;
  ARTSet293[ARTL_ART_ID] = true;
  ARTSet293[ARTL_ART_ID_list] = true;
  ARTSet293[ARTL_ART_program_parameters] = true;
}

public void ARTSet372initialise() {
  ARTSet372 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet372, 0, artSetExtent, false);
  ARTSet372[ARTTS__SEMICOLON] = true;
  ARTSet372[ARTTS_INTEGER] = true;
  ARTSet372[ARTTS_begin] = true;
  ARTSet372[ARTTS_case] = true;
  ARTSet372[ARTTS_field_designator_ID] = true;
  ARTSet372[ARTTS_for] = true;
  ARTSet372[ARTTS_function_ID] = true;
  ARTSet372[ARTTS_goto] = true;
  ARTSet372[ARTTS_if] = true;
  ARTSet372[ARTTS_procedure_ID] = true;
  ARTSet372[ARTTS_read] = true;
  ARTSet372[ARTTS_readln] = true;
  ARTSet372[ARTTS_repeat] = true;
  ARTSet372[ARTTS_variable_ID] = true;
  ARTSet372[ARTTS_while] = true;
  ARTSet372[ARTTS_with] = true;
  ARTSet372[ARTTS_write] = true;
  ARTSet372[ARTTS_writeln] = true;
  ARTSet372[ARTL_ART_assignment_statement] = true;
  ARTSet372[ARTL_ART_assignment_statement_3] = true;
  ARTSet372[ARTL_ART_case_statement] = true;
  ARTSet372[ARTL_ART_component_variable] = true;
  ARTSet372[ARTL_ART_compound_statement] = true;
  ARTSet372[ARTL_ART_conditional_statement] = true;
  ARTSet372[ARTL_ART_digit_sequence] = true;
  ARTSet372[ARTL_ART_entire_variable] = true;
  ARTSet372[ARTL_ART_field_designator] = true;
  ARTSet372[ARTL_ART_field_designator_ID] = true;
  ARTSet372[ARTL_ART_for_statement] = true;
  ARTSet372[ARTL_ART_function_ID] = true;
  ARTSet372[ARTL_ART_goto_statement] = true;
  ARTSet372[ARTL_ART_if_statement] = true;
  ARTSet372[ARTL_ART_indexed_variable] = true;
  ARTSet372[ARTL_ART_label] = true;
  ARTSet372[ARTL_ART_procedure_ID] = true;
  ARTSet372[ARTL_ART_procedure_statement] = true;
  ARTSet372[ARTL_ART_repeat_statement] = true;
  ARTSet372[ARTL_ART_repetitive_statement] = true;
  ARTSet372[ARTL_ART_simple_statement] = true;
  ARTSet372[ARTL_ART_simple_statement_41] = true;
  ARTSet372[ARTL_ART_statement] = true;
  ARTSet372[ARTL_ART_statement_42] = true;
  ARTSet372[ARTL_ART_statement_43] = true;
  ARTSet372[ARTL_ART_statement_sequence_44] = true;
  ARTSet372[ARTL_ART_structured_statement] = true;
  ARTSet372[ARTL_ART_variable_ID] = true;
  ARTSet372[ARTL_ART_variable_access] = true;
  ARTSet372[ARTL_ART_while_statement] = true;
  ARTSet372[ARTL_ART_with_statement] = true;
}

public void ARTSet211initialise() {
  ARTSet211 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet211, 0, artSetExtent, false);
  ARTSet211[ARTTS__LPAR] = true;
  ARTSet211[ARTTS__PLUS] = true;
  ARTSet211[ARTTS__MINUS] = true;
  ARTSet211[ARTTS_INTEGER] = true;
  ARTSet211[ARTTS_REAL] = true;
  ARTSet211[ARTTS_STRING] = true;
  ARTSet211[ARTTS__LBRACK] = true;
  ARTSet211[ARTTS_constant_ID] = true;
  ARTSet211[ARTTS_field_designator_ID] = true;
  ARTSet211[ARTTS_function_ID] = true;
  ARTSet211[ARTTS_nil] = true;
  ARTSet211[ARTTS_not] = true;
  ARTSet211[ARTTS_variable_ID] = true;
  ARTSet211[ARTL_ART_character_string] = true;
  ARTSet211[ARTL_ART_component_variable] = true;
  ARTSet211[ARTL_ART_constant_ID] = true;
  ARTSet211[ARTL_ART_digit_sequence] = true;
  ARTSet211[ARTL_ART_entire_variable] = true;
  ARTSet211[ARTL_ART_expression] = true;
  ARTSet211[ARTL_ART_factor] = true;
  ARTSet211[ARTL_ART_field_designator] = true;
  ARTSet211[ARTL_ART_field_designator_ID] = true;
  ARTSet211[ARTL_ART_function_ID] = true;
  ARTSet211[ARTL_ART_function_designator] = true;
  ARTSet211[ARTL_ART_index_expression] = true;
  ARTSet211[ARTL_ART_indexed_variable] = true;
  ARTSet211[ARTL_ART_set_constructor] = true;
  ARTSet211[ARTL_ART_sign] = true;
  ARTSet211[ARTL_ART_simple_expression] = true;
  ARTSet211[ARTL_ART_term] = true;
  ARTSet211[ARTL_ART_unsigned_constant] = true;
  ARTSet211[ARTL_ART_unsigned_integer] = true;
  ARTSet211[ARTL_ART_unsigned_number] = true;
  ARTSet211[ARTL_ART_unsigned_real] = true;
  ARTSet211[ARTL_ART_variable_ID] = true;
  ARTSet211[ARTL_ART_variable_access] = true;
}

public void ARTSet357initialise() {
  ARTSet357 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet357, 0, artSetExtent, false);
  ARTSet357[ARTTS_field_designator_ID] = true;
  ARTSet357[ARTTS_function_ID] = true;
  ARTSet357[ARTTS_variable_ID] = true;
  ARTSet357[ARTL_ART_assignment_statement] = true;
  ARTSet357[ARTL_ART_assignment_statement_3] = true;
  ARTSet357[ARTL_ART_component_variable] = true;
  ARTSet357[ARTL_ART_entire_variable] = true;
  ARTSet357[ARTL_ART_field_designator] = true;
  ARTSet357[ARTL_ART_field_designator_ID] = true;
  ARTSet357[ARTL_ART_function_ID] = true;
  ARTSet357[ARTL_ART_indexed_variable] = true;
  ARTSet357[ARTL_ART_variable_ID] = true;
  ARTSet357[ARTL_ART_variable_access] = true;
}

public void ARTSet191initialise() {
  ARTSet191 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet191, 0, artSetExtent, false);
  ARTSet191[ARTTS__LPAR] = true;
  ARTSet191[ARTL_ART_actual_parameter_list] = true;
}

public void ARTSet54initialise() {
  ARTSet54 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet54, 0, artSetExtent, false);
  ARTSet54[ARTTS_type] = true;
  ARTSet54[ARTL_ART_type_definition_part] = true;
  ARTSet54[ARTL_ART_type_definition_part_46] = true;
}

public void ARTSet118initialise() {
  ARTSet118 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet118, 0, artSetExtent, false);
  ARTSet118[ARTTS_const] = true;
}

public void ARTSet421initialise() {
  ARTSet421 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet421, 0, artSetExtent, false);
  ARTSet421[ARTTS_nil] = true;
}

public void ARTSet161initialise() {
  ARTSet161 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet161, 0, artSetExtent, false);
  ARTSet161[ARTTS_variable_ID] = true;
  ARTSet161[ARTL_ART_control_variable] = true;
  ARTSet161[ARTL_ART_entire_variable] = true;
  ARTSet161[ARTL_ART_variable_ID] = true;
}

public void ARTSet289initialise() {
  ARTSet289 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet289, 0, artSetExtent, false);
  ARTSet289[ARTTS_program] = true;
}

public void ARTSet417initialise() {
  ARTSet417 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet417, 0, artSetExtent, false);
  ARTSet417[ARTTS_record] = true;
  ARTSet417[ARTL_ART_record_type] = true;
}

public void ARTSet306initialise() {
  ARTSet306 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet306, 0, artSetExtent, false);
  ARTSet306[ARTTS__COMMA] = true;
  ARTSet306[ARTL_ART_record_variable_list_34] = true;
}

public void ARTSet281initialise() {
  ARTSet281 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet281, 0, artSetExtent, false);
  ARTSet281[ARTTS_write] = true;
}

public void ARTSet261initialise() {
  ARTSet261 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet261, 0, artSetExtent, false);
  ARTSet261[ARTTS_function] = true;
  ARTSet261[ARTTS_procedure] = true;
  ARTSet261[ARTL_ART_function_declaration] = true;
  ARTSet261[ARTL_ART_function_heading] = true;
  ARTSet261[ARTL_ART_function_identification] = true;
  ARTSet261[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet261[ARTL_ART_procedure_declaration] = true;
  ARTSet261[ARTL_ART_procedure_heading] = true;
  ARTSet261[ARTL_ART_procedure_identification] = true;
}

public void ARTSet438initialise() {
  ARTSet438 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet438, 0, artSetExtent, false);
  ARTSet438[ARTTS_tag_field] = true;
  ARTSet438[ARTL_ART_tag_field] = true;
  ARTSet438[ARTL_ART_variant_selector_52] = true;
}

public void ARTSet402initialise() {
  ARTSet402 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet402, 0, artSetExtent, false);
  ARTSet402[ARTTS_ID] = true;
  ARTSet402[ARTL_ART_ID] = true;
  ARTSet402[ARTL_ART_type_definition] = true;
}

public void ARTSet344initialise() {
  ARTSet344 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet344, 0, artSetExtent, false);
  ARTSet344[ARTTS__RPAR] = true;
  ARTSet344[ARTTS__PLUS] = true;
  ARTSet344[ARTTS__COMMA] = true;
  ARTSet344[ARTTS__MINUS] = true;
  ARTSet344[ARTTS__PERIOD_PERIOD] = true;
  ARTSet344[ARTTS__COLON] = true;
  ARTSet344[ARTTS__SEMICOLON] = true;
  ARTSet344[ARTTS__LT] = true;
  ARTSet344[ARTTS__LT_EQUAL] = true;
  ARTSet344[ARTTS__LT_GT] = true;
  ARTSet344[ARTTS__EQUAL] = true;
  ARTSet344[ARTTS__GT] = true;
  ARTSet344[ARTTS__GT_EQUAL] = true;
  ARTSet344[ARTTS__RBRACK] = true;
  ARTSet344[ARTTS_do] = true;
  ARTSet344[ARTTS_downto] = true;
  ARTSet344[ARTTS_else] = true;
  ARTSet344[ARTTS_end] = true;
  ARTSet344[ARTTS_in] = true;
  ARTSet344[ARTTS_of] = true;
  ARTSet344[ARTTS_or] = true;
  ARTSet344[ARTTS_then] = true;
  ARTSet344[ARTTS_to] = true;
  ARTSet344[ARTTS_until] = true;
  ARTSet344[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet344[ARTL_ART_adding_operator] = true;
  ARTSet344[ARTL_ART_case_statement_5] = true;
  ARTSet344[ARTL_ART_case_statement_6] = true;
  ARTSet344[ARTL_ART_else_part] = true;
  ARTSet344[ARTL_ART_expression_11] = true;
  ARTSet344[ARTL_ART_for_statement_14] = true;
  ARTSet344[ARTL_ART_if_statement_19] = true;
  ARTSet344[ARTL_ART_indexed_variable_20] = true;
  ARTSet344[ARTL_ART_member_designator_23] = true;
  ARTSet344[ARTL_ART_relational_operator] = true;
  ARTSet344[ARTL_ART_set_constructor_36] = true;
  ARTSet344[ARTL_ART_simple_expression_39] = true;
  ARTSet344[ARTL_ART_statement_sequence_44] = true;
  ARTSet344[ARTL_ART_write_parameter_53] = true;
  ARTSet344[ARTL_ART_write_parameter_54] = true;
  ARTSet344[ARTL_ART_write_parameter_list_57] = true;
  ARTSet344[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet245initialise() {
  ARTSet245 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet245, 0, artSetExtent, false);
  ARTSet245[ARTTS__LPAR] = true;
  ARTSet245[ARTTS__PLUS] = true;
  ARTSet245[ARTTS__MINUS] = true;
  ARTSet245[ARTTS_INTEGER] = true;
  ARTSet245[ARTTS_REAL] = true;
  ARTSet245[ARTTS_STRING] = true;
  ARTSet245[ARTTS__UPARROW] = true;
  ARTSet245[ARTTS_array] = true;
  ARTSet245[ARTTS_constant_ID] = true;
  ARTSet245[ARTTS_file] = true;
  ARTSet245[ARTTS_packed] = true;
  ARTSet245[ARTTS_record] = true;
  ARTSet245[ARTTS_set] = true;
  ARTSet245[ARTL_ART_array_type] = true;
  ARTSet245[ARTL_ART_character_string] = true;
  ARTSet245[ARTL_ART_constant] = true;
  ARTSet245[ARTL_ART_constant_7] = true;
  ARTSet245[ARTL_ART_constant_8] = true;
  ARTSet245[ARTL_ART_constant_ID] = true;
  ARTSet245[ARTL_ART_digit_sequence] = true;
  ARTSet245[ARTL_ART_enumerated_type] = true;
  ARTSet245[ARTL_ART_file_type] = true;
  ARTSet245[ARTL_ART_new_ordinal_type] = true;
  ARTSet245[ARTL_ART_new_pointer_type] = true;
  ARTSet245[ARTL_ART_new_structured_type] = true;
  ARTSet245[ARTL_ART_new_structured_type_24] = true;
  ARTSet245[ARTL_ART_record_type] = true;
  ARTSet245[ARTL_ART_set_type] = true;
  ARTSet245[ARTL_ART_sign] = true;
  ARTSet245[ARTL_ART_subrange_type] = true;
  ARTSet245[ARTL_ART_unpacked_structured_type] = true;
  ARTSet245[ARTL_ART_unsigned_integer] = true;
  ARTSet245[ARTL_ART_unsigned_number] = true;
  ARTSet245[ARTL_ART_unsigned_real] = true;
}

public void ARTSet427initialise() {
  ARTSet427 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet427, 0, artSetExtent, false);
  ARTSet427[ARTTS_begin] = true;
  ARTSet427[ARTTS_function] = true;
  ARTSet427[ARTTS_procedure] = true;
  ARTSet427[ARTTS_var] = true;
  ARTSet427[ARTL_ART_compound_statement] = true;
  ARTSet427[ARTL_ART_function_declaration] = true;
  ARTSet427[ARTL_ART_function_heading] = true;
  ARTSet427[ARTL_ART_function_identification] = true;
  ARTSet427[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet427[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet427[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet427[ARTL_ART_procedure_declaration] = true;
  ARTSet427[ARTL_ART_procedure_heading] = true;
  ARTSet427[ARTL_ART_procedure_identification] = true;
  ARTSet427[ARTL_ART_statement_part] = true;
  ARTSet427[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet434initialise() {
  ARTSet434 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet434, 0, artSetExtent, false);
  ARTSet434[ARTTS__RPAR] = true;
  ARTSet434[ARTTS_ID] = true;
  ARTSet434[ARTTS_case] = true;
  ARTSet434[ARTL_ART_ID] = true;
  ARTSet434[ARTL_ART_ID_list] = true;
  ARTSet434[ARTL_ART_field_list] = true;
  ARTSet434[ARTL_ART_field_list_12] = true;
  ARTSet434[ARTL_ART_fixed_part] = true;
  ARTSet434[ARTL_ART_record_section] = true;
  ARTSet434[ARTL_ART_variant_part] = true;
}

public void ARTSet149initialise() {
  ARTSet149 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet149, 0, artSetExtent, false);
  ARTSet149[ARTTS_ID] = true;
  ARTSet149[ARTL_ART_ID] = true;
  ARTSet149[ARTL_ART_ID_list] = true;
  ARTSet149[ARTL_ART_field_list_12] = true;
  ARTSet149[ARTL_ART_fixed_part] = true;
  ARTSet149[ARTL_ART_record_section] = true;
}

public void ARTSet45initialise() {
  ARTSet45 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet45, 0, artSetExtent, false);
  ARTSet45[ARTTS_field_designator_ID] = true;
  ARTSet45[ARTTS_variable_ID] = true;
  ARTSet45[ARTL_ART_component_variable] = true;
  ARTSet45[ARTL_ART_entire_variable] = true;
  ARTSet45[ARTL_ART_field_designator] = true;
  ARTSet45[ARTL_ART_field_designator_ID] = true;
  ARTSet45[ARTL_ART_indexed_variable] = true;
  ARTSet45[ARTL_ART_variable_ID] = true;
  ARTSet45[ARTL_ART_variable_access] = true;
}

public void ARTSet202initialise() {
  ARTSet202 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet202, 0, artSetExtent, false);
  ARTSet202[ARTTS_then] = true;
}

public void ARTSet9initialise() {
  ARTSet9 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet9, 0, artSetExtent, false);
  ARTSet9[ARTTS__RPAR] = true;
  ARTSet9[ARTTS__COMMA] = true;
  ARTSet9[ARTTS__COLON] = true;
  ARTSet9[ARTL_ART_ID_list_18] = true;
}

public void ARTSet31initialise() {
  ARTSet31 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet31, 0, artSetExtent, false);
  ARTSet31[ARTTS__RPAR] = true;
  ARTSet31[ARTTS__SEMICOLON] = true;
  ARTSet31[ARTTS_end] = true;
}

public void ARTSet185initialise() {
  ARTSet185 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet185, 0, artSetExtent, false);
  ARTSet185[ARTTS_ID] = true;
  ARTSet185[ARTL_ART_directive] = true;
}

public void ARTSet223initialise() {
  ARTSet223 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet223, 0, artSetExtent, false);
  ARTSet223[ARTTS_letter] = true;
}

public void ARTSet383initialise() {
  ARTSet383 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet383, 0, artSetExtent, false);
  ARTSet383[ARTTS_one_of_a_set_of_implementation_defined_characters] = true;
  ARTSet383[ARTL_ART_string_character] = true;
}

public void ARTSet304initialise() {
  ARTSet304 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet304, 0, artSetExtent, false);
  ARTSet304[ARTTS_ID] = true;
  ARTSet304[ARTTS_case] = true;
  ARTSet304[ARTL_ART_ID] = true;
  ARTSet304[ARTL_ART_ID_list] = true;
  ARTSet304[ARTL_ART_field_list] = true;
  ARTSet304[ARTL_ART_field_list_12] = true;
  ARTSet304[ARTL_ART_fixed_part] = true;
  ARTSet304[ARTL_ART_record_section] = true;
  ARTSet304[ARTL_ART_variant_part] = true;
}

public void ARTSet168initialise() {
  ARTSet168 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet168, 0, artSetExtent, false);
  ARTSet168[ARTTS__RPAR] = true;
  ARTSet168[ARTTS__COLON] = true;
  ARTSet168[ARTTS__SEMICOLON] = true;
  ARTSet168[ARTL_ART_formal_parameter_list_15] = true;
}

public void ARTSet112initialise() {
  ARTSet112 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet112, 0, artSetExtent, false);
  ARTSet112[ARTTS_begin] = true;
  ARTSet112[ARTTS_const] = true;
  ARTSet112[ARTTS_function] = true;
  ARTSet112[ARTTS_procedure] = true;
  ARTSet112[ARTTS_type] = true;
  ARTSet112[ARTTS_var] = true;
  ARTSet112[ARTL_ART_compound_statement] = true;
  ARTSet112[ARTL_ART_constant_definition_part_9] = true;
  ARTSet112[ARTL_ART_function_declaration] = true;
  ARTSet112[ARTL_ART_function_heading] = true;
  ARTSet112[ARTL_ART_function_identification] = true;
  ARTSet112[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet112[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet112[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet112[ARTL_ART_procedure_declaration] = true;
  ARTSet112[ARTL_ART_procedure_heading] = true;
  ARTSet112[ARTL_ART_procedure_identification] = true;
  ARTSet112[ARTL_ART_statement_part] = true;
  ARTSet112[ARTL_ART_type_definition_part] = true;
  ARTSet112[ARTL_ART_type_definition_part_46] = true;
  ARTSet112[ARTL_ART_variable_declaration_part] = true;
  ARTSet112[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet412initialise() {
  ARTSet412 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet412, 0, artSetExtent, false);
  ARTSet412[ARTTS__SEMICOLON] = true;
  ARTSet412[ARTL_ART_unpacked_conformant_array_schema_48] = true;
}

public void ARTSet381initialise() {
  ARTSet381 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet381, 0, artSetExtent, false);
  ARTSet381[ARTTS__BACKSLASH_DBLQUOTE] = true;
  ARTSet381[ARTTS_one_of_a_set_of_implementation_defined_characters] = true;
  ARTSet381[ARTL_ART_apostrophe_image] = true;
  ARTSet381[ARTL_ART_string_character] = true;
}

public void ARTSet151initialise() {
  ARTSet151 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet151, 0, artSetExtent, false);
  ARTSet151[ARTTS_ID] = true;
  ARTSet151[ARTL_ART_ID] = true;
  ARTSet151[ARTL_ART_ID_list] = true;
  ARTSet151[ARTL_ART_fixed_part] = true;
  ARTSet151[ARTL_ART_record_section] = true;
}

public void ARTSet435initialise() {
  ARTSet435 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet435, 0, artSetExtent, false);
  ARTSet435[ARTTS_tag_field] = true;
  ARTSet435[ARTTS_type_ID] = true;
  ARTSet435[ARTL_ART_ordinal_type_ID] = true;
  ARTSet435[ARTL_ART_tag_field] = true;
  ARTSet435[ARTL_ART_tag_type] = true;
  ARTSet435[ARTL_ART_type_ID] = true;
  ARTSet435[ARTL_ART_variant_selector] = true;
  ARTSet435[ARTL_ART_variant_selector_52] = true;
}

public void ARTSet253initialise() {
  ARTSet253 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet253, 0, artSetExtent, false);
  ARTSet253[ARTTS_type_ID] = true;
  ARTSet253[ARTL_ART_pointer_type_ID] = true;
  ARTSet253[ARTL_ART_type_ID] = true;
}

public void ARTSet259initialise() {
  ARTSet259 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet259, 0, artSetExtent, false);
  ARTSet259[ARTTS_begin] = true;
  ARTSet259[ARTTS_function] = true;
  ARTSet259[ARTTS_procedure] = true;
  ARTSet259[ARTL_ART_compound_statement] = true;
  ARTSet259[ARTL_ART_function_declaration] = true;
  ARTSet259[ARTL_ART_function_heading] = true;
  ARTSet259[ARTL_ART_function_identification] = true;
  ARTSet259[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet259[ARTL_ART_procedure_declaration] = true;
  ARTSet259[ARTL_ART_procedure_heading] = true;
  ARTSet259[ARTL_ART_procedure_identification] = true;
  ARTSet259[ARTL_ART_statement_part] = true;
}

public void ARTSet426initialise() {
  ARTSet426 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet426, 0, artSetExtent, false);
  ARTSet426[ARTTS_var] = true;
  ARTSet426[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet114initialise() {
  ARTSet114 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet114, 0, artSetExtent, false);
  ARTSet114[ARTTS_ID] = true;
  ARTSet114[ARTTS_begin] = true;
  ARTSet114[ARTTS_function] = true;
  ARTSet114[ARTTS_procedure] = true;
  ARTSet114[ARTTS_type] = true;
  ARTSet114[ARTTS_var] = true;
  ARTSet114[ARTL_ART_ID] = true;
  ARTSet114[ARTL_ART_compound_statement] = true;
  ARTSet114[ARTL_ART_constant_definition] = true;
  ARTSet114[ARTL_ART_function_declaration] = true;
  ARTSet114[ARTL_ART_function_heading] = true;
  ARTSet114[ARTL_ART_function_identification] = true;
  ARTSet114[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet114[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet114[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet114[ARTL_ART_procedure_declaration] = true;
  ARTSet114[ARTL_ART_procedure_heading] = true;
  ARTSet114[ARTL_ART_procedure_identification] = true;
  ARTSet114[ARTL_ART_statement_part] = true;
  ARTSet114[ARTL_ART_type_definition_part] = true;
  ARTSet114[ARTL_ART_type_definition_part_46] = true;
  ARTSet114[ARTL_ART_variable_declaration_part] = true;
  ARTSet114[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet378initialise() {
  ARTSet378 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet378, 0, artSetExtent, false);
  ARTSet378[ARTTS__SEMICOLON] = true;
  ARTSet378[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet6initialise() {
  ARTSet6 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet6, 0, artSetExtent, false);
  ARTSet6[ARTTS__LPAR] = true;
  ARTSet6[ARTTS__RPAR] = true;
  ARTSet6[ARTTS__COMMA] = true;
  ARTSet6[ARTTS__PERIOD_PERIOD] = true;
  ARTSet6[ARTTS__COLON] = true;
  ARTSet6[ARTTS__SEMICOLON] = true;
  ARTSet6[ARTTS__EQUAL] = true;
  ARTSet6[ARTL_ART_ID_list_18] = true;
  ARTSet6[ARTL_ART_formal_parameter_list] = true;
  ARTSet6[ARTL_ART_formal_parameter_list_15] = true;
  ARTSet6[ARTL_ART_function_heading_17] = true;
  ARTSet6[ARTL_ART_procedure_heading_28] = true;
  ARTSet6[ARTL_ART_program_heading_30] = true;
}

public void ARTSet432initialise() {
  ARTSet432 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet432, 0, artSetExtent, false);
  ARTSet432[ARTTS_ID] = true;
  ARTSet432[ARTTS_begin] = true;
  ARTSet432[ARTTS_function] = true;
  ARTSet432[ARTTS_procedure] = true;
  ARTSet432[ARTL_ART_ID] = true;
  ARTSet432[ARTL_ART_ID_list] = true;
  ARTSet432[ARTL_ART_compound_statement] = true;
  ARTSet432[ARTL_ART_function_declaration] = true;
  ARTSet432[ARTL_ART_function_heading] = true;
  ARTSet432[ARTL_ART_function_identification] = true;
  ARTSet432[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet432[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet432[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet432[ARTL_ART_procedure_declaration] = true;
  ARTSet432[ARTL_ART_procedure_heading] = true;
  ARTSet432[ARTL_ART_procedure_identification] = true;
  ARTSet432[ARTL_ART_statement_part] = true;
  ARTSet432[ARTL_ART_variable_declaration] = true;
}

public void ARTSet152initialise() {
  ARTSet152 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet152, 0, artSetExtent, false);
  ARTSet152[ARTTS_case] = true;
  ARTSet152[ARTL_ART_variant_part] = true;
}

public void ARTSet285initialise() {
  ARTSet285 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet285, 0, artSetExtent, false);
  ARTSet285[ARTTS__LPAR] = true;
  ARTSet285[ARTTS__SEMICOLON] = true;
  ARTSet285[ARTTS_else] = true;
  ARTSet285[ARTTS_end] = true;
  ARTSet285[ARTTS_until] = true;
  ARTSet285[ARTL_ART_case_statement_5] = true;
  ARTSet285[ARTL_ART_case_statement_6] = true;
  ARTSet285[ARTL_ART_else_part] = true;
  ARTSet285[ARTL_ART_if_statement_19] = true;
  ARTSet285[ARTL_ART_statement_sequence_44] = true;
  ARTSet285[ARTL_ART_writeln_parameter_list] = true;
  ARTSet285[ARTL_ART_writeln_parameter_list_55] = true;
}

public void ARTSet40initialise() {
  ARTSet40 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet40, 0, artSetExtent, false);
  ARTSet40[ARTTS__COMMA] = true;
  ARTSet40[ARTL_ART_array_type_2] = true;
}

public void ARTSet305initialise() {
  ARTSet305 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet305, 0, artSetExtent, false);
  ARTSet305[ARTTS__COMMA] = true;
  ARTSet305[ARTTS_do] = true;
  ARTSet305[ARTL_ART_record_variable_list_34] = true;
}

public void ARTSet406initialise() {
  ARTSet406 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet406, 0, artSetExtent, false);
  ARTSet406[ARTTS_ID] = true;
  ARTSet406[ARTL_ART_ID] = true;
  ARTSet406[ARTL_ART_type_definition] = true;
  ARTSet406[ARTL_ART_type_definition_part_47] = true;
}

public void ARTSet81initialise() {
  ARTSet81 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet81, 0, artSetExtent, false);
  ARTSet81[ARTTS_STRING] = true;
}

public void ARTSet319initialise() {
  ARTSet319 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet319, 0, artSetExtent, false);
  ARTSet319[ARTTS_for] = true;
  ARTSet319[ARTTS_repeat] = true;
  ARTSet319[ARTTS_while] = true;
  ARTSet319[ARTL_ART_for_statement] = true;
  ARTSet319[ARTL_ART_repeat_statement] = true;
  ARTSet319[ARTL_ART_while_statement] = true;
}

public void ARTSet165initialise() {
  ARTSet165 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet165, 0, artSetExtent, false);
  ARTSet165[ARTTS_downto] = true;
  ARTSet165[ARTTS_to] = true;
}

public void ARTSet52initialise() {
  ARTSet52 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet52, 0, artSetExtent, false);
  ARTSet52[ARTTS_const] = true;
  ARTSet52[ARTL_ART_constant_definition_part] = true;
  ARTSet52[ARTL_ART_constant_definition_part_9] = true;
}

public void ARTSet394initialise() {
  ARTSet394 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet394, 0, artSetExtent, false);
  ARTSet394[ARTTS__STAR] = true;
  ARTSet394[ARTTS__SLASH] = true;
  ARTSet394[ARTTS_and] = true;
  ARTSet394[ARTTS_div] = true;
  ARTSet394[ARTTS_mod] = true;
  ARTSet394[ARTL_ART_multiplying_operator] = true;
  ARTSet394[ARTL_ART_term_45] = true;
}

public void ARTSet241initialise() {
  ARTSet241 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet241, 0, artSetExtent, false);
  ARTSet241[ARTTS_packed] = true;
  ARTSet241[ARTL_ART_new_structured_type_24] = true;
}

public void ARTSet187initialise() {
  ARTSet187 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet187, 0, artSetExtent, false);
  ARTSet187[ARTTS_begin] = true;
  ARTSet187[ARTTS_const] = true;
  ARTSet187[ARTTS_function] = true;
  ARTSet187[ARTTS_label] = true;
  ARTSet187[ARTTS_procedure] = true;
  ARTSet187[ARTTS_type] = true;
  ARTSet187[ARTTS_var] = true;
  ARTSet187[ARTL_ART_block] = true;
  ARTSet187[ARTL_ART_compound_statement] = true;
  ARTSet187[ARTL_ART_constant_definition_part] = true;
  ARTSet187[ARTL_ART_constant_definition_part_9] = true;
  ARTSet187[ARTL_ART_function_block] = true;
  ARTSet187[ARTL_ART_function_declaration] = true;
  ARTSet187[ARTL_ART_function_heading] = true;
  ARTSet187[ARTL_ART_function_identification] = true;
  ARTSet187[ARTL_ART_label_declaration_part] = true;
  ARTSet187[ARTL_ART_label_declaration_part_21] = true;
  ARTSet187[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet187[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet187[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet187[ARTL_ART_procedure_declaration] = true;
  ARTSet187[ARTL_ART_procedure_heading] = true;
  ARTSet187[ARTL_ART_procedure_identification] = true;
  ARTSet187[ARTL_ART_statement_part] = true;
  ARTSet187[ARTL_ART_type_definition_part] = true;
  ARTSet187[ARTL_ART_type_definition_part_46] = true;
  ARTSet187[ARTL_ART_variable_declaration_part] = true;
  ARTSet187[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet408initialise() {
  ARTSet408 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet408, 0, artSetExtent, false);
  ARTSet408[ARTTS__LPAR] = true;
  ARTSet408[ARTTS__PLUS] = true;
  ARTSet408[ARTTS__MINUS] = true;
  ARTSet408[ARTTS_INTEGER] = true;
  ARTSet408[ARTTS_REAL] = true;
  ARTSet408[ARTTS_STRING] = true;
  ARTSet408[ARTTS__UPARROW] = true;
  ARTSet408[ARTTS_array] = true;
  ARTSet408[ARTTS_constant_ID] = true;
  ARTSet408[ARTTS_file] = true;
  ARTSet408[ARTTS_packed] = true;
  ARTSet408[ARTTS_record] = true;
  ARTSet408[ARTTS_set] = true;
  ARTSet408[ARTL_ART_array_type] = true;
  ARTSet408[ARTL_ART_character_string] = true;
  ARTSet408[ARTL_ART_constant] = true;
  ARTSet408[ARTL_ART_constant_7] = true;
  ARTSet408[ARTL_ART_constant_8] = true;
  ARTSet408[ARTL_ART_constant_ID] = true;
  ARTSet408[ARTL_ART_digit_sequence] = true;
  ARTSet408[ARTL_ART_enumerated_type] = true;
  ARTSet408[ARTL_ART_file_type] = true;
  ARTSet408[ARTL_ART_new_ordinal_type] = true;
  ARTSet408[ARTL_ART_new_pointer_type] = true;
  ARTSet408[ARTL_ART_new_structured_type] = true;
  ARTSet408[ARTL_ART_new_structured_type_24] = true;
  ARTSet408[ARTL_ART_new_type] = true;
  ARTSet408[ARTL_ART_record_type] = true;
  ARTSet408[ARTL_ART_set_type] = true;
  ARTSet408[ARTL_ART_sign] = true;
  ARTSet408[ARTL_ART_subrange_type] = true;
  ARTSet408[ARTL_ART_unpacked_structured_type] = true;
  ARTSet408[ARTL_ART_unsigned_integer] = true;
  ARTSet408[ARTL_ART_unsigned_number] = true;
  ARTSet408[ARTL_ART_unsigned_real] = true;
}

public void ARTSet201initialise() {
  ARTSet201 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet201, 0, artSetExtent, false);
  ARTSet201[ARTTS__LPAR] = true;
  ARTSet201[ARTTS__PLUS] = true;
  ARTSet201[ARTTS__MINUS] = true;
  ARTSet201[ARTTS_INTEGER] = true;
  ARTSet201[ARTTS_REAL] = true;
  ARTSet201[ARTTS_STRING] = true;
  ARTSet201[ARTTS__LBRACK] = true;
  ARTSet201[ARTTS_constant_ID] = true;
  ARTSet201[ARTTS_field_designator_ID] = true;
  ARTSet201[ARTTS_function_ID] = true;
  ARTSet201[ARTTS_nil] = true;
  ARTSet201[ARTTS_not] = true;
  ARTSet201[ARTTS_variable_ID] = true;
  ARTSet201[ARTL_ART_Boolean_expression] = true;
  ARTSet201[ARTL_ART_character_string] = true;
  ARTSet201[ARTL_ART_component_variable] = true;
  ARTSet201[ARTL_ART_constant_ID] = true;
  ARTSet201[ARTL_ART_digit_sequence] = true;
  ARTSet201[ARTL_ART_entire_variable] = true;
  ARTSet201[ARTL_ART_expression] = true;
  ARTSet201[ARTL_ART_factor] = true;
  ARTSet201[ARTL_ART_field_designator] = true;
  ARTSet201[ARTL_ART_field_designator_ID] = true;
  ARTSet201[ARTL_ART_function_ID] = true;
  ARTSet201[ARTL_ART_function_designator] = true;
  ARTSet201[ARTL_ART_indexed_variable] = true;
  ARTSet201[ARTL_ART_set_constructor] = true;
  ARTSet201[ARTL_ART_sign] = true;
  ARTSet201[ARTL_ART_simple_expression] = true;
  ARTSet201[ARTL_ART_term] = true;
  ARTSet201[ARTL_ART_unsigned_constant] = true;
  ARTSet201[ARTL_ART_unsigned_integer] = true;
  ARTSet201[ARTL_ART_unsigned_number] = true;
  ARTSet201[ARTL_ART_unsigned_real] = true;
  ARTSet201[ARTL_ART_variable_ID] = true;
  ARTSet201[ARTL_ART_variable_access] = true;
}

public void ARTSet361initialise() {
  ARTSet361 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet361, 0, artSetExtent, false);
  ARTSet361[ARTTS_INTEGER] = true;
  ARTSet361[ARTTS_begin] = true;
  ARTSet361[ARTTS_case] = true;
  ARTSet361[ARTTS_field_designator_ID] = true;
  ARTSet361[ARTTS_for] = true;
  ARTSet361[ARTTS_function_ID] = true;
  ARTSet361[ARTTS_goto] = true;
  ARTSet361[ARTTS_if] = true;
  ARTSet361[ARTTS_procedure_ID] = true;
  ARTSet361[ARTTS_read] = true;
  ARTSet361[ARTTS_readln] = true;
  ARTSet361[ARTTS_repeat] = true;
  ARTSet361[ARTTS_variable_ID] = true;
  ARTSet361[ARTTS_while] = true;
  ARTSet361[ARTTS_with] = true;
  ARTSet361[ARTTS_write] = true;
  ARTSet361[ARTTS_writeln] = true;
  ARTSet361[ARTL_ART_assignment_statement] = true;
  ARTSet361[ARTL_ART_assignment_statement_3] = true;
  ARTSet361[ARTL_ART_case_statement] = true;
  ARTSet361[ARTL_ART_component_variable] = true;
  ARTSet361[ARTL_ART_compound_statement] = true;
  ARTSet361[ARTL_ART_conditional_statement] = true;
  ARTSet361[ARTL_ART_digit_sequence] = true;
  ARTSet361[ARTL_ART_entire_variable] = true;
  ARTSet361[ARTL_ART_field_designator] = true;
  ARTSet361[ARTL_ART_field_designator_ID] = true;
  ARTSet361[ARTL_ART_for_statement] = true;
  ARTSet361[ARTL_ART_function_ID] = true;
  ARTSet361[ARTL_ART_goto_statement] = true;
  ARTSet361[ARTL_ART_if_statement] = true;
  ARTSet361[ARTL_ART_indexed_variable] = true;
  ARTSet361[ARTL_ART_label] = true;
  ARTSet361[ARTL_ART_procedure_ID] = true;
  ARTSet361[ARTL_ART_procedure_statement] = true;
  ARTSet361[ARTL_ART_repeat_statement] = true;
  ARTSet361[ARTL_ART_repetitive_statement] = true;
  ARTSet361[ARTL_ART_simple_statement] = true;
  ARTSet361[ARTL_ART_simple_statement_41] = true;
  ARTSet361[ARTL_ART_statement_42] = true;
  ARTSet361[ARTL_ART_statement_43] = true;
  ARTSet361[ARTL_ART_structured_statement] = true;
  ARTSet361[ARTL_ART_variable_ID] = true;
  ARTSet361[ARTL_ART_variable_access] = true;
  ARTSet361[ARTL_ART_while_statement] = true;
  ARTSet361[ARTL_ART_with_statement] = true;
}

public void ARTSet166initialise() {
  ARTSet166 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet166, 0, artSetExtent, false);
  ARTSet166[ARTTS_to] = true;
}

public void ARTSet433initialise() {
  ARTSet433 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet433, 0, artSetExtent, false);
  ARTSet433[ARTTS_ID] = true;
  ARTSet433[ARTL_ART_ID] = true;
  ARTSet433[ARTL_ART_ID_list] = true;
  ARTSet433[ARTL_ART_variable_declaration] = true;
  ARTSet433[ARTL_ART_variable_declaration_part_51] = true;
}

public void ARTSet219initialise() {
  ARTSet219 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet219, 0, artSetExtent, false);
  ARTSet219[ARTTS__COMMA] = true;
  ARTSet219[ARTTS__SEMICOLON] = true;
  ARTSet219[ARTL_ART_label_declaration_part_22] = true;
}

public void ARTSet220initialise() {
  ARTSet220 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet220, 0, artSetExtent, false);
  ARTSet220[ARTTS__COMMA] = true;
  ARTSet220[ARTL_ART_label_declaration_part_22] = true;
}

public void ARTSet188initialise() {
  ARTSet188 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet188, 0, artSetExtent, false);
  ARTSet188[ARTTS__LPAR] = true;
  ARTSet188[ARTTS__RPAR] = true;
  ARTSet188[ARTTS__STAR] = true;
  ARTSet188[ARTTS__PLUS] = true;
  ARTSet188[ARTTS__COMMA] = true;
  ARTSet188[ARTTS__MINUS] = true;
  ARTSet188[ARTTS__PERIOD_PERIOD] = true;
  ARTSet188[ARTTS__SLASH] = true;
  ARTSet188[ARTTS__COLON] = true;
  ARTSet188[ARTTS__SEMICOLON] = true;
  ARTSet188[ARTTS__LT] = true;
  ARTSet188[ARTTS__LT_EQUAL] = true;
  ARTSet188[ARTTS__LT_GT] = true;
  ARTSet188[ARTTS__EQUAL] = true;
  ARTSet188[ARTTS__GT] = true;
  ARTSet188[ARTTS__GT_EQUAL] = true;
  ARTSet188[ARTTS__RBRACK] = true;
  ARTSet188[ARTTS_and] = true;
  ARTSet188[ARTTS_div] = true;
  ARTSet188[ARTTS_do] = true;
  ARTSet188[ARTTS_downto] = true;
  ARTSet188[ARTTS_else] = true;
  ARTSet188[ARTTS_end] = true;
  ARTSet188[ARTTS_in] = true;
  ARTSet188[ARTTS_mod] = true;
  ARTSet188[ARTTS_of] = true;
  ARTSet188[ARTTS_or] = true;
  ARTSet188[ARTTS_then] = true;
  ARTSet188[ARTTS_to] = true;
  ARTSet188[ARTTS_until] = true;
  ARTSet188[ARTL_ART_actual_parameter_list] = true;
  ARTSet188[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet188[ARTL_ART_adding_operator] = true;
  ARTSet188[ARTL_ART_case_statement_5] = true;
  ARTSet188[ARTL_ART_case_statement_6] = true;
  ARTSet188[ARTL_ART_else_part] = true;
  ARTSet188[ARTL_ART_expression_11] = true;
  ARTSet188[ARTL_ART_for_statement_14] = true;
  ARTSet188[ARTL_ART_function_designator_16] = true;
  ARTSet188[ARTL_ART_if_statement_19] = true;
  ARTSet188[ARTL_ART_indexed_variable_20] = true;
  ARTSet188[ARTL_ART_member_designator_23] = true;
  ARTSet188[ARTL_ART_multiplying_operator] = true;
  ARTSet188[ARTL_ART_relational_operator] = true;
  ARTSet188[ARTL_ART_set_constructor_36] = true;
  ARTSet188[ARTL_ART_simple_expression_39] = true;
  ARTSet188[ARTL_ART_simple_expression_40] = true;
  ARTSet188[ARTL_ART_statement_sequence_44] = true;
  ARTSet188[ARTL_ART_term_45] = true;
  ARTSet188[ARTL_ART_write_parameter_53] = true;
  ARTSet188[ARTL_ART_write_parameter_54] = true;
  ARTSet188[ARTL_ART_write_parameter_list_57] = true;
  ARTSet188[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet328initialise() {
  ARTSet328 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet328, 0, artSetExtent, false);
  ARTSet328[ARTTS__LPAR] = true;
  ARTSet328[ARTTS__PLUS] = true;
  ARTSet328[ARTTS__MINUS] = true;
  ARTSet328[ARTTS_INTEGER] = true;
  ARTSet328[ARTTS_REAL] = true;
  ARTSet328[ARTTS_STRING] = true;
  ARTSet328[ARTTS__LBRACK] = true;
  ARTSet328[ARTTS_constant_ID] = true;
  ARTSet328[ARTTS_field_designator_ID] = true;
  ARTSet328[ARTTS_function_ID] = true;
  ARTSet328[ARTTS_nil] = true;
  ARTSet328[ARTTS_not] = true;
  ARTSet328[ARTTS_variable_ID] = true;
  ARTSet328[ARTL_ART_character_string] = true;
  ARTSet328[ARTL_ART_component_variable] = true;
  ARTSet328[ARTL_ART_constant_ID] = true;
  ARTSet328[ARTL_ART_digit_sequence] = true;
  ARTSet328[ARTL_ART_entire_variable] = true;
  ARTSet328[ARTL_ART_expression] = true;
  ARTSet328[ARTL_ART_factor] = true;
  ARTSet328[ARTL_ART_field_designator] = true;
  ARTSet328[ARTL_ART_field_designator_ID] = true;
  ARTSet328[ARTL_ART_function_ID] = true;
  ARTSet328[ARTL_ART_function_designator] = true;
  ARTSet328[ARTL_ART_indexed_variable] = true;
  ARTSet328[ARTL_ART_member_designator] = true;
  ARTSet328[ARTL_ART_set_constructor] = true;
  ARTSet328[ARTL_ART_sign] = true;
  ARTSet328[ARTL_ART_simple_expression] = true;
  ARTSet328[ARTL_ART_term] = true;
  ARTSet328[ARTL_ART_unsigned_constant] = true;
  ARTSet328[ARTL_ART_unsigned_integer] = true;
  ARTSet328[ARTL_ART_unsigned_number] = true;
  ARTSet328[ARTL_ART_unsigned_real] = true;
  ARTSet328[ARTL_ART_variable_ID] = true;
  ARTSet328[ARTL_ART_variable_access] = true;
}

public void ARTSet239initialise() {
  ARTSet239 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet239, 0, artSetExtent, false);
  ARTSet239[ARTTS_type_ID] = true;
  ARTSet239[ARTL_ART_domain_type] = true;
  ARTSet239[ARTL_ART_type_ID] = true;
}

public void ARTSet260initialise() {
  ARTSet260 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet260, 0, artSetExtent, false);
  ARTSet260[ARTTS_function] = true;
  ARTSet260[ARTTS_procedure] = true;
  ARTSet260[ARTL_ART_function_declaration] = true;
  ARTSet260[ARTL_ART_function_heading] = true;
  ARTSet260[ARTL_ART_function_identification] = true;
  ARTSet260[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet260[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet260[ARTL_ART_procedure_declaration] = true;
  ARTSet260[ARTL_ART_procedure_heading] = true;
  ARTSet260[ARTL_ART_procedure_identification] = true;
}

public void ARTSet34initialise() {
  ARTSet34 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet34, 0, artSetExtent, false);
  ARTSet34[ARTTS__COMMA] = true;
  ARTSet34[ARTTS__RBRACK] = true;
  ARTSet34[ARTL_ART_array_type_2] = true;
}

public void ARTSet41initialise() {
  ARTSet41 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet41, 0, artSetExtent, false);
  ARTSet41[ARTTS_field_designator_ID] = true;
  ARTSet41[ARTTS_function_ID] = true;
  ARTSet41[ARTTS_variable_ID] = true;
  ARTSet41[ARTL_ART_assignment_statement_3] = true;
  ARTSet41[ARTL_ART_component_variable] = true;
  ARTSet41[ARTL_ART_entire_variable] = true;
  ARTSet41[ARTL_ART_field_designator] = true;
  ARTSet41[ARTL_ART_field_designator_ID] = true;
  ARTSet41[ARTL_ART_function_ID] = true;
  ARTSet41[ARTL_ART_indexed_variable] = true;
  ARTSet41[ARTL_ART_variable_ID] = true;
  ARTSet41[ARTL_ART_variable_access] = true;
}

public void ARTSet269initialise() {
  ARTSet269 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet269, 0, artSetExtent, false);
  ARTSet269[ARTTS_begin] = true;
  ARTSet269[ARTTS_const] = true;
  ARTSet269[ARTTS_function] = true;
  ARTSet269[ARTTS_label] = true;
  ARTSet269[ARTTS_procedure] = true;
  ARTSet269[ARTTS_type] = true;
  ARTSet269[ARTTS_var] = true;
  ARTSet269[ARTL_ART_block] = true;
  ARTSet269[ARTL_ART_compound_statement] = true;
  ARTSet269[ARTL_ART_constant_definition_part] = true;
  ARTSet269[ARTL_ART_constant_definition_part_9] = true;
  ARTSet269[ARTL_ART_function_declaration] = true;
  ARTSet269[ARTL_ART_function_heading] = true;
  ARTSet269[ARTL_ART_function_identification] = true;
  ARTSet269[ARTL_ART_label_declaration_part] = true;
  ARTSet269[ARTL_ART_label_declaration_part_21] = true;
  ARTSet269[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet269[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet269[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet269[ARTL_ART_procedure_block] = true;
  ARTSet269[ARTL_ART_procedure_declaration] = true;
  ARTSet269[ARTL_ART_procedure_heading] = true;
  ARTSet269[ARTL_ART_procedure_identification] = true;
  ARTSet269[ARTL_ART_statement_part] = true;
  ARTSet269[ARTL_ART_type_definition_part] = true;
  ARTSet269[ARTL_ART_type_definition_part_46] = true;
  ARTSet269[ARTL_ART_variable_declaration_part] = true;
  ARTSet269[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet298initialise() {
  ARTSet298 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet298, 0, artSetExtent, false);
  ARTSet298[ARTTS__LPAR] = true;
  ARTSet298[ARTTS__SEMICOLON] = true;
  ARTSet298[ARTTS_else] = true;
  ARTSet298[ARTTS_end] = true;
  ARTSet298[ARTTS_until] = true;
  ARTSet298[ARTL_ART_case_statement_5] = true;
  ARTSet298[ARTL_ART_case_statement_6] = true;
  ARTSet298[ARTL_ART_else_part] = true;
  ARTSet298[ARTL_ART_if_statement_19] = true;
  ARTSet298[ARTL_ART_readln_parameter_list_32] = true;
  ARTSet298[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet347initialise() {
  ARTSet347 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet347, 0, artSetExtent, false);
  ARTSet347[ARTTS__PLUS] = true;
  ARTSet347[ARTTS__MINUS] = true;
  ARTSet347[ARTTS_or] = true;
  ARTSet347[ARTL_ART_adding_operator] = true;
  ARTSet347[ARTL_ART_simple_expression_40] = true;
}

public void ARTSet359initialise() {
  ARTSet359 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet359, 0, artSetExtent, false);
  ARTSet359[ARTTS__LPAR] = true;
  ARTSet359[ARTTS__PLUS] = true;
  ARTSet359[ARTTS__MINUS] = true;
  ARTSet359[ARTTS_INTEGER] = true;
  ARTSet359[ARTTS_REAL] = true;
  ARTSet359[ARTTS_STRING] = true;
  ARTSet359[ARTTS_constant_ID] = true;
  ARTSet359[ARTTS_type_ID] = true;
  ARTSet359[ARTL_ART_character_string] = true;
  ARTSet359[ARTL_ART_constant] = true;
  ARTSet359[ARTL_ART_constant_7] = true;
  ARTSet359[ARTL_ART_constant_8] = true;
  ARTSet359[ARTL_ART_constant_ID] = true;
  ARTSet359[ARTL_ART_digit_sequence] = true;
  ARTSet359[ARTL_ART_enumerated_type] = true;
  ARTSet359[ARTL_ART_new_ordinal_type] = true;
  ARTSet359[ARTL_ART_ordinal_type] = true;
  ARTSet359[ARTL_ART_ordinal_type_ID] = true;
  ARTSet359[ARTL_ART_real_type_ID] = true;
  ARTSet359[ARTL_ART_sign] = true;
  ARTSet359[ARTL_ART_subrange_type] = true;
  ARTSet359[ARTL_ART_type_ID] = true;
  ARTSet359[ARTL_ART_unsigned_integer] = true;
  ARTSet359[ARTL_ART_unsigned_number] = true;
  ARTSet359[ARTL_ART_unsigned_real] = true;
}

public void ARTSet183initialise() {
  ARTSet183 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet183, 0, artSetExtent, false);
  ARTSet183[ARTTS_function] = true;
  ARTSet183[ARTL_ART_function_heading] = true;
  ARTSet183[ARTL_ART_function_identification] = true;
}

public void ARTSet267initialise() {
  ARTSet267 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet267, 0, artSetExtent, false);
  ARTSet267[ARTTS_procedure] = true;
  ARTSet267[ARTL_ART_procedure_heading] = true;
  ARTSet267[ARTL_ART_procedure_identification] = true;
}

public void ARTSet368initialise() {
  ARTSet368 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet368, 0, artSetExtent, false);
  ARTSet368[ARTTS_field_designator_ID] = true;
  ARTSet368[ARTTS_function_ID] = true;
  ARTSet368[ARTTS_goto] = true;
  ARTSet368[ARTTS_procedure_ID] = true;
  ARTSet368[ARTTS_read] = true;
  ARTSet368[ARTTS_readln] = true;
  ARTSet368[ARTTS_variable_ID] = true;
  ARTSet368[ARTTS_write] = true;
  ARTSet368[ARTTS_writeln] = true;
  ARTSet368[ARTL_ART_assignment_statement] = true;
  ARTSet368[ARTL_ART_assignment_statement_3] = true;
  ARTSet368[ARTL_ART_component_variable] = true;
  ARTSet368[ARTL_ART_entire_variable] = true;
  ARTSet368[ARTL_ART_field_designator] = true;
  ARTSet368[ARTL_ART_field_designator_ID] = true;
  ARTSet368[ARTL_ART_function_ID] = true;
  ARTSet368[ARTL_ART_goto_statement] = true;
  ARTSet368[ARTL_ART_indexed_variable] = true;
  ARTSet368[ARTL_ART_procedure_ID] = true;
  ARTSet368[ARTL_ART_procedure_statement] = true;
  ARTSet368[ARTL_ART_simple_statement] = true;
  ARTSet368[ARTL_ART_simple_statement_41] = true;
  ARTSet368[ARTL_ART_variable_ID] = true;
  ARTSet368[ARTL_ART_variable_access] = true;
}

public void ARTSet416initialise() {
  ARTSet416 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet416, 0, artSetExtent, false);
  ARTSet416[ARTTS_array] = true;
  ARTSet416[ARTL_ART_array_type] = true;
}

public void ARTSet67initialise() {
  ARTSet67 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet67, 0, artSetExtent, false);
  ARTSet67[ARTTS__PLUS] = true;
  ARTSet67[ARTTS__MINUS] = true;
  ARTSet67[ARTTS_INTEGER] = true;
  ARTSet67[ARTTS_REAL] = true;
  ARTSet67[ARTTS_STRING] = true;
  ARTSet67[ARTTS_constant_ID] = true;
  ARTSet67[ARTL_ART_case_constant] = true;
  ARTSet67[ARTL_ART_case_constant_list] = true;
  ARTSet67[ARTL_ART_character_string] = true;
  ARTSet67[ARTL_ART_constant] = true;
  ARTSet67[ARTL_ART_constant_7] = true;
  ARTSet67[ARTL_ART_constant_8] = true;
  ARTSet67[ARTL_ART_constant_ID] = true;
  ARTSet67[ARTL_ART_digit_sequence] = true;
  ARTSet67[ARTL_ART_sign] = true;
  ARTSet67[ARTL_ART_unsigned_integer] = true;
  ARTSet67[ARTL_ART_unsigned_number] = true;
  ARTSet67[ARTL_ART_unsigned_real] = true;
}

public void ARTSet35initialise() {
  ARTSet35 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet35, 0, artSetExtent, false);
  ARTSet35[ARTTS__COMMA] = true;
  ARTSet35[ARTL_ART_array_type_2] = true;
}

public void ARTSet353initialise() {
  ARTSet353 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet353, 0, artSetExtent, false);
  ARTSet353[ARTTS_field_designator_ID] = true;
  ARTSet353[ARTTS_function_ID] = true;
  ARTSet353[ARTTS_variable_ID] = true;
  ARTSet353[ARTL_ART_assignment_statement] = true;
  ARTSet353[ARTL_ART_assignment_statement_3] = true;
  ARTSet353[ARTL_ART_component_variable] = true;
  ARTSet353[ARTL_ART_entire_variable] = true;
  ARTSet353[ARTL_ART_field_designator] = true;
  ARTSet353[ARTL_ART_field_designator_ID] = true;
  ARTSet353[ARTL_ART_function_ID] = true;
  ARTSet353[ARTL_ART_indexed_variable] = true;
  ARTSet353[ARTL_ART_simple_statement_41] = true;
  ARTSet353[ARTL_ART_variable_ID] = true;
  ARTSet353[ARTL_ART_variable_access] = true;
}

public void ARTSet379initialise() {
  ARTSet379 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet379, 0, artSetExtent, false);
  ARTSet379[ARTTS__SEMICOLON] = true;
  ARTSet379[ARTTS_INTEGER] = true;
  ARTSet379[ARTTS_begin] = true;
  ARTSet379[ARTTS_case] = true;
  ARTSet379[ARTTS_end] = true;
  ARTSet379[ARTTS_field_designator_ID] = true;
  ARTSet379[ARTTS_for] = true;
  ARTSet379[ARTTS_function_ID] = true;
  ARTSet379[ARTTS_goto] = true;
  ARTSet379[ARTTS_if] = true;
  ARTSet379[ARTTS_procedure_ID] = true;
  ARTSet379[ARTTS_read] = true;
  ARTSet379[ARTTS_readln] = true;
  ARTSet379[ARTTS_repeat] = true;
  ARTSet379[ARTTS_until] = true;
  ARTSet379[ARTTS_variable_ID] = true;
  ARTSet379[ARTTS_while] = true;
  ARTSet379[ARTTS_with] = true;
  ARTSet379[ARTTS_write] = true;
  ARTSet379[ARTTS_writeln] = true;
  ARTSet379[ARTL_ART_assignment_statement] = true;
  ARTSet379[ARTL_ART_assignment_statement_3] = true;
  ARTSet379[ARTL_ART_case_statement] = true;
  ARTSet379[ARTL_ART_component_variable] = true;
  ARTSet379[ARTL_ART_compound_statement] = true;
  ARTSet379[ARTL_ART_conditional_statement] = true;
  ARTSet379[ARTL_ART_digit_sequence] = true;
  ARTSet379[ARTL_ART_entire_variable] = true;
  ARTSet379[ARTL_ART_field_designator] = true;
  ARTSet379[ARTL_ART_field_designator_ID] = true;
  ARTSet379[ARTL_ART_for_statement] = true;
  ARTSet379[ARTL_ART_function_ID] = true;
  ARTSet379[ARTL_ART_goto_statement] = true;
  ARTSet379[ARTL_ART_if_statement] = true;
  ARTSet379[ARTL_ART_indexed_variable] = true;
  ARTSet379[ARTL_ART_label] = true;
  ARTSet379[ARTL_ART_procedure_ID] = true;
  ARTSet379[ARTL_ART_procedure_statement] = true;
  ARTSet379[ARTL_ART_repeat_statement] = true;
  ARTSet379[ARTL_ART_repetitive_statement] = true;
  ARTSet379[ARTL_ART_simple_statement] = true;
  ARTSet379[ARTL_ART_simple_statement_41] = true;
  ARTSet379[ARTL_ART_statement] = true;
  ARTSet379[ARTL_ART_statement_42] = true;
  ARTSet379[ARTL_ART_statement_43] = true;
  ARTSet379[ARTL_ART_structured_statement] = true;
  ARTSet379[ARTL_ART_variable_ID] = true;
  ARTSet379[ARTL_ART_variable_access] = true;
  ARTSet379[ARTL_ART_while_statement] = true;
  ARTSet379[ARTL_ART_with_statement] = true;
}

public void ARTSet146initialise() {
  ARTSet146 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet146, 0, artSetExtent, false);
  ARTSet146[ARTTS_field_designator_ID] = true;
}

public void ARTSet452initialise() {
  ARTSet452 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet452, 0, artSetExtent, false);
  ARTSet452[ARTTS__RPAR] = true;
  ARTSet452[ARTTS__COMMA] = true;
  ARTSet452[ARTL_ART_write_parameter_list_57] = true;
}

public void ARTSet78initialise() {
  ARTSet78 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet78, 0, artSetExtent, false);
  ARTSet78[ARTTS__SEMICOLON] = true;
  ARTSet78[ARTL_ART_case_statement_5] = true;
}

public void ARTSet62initialise() {
  ARTSet62 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet62, 0, artSetExtent, false);
  ARTSet62[ARTTS__PLUS] = true;
  ARTSet62[ARTTS__MINUS] = true;
  ARTSet62[ARTTS_INTEGER] = true;
  ARTSet62[ARTTS_REAL] = true;
  ARTSet62[ARTTS_STRING] = true;
  ARTSet62[ARTTS_constant_ID] = true;
  ARTSet62[ARTL_ART_case_constant] = true;
  ARTSet62[ARTL_ART_character_string] = true;
  ARTSet62[ARTL_ART_constant] = true;
  ARTSet62[ARTL_ART_constant_7] = true;
  ARTSet62[ARTL_ART_constant_8] = true;
  ARTSet62[ARTL_ART_constant_ID] = true;
  ARTSet62[ARTL_ART_digit_sequence] = true;
  ARTSet62[ARTL_ART_sign] = true;
  ARTSet62[ARTL_ART_unsigned_integer] = true;
  ARTSet62[ARTL_ART_unsigned_number] = true;
  ARTSet62[ARTL_ART_unsigned_real] = true;
}

public void ARTSet358initialise() {
  ARTSet358 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet358, 0, artSetExtent, false);
  ARTSet358[ARTTS_field_designator_ID] = true;
  ARTSet358[ARTTS_function_ID] = true;
  ARTSet358[ARTTS_variable_ID] = true;
  ARTSet358[ARTL_ART_assignment_statement] = true;
  ARTSet358[ARTL_ART_assignment_statement_3] = true;
  ARTSet358[ARTL_ART_component_variable] = true;
  ARTSet358[ARTL_ART_entire_variable] = true;
  ARTSet358[ARTL_ART_field_designator] = true;
  ARTSet358[ARTL_ART_field_designator_ID] = true;
  ARTSet358[ARTL_ART_function_ID] = true;
  ARTSet358[ARTL_ART_indexed_variable] = true;
  ARTSet358[ARTL_ART_variable_ID] = true;
  ARTSet358[ARTL_ART_variable_access] = true;
}

public void ARTSet288initialise() {
  ARTSet288 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet288, 0, artSetExtent, false);
  ARTSet288[ARTTS_begin] = true;
  ARTSet288[ARTTS_const] = true;
  ARTSet288[ARTTS_function] = true;
  ARTSet288[ARTTS_label] = true;
  ARTSet288[ARTTS_procedure] = true;
  ARTSet288[ARTTS_type] = true;
  ARTSet288[ARTTS_var] = true;
  ARTSet288[ARTL_ART_block] = true;
  ARTSet288[ARTL_ART_compound_statement] = true;
  ARTSet288[ARTL_ART_constant_definition_part] = true;
  ARTSet288[ARTL_ART_constant_definition_part_9] = true;
  ARTSet288[ARTL_ART_function_declaration] = true;
  ARTSet288[ARTL_ART_function_heading] = true;
  ARTSet288[ARTL_ART_function_identification] = true;
  ARTSet288[ARTL_ART_label_declaration_part] = true;
  ARTSet288[ARTL_ART_label_declaration_part_21] = true;
  ARTSet288[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet288[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet288[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet288[ARTL_ART_procedure_declaration] = true;
  ARTSet288[ARTL_ART_procedure_heading] = true;
  ARTSet288[ARTL_ART_procedure_identification] = true;
  ARTSet288[ARTL_ART_program_block] = true;
  ARTSet288[ARTL_ART_statement_part] = true;
  ARTSet288[ARTL_ART_type_definition_part] = true;
  ARTSet288[ARTL_ART_type_definition_part_46] = true;
  ARTSet288[ARTL_ART_variable_declaration_part] = true;
  ARTSet288[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet57initialise() {
  ARTSet57 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet57, 0, artSetExtent, false);
  ARTSet57[ARTTS_begin] = true;
  ARTSet57[ARTTS_function] = true;
  ARTSet57[ARTTS_procedure] = true;
  ARTSet57[ARTL_ART_compound_statement] = true;
  ARTSet57[ARTL_ART_function_declaration] = true;
  ARTSet57[ARTL_ART_function_heading] = true;
  ARTSet57[ARTL_ART_function_identification] = true;
  ARTSet57[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet57[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet57[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet57[ARTL_ART_procedure_declaration] = true;
  ARTSet57[ARTL_ART_procedure_heading] = true;
  ARTSet57[ARTL_ART_procedure_identification] = true;
  ARTSet57[ARTL_ART_statement_part] = true;
}

public void ARTSet386initialise() {
  ARTSet386 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet386, 0, artSetExtent, false);
  ARTSet386[ARTTS_for] = true;
  ARTSet386[ARTTS_repeat] = true;
  ARTSet386[ARTTS_while] = true;
  ARTSet386[ARTL_ART_for_statement] = true;
  ARTSet386[ARTL_ART_repeat_statement] = true;
  ARTSet386[ARTL_ART_repetitive_statement] = true;
  ARTSet386[ARTL_ART_while_statement] = true;
}

public void ARTSet247initialise() {
  ARTSet247 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet247, 0, artSetExtent, false);
  ARTSet247[ARTTS_array] = true;
  ARTSet247[ARTTS_file] = true;
  ARTSet247[ARTTS_packed] = true;
  ARTSet247[ARTTS_record] = true;
  ARTSet247[ARTTS_set] = true;
  ARTSet247[ARTL_ART_array_type] = true;
  ARTSet247[ARTL_ART_file_type] = true;
  ARTSet247[ARTL_ART_new_structured_type] = true;
  ARTSet247[ARTL_ART_new_structured_type_24] = true;
  ARTSet247[ARTL_ART_record_type] = true;
  ARTSet247[ARTL_ART_set_type] = true;
  ARTSet247[ARTL_ART_unpacked_structured_type] = true;
}

public void ARTSet96initialise() {
  ARTSet96 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet96, 0, artSetExtent, false);
  ARTSet96[ARTTS_packed] = true;
  ARTSet96[ARTL_ART_packed_conformant_array_schema] = true;
}

public void ARTSet453initialise() {
  ARTSet453 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet453, 0, artSetExtent, false);
  ARTSet453[ARTTS__COMMA] = true;
  ARTSet453[ARTL_ART_write_parameter_list_57] = true;
}

public void ARTSet178initialise() {
  ARTSet178 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet178, 0, artSetExtent, false);
  ARTSet178[ARTTS_function] = true;
  ARTSet178[ARTL_ART_function_heading] = true;
  ARTSet178[ARTL_ART_functional_parameter_specification] = true;
}

public void ARTSet356initialise() {
  ARTSet356 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet356, 0, artSetExtent, false);
  ARTSet356[ARTTS_goto] = true;
  ARTSet356[ARTL_ART_goto_statement] = true;
}

public void ARTSet154initialise() {
  ARTSet154 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet154, 0, artSetExtent, false);
  ARTSet154[ARTTS__SEMICOLON] = true;
  ARTSet154[ARTL_ART_field_list_13] = true;
}

public void ARTSet204initialise() {
  ARTSet204 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet204, 0, artSetExtent, false);
  ARTSet204[ARTTS_else] = true;
  ARTSet204[ARTL_ART_else_part] = true;
  ARTSet204[ARTL_ART_if_statement_19] = true;
}

public void ARTSet255initialise() {
  ARTSet255 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet255, 0, artSetExtent, false);
  ARTSet255[ARTTS_procedure_ID] = true;
}

public void ARTSet64initialise() {
  ARTSet64 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet64, 0, artSetExtent, false);
  ARTSet64[ARTTS__COMMA] = true;
  ARTSet64[ARTL_ART_case_constant_list_4] = true;
}

public void ARTSet301initialise() {
  ARTSet301 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet301, 0, artSetExtent, false);
  ARTSet301[ARTTS__COMMA] = true;
  ARTSet301[ARTL_ART_readln_parameter_list_33] = true;
}

public void ARTSet61initialise() {
  ARTSet61 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet61, 0, artSetExtent, false);
  ARTSet61[ARTTS__COMMA] = true;
  ARTSet61[ARTTS__COLON] = true;
  ARTSet61[ARTL_ART_case_constant_list_4] = true;
}

public void ARTSet98initialise() {
  ARTSet98 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet98, 0, artSetExtent, false);
  ARTSet98[ARTTS__PLUS] = true;
  ARTSet98[ARTTS__MINUS] = true;
  ARTSet98[ARTTS_INTEGER] = true;
  ARTSet98[ARTTS_REAL] = true;
  ARTSet98[ARTTS_STRING] = true;
  ARTSet98[ARTTS_constant_ID] = true;
  ARTSet98[ARTL_ART_character_string] = true;
  ARTSet98[ARTL_ART_constant_7] = true;
  ARTSet98[ARTL_ART_constant_8] = true;
  ARTSet98[ARTL_ART_constant_ID] = true;
  ARTSet98[ARTL_ART_digit_sequence] = true;
  ARTSet98[ARTL_ART_sign] = true;
  ARTSet98[ARTL_ART_unsigned_integer] = true;
  ARTSet98[ARTL_ART_unsigned_number] = true;
  ARTSet98[ARTL_ART_unsigned_real] = true;
}

public void ARTSet181initialise() {
  ARTSet181 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet181, 0, artSetExtent, false);
  ARTSet181[ARTTS__LPAR] = true;
  ARTSet181[ARTTS__RPAR] = true;
  ARTSet181[ARTTS__STAR] = true;
  ARTSet181[ARTTS__PLUS] = true;
  ARTSet181[ARTTS__COMMA] = true;
  ARTSet181[ARTTS__MINUS] = true;
  ARTSet181[ARTTS__PERIOD_PERIOD] = true;
  ARTSet181[ARTTS__SLASH] = true;
  ARTSet181[ARTTS__COLON] = true;
  ARTSet181[ARTTS__COLON_EQUAL] = true;
  ARTSet181[ARTTS__SEMICOLON] = true;
  ARTSet181[ARTTS__LT] = true;
  ARTSet181[ARTTS__LT_EQUAL] = true;
  ARTSet181[ARTTS__LT_GT] = true;
  ARTSet181[ARTTS__EQUAL] = true;
  ARTSet181[ARTTS__GT] = true;
  ARTSet181[ARTTS__GT_EQUAL] = true;
  ARTSet181[ARTTS__RBRACK] = true;
  ARTSet181[ARTTS_and] = true;
  ARTSet181[ARTTS_div] = true;
  ARTSet181[ARTTS_do] = true;
  ARTSet181[ARTTS_downto] = true;
  ARTSet181[ARTTS_else] = true;
  ARTSet181[ARTTS_end] = true;
  ARTSet181[ARTTS_in] = true;
  ARTSet181[ARTTS_mod] = true;
  ARTSet181[ARTTS_of] = true;
  ARTSet181[ARTTS_or] = true;
  ARTSet181[ARTTS_then] = true;
  ARTSet181[ARTTS_to] = true;
  ARTSet181[ARTTS_until] = true;
  ARTSet181[ARTL_ART_actual_parameter_list] = true;
  ARTSet181[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet181[ARTL_ART_adding_operator] = true;
  ARTSet181[ARTL_ART_case_statement_5] = true;
  ARTSet181[ARTL_ART_case_statement_6] = true;
  ARTSet181[ARTL_ART_else_part] = true;
  ARTSet181[ARTL_ART_expression_11] = true;
  ARTSet181[ARTL_ART_for_statement_14] = true;
  ARTSet181[ARTL_ART_function_designator_16] = true;
  ARTSet181[ARTL_ART_if_statement_19] = true;
  ARTSet181[ARTL_ART_indexed_variable_20] = true;
  ARTSet181[ARTL_ART_member_designator_23] = true;
  ARTSet181[ARTL_ART_multiplying_operator] = true;
  ARTSet181[ARTL_ART_relational_operator] = true;
  ARTSet181[ARTL_ART_set_constructor_36] = true;
  ARTSet181[ARTL_ART_simple_expression_39] = true;
  ARTSet181[ARTL_ART_simple_expression_40] = true;
  ARTSet181[ARTL_ART_statement_sequence_44] = true;
  ARTSet181[ARTL_ART_term_45] = true;
  ARTSet181[ARTL_ART_write_parameter_53] = true;
  ARTSet181[ARTL_ART_write_parameter_54] = true;
  ARTSet181[ARTL_ART_write_parameter_list_57] = true;
  ARTSet181[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet343initialise() {
  ARTSet343 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet343, 0, artSetExtent, false);
  ARTSet343[ARTTS__LPAR] = true;
  ARTSet343[ARTTS__PLUS] = true;
  ARTSet343[ARTTS__MINUS] = true;
  ARTSet343[ARTTS_INTEGER] = true;
  ARTSet343[ARTTS_REAL] = true;
  ARTSet343[ARTTS_STRING] = true;
  ARTSet343[ARTTS__LBRACK] = true;
  ARTSet343[ARTTS_constant_ID] = true;
  ARTSet343[ARTTS_field_designator_ID] = true;
  ARTSet343[ARTTS_function_ID] = true;
  ARTSet343[ARTTS_nil] = true;
  ARTSet343[ARTTS_not] = true;
  ARTSet343[ARTTS_variable_ID] = true;
  ARTSet343[ARTL_ART_character_string] = true;
  ARTSet343[ARTL_ART_component_variable] = true;
  ARTSet343[ARTL_ART_constant_ID] = true;
  ARTSet343[ARTL_ART_digit_sequence] = true;
  ARTSet343[ARTL_ART_entire_variable] = true;
  ARTSet343[ARTL_ART_factor] = true;
  ARTSet343[ARTL_ART_field_designator] = true;
  ARTSet343[ARTL_ART_field_designator_ID] = true;
  ARTSet343[ARTL_ART_function_ID] = true;
  ARTSet343[ARTL_ART_function_designator] = true;
  ARTSet343[ARTL_ART_indexed_variable] = true;
  ARTSet343[ARTL_ART_set_constructor] = true;
  ARTSet343[ARTL_ART_sign] = true;
  ARTSet343[ARTL_ART_term] = true;
  ARTSet343[ARTL_ART_unsigned_constant] = true;
  ARTSet343[ARTL_ART_unsigned_integer] = true;
  ARTSet343[ARTL_ART_unsigned_number] = true;
  ARTSet343[ARTL_ART_unsigned_real] = true;
  ARTSet343[ARTL_ART_variable_ID] = true;
  ARTSet343[ARTL_ART_variable_access] = true;
}

public void ARTSet140initialise() {
  ARTSet140 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet140, 0, artSetExtent, false);
  ARTSet140[ARTTS_not] = true;
}

public void ARTSet377initialise() {
  ARTSet377 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet377, 0, artSetExtent, false);
  ARTSet377[ARTTS__SEMICOLON] = true;
  ARTSet377[ARTTS_end] = true;
  ARTSet377[ARTTS_until] = true;
}

public void ARTSet15initialise() {
  ARTSet15 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet15, 0, artSetExtent, false);
  ARTSet15[ARTTS__RPAR] = true;
  ARTSet15[ARTTS__COMMA] = true;
  ARTSet15[ARTL_ART_actual_parameter_list_1] = true;
}

public void ARTSet38initialise() {
  ARTSet38 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet38, 0, artSetExtent, false);
  ARTSet38[ARTTS__LPAR] = true;
  ARTSet38[ARTTS__PLUS] = true;
  ARTSet38[ARTTS__MINUS] = true;
  ARTSet38[ARTTS_INTEGER] = true;
  ARTSet38[ARTTS_REAL] = true;
  ARTSet38[ARTTS_STRING] = true;
  ARTSet38[ARTTS__UPARROW] = true;
  ARTSet38[ARTTS_array] = true;
  ARTSet38[ARTTS_constant_ID] = true;
  ARTSet38[ARTTS_file] = true;
  ARTSet38[ARTTS_packed] = true;
  ARTSet38[ARTTS_record] = true;
  ARTSet38[ARTTS_set] = true;
  ARTSet38[ARTTS_type_ID] = true;
  ARTSet38[ARTL_ART_array_type] = true;
  ARTSet38[ARTL_ART_character_string] = true;
  ARTSet38[ARTL_ART_component_type] = true;
  ARTSet38[ARTL_ART_constant] = true;
  ARTSet38[ARTL_ART_constant_7] = true;
  ARTSet38[ARTL_ART_constant_8] = true;
  ARTSet38[ARTL_ART_constant_ID] = true;
  ARTSet38[ARTL_ART_digit_sequence] = true;
  ARTSet38[ARTL_ART_enumerated_type] = true;
  ARTSet38[ARTL_ART_file_type] = true;
  ARTSet38[ARTL_ART_new_ordinal_type] = true;
  ARTSet38[ARTL_ART_new_pointer_type] = true;
  ARTSet38[ARTL_ART_new_structured_type] = true;
  ARTSet38[ARTL_ART_new_structured_type_24] = true;
  ARTSet38[ARTL_ART_new_type] = true;
  ARTSet38[ARTL_ART_record_type] = true;
  ARTSet38[ARTL_ART_set_type] = true;
  ARTSet38[ARTL_ART_sign] = true;
  ARTSet38[ARTL_ART_subrange_type] = true;
  ARTSet38[ARTL_ART_type_ID] = true;
  ARTSet38[ARTL_ART_type_denoter] = true;
  ARTSet38[ARTL_ART_unpacked_structured_type] = true;
  ARTSet38[ARTL_ART_unsigned_integer] = true;
  ARTSet38[ARTL_ART_unsigned_number] = true;
  ARTSet38[ARTL_ART_unsigned_real] = true;
}

public void ARTSet329initialise() {
  ARTSet329 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet329, 0, artSetExtent, false);
  ARTSet329[ARTTS__COMMA] = true;
  ARTSet329[ARTL_ART_set_constructor_36] = true;
}

public void ARTSet30initialise() {
  ARTSet30 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet30, 0, artSetExtent, false);
  ARTSet30[ARTTS_array] = true;
}

public void ARTSet414initialise() {
  ARTSet414 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet414, 0, artSetExtent, false);
  ARTSet414[ARTTS_array] = true;
  ARTSet414[ARTTS_packed] = true;
  ARTSet414[ARTL_ART_conformant_array_schema] = true;
  ARTSet414[ARTL_ART_packed_conformant_array_schema] = true;
  ARTSet414[ARTL_ART_unpacked_conformant_array_schema] = true;
}

public void ARTSet164initialise() {
  ARTSet164 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet164, 0, artSetExtent, false);
  ARTSet164[ARTTS__LPAR] = true;
  ARTSet164[ARTTS__PLUS] = true;
  ARTSet164[ARTTS__MINUS] = true;
  ARTSet164[ARTTS_INTEGER] = true;
  ARTSet164[ARTTS_REAL] = true;
  ARTSet164[ARTTS_STRING] = true;
  ARTSet164[ARTTS__LBRACK] = true;
  ARTSet164[ARTTS_constant_ID] = true;
  ARTSet164[ARTTS_field_designator_ID] = true;
  ARTSet164[ARTTS_function_ID] = true;
  ARTSet164[ARTTS_nil] = true;
  ARTSet164[ARTTS_not] = true;
  ARTSet164[ARTTS_variable_ID] = true;
  ARTSet164[ARTL_ART_character_string] = true;
  ARTSet164[ARTL_ART_component_variable] = true;
  ARTSet164[ARTL_ART_constant_ID] = true;
  ARTSet164[ARTL_ART_digit_sequence] = true;
  ARTSet164[ARTL_ART_entire_variable] = true;
  ARTSet164[ARTL_ART_expression] = true;
  ARTSet164[ARTL_ART_factor] = true;
  ARTSet164[ARTL_ART_field_designator] = true;
  ARTSet164[ARTL_ART_field_designator_ID] = true;
  ARTSet164[ARTL_ART_final_value] = true;
  ARTSet164[ARTL_ART_function_ID] = true;
  ARTSet164[ARTL_ART_function_designator] = true;
  ARTSet164[ARTL_ART_indexed_variable] = true;
  ARTSet164[ARTL_ART_set_constructor] = true;
  ARTSet164[ARTL_ART_sign] = true;
  ARTSet164[ARTL_ART_simple_expression] = true;
  ARTSet164[ARTL_ART_term] = true;
  ARTSet164[ARTL_ART_unsigned_constant] = true;
  ARTSet164[ARTL_ART_unsigned_integer] = true;
  ARTSet164[ARTL_ART_unsigned_number] = true;
  ARTSet164[ARTL_ART_unsigned_real] = true;
  ARTSet164[ARTL_ART_variable_ID] = true;
  ARTSet164[ARTL_ART_variable_access] = true;
}

public void ARTSet399initialise() {
  ARTSet399 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet399, 0, artSetExtent, false);
  ARTSet399[ARTTS_begin] = true;
  ARTSet399[ARTTS_function] = true;
  ARTSet399[ARTTS_procedure] = true;
  ARTSet399[ARTTS_type] = true;
  ARTSet399[ARTTS_var] = true;
  ARTSet399[ARTL_ART_compound_statement] = true;
  ARTSet399[ARTL_ART_function_declaration] = true;
  ARTSet399[ARTL_ART_function_heading] = true;
  ARTSet399[ARTL_ART_function_identification] = true;
  ARTSet399[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet399[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet399[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet399[ARTL_ART_procedure_declaration] = true;
  ARTSet399[ARTL_ART_procedure_heading] = true;
  ARTSet399[ARTL_ART_procedure_identification] = true;
  ARTSet399[ARTL_ART_statement_part] = true;
  ARTSet399[ARTL_ART_type_definition_part_46] = true;
  ARTSet399[ARTL_ART_variable_declaration_part] = true;
  ARTSet399[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet131initialise() {
  ARTSet131 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet131, 0, artSetExtent, false);
  ARTSet131[ARTTS__RPAR] = true;
  ARTSet131[ARTTS__COMMA] = true;
  ARTSet131[ARTTS__PERIOD_PERIOD] = true;
  ARTSet131[ARTTS__COLON] = true;
  ARTSet131[ARTTS__SEMICOLON] = true;
  ARTSet131[ARTTS__RBRACK] = true;
  ARTSet131[ARTTS_do] = true;
  ARTSet131[ARTTS_downto] = true;
  ARTSet131[ARTTS_else] = true;
  ARTSet131[ARTTS_end] = true;
  ARTSet131[ARTTS_of] = true;
  ARTSet131[ARTTS_then] = true;
  ARTSet131[ARTTS_to] = true;
  ARTSet131[ARTTS_until] = true;
  ARTSet131[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet131[ARTL_ART_case_statement_5] = true;
  ARTSet131[ARTL_ART_case_statement_6] = true;
  ARTSet131[ARTL_ART_else_part] = true;
  ARTSet131[ARTL_ART_for_statement_14] = true;
  ARTSet131[ARTL_ART_if_statement_19] = true;
  ARTSet131[ARTL_ART_indexed_variable_20] = true;
  ARTSet131[ARTL_ART_member_designator_23] = true;
  ARTSet131[ARTL_ART_set_constructor_36] = true;
  ARTSet131[ARTL_ART_statement_sequence_44] = true;
  ARTSet131[ARTL_ART_write_parameter_53] = true;
  ARTSet131[ARTL_ART_write_parameter_54] = true;
  ARTSet131[ARTL_ART_write_parameter_list_57] = true;
  ARTSet131[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet132initialise() {
  ARTSet132 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet132, 0, artSetExtent, false);
  ARTSet132[ARTTS__RPAR] = true;
  ARTSet132[ARTTS__COMMA] = true;
  ARTSet132[ARTTS__PERIOD_PERIOD] = true;
  ARTSet132[ARTTS__COLON] = true;
  ARTSet132[ARTTS__SEMICOLON] = true;
  ARTSet132[ARTTS__LT] = true;
  ARTSet132[ARTTS__LT_EQUAL] = true;
  ARTSet132[ARTTS__LT_GT] = true;
  ARTSet132[ARTTS__EQUAL] = true;
  ARTSet132[ARTTS__GT] = true;
  ARTSet132[ARTTS__GT_EQUAL] = true;
  ARTSet132[ARTTS__RBRACK] = true;
  ARTSet132[ARTTS_do] = true;
  ARTSet132[ARTTS_downto] = true;
  ARTSet132[ARTTS_else] = true;
  ARTSet132[ARTTS_end] = true;
  ARTSet132[ARTTS_in] = true;
  ARTSet132[ARTTS_of] = true;
  ARTSet132[ARTTS_then] = true;
  ARTSet132[ARTTS_to] = true;
  ARTSet132[ARTTS_until] = true;
  ARTSet132[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet132[ARTL_ART_case_statement_5] = true;
  ARTSet132[ARTL_ART_case_statement_6] = true;
  ARTSet132[ARTL_ART_else_part] = true;
  ARTSet132[ARTL_ART_expression_11] = true;
  ARTSet132[ARTL_ART_for_statement_14] = true;
  ARTSet132[ARTL_ART_if_statement_19] = true;
  ARTSet132[ARTL_ART_indexed_variable_20] = true;
  ARTSet132[ARTL_ART_member_designator_23] = true;
  ARTSet132[ARTL_ART_relational_operator] = true;
  ARTSet132[ARTL_ART_set_constructor_36] = true;
  ARTSet132[ARTL_ART_statement_sequence_44] = true;
  ARTSet132[ARTL_ART_write_parameter_53] = true;
  ARTSet132[ARTL_ART_write_parameter_54] = true;
  ARTSet132[ARTL_ART_write_parameter_list_57] = true;
  ARTSet132[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet390initialise() {
  ARTSet390 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet390, 0, artSetExtent, false);
  ARTSet390[ARTTS_tag_field] = true;
}

public void ARTSet251initialise() {
  ARTSet251 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet251, 0, artSetExtent, false);
  ARTSet251[ARTTS_ID] = true;
  ARTSet251[ARTL_ART_ID] = true;
  ARTSet251[ARTL_ART_index_type_specification] = true;
}

public void ARTSet20initialise() {
  ARTSet20 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet20, 0, artSetExtent, false);
  ARTSet20[ARTTS__COMMA] = true;
  ARTSet20[ARTL_ART_actual_parameter_list_1] = true;
}

public void ARTSet249initialise() {
  ARTSet249 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet249, 0, artSetExtent, false);
  ARTSet249[ARTTS__LPAR] = true;
  ARTSet249[ARTTS__PLUS] = true;
  ARTSet249[ARTTS__MINUS] = true;
  ARTSet249[ARTTS_INTEGER] = true;
  ARTSet249[ARTTS_REAL] = true;
  ARTSet249[ARTTS_STRING] = true;
  ARTSet249[ARTTS_constant_ID] = true;
  ARTSet249[ARTTS_type_ID] = true;
  ARTSet249[ARTL_ART_character_string] = true;
  ARTSet249[ARTL_ART_constant] = true;
  ARTSet249[ARTL_ART_constant_7] = true;
  ARTSet249[ARTL_ART_constant_8] = true;
  ARTSet249[ARTL_ART_constant_ID] = true;
  ARTSet249[ARTL_ART_digit_sequence] = true;
  ARTSet249[ARTL_ART_enumerated_type] = true;
  ARTSet249[ARTL_ART_new_ordinal_type] = true;
  ARTSet249[ARTL_ART_ordinal_type_ID] = true;
  ARTSet249[ARTL_ART_sign] = true;
  ARTSet249[ARTL_ART_subrange_type] = true;
  ARTSet249[ARTL_ART_type_ID] = true;
  ARTSet249[ARTL_ART_unsigned_integer] = true;
  ARTSet249[ARTL_ART_unsigned_number] = true;
  ARTSet249[ARTL_ART_unsigned_real] = true;
}

public void ARTSet320initialise() {
  ARTSet320 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet320, 0, artSetExtent, false);
  ARTSet320[ARTTS_repeat] = true;
  ARTSet320[ARTL_ART_repeat_statement] = true;
}

public void ARTSet233initialise() {
  ARTSet233 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet233, 0, artSetExtent, false);
  ARTSet233[ARTTS_mod] = true;
}

public void ARTSet401initialise() {
  ARTSet401 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet401, 0, artSetExtent, false);
  ARTSet401[ARTTS_type] = true;
}

public void ARTSet68initialise() {
  ARTSet68 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet68, 0, artSetExtent, false);
  ARTSet68[ARTTS__SEMICOLON] = true;
  ARTSet68[ARTTS_end] = true;
  ARTSet68[ARTL_ART_case_statement_5] = true;
  ARTSet68[ARTL_ART_case_statement_6] = true;
}

public void ARTSet71initialise() {
  ARTSet71 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet71, 0, artSetExtent, false);
  ARTSet71[ARTTS_case] = true;
}

public void ARTSet90initialise() {
  ARTSet90 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet90, 0, artSetExtent, false);
  ARTSet90[ARTTS_if] = true;
  ARTSet90[ARTL_ART_if_statement] = true;
}

public void ARTSet454initialise() {
  ARTSet454 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet454, 0, artSetExtent, false);
  ARTSet454[ARTTS__COMMA] = true;
  ARTSet454[ARTL_ART_write_parameter_list_57] = true;
}

public void ARTSet60initialise() {
  ARTSet60 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet60, 0, artSetExtent, false);
  ARTSet60[ARTTS__PLUS] = true;
  ARTSet60[ARTTS__MINUS] = true;
  ARTSet60[ARTTS_INTEGER] = true;
  ARTSet60[ARTTS_REAL] = true;
  ARTSet60[ARTTS_STRING] = true;
  ARTSet60[ARTTS_constant_ID] = true;
  ARTSet60[ARTL_ART_character_string] = true;
  ARTSet60[ARTL_ART_constant] = true;
  ARTSet60[ARTL_ART_constant_7] = true;
  ARTSet60[ARTL_ART_constant_8] = true;
  ARTSet60[ARTL_ART_constant_ID] = true;
  ARTSet60[ARTL_ART_digit_sequence] = true;
  ARTSet60[ARTL_ART_sign] = true;
  ARTSet60[ARTL_ART_unsigned_integer] = true;
  ARTSet60[ARTL_ART_unsigned_number] = true;
  ARTSet60[ARTL_ART_unsigned_real] = true;
}

public void ARTSet194initialise() {
  ARTSet194 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet194, 0, artSetExtent, false);
  ARTSet194[ARTTS__LPAR] = true;
  ARTSet194[ARTL_ART_formal_parameter_list] = true;
  ARTSet194[ARTL_ART_function_heading_17] = true;
}

public void ARTSet265initialise() {
  ARTSet265 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet265, 0, artSetExtent, false);
  ARTSet265[ARTTS_function] = true;
  ARTSet265[ARTTS_procedure] = true;
  ARTSet265[ARTL_ART_function_heading] = true;
  ARTSet265[ARTL_ART_procedure_and_function_heading_part_27] = true;
  ARTSet265[ARTL_ART_procedure_heading] = true;
}

public void ARTSet367initialise() {
  ARTSet367 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet367, 0, artSetExtent, false);
  ARTSet367[ARTTS_begin] = true;
  ARTSet367[ARTTS_case] = true;
  ARTSet367[ARTTS_field_designator_ID] = true;
  ARTSet367[ARTTS_for] = true;
  ARTSet367[ARTTS_function_ID] = true;
  ARTSet367[ARTTS_goto] = true;
  ARTSet367[ARTTS_if] = true;
  ARTSet367[ARTTS_procedure_ID] = true;
  ARTSet367[ARTTS_read] = true;
  ARTSet367[ARTTS_readln] = true;
  ARTSet367[ARTTS_repeat] = true;
  ARTSet367[ARTTS_variable_ID] = true;
  ARTSet367[ARTTS_while] = true;
  ARTSet367[ARTTS_with] = true;
  ARTSet367[ARTTS_write] = true;
  ARTSet367[ARTTS_writeln] = true;
  ARTSet367[ARTL_ART_assignment_statement] = true;
  ARTSet367[ARTL_ART_assignment_statement_3] = true;
  ARTSet367[ARTL_ART_case_statement] = true;
  ARTSet367[ARTL_ART_component_variable] = true;
  ARTSet367[ARTL_ART_compound_statement] = true;
  ARTSet367[ARTL_ART_conditional_statement] = true;
  ARTSet367[ARTL_ART_entire_variable] = true;
  ARTSet367[ARTL_ART_field_designator] = true;
  ARTSet367[ARTL_ART_field_designator_ID] = true;
  ARTSet367[ARTL_ART_for_statement] = true;
  ARTSet367[ARTL_ART_function_ID] = true;
  ARTSet367[ARTL_ART_goto_statement] = true;
  ARTSet367[ARTL_ART_if_statement] = true;
  ARTSet367[ARTL_ART_indexed_variable] = true;
  ARTSet367[ARTL_ART_procedure_ID] = true;
  ARTSet367[ARTL_ART_procedure_statement] = true;
  ARTSet367[ARTL_ART_repeat_statement] = true;
  ARTSet367[ARTL_ART_repetitive_statement] = true;
  ARTSet367[ARTL_ART_simple_statement] = true;
  ARTSet367[ARTL_ART_simple_statement_41] = true;
  ARTSet367[ARTL_ART_structured_statement] = true;
  ARTSet367[ARTL_ART_variable_ID] = true;
  ARTSet367[ARTL_ART_variable_access] = true;
  ARTSet367[ARTL_ART_while_statement] = true;
  ARTSet367[ARTL_ART_with_statement] = true;
}

public void ARTSet195initialise() {
  ARTSet195 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet195, 0, artSetExtent, false);
  ARTSet195[ARTTS_type_ID] = true;
  ARTSet195[ARTL_ART_result_type] = true;
  ARTSet195[ARTL_ART_simple_type_ID] = true;
  ARTSet195[ARTL_ART_type_ID] = true;
}

public void ARTSet215initialise() {
  ARTSet215 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet215, 0, artSetExtent, false);
  ARTSet215[ARTTS_label] = true;
  ARTSet215[ARTL_ART_label_declaration_part_21] = true;
}

public void ARTSet106initialise() {
  ARTSet106 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet106, 0, artSetExtent, false);
  ARTSet106[ARTTS_INTEGER] = true;
  ARTSet106[ARTTS_REAL] = true;
  ARTSet106[ARTTS_constant_ID] = true;
  ARTSet106[ARTL_ART_constant_ID] = true;
  ARTSet106[ARTL_ART_digit_sequence] = true;
  ARTSet106[ARTL_ART_unsigned_integer] = true;
  ARTSet106[ARTL_ART_unsigned_number] = true;
  ARTSet106[ARTL_ART_unsigned_real] = true;
}

public void ARTSet86initialise() {
  ARTSet86 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet86, 0, artSetExtent, false);
  ARTSet86[ARTX_EOS] = true;
  ARTSet86[ARTTS__SEMICOLON] = true;
  ARTSet86[ARTTS_else] = true;
  ARTSet86[ARTTS_end] = true;
  ARTSet86[ARTTS_until] = true;
  ARTSet86[ARTL_ART_case_statement_5] = true;
  ARTSet86[ARTL_ART_case_statement_6] = true;
  ARTSet86[ARTL_ART_else_part] = true;
  ARTSet86[ARTL_ART_if_statement_19] = true;
  ARTSet86[ARTL_ART_statement_sequence_44] = true;
}

public void ARTSet373initialise() {
  ARTSet373 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet373, 0, artSetExtent, false);
  ARTSet373[ARTTS_end] = true;
  ARTSet373[ARTTS_until] = true;
}

public void ARTSet425initialise() {
  ARTSet425 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet425, 0, artSetExtent, false);
  ARTSet425[ARTTS_var] = true;
}

public void ARTSet392initialise() {
  ARTSet392 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet392, 0, artSetExtent, false);
  ARTSet392[ARTTS__STAR] = true;
  ARTSet392[ARTTS__SLASH] = true;
  ARTSet392[ARTTS_and] = true;
  ARTSet392[ARTTS_div] = true;
  ARTSet392[ARTTS_mod] = true;
  ARTSet392[ARTL_ART_multiplying_operator] = true;
  ARTSet392[ARTL_ART_term_45] = true;
}

public void ARTSet335initialise() {
  ARTSet335 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet335, 0, artSetExtent, false);
  ARTSet335[ARTTS__PLUS] = true;
  ARTSet335[ARTTS__MINUS] = true;
  ARTSet335[ARTTS_INTEGER] = true;
  ARTSet335[ARTL_ART_digit_sequence] = true;
  ARTSet335[ARTL_ART_sign] = true;
  ARTSet335[ARTL_ART_signed_integer_37] = true;
  ARTSet335[ARTL_ART_unsigned_integer] = true;
}

public void ARTSet410initialise() {
  ARTSet410 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet410, 0, artSetExtent, false);
  ARTSet410[ARTTS_array] = true;
  ARTSet410[ARTTS_packed] = true;
  ARTSet410[ARTTS_type_ID] = true;
  ARTSet410[ARTL_ART_conformant_array_schema] = true;
  ARTSet410[ARTL_ART_packed_conformant_array_schema] = true;
  ARTSet410[ARTL_ART_type_ID] = true;
  ARTSet410[ARTL_ART_unpacked_conformant_array_schema] = true;
  ARTSet410[ARTL_ART_unpacked_conformant_array_schema_49] = true;
}

public void ARTSet24initialise() {
  ARTSet24 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet24, 0, artSetExtent, false);
  ARTSet24[ARTTS__PLUS] = true;
  ARTSet24[ARTTS__MINUS] = true;
  ARTSet24[ARTTS_or] = true;
}

public void ARTSet387initialise() {
  ARTSet387 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet387, 0, artSetExtent, false);
  ARTSet387[ARTTS_with] = true;
  ARTSet387[ARTL_ART_with_statement] = true;
}

public void ARTSet275initialise() {
  ARTSet275 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet275, 0, artSetExtent, false);
  ARTSet275[ARTTS__LPAR] = true;
  ARTSet275[ARTL_ART_actual_parameter_list] = true;
  ARTSet275[ARTL_ART_procedure_statement_29] = true;
}

public void ARTSet264initialise() {
  ARTSet264 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet264, 0, artSetExtent, false);
  ARTSet264[ARTTS_function] = true;
  ARTSet264[ARTL_ART_function_declaration] = true;
  ARTSet264[ARTL_ART_function_heading] = true;
  ARTSet264[ARTL_ART_function_identification] = true;
}

public void ARTSet193initialise() {
  ARTSet193 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet193, 0, artSetExtent, false);
  ARTSet193[ARTTS__LPAR] = true;
  ARTSet193[ARTTS__COLON] = true;
  ARTSet193[ARTL_ART_formal_parameter_list] = true;
  ARTSet193[ARTL_ART_function_heading_17] = true;
}

public void ARTSet224initialise() {
  ARTSet224 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet224, 0, artSetExtent, false);
  ARTSet224[ARTTS__COMMA] = true;
  ARTSet224[ARTTS__RBRACK] = true;
  ARTSet224[ARTL_ART_set_constructor_36] = true;
}

public void ARTSet225initialise() {
  ARTSet225 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet225, 0, artSetExtent, false);
  ARTSet225[ARTTS__COMMA] = true;
  ARTSet225[ARTTS__PERIOD_PERIOD] = true;
  ARTSet225[ARTTS__RBRACK] = true;
  ARTSet225[ARTL_ART_member_designator_23] = true;
  ARTSet225[ARTL_ART_set_constructor_36] = true;
}

public void ARTSet43initialise() {
  ARTSet43 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet43, 0, artSetExtent, false);
  ARTSet43[ARTTS__COLON_EQUAL] = true;
}

public void ARTSet134initialise() {
  ARTSet134 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet134, 0, artSetExtent, false);
  ARTSet134[ARTTS__LT] = true;
  ARTSet134[ARTTS__LT_EQUAL] = true;
  ARTSet134[ARTTS__LT_GT] = true;
  ARTSet134[ARTTS__EQUAL] = true;
  ARTSet134[ARTTS__GT] = true;
  ARTSet134[ARTTS__GT_EQUAL] = true;
  ARTSet134[ARTTS_in] = true;
  ARTSet134[ARTL_ART_relational_operator] = true;
}

public void ARTSet29initialise() {
  ARTSet29 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet29, 0, artSetExtent, false);
  ARTSet29[ARTTS__BACKSLASH_DBLQUOTE] = true;
}

public void ARTSet59initialise() {
  ARTSet59 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet59, 0, artSetExtent, false);
  ARTSet59[ARTTS_begin] = true;
  ARTSet59[ARTL_ART_compound_statement] = true;
  ARTSet59[ARTL_ART_statement_part] = true;
}

public void ARTSet93initialise() {
  ARTSet93 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet93, 0, artSetExtent, false);
  ARTSet93[ARTTS_ID] = true;
  ARTSet93[ARTL_ART_ID] = true;
  ARTSet93[ARTL_ART_ID_list] = true;
  ARTSet93[ARTL_ART_value_conformant_array_specification] = true;
}

public void ARTSet47initialise() {
  ARTSet47 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet47, 0, artSetExtent, false);
  ARTSet47[ARTTS__LPAR] = true;
  ARTSet47[ARTTS__PLUS] = true;
  ARTSet47[ARTTS__MINUS] = true;
  ARTSet47[ARTTS_INTEGER] = true;
  ARTSet47[ARTTS_REAL] = true;
  ARTSet47[ARTTS_STRING] = true;
  ARTSet47[ARTTS_constant_ID] = true;
  ARTSet47[ARTTS_type_ID] = true;
  ARTSet47[ARTL_ART_character_string] = true;
  ARTSet47[ARTL_ART_constant] = true;
  ARTSet47[ARTL_ART_constant_7] = true;
  ARTSet47[ARTL_ART_constant_8] = true;
  ARTSet47[ARTL_ART_constant_ID] = true;
  ARTSet47[ARTL_ART_digit_sequence] = true;
  ARTSet47[ARTL_ART_enumerated_type] = true;
  ARTSet47[ARTL_ART_new_ordinal_type] = true;
  ARTSet47[ARTL_ART_ordinal_type] = true;
  ARTSet47[ARTL_ART_ordinal_type_ID] = true;
  ARTSet47[ARTL_ART_sign] = true;
  ARTSet47[ARTL_ART_subrange_type] = true;
  ARTSet47[ARTL_ART_type_ID] = true;
  ARTSet47[ARTL_ART_unsigned_integer] = true;
  ARTSet47[ARTL_ART_unsigned_number] = true;
  ARTSet47[ARTL_ART_unsigned_real] = true;
}

public void ARTSet175initialise() {
  ARTSet175 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet175, 0, artSetExtent, false);
  ARTSet175[ARTTS_ID] = true;
  ARTSet175[ARTL_ART_ID] = true;
  ARTSet175[ARTL_ART_ID_list] = true;
  ARTSet175[ARTL_ART_value_parameter_specification] = true;
}

public void ARTSet254initialise() {
  ARTSet254 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet254, 0, artSetExtent, false);
  ARTSet254[ARTTS_procedure] = true;
  ARTSet254[ARTL_ART_procedure_heading] = true;
}

public void ARTSet235initialise() {
  ARTSet235 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet235, 0, artSetExtent, false);
  ARTSet235[ARTTS__LPAR] = true;
  ARTSet235[ARTTS__PLUS] = true;
  ARTSet235[ARTTS__MINUS] = true;
  ARTSet235[ARTTS_INTEGER] = true;
  ARTSet235[ARTTS_REAL] = true;
  ARTSet235[ARTTS_STRING] = true;
  ARTSet235[ARTTS_constant_ID] = true;
  ARTSet235[ARTL_ART_character_string] = true;
  ARTSet235[ARTL_ART_constant] = true;
  ARTSet235[ARTL_ART_constant_7] = true;
  ARTSet235[ARTL_ART_constant_8] = true;
  ARTSet235[ARTL_ART_constant_ID] = true;
  ARTSet235[ARTL_ART_digit_sequence] = true;
  ARTSet235[ARTL_ART_enumerated_type] = true;
  ARTSet235[ARTL_ART_sign] = true;
  ARTSet235[ARTL_ART_subrange_type] = true;
  ARTSet235[ARTL_ART_unsigned_integer] = true;
  ARTSet235[ARTL_ART_unsigned_number] = true;
  ARTSet235[ARTL_ART_unsigned_real] = true;
}

public void ARTSet346initialise() {
  ARTSet346 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet346, 0, artSetExtent, false);
  ARTSet346[ARTTS__RPAR] = true;
  ARTSet346[ARTTS__PLUS] = true;
  ARTSet346[ARTTS__COMMA] = true;
  ARTSet346[ARTTS__MINUS] = true;
  ARTSet346[ARTTS__PERIOD_PERIOD] = true;
  ARTSet346[ARTTS__COLON] = true;
  ARTSet346[ARTTS__SEMICOLON] = true;
  ARTSet346[ARTTS__LT] = true;
  ARTSet346[ARTTS__LT_EQUAL] = true;
  ARTSet346[ARTTS__LT_GT] = true;
  ARTSet346[ARTTS__EQUAL] = true;
  ARTSet346[ARTTS__GT] = true;
  ARTSet346[ARTTS__GT_EQUAL] = true;
  ARTSet346[ARTTS__RBRACK] = true;
  ARTSet346[ARTTS_do] = true;
  ARTSet346[ARTTS_downto] = true;
  ARTSet346[ARTTS_else] = true;
  ARTSet346[ARTTS_end] = true;
  ARTSet346[ARTTS_in] = true;
  ARTSet346[ARTTS_of] = true;
  ARTSet346[ARTTS_or] = true;
  ARTSet346[ARTTS_then] = true;
  ARTSet346[ARTTS_to] = true;
  ARTSet346[ARTTS_until] = true;
  ARTSet346[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet346[ARTL_ART_adding_operator] = true;
  ARTSet346[ARTL_ART_case_statement_5] = true;
  ARTSet346[ARTL_ART_case_statement_6] = true;
  ARTSet346[ARTL_ART_else_part] = true;
  ARTSet346[ARTL_ART_expression_11] = true;
  ARTSet346[ARTL_ART_for_statement_14] = true;
  ARTSet346[ARTL_ART_if_statement_19] = true;
  ARTSet346[ARTL_ART_indexed_variable_20] = true;
  ARTSet346[ARTL_ART_member_designator_23] = true;
  ARTSet346[ARTL_ART_relational_operator] = true;
  ARTSet346[ARTL_ART_set_constructor_36] = true;
  ARTSet346[ARTL_ART_simple_expression_40] = true;
  ARTSet346[ARTL_ART_statement_sequence_44] = true;
  ARTSet346[ARTL_ART_write_parameter_53] = true;
  ARTSet346[ARTL_ART_write_parameter_54] = true;
  ARTSet346[ARTL_ART_write_parameter_list_57] = true;
  ARTSet346[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet145initialise() {
  ARTSet145 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet145, 0, artSetExtent, false);
  ARTSet145[ARTTS_field_designator_ID] = true;
  ARTSet145[ARTL_ART_field_designator_ID] = true;
}

public void ARTSet397initialise() {
  ARTSet397 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet397, 0, artSetExtent, false);
  ARTSet397[ARTTS__RPAR] = true;
  ARTSet397[ARTTS__COMMA] = true;
  ARTSet397[ARTTS__SEMICOLON] = true;
  ARTSet397[ARTTS__RBRACK] = true;
  ARTSet397[ARTTS_end] = true;
  ARTSet397[ARTTS_of] = true;
  ARTSet397[ARTL_ART_array_type_2] = true;
  ARTSet397[ARTL_ART_formal_parameter_list_15] = true;
  ARTSet397[ARTL_ART_unpacked_conformant_array_schema_48] = true;
}

public void ARTSet258initialise() {
  ARTSet258 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet258, 0, artSetExtent, false);
  ARTSet258[ARTTS_begin] = true;
  ARTSet258[ARTTS_function] = true;
  ARTSet258[ARTTS_procedure] = true;
  ARTSet258[ARTL_ART_compound_statement] = true;
  ARTSet258[ARTL_ART_function_declaration] = true;
  ARTSet258[ARTL_ART_function_heading] = true;
  ARTSet258[ARTL_ART_function_identification] = true;
  ARTSet258[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet258[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet258[ARTL_ART_procedure_declaration] = true;
  ARTSet258[ARTL_ART_procedure_heading] = true;
  ARTSet258[ARTL_ART_procedure_identification] = true;
  ARTSet258[ARTL_ART_statement_part] = true;
}

public void ARTSet393initialise() {
  ARTSet393 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet393, 0, artSetExtent, false);
  ARTSet393[ARTTS__RPAR] = true;
  ARTSet393[ARTTS__STAR] = true;
  ARTSet393[ARTTS__PLUS] = true;
  ARTSet393[ARTTS__COMMA] = true;
  ARTSet393[ARTTS__MINUS] = true;
  ARTSet393[ARTTS__PERIOD_PERIOD] = true;
  ARTSet393[ARTTS__SLASH] = true;
  ARTSet393[ARTTS__COLON] = true;
  ARTSet393[ARTTS__SEMICOLON] = true;
  ARTSet393[ARTTS__LT] = true;
  ARTSet393[ARTTS__LT_EQUAL] = true;
  ARTSet393[ARTTS__LT_GT] = true;
  ARTSet393[ARTTS__EQUAL] = true;
  ARTSet393[ARTTS__GT] = true;
  ARTSet393[ARTTS__GT_EQUAL] = true;
  ARTSet393[ARTTS__RBRACK] = true;
  ARTSet393[ARTTS_and] = true;
  ARTSet393[ARTTS_div] = true;
  ARTSet393[ARTTS_do] = true;
  ARTSet393[ARTTS_downto] = true;
  ARTSet393[ARTTS_else] = true;
  ARTSet393[ARTTS_end] = true;
  ARTSet393[ARTTS_in] = true;
  ARTSet393[ARTTS_mod] = true;
  ARTSet393[ARTTS_of] = true;
  ARTSet393[ARTTS_or] = true;
  ARTSet393[ARTTS_then] = true;
  ARTSet393[ARTTS_to] = true;
  ARTSet393[ARTTS_until] = true;
  ARTSet393[ARTL_ART_actual_parameter_list_1] = true;
  ARTSet393[ARTL_ART_adding_operator] = true;
  ARTSet393[ARTL_ART_case_statement_5] = true;
  ARTSet393[ARTL_ART_case_statement_6] = true;
  ARTSet393[ARTL_ART_else_part] = true;
  ARTSet393[ARTL_ART_expression_11] = true;
  ARTSet393[ARTL_ART_for_statement_14] = true;
  ARTSet393[ARTL_ART_if_statement_19] = true;
  ARTSet393[ARTL_ART_indexed_variable_20] = true;
  ARTSet393[ARTL_ART_member_designator_23] = true;
  ARTSet393[ARTL_ART_multiplying_operator] = true;
  ARTSet393[ARTL_ART_relational_operator] = true;
  ARTSet393[ARTL_ART_set_constructor_36] = true;
  ARTSet393[ARTL_ART_simple_expression_39] = true;
  ARTSet393[ARTL_ART_simple_expression_40] = true;
  ARTSet393[ARTL_ART_statement_sequence_44] = true;
  ARTSet393[ARTL_ART_write_parameter_53] = true;
  ARTSet393[ARTL_ART_write_parameter_54] = true;
  ARTSet393[ARTL_ART_write_parameter_list_57] = true;
  ARTSet393[ARTL_ART_writeln_parameter_list_56] = true;
}

public void ARTSet95initialise() {
  ARTSet95 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet95, 0, artSetExtent, false);
  ARTSet95[ARTTS_array] = true;
  ARTSet95[ARTTS_packed] = true;
  ARTSet95[ARTL_ART_packed_conformant_array_schema] = true;
  ARTSet95[ARTL_ART_unpacked_conformant_array_schema] = true;
}

public void ARTSet167initialise() {
  ARTSet167 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet167, 0, artSetExtent, false);
  ARTSet167[ARTTS_downto] = true;
}

public void ARTSet441initialise() {
  ARTSet441 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet441, 0, artSetExtent, false);
  ARTSet441[ARTTS_tag_field] = true;
  ARTSet441[ARTL_ART_tag_field] = true;
}

public void ARTSet109initialise() {
  ARTSet109 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet109, 0, artSetExtent, false);
  ARTSet109[ARTTS_constant_ID] = true;
}

public void ARTSet271initialise() {
  ARTSet271 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet271, 0, artSetExtent, false);
  ARTSet271[ARTTS__LPAR] = true;
  ARTSet271[ARTTS__RPAR] = true;
  ARTSet271[ARTTS__SEMICOLON] = true;
  ARTSet271[ARTL_ART_formal_parameter_list] = true;
  ARTSet271[ARTL_ART_formal_parameter_list_15] = true;
  ARTSet271[ARTL_ART_procedure_heading_28] = true;
}

public void ARTSet334initialise() {
  ARTSet334 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet334, 0, artSetExtent, false);
  ARTSet334[ARTTS__LPAR] = true;
  ARTSet334[ARTTS_INTEGER] = true;
  ARTSet334[ARTTS_REAL] = true;
  ARTSet334[ARTTS_STRING] = true;
  ARTSet334[ARTTS__LBRACK] = true;
  ARTSet334[ARTTS_constant_ID] = true;
  ARTSet334[ARTTS_field_designator_ID] = true;
  ARTSet334[ARTTS_function_ID] = true;
  ARTSet334[ARTTS_nil] = true;
  ARTSet334[ARTTS_not] = true;
  ARTSet334[ARTTS_variable_ID] = true;
  ARTSet334[ARTL_ART_character_string] = true;
  ARTSet334[ARTL_ART_component_variable] = true;
  ARTSet334[ARTL_ART_constant_8] = true;
  ARTSet334[ARTL_ART_constant_ID] = true;
  ARTSet334[ARTL_ART_digit_sequence] = true;
  ARTSet334[ARTL_ART_entire_variable] = true;
  ARTSet334[ARTL_ART_factor] = true;
  ARTSet334[ARTL_ART_field_designator] = true;
  ARTSet334[ARTL_ART_field_designator_ID] = true;
  ARTSet334[ARTL_ART_function_ID] = true;
  ARTSet334[ARTL_ART_function_designator] = true;
  ARTSet334[ARTL_ART_indexed_variable] = true;
  ARTSet334[ARTL_ART_set_constructor] = true;
  ARTSet334[ARTL_ART_term] = true;
  ARTSet334[ARTL_ART_unsigned_constant] = true;
  ARTSet334[ARTL_ART_unsigned_integer] = true;
  ARTSet334[ARTL_ART_unsigned_number] = true;
  ARTSet334[ARTL_ART_unsigned_real] = true;
  ARTSet334[ARTL_ART_variable_ID] = true;
  ARTSet334[ARTL_ART_variable_access] = true;
}

public void ARTSet89initialise() {
  ARTSet89 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet89, 0, artSetExtent, false);
  ARTSet89[ARTTS_case] = true;
  ARTSet89[ARTTS_if] = true;
  ARTSet89[ARTL_ART_case_statement] = true;
  ARTSet89[ARTL_ART_if_statement] = true;
}

public void ARTSet370initialise() {
  ARTSet370 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet370, 0, artSetExtent, false);
  ARTSet370[ARTTS_begin] = true;
  ARTSet370[ARTTS_case] = true;
  ARTSet370[ARTTS_for] = true;
  ARTSet370[ARTTS_if] = true;
  ARTSet370[ARTTS_repeat] = true;
  ARTSet370[ARTTS_while] = true;
  ARTSet370[ARTTS_with] = true;
  ARTSet370[ARTL_ART_case_statement] = true;
  ARTSet370[ARTL_ART_compound_statement] = true;
  ARTSet370[ARTL_ART_conditional_statement] = true;
  ARTSet370[ARTL_ART_for_statement] = true;
  ARTSet370[ARTL_ART_if_statement] = true;
  ARTSet370[ARTL_ART_repeat_statement] = true;
  ARTSet370[ARTL_ART_repetitive_statement] = true;
  ARTSet370[ARTL_ART_structured_statement] = true;
  ARTSet370[ARTL_ART_while_statement] = true;
  ARTSet370[ARTL_ART_with_statement] = true;
}

public void ARTSet119initialise() {
  ARTSet119 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet119, 0, artSetExtent, false);
  ARTSet119[ARTTS_ID] = true;
  ARTSet119[ARTTS_begin] = true;
  ARTSet119[ARTTS_function] = true;
  ARTSet119[ARTTS_procedure] = true;
  ARTSet119[ARTTS_type] = true;
  ARTSet119[ARTTS_var] = true;
  ARTSet119[ARTL_ART_ID] = true;
  ARTSet119[ARTL_ART_compound_statement] = true;
  ARTSet119[ARTL_ART_constant_definition] = true;
  ARTSet119[ARTL_ART_constant_definition_part_10] = true;
  ARTSet119[ARTL_ART_function_declaration] = true;
  ARTSet119[ARTL_ART_function_heading] = true;
  ARTSet119[ARTL_ART_function_identification] = true;
  ARTSet119[ARTL_ART_procedure_and_function_declaration_part] = true;
  ARTSet119[ARTL_ART_procedure_and_function_declaration_part_25] = true;
  ARTSet119[ARTL_ART_procedure_and_function_declaration_part_26] = true;
  ARTSet119[ARTL_ART_procedure_declaration] = true;
  ARTSet119[ARTL_ART_procedure_heading] = true;
  ARTSet119[ARTL_ART_procedure_identification] = true;
  ARTSet119[ARTL_ART_statement_part] = true;
  ARTSet119[ARTL_ART_type_definition_part] = true;
  ARTSet119[ARTL_ART_type_definition_part_46] = true;
  ARTSet119[ARTL_ART_variable_declaration_part] = true;
  ARTSet119[ARTL_ART_variable_declaration_part_50] = true;
}

public void ARTSet313initialise() {
  ARTSet313 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet313, 0, artSetExtent, false);
  ARTSet313[ARTTS__LT_EQUAL] = true;
}

public void ARTSet310initialise() {
  ARTSet310 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet310, 0, artSetExtent, false);
  ARTSet310[ARTTS__LT_GT] = true;
}

public void artSetInitialise() {
  ARTSet1initialise();
  ARTSet189initialise();
  ARTSet282initialise();
  ARTSet309initialise();
  ARTSet360initialise();
  ARTSet350initialise();
  ARTSet248initialise();
  ARTSet113initialise();
  ARTSet136initialise();
  ARTSet121initialise();
  ARTSet173initialise();
  ARTSet101initialise();
  ARTSet355initialise();
  ARTSet405initialise();
  ARTSet398initialise();
  ARTSet274initialise();
  ARTSet162initialise();
  ARTSet229initialise();
  ARTSet123initialise();
  ARTSet126initialise();
  ARTSet337initialise();
  ARTSet420initialise();
  ARTSet23initialise();
  ARTSet196initialise();
  ARTSet88initialise();
  ARTSet176initialise();
  ARTSet314initialise();
  ARTSet3initialise();
  ARTSet287initialise();
  ARTSet363initialise();
  ARTSet76initialise();
  ARTSet431initialise();
  ARTSet400initialise();
  ARTSet18initialise();
  ARTSet422initialise();
  ARTSet345initialise();
  ARTSet212initialise();
  ARTSet415initialise();
  ARTSet445initialise();
  ARTSet199initialise();
  ARTSet244initialise();
  ARTSet450initialise();
  ARTSet455initialise();
  ARTSet42initialise();
  ARTSet184initialise();
  ARTSet33initialise();
  ARTSet440initialise();
  ARTSet451initialise();
  ARTSet428initialise();
  ARTSet207initialise();
  ARTSet404initialise();
  ARTSet74initialise();
  ARTSet147initialise();
  ARTSet266initialise();
  ARTSet449initialise();
  ARTSet456initialise();
  ARTSet100initialise();
  ARTSet447initialise();
  ARTSet228initialise();
  ARTSet138initialise();
  ARTSet135initialise();
  ARTSet7initialise();
  ARTSet349initialise();
  ARTSet213initialise();
  ARTSet73initialise();
  ARTSet302initialise();
  ARTSet129initialise();
  ARTSet48initialise();
  ARTSet300initialise();
  ARTSet250initialise();
  ARTSet446initialise();
  ARTSet325initialise();
  ARTSet330initialise();
  ARTSet395initialise();
  ARTSet457initialise();
  ARTSet17initialise();
  ARTSet21initialise();
  ARTSet180initialise();
  ARTSet230initialise();
  ARTSet26initialise();
  ARTSet13initialise();
  ARTSet27initialise();
  ARTSet75initialise();
  ARTSet69initialise();
  ARTSet143initialise();
  ARTSet231initialise();
  ARTSet297initialise();
  ARTSet72initialise();
  ARTSet365initialise();
  ARTSet85initialise();
  ARTSet214initialise();
  ARTSet458initialise();
  ARTSet63initialise();
  ARTSet79initialise();
  ARTSet369initialise();
  ARTSet311initialise();
  ARTSet110initialise();
  ARTSet4initialise();
  ARTSet312initialise();
  ARTSet299initialise();
  ARTSet19initialise();
  ARTSet354initialise();
  ARTSet257initialise();
  ARTSet116initialise();
  ARTSet137initialise();
  ARTSet327initialise();
  ARTSet418initialise();
  ARTSet87initialise();
  ARTSet32initialise();
  ARTSet36initialise();
  ARTSet238initialise();
  ARTSet295initialise();
  ARTSet331initialise();
  ARTSet294initialise();
  ARTSet2initialise();
  ARTSet352initialise();
  ARTSet366initialise();
  ARTSet375initialise();
  ARTSet49initialise();
  ARTSet326initialise();
  ARTSet197initialise();
  ARTSet413initialise();
  ARTSet364initialise();
  ARTSet242initialise();
  ARTSet296initialise();
  ARTSet407initialise();
  ARTSet158initialise();
  ARTSet277initialise();
  ARTSet243initialise();
  ARTSet232initialise();
  ARTSet323initialise();
  ARTSet240initialise();
  ARTSet442initialise();
  ARTSet186initialise();
  ARTSet256initialise();
  ARTSet272initialise();
  ARTSet163initialise();
  ARTSet348initialise();
  ARTSet182initialise();
  ARTSet437initialise();
  ARTSet156initialise();
  ARTSet341initialise();
  ARTSet226initialise();
  ARTSet103initialise();
  ARTSet117initialise();
  ARTSet206initialise();
  ARTSet380initialise();
  ARTSet160initialise();
  ARTSet332initialise();
  ARTSet159initialise();
  ARTSet22initialise();
  ARTSet108initialise();
  ARTSet371initialise();
  ARTSet333initialise();
  ARTSet120initialise();
  ARTSet77initialise();
  ARTSet169initialise();
  ARTSet56initialise();
  ARTSet105initialise();
  ARTSet8initialise();
  ARTSet172initialise();
  ARTSet55initialise();
  ARTSet65initialise();
  ARTSet292initialise();
  ARTSet221initialise();
  ARTSet216initialise();
  ARTSet218initialise();
  ARTSet448initialise();
  ARTSet80initialise();
  ARTSet50initialise();
  ARTSet84initialise();
  ARTSet58initialise();
  ARTSet443initialise();
  ARTSet374initialise();
  ARTSet318initialise();
  ARTSet391initialise();
  ARTSet39initialise();
  ARTSet94initialise();
  ARTSet102initialise();
  ARTSet321initialise();
  ARTSet205initialise();
  ARTSet155initialise();
  ARTSet388initialise();
  ARTSet263initialise();
  ARTSet411initialise();
  ARTSet389initialise();
  ARTSet424initialise();
  ARTSet83initialise();
  ARTSet439initialise();
  ARTSet82initialise();
  ARTSet246initialise();
  ARTSet283initialise();
  ARTSet5initialise();
  ARTSet429initialise();
  ARTSet200initialise();
  ARTSet340initialise();
  ARTSet125initialise();
  ARTSet396initialise();
  ARTSet111initialise();
  ARTSet127initialise();
  ARTSet190initialise();
  ARTSet315initialise();
  ARTSet268initialise();
  ARTSet403initialise();
  ARTSet342initialise();
  ARTSet171initialise();
  ARTSet382initialise();
  ARTSet339initialise();
  ARTSet286initialise();
  ARTSet307initialise();
  ARTSet338initialise();
  ARTSet252initialise();
  ARTSet237initialise();
  ARTSet430initialise();
  ARTSet170initialise();
  ARTSet139initialise();
  ARTSet51initialise();
  ARTSet385initialise();
  ARTSet262initialise();
  ARTSet336initialise();
  ARTSet459initialise();
  ARTSet92initialise();
  ARTSet322initialise();
  ARTSet444initialise();
  ARTSet107initialise();
  ARTSet115initialise();
  ARTSet12initialise();
  ARTSet157initialise();
  ARTSet210initialise();
  ARTSet303initialise();
  ARTSet133initialise();
  ARTSet203initialise();
  ARTSet436initialise();
  ARTSet236initialise();
  ARTSet53initialise();
  ARTSet308initialise();
  ARTSet25initialise();
  ARTSet198initialise();
  ARTSet227initialise();
  ARTSet284initialise();
  ARTSet150initialise();
  ARTSet317initialise();
  ARTSet270initialise();
  ARTSet324initialise();
  ARTSet124initialise();
  ARTSet148initialise();
  ARTSet44initialise();
  ARTSet153initialise();
  ARTSet11initialise();
  ARTSet362initialise();
  ARTSet99initialise();
  ARTSet376initialise();
  ARTSet46initialise();
  ARTSet104initialise();
  ARTSet409initialise();
  ARTSet122initialise();
  ARTSet192initialise();
  ARTSet66initialise();
  ARTSet384initialise();
  ARTSet10initialise();
  ARTSet70initialise();
  ARTSet91initialise();
  ARTSet97initialise();
  ARTSet276initialise();
  ARTSet14initialise();
  ARTSet144initialise();
  ARTSet217initialise();
  ARTSet419initialise();
  ARTSet16initialise();
  ARTSet174initialise();
  ARTSet280initialise();
  ARTSet208initialise();
  ARTSet209initialise();
  ARTSet423initialise();
  ARTSet141initialise();
  ARTSet290initialise();
  ARTSet130initialise();
  ARTSet177initialise();
  ARTSet278initialise();
  ARTSet234initialise();
  ARTSet37initialise();
  ARTSet128initialise();
  ARTSet179initialise();
  ARTSet279initialise();
  ARTSet222initialise();
  ARTSet316initialise();
  ARTSet142initialise();
  ARTSet291initialise();
  ARTSet351initialise();
  ARTSet28initialise();
  ARTSet273initialise();
  ARTSet293initialise();
  ARTSet372initialise();
  ARTSet211initialise();
  ARTSet357initialise();
  ARTSet191initialise();
  ARTSet54initialise();
  ARTSet118initialise();
  ARTSet421initialise();
  ARTSet161initialise();
  ARTSet289initialise();
  ARTSet417initialise();
  ARTSet306initialise();
  ARTSet281initialise();
  ARTSet261initialise();
  ARTSet438initialise();
  ARTSet402initialise();
  ARTSet344initialise();
  ARTSet245initialise();
  ARTSet427initialise();
  ARTSet434initialise();
  ARTSet149initialise();
  ARTSet45initialise();
  ARTSet202initialise();
  ARTSet9initialise();
  ARTSet31initialise();
  ARTSet185initialise();
  ARTSet223initialise();
  ARTSet383initialise();
  ARTSet304initialise();
  ARTSet168initialise();
  ARTSet112initialise();
  ARTSet412initialise();
  ARTSet381initialise();
  ARTSet151initialise();
  ARTSet435initialise();
  ARTSet253initialise();
  ARTSet259initialise();
  ARTSet426initialise();
  ARTSet114initialise();
  ARTSet378initialise();
  ARTSet6initialise();
  ARTSet432initialise();
  ARTSet152initialise();
  ARTSet285initialise();
  ARTSet40initialise();
  ARTSet305initialise();
  ARTSet406initialise();
  ARTSet81initialise();
  ARTSet319initialise();
  ARTSet165initialise();
  ARTSet52initialise();
  ARTSet394initialise();
  ARTSet241initialise();
  ARTSet187initialise();
  ARTSet408initialise();
  ARTSet201initialise();
  ARTSet361initialise();
  ARTSet166initialise();
  ARTSet433initialise();
  ARTSet219initialise();
  ARTSet220initialise();
  ARTSet188initialise();
  ARTSet328initialise();
  ARTSet239initialise();
  ARTSet260initialise();
  ARTSet34initialise();
  ARTSet41initialise();
  ARTSet269initialise();
  ARTSet298initialise();
  ARTSet347initialise();
  ARTSet359initialise();
  ARTSet183initialise();
  ARTSet267initialise();
  ARTSet368initialise();
  ARTSet416initialise();
  ARTSet67initialise();
  ARTSet35initialise();
  ARTSet353initialise();
  ARTSet379initialise();
  ARTSet146initialise();
  ARTSet452initialise();
  ARTSet78initialise();
  ARTSet62initialise();
  ARTSet358initialise();
  ARTSet288initialise();
  ARTSet57initialise();
  ARTSet386initialise();
  ARTSet247initialise();
  ARTSet96initialise();
  ARTSet453initialise();
  ARTSet178initialise();
  ARTSet356initialise();
  ARTSet154initialise();
  ARTSet204initialise();
  ARTSet255initialise();
  ARTSet64initialise();
  ARTSet301initialise();
  ARTSet61initialise();
  ARTSet98initialise();
  ARTSet181initialise();
  ARTSet343initialise();
  ARTSet140initialise();
  ARTSet377initialise();
  ARTSet15initialise();
  ARTSet38initialise();
  ARTSet329initialise();
  ARTSet30initialise();
  ARTSet414initialise();
  ARTSet164initialise();
  ARTSet399initialise();
  ARTSet131initialise();
  ARTSet132initialise();
  ARTSet390initialise();
  ARTSet251initialise();
  ARTSet20initialise();
  ARTSet249initialise();
  ARTSet320initialise();
  ARTSet233initialise();
  ARTSet401initialise();
  ARTSet68initialise();
  ARTSet71initialise();
  ARTSet90initialise();
  ARTSet454initialise();
  ARTSet60initialise();
  ARTSet194initialise();
  ARTSet265initialise();
  ARTSet367initialise();
  ARTSet195initialise();
  ARTSet215initialise();
  ARTSet106initialise();
  ARTSet86initialise();
  ARTSet373initialise();
  ARTSet425initialise();
  ARTSet392initialise();
  ARTSet335initialise();
  ARTSet410initialise();
  ARTSet24initialise();
  ARTSet387initialise();
  ARTSet275initialise();
  ARTSet264initialise();
  ARTSet193initialise();
  ARTSet224initialise();
  ARTSet225initialise();
  ARTSet43initialise();
  ARTSet134initialise();
  ARTSet29initialise();
  ARTSet59initialise();
  ARTSet93initialise();
  ARTSet47initialise();
  ARTSet175initialise();
  ARTSet254initialise();
  ARTSet235initialise();
  ARTSet346initialise();
  ARTSet145initialise();
  ARTSet397initialise();
  ARTSet258initialise();
  ARTSet393initialise();
  ARTSet95initialise();
  ARTSet167initialise();
  ARTSet441initialise();
  ARTSet109initialise();
  ARTSet271initialise();
  ARTSet334initialise();
  ARTSet89initialise();
  ARTSet370initialise();
  ARTSet119initialise();
  ARTSet313initialise();
  ARTSet310initialise();
}

public void artTableInitialiser_ART_Boolean_expression() {
  artLabelInternalStrings[ARTL_ART_Boolean_expression] = "Boolean_expression";
  artLabelStrings[ARTL_ART_Boolean_expression] = "Boolean_expression";
  artKindOfs[ARTL_ART_Boolean_expression] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_Boolean_expression_198] = "Boolean_expression ::= . expression ";
  artLabelStrings[ARTL_ART_Boolean_expression_198] = "";
  artlhsL[ARTL_ART_Boolean_expression_198] = ARTL_ART_Boolean_expression;
  artKindOfs[ARTL_ART_Boolean_expression_198] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_Boolean_expression_200] = "Boolean_expression ::= expression .";
  artLabelStrings[ARTL_ART_Boolean_expression_200] = "";
  artlhsL[ARTL_ART_Boolean_expression_200] = ARTL_ART_Boolean_expression;
  artSlotInstanceOfs[ARTL_ART_Boolean_expression_200] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_Boolean_expression_200] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_Boolean_expression_200] = true;
  arteoR_pL[ARTL_ART_Boolean_expression_200] = true;
  artPopD[ARTL_ART_Boolean_expression_200] = true;
}

public void artTableInitialiser_ART_ID() {
  artLabelInternalStrings[ARTL_ART_ID] = "ID";
  artLabelStrings[ARTL_ART_ID] = "ID";
  artKindOfs[ARTL_ART_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_ID_206] = "ID ::= . 'ID'  ";
  artLabelStrings[ARTL_ART_ID_206] = "";
  artlhsL[ARTL_ART_ID_206] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_ID_206] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_ID_206] = true;
  artLabelInternalStrings[ARTL_ART_ID_207] = "ID ::= 'ID'  ";
  artLabelStrings[ARTL_ART_ID_207] = "";
  artlhsL[ARTL_ART_ID_207] = ARTL_ART_ID;
  artPopD[ARTL_ART_ID_207] = true;
  artLabelInternalStrings[ARTL_ART_ID_208] = "ID ::= 'ID'  .";
  artLabelStrings[ARTL_ART_ID_208] = "";
  artlhsL[ARTL_ART_ID_208] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_ID_208] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ID_208] = true;
  arteoR_pL[ARTL_ART_ID_208] = true;
  artPopD[ARTL_ART_ID_208] = true;
}

public void artTableInitialiser_ART_ID_list() {
  artLabelInternalStrings[ARTL_ART_ID_list] = "ID_list";
  artLabelStrings[ARTL_ART_ID_list] = "ID_list";
  artKindOfs[ARTL_ART_ID_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_ID_list_556] = "ID_list ::= . ID ID_list_18 ";
  artLabelStrings[ARTL_ART_ID_list_556] = "";
  artlhsL[ARTL_ART_ID_list_556] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_ID_list_556] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_ID_list_558] = "ID_list ::= ID . ID_list_18 ";
  artLabelStrings[ARTL_ART_ID_list_558] = "";
  artlhsL[ARTL_ART_ID_list_558] = ARTL_ART_ID_list;
  artSlotInstanceOfs[ARTL_ART_ID_list_558] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_ID_list_558] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_ID_list_558] = true;
  artLabelInternalStrings[ARTL_ART_ID_list_560] = "ID_list ::= ID ID_list_18 .";
  artLabelStrings[ARTL_ART_ID_list_560] = "";
  artlhsL[ARTL_ART_ID_list_560] = ARTL_ART_ID_list;
  artSlotInstanceOfs[ARTL_ART_ID_list_560] = ARTL_ART_ID_list_18;
  artKindOfs[ARTL_ART_ID_list_560] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ID_list_560] = true;
  arteoR_pL[ARTL_ART_ID_list_560] = true;
  artPopD[ARTL_ART_ID_list_560] = true;
}

public void artTableInitialiser_ART_ID_list_18() {
  artLabelInternalStrings[ARTL_ART_ID_list_18] = "ID_list_18";
  artLabelStrings[ARTL_ART_ID_list_18] = "ID_list_18";
  artKindOfs[ARTL_ART_ID_list_18] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_ID_list_18_960] = "ID_list_18 ::= . # ";
  artLabelStrings[ARTL_ART_ID_list_18_960] = "";
  artlhsL[ARTL_ART_ID_list_18_960] = ARTL_ART_ID_list_18;
  artKindOfs[ARTL_ART_ID_list_18_960] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_ID_list_18_960] = true;
  artLabelInternalStrings[ARTL_ART_ID_list_18_962] = "ID_list_18 ::= # .";
  artLabelStrings[ARTL_ART_ID_list_18_962] = "";
  artlhsL[ARTL_ART_ID_list_18_962] = ARTL_ART_ID_list_18;
  artKindOfs[ARTL_ART_ID_list_18_962] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ID_list_18_962] = true;
  arteoR_pL[ARTL_ART_ID_list_18_962] = true;
  artPopD[ARTL_ART_ID_list_18_962] = true;
  artLabelInternalStrings[ARTL_ART_ID_list_18_964] = "ID_list_18 ::= . ID_list_18 ','  ID ";
  artLabelStrings[ARTL_ART_ID_list_18_964] = "";
  artlhsL[ARTL_ART_ID_list_18_964] = ARTL_ART_ID_list_18;
  artKindOfs[ARTL_ART_ID_list_18_964] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_ID_list_18_966] = "ID_list_18 ::= ID_list_18 . ','  ID ";
  artLabelStrings[ARTL_ART_ID_list_18_966] = "";
  artlhsL[ARTL_ART_ID_list_18_966] = ARTL_ART_ID_list_18;
  artSlotInstanceOfs[ARTL_ART_ID_list_18_966] = ARTL_ART_ID_list_18;
  artKindOfs[ARTL_ART_ID_list_18_966] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_ID_list_18_966] = true;
  artLabelInternalStrings[ARTL_ART_ID_list_18_967] = "ID_list_18 ::= ID_list_18 ','  ID ";
  artLabelStrings[ARTL_ART_ID_list_18_967] = "";
  artlhsL[ARTL_ART_ID_list_18_967] = ARTL_ART_ID_list_18;
  artLabelInternalStrings[ARTL_ART_ID_list_18_968] = "ID_list_18 ::= ID_list_18 ','  . ID ";
  artLabelStrings[ARTL_ART_ID_list_18_968] = "";
  artlhsL[ARTL_ART_ID_list_18_968] = ARTL_ART_ID_list_18;
  artKindOfs[ARTL_ART_ID_list_18_968] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_ID_list_18_970] = "ID_list_18 ::= ID_list_18 ','  ID .";
  artLabelStrings[ARTL_ART_ID_list_18_970] = "";
  artlhsL[ARTL_ART_ID_list_18_970] = ARTL_ART_ID_list_18;
  artSlotInstanceOfs[ARTL_ART_ID_list_18_970] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_ID_list_18_970] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ID_list_18_970] = true;
  arteoR_pL[ARTL_ART_ID_list_18_970] = true;
  artPopD[ARTL_ART_ID_list_18_970] = true;
}

public void artTableInitialiser_ART_actual_parameter() {
  artLabelInternalStrings[ARTL_ART_actual_parameter] = "actual_parameter";
  artLabelStrings[ARTL_ART_actual_parameter] = "actual_parameter";
  artKindOfs[ARTL_ART_actual_parameter] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_actual_parameter_22] = "actual_parameter ::= . expression ";
  artLabelStrings[ARTL_ART_actual_parameter_22] = "";
  artlhsL[ARTL_ART_actual_parameter_22] = ARTL_ART_actual_parameter;
  artKindOfs[ARTL_ART_actual_parameter_22] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_actual_parameter_24] = "actual_parameter ::= expression .";
  artLabelStrings[ARTL_ART_actual_parameter_24] = "";
  artlhsL[ARTL_ART_actual_parameter_24] = ARTL_ART_actual_parameter;
  artSlotInstanceOfs[ARTL_ART_actual_parameter_24] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_actual_parameter_24] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_actual_parameter_24] = true;
  arteoR_pL[ARTL_ART_actual_parameter_24] = true;
  artPopD[ARTL_ART_actual_parameter_24] = true;
  artLabelInternalStrings[ARTL_ART_actual_parameter_26] = "actual_parameter ::= . procedure_ID ";
  artLabelStrings[ARTL_ART_actual_parameter_26] = "";
  artlhsL[ARTL_ART_actual_parameter_26] = ARTL_ART_actual_parameter;
  artKindOfs[ARTL_ART_actual_parameter_26] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_actual_parameter_28] = "actual_parameter ::= procedure_ID .";
  artLabelStrings[ARTL_ART_actual_parameter_28] = "";
  artlhsL[ARTL_ART_actual_parameter_28] = ARTL_ART_actual_parameter;
  artSlotInstanceOfs[ARTL_ART_actual_parameter_28] = ARTL_ART_procedure_ID;
  artKindOfs[ARTL_ART_actual_parameter_28] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_actual_parameter_28] = true;
  arteoR_pL[ARTL_ART_actual_parameter_28] = true;
  artPopD[ARTL_ART_actual_parameter_28] = true;
}

public void artTableInitialiser_ART_actual_parameter_list() {
  artLabelInternalStrings[ARTL_ART_actual_parameter_list] = "actual_parameter_list";
  artLabelStrings[ARTL_ART_actual_parameter_list] = "actual_parameter_list";
  artKindOfs[ARTL_ART_actual_parameter_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_40] = "actual_parameter_list ::= . '('  actual_parameter actual_parameter_list_1 ')'  ";
  artLabelStrings[ARTL_ART_actual_parameter_list_40] = "";
  artlhsL[ARTL_ART_actual_parameter_list_40] = ARTL_ART_actual_parameter_list;
  artKindOfs[ARTL_ART_actual_parameter_list_40] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_41] = "actual_parameter_list ::= '('  actual_parameter actual_parameter_list_1 ')'  ";
  artLabelStrings[ARTL_ART_actual_parameter_list_41] = "";
  artlhsL[ARTL_ART_actual_parameter_list_41] = ARTL_ART_actual_parameter_list;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_42] = "actual_parameter_list ::= '('  . actual_parameter actual_parameter_list_1 ')'  ";
  artLabelStrings[ARTL_ART_actual_parameter_list_42] = "";
  artlhsL[ARTL_ART_actual_parameter_list_42] = ARTL_ART_actual_parameter_list;
  artKindOfs[ARTL_ART_actual_parameter_list_42] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_actual_parameter_list_42] = true;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_44] = "actual_parameter_list ::= '('  actual_parameter . actual_parameter_list_1 ')'  ";
  artLabelStrings[ARTL_ART_actual_parameter_list_44] = "";
  artlhsL[ARTL_ART_actual_parameter_list_44] = ARTL_ART_actual_parameter_list;
  artSlotInstanceOfs[ARTL_ART_actual_parameter_list_44] = ARTL_ART_actual_parameter;
  artKindOfs[ARTL_ART_actual_parameter_list_44] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_46] = "actual_parameter_list ::= '('  actual_parameter actual_parameter_list_1 . ')'  ";
  artLabelStrings[ARTL_ART_actual_parameter_list_46] = "";
  artlhsL[ARTL_ART_actual_parameter_list_46] = ARTL_ART_actual_parameter_list;
  artSlotInstanceOfs[ARTL_ART_actual_parameter_list_46] = ARTL_ART_actual_parameter_list_1;
  artKindOfs[ARTL_ART_actual_parameter_list_46] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_actual_parameter_list_46] = true;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_47] = "actual_parameter_list ::= '('  actual_parameter actual_parameter_list_1 ')'  ";
  artLabelStrings[ARTL_ART_actual_parameter_list_47] = "";
  artlhsL[ARTL_ART_actual_parameter_list_47] = ARTL_ART_actual_parameter_list;
  artPopD[ARTL_ART_actual_parameter_list_47] = true;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_48] = "actual_parameter_list ::= '('  actual_parameter actual_parameter_list_1 ')'  .";
  artLabelStrings[ARTL_ART_actual_parameter_list_48] = "";
  artlhsL[ARTL_ART_actual_parameter_list_48] = ARTL_ART_actual_parameter_list;
  artKindOfs[ARTL_ART_actual_parameter_list_48] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_actual_parameter_list_48] = true;
  arteoR_pL[ARTL_ART_actual_parameter_list_48] = true;
  artPopD[ARTL_ART_actual_parameter_list_48] = true;
}

public void artTableInitialiser_ART_actual_parameter_list_1() {
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_1] = "actual_parameter_list_1";
  artLabelStrings[ARTL_ART_actual_parameter_list_1] = "actual_parameter_list_1";
  artKindOfs[ARTL_ART_actual_parameter_list_1] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_1_50] = "actual_parameter_list_1 ::= . # ";
  artLabelStrings[ARTL_ART_actual_parameter_list_1_50] = "";
  artlhsL[ARTL_ART_actual_parameter_list_1_50] = ARTL_ART_actual_parameter_list_1;
  artKindOfs[ARTL_ART_actual_parameter_list_1_50] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_actual_parameter_list_1_50] = true;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_1_52] = "actual_parameter_list_1 ::= # .";
  artLabelStrings[ARTL_ART_actual_parameter_list_1_52] = "";
  artlhsL[ARTL_ART_actual_parameter_list_1_52] = ARTL_ART_actual_parameter_list_1;
  artKindOfs[ARTL_ART_actual_parameter_list_1_52] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_actual_parameter_list_1_52] = true;
  arteoR_pL[ARTL_ART_actual_parameter_list_1_52] = true;
  artPopD[ARTL_ART_actual_parameter_list_1_52] = true;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_1_54] = "actual_parameter_list_1 ::= . actual_parameter_list_1 ','  actual_parameter ";
  artLabelStrings[ARTL_ART_actual_parameter_list_1_54] = "";
  artlhsL[ARTL_ART_actual_parameter_list_1_54] = ARTL_ART_actual_parameter_list_1;
  artKindOfs[ARTL_ART_actual_parameter_list_1_54] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_1_56] = "actual_parameter_list_1 ::= actual_parameter_list_1 . ','  actual_parameter ";
  artLabelStrings[ARTL_ART_actual_parameter_list_1_56] = "";
  artlhsL[ARTL_ART_actual_parameter_list_1_56] = ARTL_ART_actual_parameter_list_1;
  artSlotInstanceOfs[ARTL_ART_actual_parameter_list_1_56] = ARTL_ART_actual_parameter_list_1;
  artKindOfs[ARTL_ART_actual_parameter_list_1_56] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_actual_parameter_list_1_56] = true;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_1_57] = "actual_parameter_list_1 ::= actual_parameter_list_1 ','  actual_parameter ";
  artLabelStrings[ARTL_ART_actual_parameter_list_1_57] = "";
  artlhsL[ARTL_ART_actual_parameter_list_1_57] = ARTL_ART_actual_parameter_list_1;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_1_58] = "actual_parameter_list_1 ::= actual_parameter_list_1 ','  . actual_parameter ";
  artLabelStrings[ARTL_ART_actual_parameter_list_1_58] = "";
  artlhsL[ARTL_ART_actual_parameter_list_1_58] = ARTL_ART_actual_parameter_list_1;
  artKindOfs[ARTL_ART_actual_parameter_list_1_58] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_actual_parameter_list_1_60] = "actual_parameter_list_1 ::= actual_parameter_list_1 ','  actual_parameter .";
  artLabelStrings[ARTL_ART_actual_parameter_list_1_60] = "";
  artlhsL[ARTL_ART_actual_parameter_list_1_60] = ARTL_ART_actual_parameter_list_1;
  artSlotInstanceOfs[ARTL_ART_actual_parameter_list_1_60] = ARTL_ART_actual_parameter;
  artKindOfs[ARTL_ART_actual_parameter_list_1_60] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_actual_parameter_list_1_60] = true;
  arteoR_pL[ARTL_ART_actual_parameter_list_1_60] = true;
  artPopD[ARTL_ART_actual_parameter_list_1_60] = true;
}

public void artTableInitialiser_ART_adding_operator() {
  artLabelInternalStrings[ARTL_ART_adding_operator] = "adding_operator";
  artLabelStrings[ARTL_ART_adding_operator] = "adding_operator";
  artKindOfs[ARTL_ART_adding_operator] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_adding_operator_62] = "adding_operator ::= . '+'  ";
  artLabelStrings[ARTL_ART_adding_operator_62] = "";
  artlhsL[ARTL_ART_adding_operator_62] = ARTL_ART_adding_operator;
  artKindOfs[ARTL_ART_adding_operator_62] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_adding_operator_62] = true;
  artLabelInternalStrings[ARTL_ART_adding_operator_63] = "adding_operator ::= '+'  ";
  artLabelStrings[ARTL_ART_adding_operator_63] = "";
  artlhsL[ARTL_ART_adding_operator_63] = ARTL_ART_adding_operator;
  artPopD[ARTL_ART_adding_operator_63] = true;
  artLabelInternalStrings[ARTL_ART_adding_operator_64] = "adding_operator ::= '+'  .";
  artLabelStrings[ARTL_ART_adding_operator_64] = "";
  artlhsL[ARTL_ART_adding_operator_64] = ARTL_ART_adding_operator;
  artKindOfs[ARTL_ART_adding_operator_64] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_adding_operator_64] = true;
  arteoR_pL[ARTL_ART_adding_operator_64] = true;
  artPopD[ARTL_ART_adding_operator_64] = true;
  artLabelInternalStrings[ARTL_ART_adding_operator_66] = "adding_operator ::= . '-'  ";
  artLabelStrings[ARTL_ART_adding_operator_66] = "";
  artlhsL[ARTL_ART_adding_operator_66] = ARTL_ART_adding_operator;
  artKindOfs[ARTL_ART_adding_operator_66] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_adding_operator_66] = true;
  artLabelInternalStrings[ARTL_ART_adding_operator_67] = "adding_operator ::= '-'  ";
  artLabelStrings[ARTL_ART_adding_operator_67] = "";
  artlhsL[ARTL_ART_adding_operator_67] = ARTL_ART_adding_operator;
  artPopD[ARTL_ART_adding_operator_67] = true;
  artLabelInternalStrings[ARTL_ART_adding_operator_68] = "adding_operator ::= '-'  .";
  artLabelStrings[ARTL_ART_adding_operator_68] = "";
  artlhsL[ARTL_ART_adding_operator_68] = ARTL_ART_adding_operator;
  artKindOfs[ARTL_ART_adding_operator_68] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_adding_operator_68] = true;
  arteoR_pL[ARTL_ART_adding_operator_68] = true;
  artPopD[ARTL_ART_adding_operator_68] = true;
  artLabelInternalStrings[ARTL_ART_adding_operator_70] = "adding_operator ::= . 'or'  ";
  artLabelStrings[ARTL_ART_adding_operator_70] = "";
  artlhsL[ARTL_ART_adding_operator_70] = ARTL_ART_adding_operator;
  artKindOfs[ARTL_ART_adding_operator_70] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_adding_operator_70] = true;
  artLabelInternalStrings[ARTL_ART_adding_operator_71] = "adding_operator ::= 'or'  ";
  artLabelStrings[ARTL_ART_adding_operator_71] = "";
  artlhsL[ARTL_ART_adding_operator_71] = ARTL_ART_adding_operator;
  artPopD[ARTL_ART_adding_operator_71] = true;
  artLabelInternalStrings[ARTL_ART_adding_operator_72] = "adding_operator ::= 'or'  .";
  artLabelStrings[ARTL_ART_adding_operator_72] = "";
  artlhsL[ARTL_ART_adding_operator_72] = ARTL_ART_adding_operator;
  artKindOfs[ARTL_ART_adding_operator_72] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_adding_operator_72] = true;
  arteoR_pL[ARTL_ART_adding_operator_72] = true;
  artPopD[ARTL_ART_adding_operator_72] = true;
}

public void artTableInitialiser_ART_apostrophe_image() {
  artLabelInternalStrings[ARTL_ART_apostrophe_image] = "apostrophe_image";
  artLabelStrings[ARTL_ART_apostrophe_image] = "apostrophe_image";
  artKindOfs[ARTL_ART_apostrophe_image] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_apostrophe_image_74] = "apostrophe_image ::= . '\\\"'  ";
  artLabelStrings[ARTL_ART_apostrophe_image_74] = "";
  artlhsL[ARTL_ART_apostrophe_image_74] = ARTL_ART_apostrophe_image;
  artKindOfs[ARTL_ART_apostrophe_image_74] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_apostrophe_image_74] = true;
  artLabelInternalStrings[ARTL_ART_apostrophe_image_75] = "apostrophe_image ::= '\\\"'  ";
  artLabelStrings[ARTL_ART_apostrophe_image_75] = "";
  artlhsL[ARTL_ART_apostrophe_image_75] = ARTL_ART_apostrophe_image;
  artPopD[ARTL_ART_apostrophe_image_75] = true;
  artLabelInternalStrings[ARTL_ART_apostrophe_image_76] = "apostrophe_image ::= '\\\"'  .";
  artLabelStrings[ARTL_ART_apostrophe_image_76] = "";
  artlhsL[ARTL_ART_apostrophe_image_76] = ARTL_ART_apostrophe_image;
  artKindOfs[ARTL_ART_apostrophe_image_76] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_apostrophe_image_76] = true;
  arteoR_pL[ARTL_ART_apostrophe_image_76] = true;
  artPopD[ARTL_ART_apostrophe_image_76] = true;
}

public void artTableInitialiser_ART_array_type() {
  artLabelInternalStrings[ARTL_ART_array_type] = "array_type";
  artLabelStrings[ARTL_ART_array_type] = "array_type";
  artKindOfs[ARTL_ART_array_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_array_type_78] = "array_type ::= . 'array'  '['  index_type array_type_2 ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_78] = "";
  artlhsL[ARTL_ART_array_type_78] = ARTL_ART_array_type;
  artKindOfs[ARTL_ART_array_type_78] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_array_type_79] = "array_type ::= 'array'  '['  index_type array_type_2 ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_79] = "";
  artlhsL[ARTL_ART_array_type_79] = ARTL_ART_array_type;
  artLabelInternalStrings[ARTL_ART_array_type_80] = "array_type ::= 'array'  . '['  index_type array_type_2 ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_80] = "";
  artlhsL[ARTL_ART_array_type_80] = ARTL_ART_array_type;
  artKindOfs[ARTL_ART_array_type_80] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_array_type_80] = true;
  artLabelInternalStrings[ARTL_ART_array_type_81] = "array_type ::= 'array'  '['  index_type array_type_2 ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_81] = "";
  artlhsL[ARTL_ART_array_type_81] = ARTL_ART_array_type;
  artLabelInternalStrings[ARTL_ART_array_type_82] = "array_type ::= 'array'  '['  . index_type array_type_2 ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_82] = "";
  artlhsL[ARTL_ART_array_type_82] = ARTL_ART_array_type;
  artKindOfs[ARTL_ART_array_type_82] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_array_type_84] = "array_type ::= 'array'  '['  index_type . array_type_2 ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_84] = "";
  artlhsL[ARTL_ART_array_type_84] = ARTL_ART_array_type;
  artSlotInstanceOfs[ARTL_ART_array_type_84] = ARTL_ART_index_type;
  artKindOfs[ARTL_ART_array_type_84] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_array_type_86] = "array_type ::= 'array'  '['  index_type array_type_2 . ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_86] = "";
  artlhsL[ARTL_ART_array_type_86] = ARTL_ART_array_type;
  artSlotInstanceOfs[ARTL_ART_array_type_86] = ARTL_ART_array_type_2;
  artKindOfs[ARTL_ART_array_type_86] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_array_type_87] = "array_type ::= 'array'  '['  index_type array_type_2 ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_87] = "";
  artlhsL[ARTL_ART_array_type_87] = ARTL_ART_array_type;
  artLabelInternalStrings[ARTL_ART_array_type_88] = "array_type ::= 'array'  '['  index_type array_type_2 ']'  . 'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_88] = "";
  artlhsL[ARTL_ART_array_type_88] = ARTL_ART_array_type;
  artKindOfs[ARTL_ART_array_type_88] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_array_type_89] = "array_type ::= 'array'  '['  index_type array_type_2 ']'  'of'  component_type ";
  artLabelStrings[ARTL_ART_array_type_89] = "";
  artlhsL[ARTL_ART_array_type_89] = ARTL_ART_array_type;
  artLabelInternalStrings[ARTL_ART_array_type_90] = "array_type ::= 'array'  '['  index_type array_type_2 ']'  'of'  . component_type ";
  artLabelStrings[ARTL_ART_array_type_90] = "";
  artlhsL[ARTL_ART_array_type_90] = ARTL_ART_array_type;
  artKindOfs[ARTL_ART_array_type_90] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_array_type_92] = "array_type ::= 'array'  '['  index_type array_type_2 ']'  'of'  component_type .";
  artLabelStrings[ARTL_ART_array_type_92] = "";
  artlhsL[ARTL_ART_array_type_92] = ARTL_ART_array_type;
  artSlotInstanceOfs[ARTL_ART_array_type_92] = ARTL_ART_component_type;
  artKindOfs[ARTL_ART_array_type_92] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_array_type_92] = true;
  arteoR_pL[ARTL_ART_array_type_92] = true;
  artPopD[ARTL_ART_array_type_92] = true;
}

public void artTableInitialiser_ART_array_type_2() {
  artLabelInternalStrings[ARTL_ART_array_type_2] = "array_type_2";
  artLabelStrings[ARTL_ART_array_type_2] = "array_type_2";
  artKindOfs[ARTL_ART_array_type_2] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_array_type_2_98] = "array_type_2 ::= . # ";
  artLabelStrings[ARTL_ART_array_type_2_98] = "";
  artlhsL[ARTL_ART_array_type_2_98] = ARTL_ART_array_type_2;
  artKindOfs[ARTL_ART_array_type_2_98] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_array_type_2_98] = true;
  artLabelInternalStrings[ARTL_ART_array_type_2_100] = "array_type_2 ::= # .";
  artLabelStrings[ARTL_ART_array_type_2_100] = "";
  artlhsL[ARTL_ART_array_type_2_100] = ARTL_ART_array_type_2;
  artKindOfs[ARTL_ART_array_type_2_100] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_array_type_2_100] = true;
  arteoR_pL[ARTL_ART_array_type_2_100] = true;
  artPopD[ARTL_ART_array_type_2_100] = true;
  artLabelInternalStrings[ARTL_ART_array_type_2_102] = "array_type_2 ::= . array_type_2 ','  index_type ";
  artLabelStrings[ARTL_ART_array_type_2_102] = "";
  artlhsL[ARTL_ART_array_type_2_102] = ARTL_ART_array_type_2;
  artKindOfs[ARTL_ART_array_type_2_102] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_array_type_2_104] = "array_type_2 ::= array_type_2 . ','  index_type ";
  artLabelStrings[ARTL_ART_array_type_2_104] = "";
  artlhsL[ARTL_ART_array_type_2_104] = ARTL_ART_array_type_2;
  artSlotInstanceOfs[ARTL_ART_array_type_2_104] = ARTL_ART_array_type_2;
  artKindOfs[ARTL_ART_array_type_2_104] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_array_type_2_104] = true;
  artLabelInternalStrings[ARTL_ART_array_type_2_105] = "array_type_2 ::= array_type_2 ','  index_type ";
  artLabelStrings[ARTL_ART_array_type_2_105] = "";
  artlhsL[ARTL_ART_array_type_2_105] = ARTL_ART_array_type_2;
  artLabelInternalStrings[ARTL_ART_array_type_2_106] = "array_type_2 ::= array_type_2 ','  . index_type ";
  artLabelStrings[ARTL_ART_array_type_2_106] = "";
  artlhsL[ARTL_ART_array_type_2_106] = ARTL_ART_array_type_2;
  artKindOfs[ARTL_ART_array_type_2_106] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_array_type_2_108] = "array_type_2 ::= array_type_2 ','  index_type .";
  artLabelStrings[ARTL_ART_array_type_2_108] = "";
  artlhsL[ARTL_ART_array_type_2_108] = ARTL_ART_array_type_2;
  artSlotInstanceOfs[ARTL_ART_array_type_2_108] = ARTL_ART_index_type;
  artKindOfs[ARTL_ART_array_type_2_108] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_array_type_2_108] = true;
  arteoR_pL[ARTL_ART_array_type_2_108] = true;
  artPopD[ARTL_ART_array_type_2_108] = true;
}

public void artTableInitialiser_ART_assignment_statement() {
  artLabelInternalStrings[ARTL_ART_assignment_statement] = "assignment_statement";
  artLabelStrings[ARTL_ART_assignment_statement] = "assignment_statement";
  artKindOfs[ARTL_ART_assignment_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_assignment_statement_114] = "assignment_statement ::= . assignment_statement_3 ':='  expression ";
  artLabelStrings[ARTL_ART_assignment_statement_114] = "";
  artlhsL[ARTL_ART_assignment_statement_114] = ARTL_ART_assignment_statement;
  artKindOfs[ARTL_ART_assignment_statement_114] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_assignment_statement_116] = "assignment_statement ::= assignment_statement_3 . ':='  expression ";
  artLabelStrings[ARTL_ART_assignment_statement_116] = "";
  artlhsL[ARTL_ART_assignment_statement_116] = ARTL_ART_assignment_statement;
  artSlotInstanceOfs[ARTL_ART_assignment_statement_116] = ARTL_ART_assignment_statement_3;
  artKindOfs[ARTL_ART_assignment_statement_116] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_assignment_statement_116] = true;
  artLabelInternalStrings[ARTL_ART_assignment_statement_117] = "assignment_statement ::= assignment_statement_3 ':='  expression ";
  artLabelStrings[ARTL_ART_assignment_statement_117] = "";
  artlhsL[ARTL_ART_assignment_statement_117] = ARTL_ART_assignment_statement;
  artLabelInternalStrings[ARTL_ART_assignment_statement_118] = "assignment_statement ::= assignment_statement_3 ':='  . expression ";
  artLabelStrings[ARTL_ART_assignment_statement_118] = "";
  artlhsL[ARTL_ART_assignment_statement_118] = ARTL_ART_assignment_statement;
  artKindOfs[ARTL_ART_assignment_statement_118] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_assignment_statement_120] = "assignment_statement ::= assignment_statement_3 ':='  expression .";
  artLabelStrings[ARTL_ART_assignment_statement_120] = "";
  artlhsL[ARTL_ART_assignment_statement_120] = ARTL_ART_assignment_statement;
  artSlotInstanceOfs[ARTL_ART_assignment_statement_120] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_assignment_statement_120] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_assignment_statement_120] = true;
  arteoR_pL[ARTL_ART_assignment_statement_120] = true;
  artPopD[ARTL_ART_assignment_statement_120] = true;
}

public void artTableInitialiser_ART_assignment_statement_3() {
  artLabelInternalStrings[ARTL_ART_assignment_statement_3] = "assignment_statement_3";
  artLabelStrings[ARTL_ART_assignment_statement_3] = "assignment_statement_3";
  artKindOfs[ARTL_ART_assignment_statement_3] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_assignment_statement_3_122] = "assignment_statement_3 ::= . variable_access ";
  artLabelStrings[ARTL_ART_assignment_statement_3_122] = "";
  artlhsL[ARTL_ART_assignment_statement_3_122] = ARTL_ART_assignment_statement_3;
  artKindOfs[ARTL_ART_assignment_statement_3_122] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_assignment_statement_3_124] = "assignment_statement_3 ::= variable_access .";
  artLabelStrings[ARTL_ART_assignment_statement_3_124] = "";
  artlhsL[ARTL_ART_assignment_statement_3_124] = ARTL_ART_assignment_statement_3;
  artSlotInstanceOfs[ARTL_ART_assignment_statement_3_124] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_assignment_statement_3_124] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_assignment_statement_3_124] = true;
  arteoR_pL[ARTL_ART_assignment_statement_3_124] = true;
  artPopD[ARTL_ART_assignment_statement_3_124] = true;
  artLabelInternalStrings[ARTL_ART_assignment_statement_3_126] = "assignment_statement_3 ::= . function_ID ";
  artLabelStrings[ARTL_ART_assignment_statement_3_126] = "";
  artlhsL[ARTL_ART_assignment_statement_3_126] = ARTL_ART_assignment_statement_3;
  artKindOfs[ARTL_ART_assignment_statement_3_126] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_assignment_statement_3_128] = "assignment_statement_3 ::= function_ID .";
  artLabelStrings[ARTL_ART_assignment_statement_3_128] = "";
  artlhsL[ARTL_ART_assignment_statement_3_128] = ARTL_ART_assignment_statement_3;
  artSlotInstanceOfs[ARTL_ART_assignment_statement_3_128] = ARTL_ART_function_ID;
  artKindOfs[ARTL_ART_assignment_statement_3_128] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_assignment_statement_3_128] = true;
  arteoR_pL[ARTL_ART_assignment_statement_3_128] = true;
  artPopD[ARTL_ART_assignment_statement_3_128] = true;
}

public void artTableInitialiser_ART_base_type() {
  artLabelInternalStrings[ARTL_ART_base_type] = "base_type";
  artLabelStrings[ARTL_ART_base_type] = "base_type";
  artKindOfs[ARTL_ART_base_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_base_type_148] = "base_type ::= . ordinal_type ";
  artLabelStrings[ARTL_ART_base_type_148] = "";
  artlhsL[ARTL_ART_base_type_148] = ARTL_ART_base_type;
  artKindOfs[ARTL_ART_base_type_148] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_base_type_150] = "base_type ::= ordinal_type .";
  artLabelStrings[ARTL_ART_base_type_150] = "";
  artlhsL[ARTL_ART_base_type_150] = ARTL_ART_base_type;
  artSlotInstanceOfs[ARTL_ART_base_type_150] = ARTL_ART_ordinal_type;
  artKindOfs[ARTL_ART_base_type_150] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_base_type_150] = true;
  arteoR_pL[ARTL_ART_base_type_150] = true;
  artPopD[ARTL_ART_base_type_150] = true;
}

public void artTableInitialiser_ART_block() {
  artLabelInternalStrings[ARTL_ART_block] = "block";
  artLabelStrings[ARTL_ART_block] = "block";
  artKindOfs[ARTL_ART_block] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_block_160] = "block ::= . label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part ";
  artLabelStrings[ARTL_ART_block_160] = "";
  artlhsL[ARTL_ART_block_160] = ARTL_ART_block;
  artKindOfs[ARTL_ART_block_160] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_block_162] = "block ::= label_declaration_part . constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part ";
  artLabelStrings[ARTL_ART_block_162] = "";
  artlhsL[ARTL_ART_block_162] = ARTL_ART_block;
  artSlotInstanceOfs[ARTL_ART_block_162] = ARTL_ART_label_declaration_part;
  artKindOfs[ARTL_ART_block_162] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_block_162] = true;
  artLabelInternalStrings[ARTL_ART_block_164] = "block ::= label_declaration_part constant_definition_part . type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part ";
  artLabelStrings[ARTL_ART_block_164] = "";
  artlhsL[ARTL_ART_block_164] = ARTL_ART_block;
  artSlotInstanceOfs[ARTL_ART_block_164] = ARTL_ART_constant_definition_part;
  artKindOfs[ARTL_ART_block_164] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_block_166] = "block ::= label_declaration_part constant_definition_part type_definition_part . variable_declaration_part procedure_and_function_declaration_part statement_part ";
  artLabelStrings[ARTL_ART_block_166] = "";
  artlhsL[ARTL_ART_block_166] = ARTL_ART_block;
  artSlotInstanceOfs[ARTL_ART_block_166] = ARTL_ART_type_definition_part;
  artKindOfs[ARTL_ART_block_166] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_block_168] = "block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part . procedure_and_function_declaration_part statement_part ";
  artLabelStrings[ARTL_ART_block_168] = "";
  artlhsL[ARTL_ART_block_168] = ARTL_ART_block;
  artSlotInstanceOfs[ARTL_ART_block_168] = ARTL_ART_variable_declaration_part;
  artKindOfs[ARTL_ART_block_168] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_block_170] = "block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part . statement_part ";
  artLabelStrings[ARTL_ART_block_170] = "";
  artlhsL[ARTL_ART_block_170] = ARTL_ART_block;
  artSlotInstanceOfs[ARTL_ART_block_170] = ARTL_ART_procedure_and_function_declaration_part;
  artKindOfs[ARTL_ART_block_170] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_block_172] = "block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part .";
  artLabelStrings[ARTL_ART_block_172] = "";
  artlhsL[ARTL_ART_block_172] = ARTL_ART_block;
  artSlotInstanceOfs[ARTL_ART_block_172] = ARTL_ART_statement_part;
  artKindOfs[ARTL_ART_block_172] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_block_172] = true;
  arteoR_pL[ARTL_ART_block_172] = true;
  artPopD[ARTL_ART_block_172] = true;
}

public void artTableInitialiser_ART_bound_ID() {
  artLabelInternalStrings[ARTL_ART_bound_ID] = "bound_ID";
  artLabelStrings[ARTL_ART_bound_ID] = "bound_ID";
  artKindOfs[ARTL_ART_bound_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_bound_ID_202] = "bound_ID ::= . ID ";
  artLabelStrings[ARTL_ART_bound_ID_202] = "";
  artlhsL[ARTL_ART_bound_ID_202] = ARTL_ART_bound_ID;
  artKindOfs[ARTL_ART_bound_ID_202] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_bound_ID_204] = "bound_ID ::= ID .";
  artLabelStrings[ARTL_ART_bound_ID_204] = "";
  artlhsL[ARTL_ART_bound_ID_204] = ARTL_ART_bound_ID;
  artSlotInstanceOfs[ARTL_ART_bound_ID_204] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_bound_ID_204] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_bound_ID_204] = true;
  arteoR_pL[ARTL_ART_bound_ID_204] = true;
  artPopD[ARTL_ART_bound_ID_204] = true;
}

public void artTableInitialiser_ART_case_constant() {
  artLabelInternalStrings[ARTL_ART_case_constant] = "case_constant";
  artLabelStrings[ARTL_ART_case_constant] = "case_constant";
  artKindOfs[ARTL_ART_case_constant] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_case_constant_210] = "case_constant ::= . constant ";
  artLabelStrings[ARTL_ART_case_constant_210] = "";
  artlhsL[ARTL_ART_case_constant_210] = ARTL_ART_case_constant;
  artKindOfs[ARTL_ART_case_constant_210] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_constant_212] = "case_constant ::= constant .";
  artLabelStrings[ARTL_ART_case_constant_212] = "";
  artlhsL[ARTL_ART_case_constant_212] = ARTL_ART_case_constant;
  artSlotInstanceOfs[ARTL_ART_case_constant_212] = ARTL_ART_constant;
  artKindOfs[ARTL_ART_case_constant_212] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_constant_212] = true;
  arteoR_pL[ARTL_ART_case_constant_212] = true;
  artPopD[ARTL_ART_case_constant_212] = true;
}

public void artTableInitialiser_ART_case_constant_list() {
  artLabelInternalStrings[ARTL_ART_case_constant_list] = "case_constant_list";
  artLabelStrings[ARTL_ART_case_constant_list] = "case_constant_list";
  artKindOfs[ARTL_ART_case_constant_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_case_constant_list_224] = "case_constant_list ::= . case_constant case_constant_list_4 ";
  artLabelStrings[ARTL_ART_case_constant_list_224] = "";
  artlhsL[ARTL_ART_case_constant_list_224] = ARTL_ART_case_constant_list;
  artKindOfs[ARTL_ART_case_constant_list_224] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_constant_list_226] = "case_constant_list ::= case_constant . case_constant_list_4 ";
  artLabelStrings[ARTL_ART_case_constant_list_226] = "";
  artlhsL[ARTL_ART_case_constant_list_226] = ARTL_ART_case_constant_list;
  artSlotInstanceOfs[ARTL_ART_case_constant_list_226] = ARTL_ART_case_constant;
  artKindOfs[ARTL_ART_case_constant_list_226] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_case_constant_list_226] = true;
  artLabelInternalStrings[ARTL_ART_case_constant_list_228] = "case_constant_list ::= case_constant case_constant_list_4 .";
  artLabelStrings[ARTL_ART_case_constant_list_228] = "";
  artlhsL[ARTL_ART_case_constant_list_228] = ARTL_ART_case_constant_list;
  artSlotInstanceOfs[ARTL_ART_case_constant_list_228] = ARTL_ART_case_constant_list_4;
  artKindOfs[ARTL_ART_case_constant_list_228] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_constant_list_228] = true;
  arteoR_pL[ARTL_ART_case_constant_list_228] = true;
  artPopD[ARTL_ART_case_constant_list_228] = true;
}

public void artTableInitialiser_ART_case_constant_list_4() {
  artLabelInternalStrings[ARTL_ART_case_constant_list_4] = "case_constant_list_4";
  artLabelStrings[ARTL_ART_case_constant_list_4] = "case_constant_list_4";
  artKindOfs[ARTL_ART_case_constant_list_4] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_case_constant_list_4_230] = "case_constant_list_4 ::= . # ";
  artLabelStrings[ARTL_ART_case_constant_list_4_230] = "";
  artlhsL[ARTL_ART_case_constant_list_4_230] = ARTL_ART_case_constant_list_4;
  artKindOfs[ARTL_ART_case_constant_list_4_230] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_case_constant_list_4_230] = true;
  artLabelInternalStrings[ARTL_ART_case_constant_list_4_232] = "case_constant_list_4 ::= # .";
  artLabelStrings[ARTL_ART_case_constant_list_4_232] = "";
  artlhsL[ARTL_ART_case_constant_list_4_232] = ARTL_ART_case_constant_list_4;
  artKindOfs[ARTL_ART_case_constant_list_4_232] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_constant_list_4_232] = true;
  arteoR_pL[ARTL_ART_case_constant_list_4_232] = true;
  artPopD[ARTL_ART_case_constant_list_4_232] = true;
  artLabelInternalStrings[ARTL_ART_case_constant_list_4_234] = "case_constant_list_4 ::= . case_constant_list_4 ','  case_constant ";
  artLabelStrings[ARTL_ART_case_constant_list_4_234] = "";
  artlhsL[ARTL_ART_case_constant_list_4_234] = ARTL_ART_case_constant_list_4;
  artKindOfs[ARTL_ART_case_constant_list_4_234] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_constant_list_4_236] = "case_constant_list_4 ::= case_constant_list_4 . ','  case_constant ";
  artLabelStrings[ARTL_ART_case_constant_list_4_236] = "";
  artlhsL[ARTL_ART_case_constant_list_4_236] = ARTL_ART_case_constant_list_4;
  artSlotInstanceOfs[ARTL_ART_case_constant_list_4_236] = ARTL_ART_case_constant_list_4;
  artKindOfs[ARTL_ART_case_constant_list_4_236] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_case_constant_list_4_236] = true;
  artLabelInternalStrings[ARTL_ART_case_constant_list_4_237] = "case_constant_list_4 ::= case_constant_list_4 ','  case_constant ";
  artLabelStrings[ARTL_ART_case_constant_list_4_237] = "";
  artlhsL[ARTL_ART_case_constant_list_4_237] = ARTL_ART_case_constant_list_4;
  artLabelInternalStrings[ARTL_ART_case_constant_list_4_238] = "case_constant_list_4 ::= case_constant_list_4 ','  . case_constant ";
  artLabelStrings[ARTL_ART_case_constant_list_4_238] = "";
  artlhsL[ARTL_ART_case_constant_list_4_238] = ARTL_ART_case_constant_list_4;
  artKindOfs[ARTL_ART_case_constant_list_4_238] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_constant_list_4_240] = "case_constant_list_4 ::= case_constant_list_4 ','  case_constant .";
  artLabelStrings[ARTL_ART_case_constant_list_4_240] = "";
  artlhsL[ARTL_ART_case_constant_list_4_240] = ARTL_ART_case_constant_list_4;
  artSlotInstanceOfs[ARTL_ART_case_constant_list_4_240] = ARTL_ART_case_constant;
  artKindOfs[ARTL_ART_case_constant_list_4_240] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_constant_list_4_240] = true;
  arteoR_pL[ARTL_ART_case_constant_list_4_240] = true;
  artPopD[ARTL_ART_case_constant_list_4_240] = true;
}

public void artTableInitialiser_ART_case_index() {
  artLabelInternalStrings[ARTL_ART_case_index] = "case_index";
  artLabelStrings[ARTL_ART_case_index] = "case_index";
  artKindOfs[ARTL_ART_case_index] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_case_index_242] = "case_index ::= . expression ";
  artLabelStrings[ARTL_ART_case_index_242] = "";
  artlhsL[ARTL_ART_case_index_242] = ARTL_ART_case_index;
  artKindOfs[ARTL_ART_case_index_242] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_index_244] = "case_index ::= expression .";
  artLabelStrings[ARTL_ART_case_index_244] = "";
  artlhsL[ARTL_ART_case_index_244] = ARTL_ART_case_index;
  artSlotInstanceOfs[ARTL_ART_case_index_244] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_case_index_244] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_index_244] = true;
  arteoR_pL[ARTL_ART_case_index_244] = true;
  artPopD[ARTL_ART_case_index_244] = true;
}

public void artTableInitialiser_ART_case_list_element() {
  artLabelInternalStrings[ARTL_ART_case_list_element] = "case_list_element";
  artLabelStrings[ARTL_ART_case_list_element] = "case_list_element";
  artKindOfs[ARTL_ART_case_list_element] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_case_list_element_246] = "case_list_element ::= . case_constant_list ':'  statement ";
  artLabelStrings[ARTL_ART_case_list_element_246] = "";
  artlhsL[ARTL_ART_case_list_element_246] = ARTL_ART_case_list_element;
  artKindOfs[ARTL_ART_case_list_element_246] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_list_element_248] = "case_list_element ::= case_constant_list . ':'  statement ";
  artLabelStrings[ARTL_ART_case_list_element_248] = "";
  artlhsL[ARTL_ART_case_list_element_248] = ARTL_ART_case_list_element;
  artSlotInstanceOfs[ARTL_ART_case_list_element_248] = ARTL_ART_case_constant_list;
  artKindOfs[ARTL_ART_case_list_element_248] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_case_list_element_248] = true;
  artLabelInternalStrings[ARTL_ART_case_list_element_249] = "case_list_element ::= case_constant_list ':'  statement ";
  artLabelStrings[ARTL_ART_case_list_element_249] = "";
  artlhsL[ARTL_ART_case_list_element_249] = ARTL_ART_case_list_element;
  artLabelInternalStrings[ARTL_ART_case_list_element_250] = "case_list_element ::= case_constant_list ':'  . statement ";
  artLabelStrings[ARTL_ART_case_list_element_250] = "";
  artlhsL[ARTL_ART_case_list_element_250] = ARTL_ART_case_list_element;
  artKindOfs[ARTL_ART_case_list_element_250] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_list_element_252] = "case_list_element ::= case_constant_list ':'  statement .";
  artLabelStrings[ARTL_ART_case_list_element_252] = "";
  artlhsL[ARTL_ART_case_list_element_252] = ARTL_ART_case_list_element;
  artSlotInstanceOfs[ARTL_ART_case_list_element_252] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_case_list_element_252] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_list_element_252] = true;
  arteoR_pL[ARTL_ART_case_list_element_252] = true;
  artPopD[ARTL_ART_case_list_element_252] = true;
}

public void artTableInitialiser_ART_case_statement() {
  artLabelInternalStrings[ARTL_ART_case_statement] = "case_statement";
  artLabelStrings[ARTL_ART_case_statement] = "case_statement";
  artKindOfs[ARTL_ART_case_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_case_statement_260] = "case_statement ::= . 'case'  case_index 'of'  case_list_element case_statement_5 case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_260] = "";
  artlhsL[ARTL_ART_case_statement_260] = ARTL_ART_case_statement;
  artKindOfs[ARTL_ART_case_statement_260] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_statement_261] = "case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_261] = "";
  artlhsL[ARTL_ART_case_statement_261] = ARTL_ART_case_statement;
  artLabelInternalStrings[ARTL_ART_case_statement_262] = "case_statement ::= 'case'  . case_index 'of'  case_list_element case_statement_5 case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_262] = "";
  artlhsL[ARTL_ART_case_statement_262] = ARTL_ART_case_statement;
  artKindOfs[ARTL_ART_case_statement_262] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_case_statement_262] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_264] = "case_statement ::= 'case'  case_index . 'of'  case_list_element case_statement_5 case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_264] = "";
  artlhsL[ARTL_ART_case_statement_264] = ARTL_ART_case_statement;
  artSlotInstanceOfs[ARTL_ART_case_statement_264] = ARTL_ART_case_index;
  artKindOfs[ARTL_ART_case_statement_264] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_statement_265] = "case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_265] = "";
  artlhsL[ARTL_ART_case_statement_265] = ARTL_ART_case_statement;
  artLabelInternalStrings[ARTL_ART_case_statement_266] = "case_statement ::= 'case'  case_index 'of'  . case_list_element case_statement_5 case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_266] = "";
  artlhsL[ARTL_ART_case_statement_266] = ARTL_ART_case_statement;
  artKindOfs[ARTL_ART_case_statement_266] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_statement_268] = "case_statement ::= 'case'  case_index 'of'  case_list_element . case_statement_5 case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_268] = "";
  artlhsL[ARTL_ART_case_statement_268] = ARTL_ART_case_statement;
  artSlotInstanceOfs[ARTL_ART_case_statement_268] = ARTL_ART_case_list_element;
  artKindOfs[ARTL_ART_case_statement_268] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_statement_270] = "case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 . case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_270] = "";
  artlhsL[ARTL_ART_case_statement_270] = ARTL_ART_case_statement;
  artSlotInstanceOfs[ARTL_ART_case_statement_270] = ARTL_ART_case_statement_5;
  artKindOfs[ARTL_ART_case_statement_270] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_statement_272] = "case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 case_statement_6 . 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_272] = "";
  artlhsL[ARTL_ART_case_statement_272] = ARTL_ART_case_statement;
  artSlotInstanceOfs[ARTL_ART_case_statement_272] = ARTL_ART_case_statement_6;
  artKindOfs[ARTL_ART_case_statement_272] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_case_statement_272] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_273] = "case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 case_statement_6 'end'  ";
  artLabelStrings[ARTL_ART_case_statement_273] = "";
  artlhsL[ARTL_ART_case_statement_273] = ARTL_ART_case_statement;
  artPopD[ARTL_ART_case_statement_273] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_274] = "case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 case_statement_6 'end'  .";
  artLabelStrings[ARTL_ART_case_statement_274] = "";
  artlhsL[ARTL_ART_case_statement_274] = ARTL_ART_case_statement;
  artKindOfs[ARTL_ART_case_statement_274] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_statement_274] = true;
  arteoR_pL[ARTL_ART_case_statement_274] = true;
  artPopD[ARTL_ART_case_statement_274] = true;
}

public void artTableInitialiser_ART_case_statement_5() {
  artLabelInternalStrings[ARTL_ART_case_statement_5] = "case_statement_5";
  artLabelStrings[ARTL_ART_case_statement_5] = "case_statement_5";
  artKindOfs[ARTL_ART_case_statement_5] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_case_statement_5_276] = "case_statement_5 ::= . # ";
  artLabelStrings[ARTL_ART_case_statement_5_276] = "";
  artlhsL[ARTL_ART_case_statement_5_276] = ARTL_ART_case_statement_5;
  artKindOfs[ARTL_ART_case_statement_5_276] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_case_statement_5_276] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_5_278] = "case_statement_5 ::= # .";
  artLabelStrings[ARTL_ART_case_statement_5_278] = "";
  artlhsL[ARTL_ART_case_statement_5_278] = ARTL_ART_case_statement_5;
  artKindOfs[ARTL_ART_case_statement_5_278] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_statement_5_278] = true;
  arteoR_pL[ARTL_ART_case_statement_5_278] = true;
  artPopD[ARTL_ART_case_statement_5_278] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_5_280] = "case_statement_5 ::= . case_statement_5 ';'  case_list_element ";
  artLabelStrings[ARTL_ART_case_statement_5_280] = "";
  artlhsL[ARTL_ART_case_statement_5_280] = ARTL_ART_case_statement_5;
  artKindOfs[ARTL_ART_case_statement_5_280] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_statement_5_282] = "case_statement_5 ::= case_statement_5 . ';'  case_list_element ";
  artLabelStrings[ARTL_ART_case_statement_5_282] = "";
  artlhsL[ARTL_ART_case_statement_5_282] = ARTL_ART_case_statement_5;
  artSlotInstanceOfs[ARTL_ART_case_statement_5_282] = ARTL_ART_case_statement_5;
  artKindOfs[ARTL_ART_case_statement_5_282] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_case_statement_5_282] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_5_283] = "case_statement_5 ::= case_statement_5 ';'  case_list_element ";
  artLabelStrings[ARTL_ART_case_statement_5_283] = "";
  artlhsL[ARTL_ART_case_statement_5_283] = ARTL_ART_case_statement_5;
  artLabelInternalStrings[ARTL_ART_case_statement_5_284] = "case_statement_5 ::= case_statement_5 ';'  . case_list_element ";
  artLabelStrings[ARTL_ART_case_statement_5_284] = "";
  artlhsL[ARTL_ART_case_statement_5_284] = ARTL_ART_case_statement_5;
  artKindOfs[ARTL_ART_case_statement_5_284] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_case_statement_5_286] = "case_statement_5 ::= case_statement_5 ';'  case_list_element .";
  artLabelStrings[ARTL_ART_case_statement_5_286] = "";
  artlhsL[ARTL_ART_case_statement_5_286] = ARTL_ART_case_statement_5;
  artSlotInstanceOfs[ARTL_ART_case_statement_5_286] = ARTL_ART_case_list_element;
  artKindOfs[ARTL_ART_case_statement_5_286] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_statement_5_286] = true;
  arteoR_pL[ARTL_ART_case_statement_5_286] = true;
  artPopD[ARTL_ART_case_statement_5_286] = true;
}

public void artTableInitialiser_ART_case_statement_6() {
  artLabelInternalStrings[ARTL_ART_case_statement_6] = "case_statement_6";
  artLabelStrings[ARTL_ART_case_statement_6] = "case_statement_6";
  artKindOfs[ARTL_ART_case_statement_6] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_case_statement_6_288] = "case_statement_6 ::= . # ";
  artLabelStrings[ARTL_ART_case_statement_6_288] = "";
  artlhsL[ARTL_ART_case_statement_6_288] = ARTL_ART_case_statement_6;
  artKindOfs[ARTL_ART_case_statement_6_288] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_case_statement_6_288] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_6_290] = "case_statement_6 ::= # .";
  artLabelStrings[ARTL_ART_case_statement_6_290] = "";
  artlhsL[ARTL_ART_case_statement_6_290] = ARTL_ART_case_statement_6;
  artKindOfs[ARTL_ART_case_statement_6_290] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_statement_6_290] = true;
  arteoR_pL[ARTL_ART_case_statement_6_290] = true;
  artPopD[ARTL_ART_case_statement_6_290] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_6_292] = "case_statement_6 ::= . ';'  ";
  artLabelStrings[ARTL_ART_case_statement_6_292] = "";
  artlhsL[ARTL_ART_case_statement_6_292] = ARTL_ART_case_statement_6;
  artKindOfs[ARTL_ART_case_statement_6_292] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_case_statement_6_292] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_6_293] = "case_statement_6 ::= ';'  ";
  artLabelStrings[ARTL_ART_case_statement_6_293] = "";
  artlhsL[ARTL_ART_case_statement_6_293] = ARTL_ART_case_statement_6;
  artPopD[ARTL_ART_case_statement_6_293] = true;
  artLabelInternalStrings[ARTL_ART_case_statement_6_294] = "case_statement_6 ::= ';'  .";
  artLabelStrings[ARTL_ART_case_statement_6_294] = "";
  artlhsL[ARTL_ART_case_statement_6_294] = ARTL_ART_case_statement_6;
  artKindOfs[ARTL_ART_case_statement_6_294] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_case_statement_6_294] = true;
  arteoR_pL[ARTL_ART_case_statement_6_294] = true;
  artPopD[ARTL_ART_case_statement_6_294] = true;
}

public void artTableInitialiser_ART_character_string() {
  artLabelInternalStrings[ARTL_ART_character_string] = "character_string";
  artLabelStrings[ARTL_ART_character_string] = "character_string";
  artKindOfs[ARTL_ART_character_string] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_character_string_296] = "character_string ::= . 'STRING'  ";
  artLabelStrings[ARTL_ART_character_string_296] = "";
  artlhsL[ARTL_ART_character_string_296] = ARTL_ART_character_string;
  artKindOfs[ARTL_ART_character_string_296] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_character_string_296] = true;
  artLabelInternalStrings[ARTL_ART_character_string_297] = "character_string ::= 'STRING'  ";
  artLabelStrings[ARTL_ART_character_string_297] = "";
  artlhsL[ARTL_ART_character_string_297] = ARTL_ART_character_string;
  artPopD[ARTL_ART_character_string_297] = true;
  artLabelInternalStrings[ARTL_ART_character_string_298] = "character_string ::= 'STRING'  .";
  artLabelStrings[ARTL_ART_character_string_298] = "";
  artlhsL[ARTL_ART_character_string_298] = ARTL_ART_character_string;
  artKindOfs[ARTL_ART_character_string_298] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_character_string_298] = true;
  arteoR_pL[ARTL_ART_character_string_298] = true;
  artPopD[ARTL_ART_character_string_298] = true;
}

public void artTableInitialiser_ART_component_type() {
  artLabelInternalStrings[ARTL_ART_component_type] = "component_type";
  artLabelStrings[ARTL_ART_component_type] = "component_type";
  artKindOfs[ARTL_ART_component_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_component_type_110] = "component_type ::= . type_denoter ";
  artLabelStrings[ARTL_ART_component_type_110] = "";
  artlhsL[ARTL_ART_component_type_110] = ARTL_ART_component_type;
  artKindOfs[ARTL_ART_component_type_110] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_component_type_112] = "component_type ::= type_denoter .";
  artLabelStrings[ARTL_ART_component_type_112] = "";
  artlhsL[ARTL_ART_component_type_112] = ARTL_ART_component_type;
  artSlotInstanceOfs[ARTL_ART_component_type_112] = ARTL_ART_type_denoter;
  artKindOfs[ARTL_ART_component_type_112] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_component_type_112] = true;
  arteoR_pL[ARTL_ART_component_type_112] = true;
  artPopD[ARTL_ART_component_type_112] = true;
}

public void artTableInitialiser_ART_component_variable() {
  artLabelInternalStrings[ARTL_ART_component_variable] = "component_variable";
  artLabelStrings[ARTL_ART_component_variable] = "component_variable";
  artKindOfs[ARTL_ART_component_variable] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_component_variable_308] = "component_variable ::= . indexed_variable ";
  artLabelStrings[ARTL_ART_component_variable_308] = "";
  artlhsL[ARTL_ART_component_variable_308] = ARTL_ART_component_variable;
  artKindOfs[ARTL_ART_component_variable_308] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_component_variable_310] = "component_variable ::= indexed_variable .";
  artLabelStrings[ARTL_ART_component_variable_310] = "";
  artlhsL[ARTL_ART_component_variable_310] = ARTL_ART_component_variable;
  artSlotInstanceOfs[ARTL_ART_component_variable_310] = ARTL_ART_indexed_variable;
  artKindOfs[ARTL_ART_component_variable_310] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_component_variable_310] = true;
  arteoR_pL[ARTL_ART_component_variable_310] = true;
  artPopD[ARTL_ART_component_variable_310] = true;
  artLabelInternalStrings[ARTL_ART_component_variable_312] = "component_variable ::= . field_designator ";
  artLabelStrings[ARTL_ART_component_variable_312] = "";
  artlhsL[ARTL_ART_component_variable_312] = ARTL_ART_component_variable;
  artKindOfs[ARTL_ART_component_variable_312] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_component_variable_314] = "component_variable ::= field_designator .";
  artLabelStrings[ARTL_ART_component_variable_314] = "";
  artlhsL[ARTL_ART_component_variable_314] = ARTL_ART_component_variable;
  artSlotInstanceOfs[ARTL_ART_component_variable_314] = ARTL_ART_field_designator;
  artKindOfs[ARTL_ART_component_variable_314] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_component_variable_314] = true;
  arteoR_pL[ARTL_ART_component_variable_314] = true;
  artPopD[ARTL_ART_component_variable_314] = true;
}

public void artTableInitialiser_ART_compound_statement() {
  artLabelInternalStrings[ARTL_ART_compound_statement] = "compound_statement";
  artLabelStrings[ARTL_ART_compound_statement] = "compound_statement";
  artKindOfs[ARTL_ART_compound_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_compound_statement_340] = "compound_statement ::= . 'begin'  statement_sequence 'end'  ";
  artLabelStrings[ARTL_ART_compound_statement_340] = "";
  artlhsL[ARTL_ART_compound_statement_340] = ARTL_ART_compound_statement;
  artKindOfs[ARTL_ART_compound_statement_340] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_compound_statement_341] = "compound_statement ::= 'begin'  statement_sequence 'end'  ";
  artLabelStrings[ARTL_ART_compound_statement_341] = "";
  artlhsL[ARTL_ART_compound_statement_341] = ARTL_ART_compound_statement;
  artLabelInternalStrings[ARTL_ART_compound_statement_342] = "compound_statement ::= 'begin'  . statement_sequence 'end'  ";
  artLabelStrings[ARTL_ART_compound_statement_342] = "";
  artlhsL[ARTL_ART_compound_statement_342] = ARTL_ART_compound_statement;
  artKindOfs[ARTL_ART_compound_statement_342] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_compound_statement_342] = true;
  artLabelInternalStrings[ARTL_ART_compound_statement_344] = "compound_statement ::= 'begin'  statement_sequence . 'end'  ";
  artLabelStrings[ARTL_ART_compound_statement_344] = "";
  artlhsL[ARTL_ART_compound_statement_344] = ARTL_ART_compound_statement;
  artSlotInstanceOfs[ARTL_ART_compound_statement_344] = ARTL_ART_statement_sequence;
  artKindOfs[ARTL_ART_compound_statement_344] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_compound_statement_344] = true;
  artLabelInternalStrings[ARTL_ART_compound_statement_345] = "compound_statement ::= 'begin'  statement_sequence 'end'  ";
  artLabelStrings[ARTL_ART_compound_statement_345] = "";
  artlhsL[ARTL_ART_compound_statement_345] = ARTL_ART_compound_statement;
  artPopD[ARTL_ART_compound_statement_345] = true;
  artLabelInternalStrings[ARTL_ART_compound_statement_346] = "compound_statement ::= 'begin'  statement_sequence 'end'  .";
  artLabelStrings[ARTL_ART_compound_statement_346] = "";
  artlhsL[ARTL_ART_compound_statement_346] = ARTL_ART_compound_statement;
  artKindOfs[ARTL_ART_compound_statement_346] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_compound_statement_346] = true;
  arteoR_pL[ARTL_ART_compound_statement_346] = true;
  artPopD[ARTL_ART_compound_statement_346] = true;
}

public void artTableInitialiser_ART_conditional_statement() {
  artLabelInternalStrings[ARTL_ART_conditional_statement] = "conditional_statement";
  artLabelStrings[ARTL_ART_conditional_statement] = "conditional_statement";
  artKindOfs[ARTL_ART_conditional_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_conditional_statement_354] = "conditional_statement ::= . if_statement ";
  artLabelStrings[ARTL_ART_conditional_statement_354] = "";
  artlhsL[ARTL_ART_conditional_statement_354] = ARTL_ART_conditional_statement;
  artKindOfs[ARTL_ART_conditional_statement_354] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_conditional_statement_356] = "conditional_statement ::= if_statement .";
  artLabelStrings[ARTL_ART_conditional_statement_356] = "";
  artlhsL[ARTL_ART_conditional_statement_356] = ARTL_ART_conditional_statement;
  artSlotInstanceOfs[ARTL_ART_conditional_statement_356] = ARTL_ART_if_statement;
  artKindOfs[ARTL_ART_conditional_statement_356] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_conditional_statement_356] = true;
  arteoR_pL[ARTL_ART_conditional_statement_356] = true;
  artPopD[ARTL_ART_conditional_statement_356] = true;
  artLabelInternalStrings[ARTL_ART_conditional_statement_358] = "conditional_statement ::= . case_statement ";
  artLabelStrings[ARTL_ART_conditional_statement_358] = "";
  artlhsL[ARTL_ART_conditional_statement_358] = ARTL_ART_conditional_statement;
  artKindOfs[ARTL_ART_conditional_statement_358] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_conditional_statement_360] = "conditional_statement ::= case_statement .";
  artLabelStrings[ARTL_ART_conditional_statement_360] = "";
  artlhsL[ARTL_ART_conditional_statement_360] = ARTL_ART_conditional_statement;
  artSlotInstanceOfs[ARTL_ART_conditional_statement_360] = ARTL_ART_case_statement;
  artKindOfs[ARTL_ART_conditional_statement_360] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_conditional_statement_360] = true;
  arteoR_pL[ARTL_ART_conditional_statement_360] = true;
  artPopD[ARTL_ART_conditional_statement_360] = true;
}

public void artTableInitialiser_ART_conformant_array_parameter_specification() {
  artLabelInternalStrings[ARTL_ART_conformant_array_parameter_specification] = "conformant_array_parameter_specification";
  artLabelStrings[ARTL_ART_conformant_array_parameter_specification] = "conformant_array_parameter_specification";
  artKindOfs[ARTL_ART_conformant_array_parameter_specification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_conformant_array_parameter_specification_374] = "conformant_array_parameter_specification ::= . value_conformant_array_specification ";
  artLabelStrings[ARTL_ART_conformant_array_parameter_specification_374] = "";
  artlhsL[ARTL_ART_conformant_array_parameter_specification_374] = ARTL_ART_conformant_array_parameter_specification;
  artKindOfs[ARTL_ART_conformant_array_parameter_specification_374] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_conformant_array_parameter_specification_376] = "conformant_array_parameter_specification ::= value_conformant_array_specification .";
  artLabelStrings[ARTL_ART_conformant_array_parameter_specification_376] = "";
  artlhsL[ARTL_ART_conformant_array_parameter_specification_376] = ARTL_ART_conformant_array_parameter_specification;
  artSlotInstanceOfs[ARTL_ART_conformant_array_parameter_specification_376] = ARTL_ART_value_conformant_array_specification;
  artKindOfs[ARTL_ART_conformant_array_parameter_specification_376] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_conformant_array_parameter_specification_376] = true;
  arteoR_pL[ARTL_ART_conformant_array_parameter_specification_376] = true;
  artPopD[ARTL_ART_conformant_array_parameter_specification_376] = true;
  artLabelInternalStrings[ARTL_ART_conformant_array_parameter_specification_378] = "conformant_array_parameter_specification ::= . variable_conformant_array_specification ";
  artLabelStrings[ARTL_ART_conformant_array_parameter_specification_378] = "";
  artlhsL[ARTL_ART_conformant_array_parameter_specification_378] = ARTL_ART_conformant_array_parameter_specification;
  artKindOfs[ARTL_ART_conformant_array_parameter_specification_378] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_conformant_array_parameter_specification_380] = "conformant_array_parameter_specification ::= variable_conformant_array_specification .";
  artLabelStrings[ARTL_ART_conformant_array_parameter_specification_380] = "";
  artlhsL[ARTL_ART_conformant_array_parameter_specification_380] = ARTL_ART_conformant_array_parameter_specification;
  artSlotInstanceOfs[ARTL_ART_conformant_array_parameter_specification_380] = ARTL_ART_variable_conformant_array_specification;
  artKindOfs[ARTL_ART_conformant_array_parameter_specification_380] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_conformant_array_parameter_specification_380] = true;
  arteoR_pL[ARTL_ART_conformant_array_parameter_specification_380] = true;
  artPopD[ARTL_ART_conformant_array_parameter_specification_380] = true;
}

public void artTableInitialiser_ART_conformant_array_schema() {
  artLabelInternalStrings[ARTL_ART_conformant_array_schema] = "conformant_array_schema";
  artLabelStrings[ARTL_ART_conformant_array_schema] = "conformant_array_schema";
  artKindOfs[ARTL_ART_conformant_array_schema] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_conformant_array_schema_400] = "conformant_array_schema ::= . packed_conformant_array_schema ";
  artLabelStrings[ARTL_ART_conformant_array_schema_400] = "";
  artlhsL[ARTL_ART_conformant_array_schema_400] = ARTL_ART_conformant_array_schema;
  artKindOfs[ARTL_ART_conformant_array_schema_400] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_conformant_array_schema_402] = "conformant_array_schema ::= packed_conformant_array_schema .";
  artLabelStrings[ARTL_ART_conformant_array_schema_402] = "";
  artlhsL[ARTL_ART_conformant_array_schema_402] = ARTL_ART_conformant_array_schema;
  artSlotInstanceOfs[ARTL_ART_conformant_array_schema_402] = ARTL_ART_packed_conformant_array_schema;
  artKindOfs[ARTL_ART_conformant_array_schema_402] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_conformant_array_schema_402] = true;
  arteoR_pL[ARTL_ART_conformant_array_schema_402] = true;
  artPopD[ARTL_ART_conformant_array_schema_402] = true;
  artLabelInternalStrings[ARTL_ART_conformant_array_schema_404] = "conformant_array_schema ::= . unpacked_conformant_array_schema ";
  artLabelStrings[ARTL_ART_conformant_array_schema_404] = "";
  artlhsL[ARTL_ART_conformant_array_schema_404] = ARTL_ART_conformant_array_schema;
  artKindOfs[ARTL_ART_conformant_array_schema_404] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_conformant_array_schema_406] = "conformant_array_schema ::= unpacked_conformant_array_schema .";
  artLabelStrings[ARTL_ART_conformant_array_schema_406] = "";
  artlhsL[ARTL_ART_conformant_array_schema_406] = ARTL_ART_conformant_array_schema;
  artSlotInstanceOfs[ARTL_ART_conformant_array_schema_406] = ARTL_ART_unpacked_conformant_array_schema;
  artKindOfs[ARTL_ART_conformant_array_schema_406] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_conformant_array_schema_406] = true;
  arteoR_pL[ARTL_ART_conformant_array_schema_406] = true;
  artPopD[ARTL_ART_conformant_array_schema_406] = true;
}

public void artTableInitialiser_ART_constant() {
  artLabelInternalStrings[ARTL_ART_constant] = "constant";
  artLabelStrings[ARTL_ART_constant] = "constant";
  artKindOfs[ARTL_ART_constant] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_constant_214] = "constant ::= . constant_7 constant_8 ";
  artLabelStrings[ARTL_ART_constant_214] = "";
  artlhsL[ARTL_ART_constant_214] = ARTL_ART_constant;
  artKindOfs[ARTL_ART_constant_214] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_216] = "constant ::= constant_7 . constant_8 ";
  artLabelStrings[ARTL_ART_constant_216] = "";
  artlhsL[ARTL_ART_constant_216] = ARTL_ART_constant;
  artSlotInstanceOfs[ARTL_ART_constant_216] = ARTL_ART_constant_7;
  artKindOfs[ARTL_ART_constant_216] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_constant_216] = true;
  artLabelInternalStrings[ARTL_ART_constant_218] = "constant ::= constant_7 constant_8 .";
  artLabelStrings[ARTL_ART_constant_218] = "";
  artlhsL[ARTL_ART_constant_218] = ARTL_ART_constant;
  artSlotInstanceOfs[ARTL_ART_constant_218] = ARTL_ART_constant_8;
  artKindOfs[ARTL_ART_constant_218] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_218] = true;
  arteoR_pL[ARTL_ART_constant_218] = true;
  artPopD[ARTL_ART_constant_218] = true;
  artLabelInternalStrings[ARTL_ART_constant_220] = "constant ::= . character_string ";
  artLabelStrings[ARTL_ART_constant_220] = "";
  artlhsL[ARTL_ART_constant_220] = ARTL_ART_constant;
  artKindOfs[ARTL_ART_constant_220] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_222] = "constant ::= character_string .";
  artLabelStrings[ARTL_ART_constant_222] = "";
  artlhsL[ARTL_ART_constant_222] = ARTL_ART_constant;
  artSlotInstanceOfs[ARTL_ART_constant_222] = ARTL_ART_character_string;
  artKindOfs[ARTL_ART_constant_222] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_222] = true;
  arteoR_pL[ARTL_ART_constant_222] = true;
  artPopD[ARTL_ART_constant_222] = true;
}

public void artTableInitialiser_ART_constant_7() {
  artLabelInternalStrings[ARTL_ART_constant_7] = "constant_7";
  artLabelStrings[ARTL_ART_constant_7] = "constant_7";
  artKindOfs[ARTL_ART_constant_7] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_constant_7_440] = "constant_7 ::= . # ";
  artLabelStrings[ARTL_ART_constant_7_440] = "";
  artlhsL[ARTL_ART_constant_7_440] = ARTL_ART_constant_7;
  artKindOfs[ARTL_ART_constant_7_440] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_constant_7_440] = true;
  artLabelInternalStrings[ARTL_ART_constant_7_442] = "constant_7 ::= # .";
  artLabelStrings[ARTL_ART_constant_7_442] = "";
  artlhsL[ARTL_ART_constant_7_442] = ARTL_ART_constant_7;
  artKindOfs[ARTL_ART_constant_7_442] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_7_442] = true;
  arteoR_pL[ARTL_ART_constant_7_442] = true;
  artPopD[ARTL_ART_constant_7_442] = true;
  artLabelInternalStrings[ARTL_ART_constant_7_444] = "constant_7 ::= . sign ";
  artLabelStrings[ARTL_ART_constant_7_444] = "";
  artlhsL[ARTL_ART_constant_7_444] = ARTL_ART_constant_7;
  artKindOfs[ARTL_ART_constant_7_444] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_7_446] = "constant_7 ::= sign .";
  artLabelStrings[ARTL_ART_constant_7_446] = "";
  artlhsL[ARTL_ART_constant_7_446] = ARTL_ART_constant_7;
  artSlotInstanceOfs[ARTL_ART_constant_7_446] = ARTL_ART_sign;
  artKindOfs[ARTL_ART_constant_7_446] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_7_446] = true;
  arteoR_pL[ARTL_ART_constant_7_446] = true;
  artPopD[ARTL_ART_constant_7_446] = true;
}

public void artTableInitialiser_ART_constant_8() {
  artLabelInternalStrings[ARTL_ART_constant_8] = "constant_8";
  artLabelStrings[ARTL_ART_constant_8] = "constant_8";
  artKindOfs[ARTL_ART_constant_8] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_constant_8_448] = "constant_8 ::= . unsigned_number ";
  artLabelStrings[ARTL_ART_constant_8_448] = "";
  artlhsL[ARTL_ART_constant_8_448] = ARTL_ART_constant_8;
  artKindOfs[ARTL_ART_constant_8_448] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_8_450] = "constant_8 ::= unsigned_number .";
  artLabelStrings[ARTL_ART_constant_8_450] = "";
  artlhsL[ARTL_ART_constant_8_450] = ARTL_ART_constant_8;
  artSlotInstanceOfs[ARTL_ART_constant_8_450] = ARTL_ART_unsigned_number;
  artKindOfs[ARTL_ART_constant_8_450] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_8_450] = true;
  arteoR_pL[ARTL_ART_constant_8_450] = true;
  artPopD[ARTL_ART_constant_8_450] = true;
  artLabelInternalStrings[ARTL_ART_constant_8_452] = "constant_8 ::= . constant_ID ";
  artLabelStrings[ARTL_ART_constant_8_452] = "";
  artlhsL[ARTL_ART_constant_8_452] = ARTL_ART_constant_8;
  artKindOfs[ARTL_ART_constant_8_452] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_8_454] = "constant_8 ::= constant_ID .";
  artLabelStrings[ARTL_ART_constant_8_454] = "";
  artlhsL[ARTL_ART_constant_8_454] = ARTL_ART_constant_8;
  artSlotInstanceOfs[ARTL_ART_constant_8_454] = ARTL_ART_constant_ID;
  artKindOfs[ARTL_ART_constant_8_454] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_8_454] = true;
  arteoR_pL[ARTL_ART_constant_8_454] = true;
  artPopD[ARTL_ART_constant_8_454] = true;
}

public void artTableInitialiser_ART_constant_ID() {
  artLabelInternalStrings[ARTL_ART_constant_ID] = "constant_ID";
  artLabelStrings[ARTL_ART_constant_ID] = "constant_ID";
  artKindOfs[ARTL_ART_constant_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_constant_ID_472] = "constant_ID ::= . 'constant_ID'  ";
  artLabelStrings[ARTL_ART_constant_ID_472] = "";
  artlhsL[ARTL_ART_constant_ID_472] = ARTL_ART_constant_ID;
  artKindOfs[ARTL_ART_constant_ID_472] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_constant_ID_472] = true;
  artLabelInternalStrings[ARTL_ART_constant_ID_473] = "constant_ID ::= 'constant_ID'  ";
  artLabelStrings[ARTL_ART_constant_ID_473] = "";
  artlhsL[ARTL_ART_constant_ID_473] = ARTL_ART_constant_ID;
  artPopD[ARTL_ART_constant_ID_473] = true;
  artLabelInternalStrings[ARTL_ART_constant_ID_474] = "constant_ID ::= 'constant_ID'  .";
  artLabelStrings[ARTL_ART_constant_ID_474] = "";
  artlhsL[ARTL_ART_constant_ID_474] = ARTL_ART_constant_ID;
  artKindOfs[ARTL_ART_constant_ID_474] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_ID_474] = true;
  arteoR_pL[ARTL_ART_constant_ID_474] = true;
  artPopD[ARTL_ART_constant_ID_474] = true;
}

public void artTableInitialiser_ART_constant_definition() {
  artLabelInternalStrings[ARTL_ART_constant_definition] = "constant_definition";
  artLabelStrings[ARTL_ART_constant_definition] = "constant_definition";
  artKindOfs[ARTL_ART_constant_definition] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_constant_definition_476] = "constant_definition ::= . ID '='  constant ";
  artLabelStrings[ARTL_ART_constant_definition_476] = "";
  artlhsL[ARTL_ART_constant_definition_476] = ARTL_ART_constant_definition;
  artKindOfs[ARTL_ART_constant_definition_476] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_definition_478] = "constant_definition ::= ID . '='  constant ";
  artLabelStrings[ARTL_ART_constant_definition_478] = "";
  artlhsL[ARTL_ART_constant_definition_478] = ARTL_ART_constant_definition;
  artSlotInstanceOfs[ARTL_ART_constant_definition_478] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_constant_definition_478] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_constant_definition_478] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_479] = "constant_definition ::= ID '='  constant ";
  artLabelStrings[ARTL_ART_constant_definition_479] = "";
  artlhsL[ARTL_ART_constant_definition_479] = ARTL_ART_constant_definition;
  artLabelInternalStrings[ARTL_ART_constant_definition_480] = "constant_definition ::= ID '='  . constant ";
  artLabelStrings[ARTL_ART_constant_definition_480] = "";
  artlhsL[ARTL_ART_constant_definition_480] = ARTL_ART_constant_definition;
  artKindOfs[ARTL_ART_constant_definition_480] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_definition_482] = "constant_definition ::= ID '='  constant .";
  artLabelStrings[ARTL_ART_constant_definition_482] = "";
  artlhsL[ARTL_ART_constant_definition_482] = ARTL_ART_constant_definition;
  artSlotInstanceOfs[ARTL_ART_constant_definition_482] = ARTL_ART_constant;
  artKindOfs[ARTL_ART_constant_definition_482] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_definition_482] = true;
  arteoR_pL[ARTL_ART_constant_definition_482] = true;
  artPopD[ARTL_ART_constant_definition_482] = true;
}

public void artTableInitialiser_ART_constant_definition_part() {
  artLabelInternalStrings[ARTL_ART_constant_definition_part] = "constant_definition_part";
  artLabelStrings[ARTL_ART_constant_definition_part] = "constant_definition_part";
  artKindOfs[ARTL_ART_constant_definition_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_178] = "constant_definition_part ::= . constant_definition_part_9 ";
  artLabelStrings[ARTL_ART_constant_definition_part_178] = "";
  artlhsL[ARTL_ART_constant_definition_part_178] = ARTL_ART_constant_definition_part;
  artKindOfs[ARTL_ART_constant_definition_part_178] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_180] = "constant_definition_part ::= constant_definition_part_9 .";
  artLabelStrings[ARTL_ART_constant_definition_part_180] = "";
  artlhsL[ARTL_ART_constant_definition_part_180] = ARTL_ART_constant_definition_part;
  artSlotInstanceOfs[ARTL_ART_constant_definition_part_180] = ARTL_ART_constant_definition_part_9;
  artKindOfs[ARTL_ART_constant_definition_part_180] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_definition_part_180] = true;
  arteoR_pL[ARTL_ART_constant_definition_part_180] = true;
  artPopD[ARTL_ART_constant_definition_part_180] = true;
}

public void artTableInitialiser_ART_constant_definition_part_10() {
  artLabelInternalStrings[ARTL_ART_constant_definition_part_10] = "constant_definition_part_10";
  artLabelStrings[ARTL_ART_constant_definition_part_10] = "constant_definition_part_10";
  artKindOfs[ARTL_ART_constant_definition_part_10] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_10_498] = "constant_definition_part_10 ::= . # ";
  artLabelStrings[ARTL_ART_constant_definition_part_10_498] = "";
  artlhsL[ARTL_ART_constant_definition_part_10_498] = ARTL_ART_constant_definition_part_10;
  artKindOfs[ARTL_ART_constant_definition_part_10_498] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_constant_definition_part_10_498] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_10_500] = "constant_definition_part_10 ::= # .";
  artLabelStrings[ARTL_ART_constant_definition_part_10_500] = "";
  artlhsL[ARTL_ART_constant_definition_part_10_500] = ARTL_ART_constant_definition_part_10;
  artKindOfs[ARTL_ART_constant_definition_part_10_500] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_definition_part_10_500] = true;
  arteoR_pL[ARTL_ART_constant_definition_part_10_500] = true;
  artPopD[ARTL_ART_constant_definition_part_10_500] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_10_502] = "constant_definition_part_10 ::= . constant_definition_part_10 constant_definition ';'  ";
  artLabelStrings[ARTL_ART_constant_definition_part_10_502] = "";
  artlhsL[ARTL_ART_constant_definition_part_10_502] = ARTL_ART_constant_definition_part_10;
  artKindOfs[ARTL_ART_constant_definition_part_10_502] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_10_504] = "constant_definition_part_10 ::= constant_definition_part_10 . constant_definition ';'  ";
  artLabelStrings[ARTL_ART_constant_definition_part_10_504] = "";
  artlhsL[ARTL_ART_constant_definition_part_10_504] = ARTL_ART_constant_definition_part_10;
  artSlotInstanceOfs[ARTL_ART_constant_definition_part_10_504] = ARTL_ART_constant_definition_part_10;
  artKindOfs[ARTL_ART_constant_definition_part_10_504] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_constant_definition_part_10_504] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_10_506] = "constant_definition_part_10 ::= constant_definition_part_10 constant_definition . ';'  ";
  artLabelStrings[ARTL_ART_constant_definition_part_10_506] = "";
  artlhsL[ARTL_ART_constant_definition_part_10_506] = ARTL_ART_constant_definition_part_10;
  artSlotInstanceOfs[ARTL_ART_constant_definition_part_10_506] = ARTL_ART_constant_definition;
  artKindOfs[ARTL_ART_constant_definition_part_10_506] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_constant_definition_part_10_506] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_10_507] = "constant_definition_part_10 ::= constant_definition_part_10 constant_definition ';'  ";
  artLabelStrings[ARTL_ART_constant_definition_part_10_507] = "";
  artlhsL[ARTL_ART_constant_definition_part_10_507] = ARTL_ART_constant_definition_part_10;
  artPopD[ARTL_ART_constant_definition_part_10_507] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_10_508] = "constant_definition_part_10 ::= constant_definition_part_10 constant_definition ';'  .";
  artLabelStrings[ARTL_ART_constant_definition_part_10_508] = "";
  artlhsL[ARTL_ART_constant_definition_part_10_508] = ARTL_ART_constant_definition_part_10;
  artKindOfs[ARTL_ART_constant_definition_part_10_508] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_definition_part_10_508] = true;
  arteoR_pL[ARTL_ART_constant_definition_part_10_508] = true;
  artPopD[ARTL_ART_constant_definition_part_10_508] = true;
}

public void artTableInitialiser_ART_constant_definition_part_9() {
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9] = "constant_definition_part_9";
  artLabelStrings[ARTL_ART_constant_definition_part_9] = "constant_definition_part_9";
  artKindOfs[ARTL_ART_constant_definition_part_9] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_484] = "constant_definition_part_9 ::= . # ";
  artLabelStrings[ARTL_ART_constant_definition_part_9_484] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_484] = ARTL_ART_constant_definition_part_9;
  artKindOfs[ARTL_ART_constant_definition_part_9_484] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_constant_definition_part_9_484] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_486] = "constant_definition_part_9 ::= # .";
  artLabelStrings[ARTL_ART_constant_definition_part_9_486] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_486] = ARTL_ART_constant_definition_part_9;
  artKindOfs[ARTL_ART_constant_definition_part_9_486] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_definition_part_9_486] = true;
  arteoR_pL[ARTL_ART_constant_definition_part_9_486] = true;
  artPopD[ARTL_ART_constant_definition_part_9_486] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_488] = "constant_definition_part_9 ::= . 'const'  constant_definition ';'  constant_definition_part_10 ";
  artLabelStrings[ARTL_ART_constant_definition_part_9_488] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_488] = ARTL_ART_constant_definition_part_9;
  artKindOfs[ARTL_ART_constant_definition_part_9_488] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_489] = "constant_definition_part_9 ::= 'const'  constant_definition ';'  constant_definition_part_10 ";
  artLabelStrings[ARTL_ART_constant_definition_part_9_489] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_489] = ARTL_ART_constant_definition_part_9;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_490] = "constant_definition_part_9 ::= 'const'  . constant_definition ';'  constant_definition_part_10 ";
  artLabelStrings[ARTL_ART_constant_definition_part_9_490] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_490] = ARTL_ART_constant_definition_part_9;
  artKindOfs[ARTL_ART_constant_definition_part_9_490] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_constant_definition_part_9_490] = true;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_492] = "constant_definition_part_9 ::= 'const'  constant_definition . ';'  constant_definition_part_10 ";
  artLabelStrings[ARTL_ART_constant_definition_part_9_492] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_492] = ARTL_ART_constant_definition_part_9;
  artSlotInstanceOfs[ARTL_ART_constant_definition_part_9_492] = ARTL_ART_constant_definition;
  artKindOfs[ARTL_ART_constant_definition_part_9_492] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_493] = "constant_definition_part_9 ::= 'const'  constant_definition ';'  constant_definition_part_10 ";
  artLabelStrings[ARTL_ART_constant_definition_part_9_493] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_493] = ARTL_ART_constant_definition_part_9;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_494] = "constant_definition_part_9 ::= 'const'  constant_definition ';'  . constant_definition_part_10 ";
  artLabelStrings[ARTL_ART_constant_definition_part_9_494] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_494] = ARTL_ART_constant_definition_part_9;
  artKindOfs[ARTL_ART_constant_definition_part_9_494] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_constant_definition_part_9_496] = "constant_definition_part_9 ::= 'const'  constant_definition ';'  constant_definition_part_10 .";
  artLabelStrings[ARTL_ART_constant_definition_part_9_496] = "";
  artlhsL[ARTL_ART_constant_definition_part_9_496] = ARTL_ART_constant_definition_part_9;
  artSlotInstanceOfs[ARTL_ART_constant_definition_part_9_496] = ARTL_ART_constant_definition_part_10;
  artKindOfs[ARTL_ART_constant_definition_part_9_496] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_constant_definition_part_9_496] = true;
  arteoR_pL[ARTL_ART_constant_definition_part_9_496] = true;
  artPopD[ARTL_ART_constant_definition_part_9_496] = true;
}

public void artTableInitialiser_ART_control_variable() {
  artLabelInternalStrings[ARTL_ART_control_variable] = "control_variable";
  artLabelStrings[ARTL_ART_control_variable] = "control_variable";
  artKindOfs[ARTL_ART_control_variable] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_control_variable_510] = "control_variable ::= . entire_variable ";
  artLabelStrings[ARTL_ART_control_variable_510] = "";
  artlhsL[ARTL_ART_control_variable_510] = ARTL_ART_control_variable;
  artKindOfs[ARTL_ART_control_variable_510] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_control_variable_512] = "control_variable ::= entire_variable .";
  artLabelStrings[ARTL_ART_control_variable_512] = "";
  artlhsL[ARTL_ART_control_variable_512] = ARTL_ART_control_variable;
  artSlotInstanceOfs[ARTL_ART_control_variable_512] = ARTL_ART_entire_variable;
  artKindOfs[ARTL_ART_control_variable_512] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_control_variable_512] = true;
  arteoR_pL[ARTL_ART_control_variable_512] = true;
  artPopD[ARTL_ART_control_variable_512] = true;
}

public void artTableInitialiser_ART_digit() {
  artLabelInternalStrings[ARTL_ART_digit] = "digit";
  artLabelStrings[ARTL_ART_digit] = "digit";
  artKindOfs[ARTL_ART_digit] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_digit_518] = "digit ::= . 'digit'  ";
  artLabelStrings[ARTL_ART_digit_518] = "";
  artlhsL[ARTL_ART_digit_518] = ARTL_ART_digit;
  artKindOfs[ARTL_ART_digit_518] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_digit_518] = true;
  artLabelInternalStrings[ARTL_ART_digit_519] = "digit ::= 'digit'  ";
  artLabelStrings[ARTL_ART_digit_519] = "";
  artlhsL[ARTL_ART_digit_519] = ARTL_ART_digit;
  artPopD[ARTL_ART_digit_519] = true;
  artLabelInternalStrings[ARTL_ART_digit_520] = "digit ::= 'digit'  .";
  artLabelStrings[ARTL_ART_digit_520] = "";
  artlhsL[ARTL_ART_digit_520] = ARTL_ART_digit;
  artKindOfs[ARTL_ART_digit_520] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_digit_520] = true;
  arteoR_pL[ARTL_ART_digit_520] = true;
  artPopD[ARTL_ART_digit_520] = true;
}

public void artTableInitialiser_ART_digit_sequence() {
  artLabelInternalStrings[ARTL_ART_digit_sequence] = "digit_sequence";
  artLabelStrings[ARTL_ART_digit_sequence] = "digit_sequence";
  artKindOfs[ARTL_ART_digit_sequence] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_digit_sequence_522] = "digit_sequence ::= . 'INTEGER'  ";
  artLabelStrings[ARTL_ART_digit_sequence_522] = "";
  artlhsL[ARTL_ART_digit_sequence_522] = ARTL_ART_digit_sequence;
  artKindOfs[ARTL_ART_digit_sequence_522] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_digit_sequence_522] = true;
  artLabelInternalStrings[ARTL_ART_digit_sequence_523] = "digit_sequence ::= 'INTEGER'  ";
  artLabelStrings[ARTL_ART_digit_sequence_523] = "";
  artlhsL[ARTL_ART_digit_sequence_523] = ARTL_ART_digit_sequence;
  artPopD[ARTL_ART_digit_sequence_523] = true;
  artLabelInternalStrings[ARTL_ART_digit_sequence_524] = "digit_sequence ::= 'INTEGER'  .";
  artLabelStrings[ARTL_ART_digit_sequence_524] = "";
  artlhsL[ARTL_ART_digit_sequence_524] = ARTL_ART_digit_sequence;
  artKindOfs[ARTL_ART_digit_sequence_524] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_digit_sequence_524] = true;
  arteoR_pL[ARTL_ART_digit_sequence_524] = true;
  artPopD[ARTL_ART_digit_sequence_524] = true;
}

public void artTableInitialiser_ART_directive() {
  artLabelInternalStrings[ARTL_ART_directive] = "directive";
  artLabelStrings[ARTL_ART_directive] = "directive";
  artKindOfs[ARTL_ART_directive] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_directive_526] = "directive ::= . 'ID'  ";
  artLabelStrings[ARTL_ART_directive_526] = "";
  artlhsL[ARTL_ART_directive_526] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_526] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_526] = true;
  artLabelInternalStrings[ARTL_ART_directive_527] = "directive ::= 'ID'  ";
  artLabelStrings[ARTL_ART_directive_527] = "";
  artlhsL[ARTL_ART_directive_527] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_527] = true;
  artLabelInternalStrings[ARTL_ART_directive_528] = "directive ::= 'ID'  .";
  artLabelStrings[ARTL_ART_directive_528] = "";
  artlhsL[ARTL_ART_directive_528] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_528] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_528] = true;
  arteoR_pL[ARTL_ART_directive_528] = true;
  artPopD[ARTL_ART_directive_528] = true;
}

public void artTableInitialiser_ART_domain_type() {
  artLabelInternalStrings[ARTL_ART_domain_type] = "domain_type";
  artLabelStrings[ARTL_ART_domain_type] = "domain_type";
  artKindOfs[ARTL_ART_domain_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_domain_type_530] = "domain_type ::= . type_ID ";
  artLabelStrings[ARTL_ART_domain_type_530] = "";
  artlhsL[ARTL_ART_domain_type_530] = ARTL_ART_domain_type;
  artKindOfs[ARTL_ART_domain_type_530] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_domain_type_532] = "domain_type ::= type_ID .";
  artLabelStrings[ARTL_ART_domain_type_532] = "";
  artlhsL[ARTL_ART_domain_type_532] = ARTL_ART_domain_type;
  artSlotInstanceOfs[ARTL_ART_domain_type_532] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_domain_type_532] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_domain_type_532] = true;
  arteoR_pL[ARTL_ART_domain_type_532] = true;
  artPopD[ARTL_ART_domain_type_532] = true;
}

public void artTableInitialiser_ART_else_part() {
  artLabelInternalStrings[ARTL_ART_else_part] = "else_part";
  artLabelStrings[ARTL_ART_else_part] = "else_part";
  artKindOfs[ARTL_ART_else_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_else_part_538] = "else_part ::= . 'else'  statement ";
  artLabelStrings[ARTL_ART_else_part_538] = "";
  artlhsL[ARTL_ART_else_part_538] = ARTL_ART_else_part;
  artKindOfs[ARTL_ART_else_part_538] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_else_part_539] = "else_part ::= 'else'  statement ";
  artLabelStrings[ARTL_ART_else_part_539] = "";
  artlhsL[ARTL_ART_else_part_539] = ARTL_ART_else_part;
  artLabelInternalStrings[ARTL_ART_else_part_540] = "else_part ::= 'else'  . statement ";
  artLabelStrings[ARTL_ART_else_part_540] = "";
  artlhsL[ARTL_ART_else_part_540] = ARTL_ART_else_part;
  artKindOfs[ARTL_ART_else_part_540] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_else_part_540] = true;
  artLabelInternalStrings[ARTL_ART_else_part_542] = "else_part ::= 'else'  statement .";
  artLabelStrings[ARTL_ART_else_part_542] = "";
  artlhsL[ARTL_ART_else_part_542] = ARTL_ART_else_part;
  artSlotInstanceOfs[ARTL_ART_else_part_542] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_else_part_542] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_else_part_542] = true;
  arteoR_pL[ARTL_ART_else_part_542] = true;
  artPopD[ARTL_ART_else_part_542] = true;
}

public void artTableInitialiser_ART_entire_variable() {
  artLabelInternalStrings[ARTL_ART_entire_variable] = "entire_variable";
  artLabelStrings[ARTL_ART_entire_variable] = "entire_variable";
  artKindOfs[ARTL_ART_entire_variable] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_entire_variable_514] = "entire_variable ::= . variable_ID ";
  artLabelStrings[ARTL_ART_entire_variable_514] = "";
  artlhsL[ARTL_ART_entire_variable_514] = ARTL_ART_entire_variable;
  artKindOfs[ARTL_ART_entire_variable_514] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_entire_variable_516] = "entire_variable ::= variable_ID .";
  artLabelStrings[ARTL_ART_entire_variable_516] = "";
  artlhsL[ARTL_ART_entire_variable_516] = ARTL_ART_entire_variable;
  artSlotInstanceOfs[ARTL_ART_entire_variable_516] = ARTL_ART_variable_ID;
  artKindOfs[ARTL_ART_entire_variable_516] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_entire_variable_516] = true;
  arteoR_pL[ARTL_ART_entire_variable_516] = true;
  artPopD[ARTL_ART_entire_variable_516] = true;
}

public void artTableInitialiser_ART_enumerated_type() {
  artLabelInternalStrings[ARTL_ART_enumerated_type] = "enumerated_type";
  artLabelStrings[ARTL_ART_enumerated_type] = "enumerated_type";
  artKindOfs[ARTL_ART_enumerated_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_enumerated_type_548] = "enumerated_type ::= . '('  ID_list ')'  ";
  artLabelStrings[ARTL_ART_enumerated_type_548] = "";
  artlhsL[ARTL_ART_enumerated_type_548] = ARTL_ART_enumerated_type;
  artKindOfs[ARTL_ART_enumerated_type_548] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_enumerated_type_549] = "enumerated_type ::= '('  ID_list ')'  ";
  artLabelStrings[ARTL_ART_enumerated_type_549] = "";
  artlhsL[ARTL_ART_enumerated_type_549] = ARTL_ART_enumerated_type;
  artLabelInternalStrings[ARTL_ART_enumerated_type_550] = "enumerated_type ::= '('  . ID_list ')'  ";
  artLabelStrings[ARTL_ART_enumerated_type_550] = "";
  artlhsL[ARTL_ART_enumerated_type_550] = ARTL_ART_enumerated_type;
  artKindOfs[ARTL_ART_enumerated_type_550] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_enumerated_type_550] = true;
  artLabelInternalStrings[ARTL_ART_enumerated_type_552] = "enumerated_type ::= '('  ID_list . ')'  ";
  artLabelStrings[ARTL_ART_enumerated_type_552] = "";
  artlhsL[ARTL_ART_enumerated_type_552] = ARTL_ART_enumerated_type;
  artSlotInstanceOfs[ARTL_ART_enumerated_type_552] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_enumerated_type_552] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_enumerated_type_552] = true;
  artLabelInternalStrings[ARTL_ART_enumerated_type_553] = "enumerated_type ::= '('  ID_list ')'  ";
  artLabelStrings[ARTL_ART_enumerated_type_553] = "";
  artlhsL[ARTL_ART_enumerated_type_553] = ARTL_ART_enumerated_type;
  artPopD[ARTL_ART_enumerated_type_553] = true;
  artLabelInternalStrings[ARTL_ART_enumerated_type_554] = "enumerated_type ::= '('  ID_list ')'  .";
  artLabelStrings[ARTL_ART_enumerated_type_554] = "";
  artlhsL[ARTL_ART_enumerated_type_554] = ARTL_ART_enumerated_type;
  artKindOfs[ARTL_ART_enumerated_type_554] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_enumerated_type_554] = true;
  arteoR_pL[ARTL_ART_enumerated_type_554] = true;
  artPopD[ARTL_ART_enumerated_type_554] = true;
}

public void artTableInitialiser_ART_expression() {
  artLabelInternalStrings[ARTL_ART_expression] = "expression";
  artLabelStrings[ARTL_ART_expression] = "expression";
  artKindOfs[ARTL_ART_expression] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_expression_30] = "expression ::= . simple_expression expression_11 ";
  artLabelStrings[ARTL_ART_expression_30] = "";
  artlhsL[ARTL_ART_expression_30] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_expression_30] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_expression_32] = "expression ::= simple_expression . expression_11 ";
  artLabelStrings[ARTL_ART_expression_32] = "";
  artlhsL[ARTL_ART_expression_32] = ARTL_ART_expression;
  artSlotInstanceOfs[ARTL_ART_expression_32] = ARTL_ART_simple_expression;
  artKindOfs[ARTL_ART_expression_32] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_expression_32] = true;
  artLabelInternalStrings[ARTL_ART_expression_34] = "expression ::= simple_expression expression_11 .";
  artLabelStrings[ARTL_ART_expression_34] = "";
  artlhsL[ARTL_ART_expression_34] = ARTL_ART_expression;
  artSlotInstanceOfs[ARTL_ART_expression_34] = ARTL_ART_expression_11;
  artKindOfs[ARTL_ART_expression_34] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_expression_34] = true;
  arteoR_pL[ARTL_ART_expression_34] = true;
  artPopD[ARTL_ART_expression_34] = true;
}

public void artTableInitialiser_ART_expression_11() {
  artLabelInternalStrings[ARTL_ART_expression_11] = "expression_11";
  artLabelStrings[ARTL_ART_expression_11] = "expression_11";
  artKindOfs[ARTL_ART_expression_11] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_expression_11_576] = "expression_11 ::= . # ";
  artLabelStrings[ARTL_ART_expression_11_576] = "";
  artlhsL[ARTL_ART_expression_11_576] = ARTL_ART_expression_11;
  artKindOfs[ARTL_ART_expression_11_576] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_expression_11_576] = true;
  artLabelInternalStrings[ARTL_ART_expression_11_578] = "expression_11 ::= # .";
  artLabelStrings[ARTL_ART_expression_11_578] = "";
  artlhsL[ARTL_ART_expression_11_578] = ARTL_ART_expression_11;
  artKindOfs[ARTL_ART_expression_11_578] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_expression_11_578] = true;
  arteoR_pL[ARTL_ART_expression_11_578] = true;
  artPopD[ARTL_ART_expression_11_578] = true;
  artLabelInternalStrings[ARTL_ART_expression_11_580] = "expression_11 ::= . relational_operator simple_expression ";
  artLabelStrings[ARTL_ART_expression_11_580] = "";
  artlhsL[ARTL_ART_expression_11_580] = ARTL_ART_expression_11;
  artKindOfs[ARTL_ART_expression_11_580] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_expression_11_582] = "expression_11 ::= relational_operator . simple_expression ";
  artLabelStrings[ARTL_ART_expression_11_582] = "";
  artlhsL[ARTL_ART_expression_11_582] = ARTL_ART_expression_11;
  artSlotInstanceOfs[ARTL_ART_expression_11_582] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_expression_11_582] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_expression_11_582] = true;
  artLabelInternalStrings[ARTL_ART_expression_11_584] = "expression_11 ::= relational_operator simple_expression .";
  artLabelStrings[ARTL_ART_expression_11_584] = "";
  artlhsL[ARTL_ART_expression_11_584] = ARTL_ART_expression_11;
  artSlotInstanceOfs[ARTL_ART_expression_11_584] = ARTL_ART_simple_expression;
  artKindOfs[ARTL_ART_expression_11_584] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_expression_11_584] = true;
  arteoR_pL[ARTL_ART_expression_11_584] = true;
  artPopD[ARTL_ART_expression_11_584] = true;
}

public void artTableInitialiser_ART_factor() {
  artLabelInternalStrings[ARTL_ART_factor] = "factor";
  artLabelStrings[ARTL_ART_factor] = "factor";
  artKindOfs[ARTL_ART_factor] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_factor_614] = "factor ::= . variable_access ";
  artLabelStrings[ARTL_ART_factor_614] = "";
  artlhsL[ARTL_ART_factor_614] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_614] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_factor_616] = "factor ::= variable_access .";
  artLabelStrings[ARTL_ART_factor_616] = "";
  artlhsL[ARTL_ART_factor_616] = ARTL_ART_factor;
  artSlotInstanceOfs[ARTL_ART_factor_616] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_factor_616] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_factor_616] = true;
  arteoR_pL[ARTL_ART_factor_616] = true;
  artPopD[ARTL_ART_factor_616] = true;
  artLabelInternalStrings[ARTL_ART_factor_618] = "factor ::= . unsigned_constant ";
  artLabelStrings[ARTL_ART_factor_618] = "";
  artlhsL[ARTL_ART_factor_618] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_618] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_factor_620] = "factor ::= unsigned_constant .";
  artLabelStrings[ARTL_ART_factor_620] = "";
  artlhsL[ARTL_ART_factor_620] = ARTL_ART_factor;
  artSlotInstanceOfs[ARTL_ART_factor_620] = ARTL_ART_unsigned_constant;
  artKindOfs[ARTL_ART_factor_620] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_factor_620] = true;
  arteoR_pL[ARTL_ART_factor_620] = true;
  artPopD[ARTL_ART_factor_620] = true;
  artLabelInternalStrings[ARTL_ART_factor_622] = "factor ::= . function_designator ";
  artLabelStrings[ARTL_ART_factor_622] = "";
  artlhsL[ARTL_ART_factor_622] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_622] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_factor_624] = "factor ::= function_designator .";
  artLabelStrings[ARTL_ART_factor_624] = "";
  artlhsL[ARTL_ART_factor_624] = ARTL_ART_factor;
  artSlotInstanceOfs[ARTL_ART_factor_624] = ARTL_ART_function_designator;
  artKindOfs[ARTL_ART_factor_624] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_factor_624] = true;
  arteoR_pL[ARTL_ART_factor_624] = true;
  artPopD[ARTL_ART_factor_624] = true;
  artLabelInternalStrings[ARTL_ART_factor_626] = "factor ::= . set_constructor ";
  artLabelStrings[ARTL_ART_factor_626] = "";
  artlhsL[ARTL_ART_factor_626] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_626] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_factor_628] = "factor ::= set_constructor .";
  artLabelStrings[ARTL_ART_factor_628] = "";
  artlhsL[ARTL_ART_factor_628] = ARTL_ART_factor;
  artSlotInstanceOfs[ARTL_ART_factor_628] = ARTL_ART_set_constructor;
  artKindOfs[ARTL_ART_factor_628] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_factor_628] = true;
  arteoR_pL[ARTL_ART_factor_628] = true;
  artPopD[ARTL_ART_factor_628] = true;
  artLabelInternalStrings[ARTL_ART_factor_630] = "factor ::= . '('  expression ')'  ";
  artLabelStrings[ARTL_ART_factor_630] = "";
  artlhsL[ARTL_ART_factor_630] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_630] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_factor_631] = "factor ::= '('  expression ')'  ";
  artLabelStrings[ARTL_ART_factor_631] = "";
  artlhsL[ARTL_ART_factor_631] = ARTL_ART_factor;
  artLabelInternalStrings[ARTL_ART_factor_632] = "factor ::= '('  . expression ')'  ";
  artLabelStrings[ARTL_ART_factor_632] = "";
  artlhsL[ARTL_ART_factor_632] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_632] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_factor_632] = true;
  artLabelInternalStrings[ARTL_ART_factor_634] = "factor ::= '('  expression . ')'  ";
  artLabelStrings[ARTL_ART_factor_634] = "";
  artlhsL[ARTL_ART_factor_634] = ARTL_ART_factor;
  artSlotInstanceOfs[ARTL_ART_factor_634] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_factor_634] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_factor_634] = true;
  artLabelInternalStrings[ARTL_ART_factor_635] = "factor ::= '('  expression ')'  ";
  artLabelStrings[ARTL_ART_factor_635] = "";
  artlhsL[ARTL_ART_factor_635] = ARTL_ART_factor;
  artPopD[ARTL_ART_factor_635] = true;
  artLabelInternalStrings[ARTL_ART_factor_636] = "factor ::= '('  expression ')'  .";
  artLabelStrings[ARTL_ART_factor_636] = "";
  artlhsL[ARTL_ART_factor_636] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_636] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_factor_636] = true;
  arteoR_pL[ARTL_ART_factor_636] = true;
  artPopD[ARTL_ART_factor_636] = true;
  artLabelInternalStrings[ARTL_ART_factor_638] = "factor ::= . 'not'  factor ";
  artLabelStrings[ARTL_ART_factor_638] = "";
  artlhsL[ARTL_ART_factor_638] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_638] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_factor_639] = "factor ::= 'not'  factor ";
  artLabelStrings[ARTL_ART_factor_639] = "";
  artlhsL[ARTL_ART_factor_639] = ARTL_ART_factor;
  artLabelInternalStrings[ARTL_ART_factor_640] = "factor ::= 'not'  . factor ";
  artLabelStrings[ARTL_ART_factor_640] = "";
  artlhsL[ARTL_ART_factor_640] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_640] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_factor_640] = true;
  artLabelInternalStrings[ARTL_ART_factor_642] = "factor ::= 'not'  factor .";
  artLabelStrings[ARTL_ART_factor_642] = "";
  artlhsL[ARTL_ART_factor_642] = ARTL_ART_factor;
  artSlotInstanceOfs[ARTL_ART_factor_642] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_factor_642] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_factor_642] = true;
  arteoR_pL[ARTL_ART_factor_642] = true;
  artPopD[ARTL_ART_factor_642] = true;
}

public void artTableInitialiser_ART_field_ID() {
  artLabelInternalStrings[ARTL_ART_field_ID] = "field_ID";
  artLabelStrings[ARTL_ART_field_ID] = "field_ID";
  artKindOfs[ARTL_ART_field_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_field_ID_682] = "field_ID ::= . 'field_ID'  ";
  artLabelStrings[ARTL_ART_field_ID_682] = "";
  artlhsL[ARTL_ART_field_ID_682] = ARTL_ART_field_ID;
  artKindOfs[ARTL_ART_field_ID_682] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_field_ID_682] = true;
  artLabelInternalStrings[ARTL_ART_field_ID_683] = "field_ID ::= 'field_ID'  ";
  artLabelStrings[ARTL_ART_field_ID_683] = "";
  artlhsL[ARTL_ART_field_ID_683] = ARTL_ART_field_ID;
  artPopD[ARTL_ART_field_ID_683] = true;
  artLabelInternalStrings[ARTL_ART_field_ID_684] = "field_ID ::= 'field_ID'  .";
  artLabelStrings[ARTL_ART_field_ID_684] = "";
  artlhsL[ARTL_ART_field_ID_684] = ARTL_ART_field_ID;
  artKindOfs[ARTL_ART_field_ID_684] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_ID_684] = true;
  arteoR_pL[ARTL_ART_field_ID_684] = true;
  artPopD[ARTL_ART_field_ID_684] = true;
}

public void artTableInitialiser_ART_field_designator() {
  artLabelInternalStrings[ARTL_ART_field_designator] = "field_designator";
  artLabelStrings[ARTL_ART_field_designator] = "field_designator";
  artKindOfs[ARTL_ART_field_designator] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_field_designator_328] = "field_designator ::= . variable_access '.'  field_specifier ";
  artLabelStrings[ARTL_ART_field_designator_328] = "";
  artlhsL[ARTL_ART_field_designator_328] = ARTL_ART_field_designator;
  artKindOfs[ARTL_ART_field_designator_328] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_designator_330] = "field_designator ::= variable_access . '.'  field_specifier ";
  artLabelStrings[ARTL_ART_field_designator_330] = "";
  artlhsL[ARTL_ART_field_designator_330] = ARTL_ART_field_designator;
  artSlotInstanceOfs[ARTL_ART_field_designator_330] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_field_designator_330] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_field_designator_330] = true;
  artLabelInternalStrings[ARTL_ART_field_designator_331] = "field_designator ::= variable_access '.'  field_specifier ";
  artLabelStrings[ARTL_ART_field_designator_331] = "";
  artlhsL[ARTL_ART_field_designator_331] = ARTL_ART_field_designator;
  artLabelInternalStrings[ARTL_ART_field_designator_332] = "field_designator ::= variable_access '.'  . field_specifier ";
  artLabelStrings[ARTL_ART_field_designator_332] = "";
  artlhsL[ARTL_ART_field_designator_332] = ARTL_ART_field_designator;
  artKindOfs[ARTL_ART_field_designator_332] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_designator_334] = "field_designator ::= variable_access '.'  field_specifier .";
  artLabelStrings[ARTL_ART_field_designator_334] = "";
  artlhsL[ARTL_ART_field_designator_334] = ARTL_ART_field_designator;
  artSlotInstanceOfs[ARTL_ART_field_designator_334] = ARTL_ART_field_specifier;
  artKindOfs[ARTL_ART_field_designator_334] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_designator_334] = true;
  arteoR_pL[ARTL_ART_field_designator_334] = true;
  artPopD[ARTL_ART_field_designator_334] = true;
  artLabelInternalStrings[ARTL_ART_field_designator_336] = "field_designator ::= . field_designator_ID ";
  artLabelStrings[ARTL_ART_field_designator_336] = "";
  artlhsL[ARTL_ART_field_designator_336] = ARTL_ART_field_designator;
  artKindOfs[ARTL_ART_field_designator_336] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_designator_338] = "field_designator ::= field_designator_ID .";
  artLabelStrings[ARTL_ART_field_designator_338] = "";
  artlhsL[ARTL_ART_field_designator_338] = ARTL_ART_field_designator;
  artSlotInstanceOfs[ARTL_ART_field_designator_338] = ARTL_ART_field_designator_ID;
  artKindOfs[ARTL_ART_field_designator_338] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_designator_338] = true;
  arteoR_pL[ARTL_ART_field_designator_338] = true;
  artPopD[ARTL_ART_field_designator_338] = true;
}

public void artTableInitialiser_ART_field_designator_ID() {
  artLabelInternalStrings[ARTL_ART_field_designator_ID] = "field_designator_ID";
  artLabelStrings[ARTL_ART_field_designator_ID] = "field_designator_ID";
  artKindOfs[ARTL_ART_field_designator_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_field_designator_ID_678] = "field_designator_ID ::= . 'field_designator_ID'  ";
  artLabelStrings[ARTL_ART_field_designator_ID_678] = "";
  artlhsL[ARTL_ART_field_designator_ID_678] = ARTL_ART_field_designator_ID;
  artKindOfs[ARTL_ART_field_designator_ID_678] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_field_designator_ID_678] = true;
  artLabelInternalStrings[ARTL_ART_field_designator_ID_679] = "field_designator_ID ::= 'field_designator_ID'  ";
  artLabelStrings[ARTL_ART_field_designator_ID_679] = "";
  artlhsL[ARTL_ART_field_designator_ID_679] = ARTL_ART_field_designator_ID;
  artPopD[ARTL_ART_field_designator_ID_679] = true;
  artLabelInternalStrings[ARTL_ART_field_designator_ID_680] = "field_designator_ID ::= 'field_designator_ID'  .";
  artLabelStrings[ARTL_ART_field_designator_ID_680] = "";
  artlhsL[ARTL_ART_field_designator_ID_680] = ARTL_ART_field_designator_ID;
  artKindOfs[ARTL_ART_field_designator_ID_680] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_designator_ID_680] = true;
  arteoR_pL[ARTL_ART_field_designator_ID_680] = true;
  artPopD[ARTL_ART_field_designator_ID_680] = true;
}

public void artTableInitialiser_ART_field_list() {
  artLabelInternalStrings[ARTL_ART_field_list] = "field_list";
  artLabelStrings[ARTL_ART_field_list] = "field_list";
  artKindOfs[ARTL_ART_field_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_field_list_686] = "field_list ::= . field_list_12 ";
  artLabelStrings[ARTL_ART_field_list_686] = "";
  artlhsL[ARTL_ART_field_list_686] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_686] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_list_688] = "field_list ::= field_list_12 .";
  artLabelStrings[ARTL_ART_field_list_688] = "";
  artlhsL[ARTL_ART_field_list_688] = ARTL_ART_field_list;
  artSlotInstanceOfs[ARTL_ART_field_list_688] = ARTL_ART_field_list_12;
  artKindOfs[ARTL_ART_field_list_688] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_688] = true;
  arteoR_pL[ARTL_ART_field_list_688] = true;
  artPopD[ARTL_ART_field_list_688] = true;
  artLabelInternalStrings[ARTL_ART_field_list_690] = "field_list ::= . fixed_part ';'  ";
  artLabelStrings[ARTL_ART_field_list_690] = "";
  artlhsL[ARTL_ART_field_list_690] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_690] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_list_692] = "field_list ::= fixed_part . ';'  ";
  artLabelStrings[ARTL_ART_field_list_692] = "";
  artlhsL[ARTL_ART_field_list_692] = ARTL_ART_field_list;
  artSlotInstanceOfs[ARTL_ART_field_list_692] = ARTL_ART_fixed_part;
  artKindOfs[ARTL_ART_field_list_692] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_field_list_692] = true;
  artPopD[ARTL_ART_field_list_692] = true;
  artLabelInternalStrings[ARTL_ART_field_list_693] = "field_list ::= fixed_part ';'  ";
  artLabelStrings[ARTL_ART_field_list_693] = "";
  artlhsL[ARTL_ART_field_list_693] = ARTL_ART_field_list;
  artPopD[ARTL_ART_field_list_693] = true;
  artLabelInternalStrings[ARTL_ART_field_list_694] = "field_list ::= fixed_part ';'  .";
  artLabelStrings[ARTL_ART_field_list_694] = "";
  artlhsL[ARTL_ART_field_list_694] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_694] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_694] = true;
  arteoR_pL[ARTL_ART_field_list_694] = true;
  artPopD[ARTL_ART_field_list_694] = true;
  artLabelInternalStrings[ARTL_ART_field_list_696] = "field_list ::= . fixed_part ';'  variant_part ";
  artLabelStrings[ARTL_ART_field_list_696] = "";
  artlhsL[ARTL_ART_field_list_696] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_696] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_list_698] = "field_list ::= fixed_part . ';'  variant_part ";
  artLabelStrings[ARTL_ART_field_list_698] = "";
  artlhsL[ARTL_ART_field_list_698] = ARTL_ART_field_list;
  artSlotInstanceOfs[ARTL_ART_field_list_698] = ARTL_ART_fixed_part;
  artKindOfs[ARTL_ART_field_list_698] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_field_list_698] = true;
  artLabelInternalStrings[ARTL_ART_field_list_699] = "field_list ::= fixed_part ';'  variant_part ";
  artLabelStrings[ARTL_ART_field_list_699] = "";
  artlhsL[ARTL_ART_field_list_699] = ARTL_ART_field_list;
  artLabelInternalStrings[ARTL_ART_field_list_700] = "field_list ::= fixed_part ';'  . variant_part ";
  artLabelStrings[ARTL_ART_field_list_700] = "";
  artlhsL[ARTL_ART_field_list_700] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_700] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_list_702] = "field_list ::= fixed_part ';'  variant_part .";
  artLabelStrings[ARTL_ART_field_list_702] = "";
  artlhsL[ARTL_ART_field_list_702] = ARTL_ART_field_list;
  artSlotInstanceOfs[ARTL_ART_field_list_702] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_field_list_702] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_702] = true;
  arteoR_pL[ARTL_ART_field_list_702] = true;
  artPopD[ARTL_ART_field_list_702] = true;
  artLabelInternalStrings[ARTL_ART_field_list_704] = "field_list ::= . fixed_part ';'  variant_part ';'  ";
  artLabelStrings[ARTL_ART_field_list_704] = "";
  artlhsL[ARTL_ART_field_list_704] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_704] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_list_706] = "field_list ::= fixed_part . ';'  variant_part ';'  ";
  artLabelStrings[ARTL_ART_field_list_706] = "";
  artlhsL[ARTL_ART_field_list_706] = ARTL_ART_field_list;
  artSlotInstanceOfs[ARTL_ART_field_list_706] = ARTL_ART_fixed_part;
  artKindOfs[ARTL_ART_field_list_706] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_field_list_706] = true;
  artLabelInternalStrings[ARTL_ART_field_list_707] = "field_list ::= fixed_part ';'  variant_part ';'  ";
  artLabelStrings[ARTL_ART_field_list_707] = "";
  artlhsL[ARTL_ART_field_list_707] = ARTL_ART_field_list;
  artLabelInternalStrings[ARTL_ART_field_list_708] = "field_list ::= fixed_part ';'  . variant_part ';'  ";
  artLabelStrings[ARTL_ART_field_list_708] = "";
  artlhsL[ARTL_ART_field_list_708] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_708] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_list_710] = "field_list ::= fixed_part ';'  variant_part . ';'  ";
  artLabelStrings[ARTL_ART_field_list_710] = "";
  artlhsL[ARTL_ART_field_list_710] = ARTL_ART_field_list;
  artSlotInstanceOfs[ARTL_ART_field_list_710] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_field_list_710] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_field_list_710] = true;
  artLabelInternalStrings[ARTL_ART_field_list_711] = "field_list ::= fixed_part ';'  variant_part ';'  ";
  artLabelStrings[ARTL_ART_field_list_711] = "";
  artlhsL[ARTL_ART_field_list_711] = ARTL_ART_field_list;
  artPopD[ARTL_ART_field_list_711] = true;
  artLabelInternalStrings[ARTL_ART_field_list_712] = "field_list ::= fixed_part ';'  variant_part ';'  .";
  artLabelStrings[ARTL_ART_field_list_712] = "";
  artlhsL[ARTL_ART_field_list_712] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_712] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_712] = true;
  arteoR_pL[ARTL_ART_field_list_712] = true;
  artPopD[ARTL_ART_field_list_712] = true;
  artLabelInternalStrings[ARTL_ART_field_list_714] = "field_list ::= . variant_part field_list_13 ";
  artLabelStrings[ARTL_ART_field_list_714] = "";
  artlhsL[ARTL_ART_field_list_714] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_field_list_714] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_list_716] = "field_list ::= variant_part . field_list_13 ";
  artLabelStrings[ARTL_ART_field_list_716] = "";
  artlhsL[ARTL_ART_field_list_716] = ARTL_ART_field_list;
  artSlotInstanceOfs[ARTL_ART_field_list_716] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_field_list_716] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_field_list_716] = true;
  artLabelInternalStrings[ARTL_ART_field_list_718] = "field_list ::= variant_part field_list_13 .";
  artLabelStrings[ARTL_ART_field_list_718] = "";
  artlhsL[ARTL_ART_field_list_718] = ARTL_ART_field_list;
  artSlotInstanceOfs[ARTL_ART_field_list_718] = ARTL_ART_field_list_13;
  artKindOfs[ARTL_ART_field_list_718] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_718] = true;
  arteoR_pL[ARTL_ART_field_list_718] = true;
  artPopD[ARTL_ART_field_list_718] = true;
}

public void artTableInitialiser_ART_field_list_12() {
  artLabelInternalStrings[ARTL_ART_field_list_12] = "field_list_12";
  artLabelStrings[ARTL_ART_field_list_12] = "field_list_12";
  artKindOfs[ARTL_ART_field_list_12] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_field_list_12_720] = "field_list_12 ::= . # ";
  artLabelStrings[ARTL_ART_field_list_12_720] = "";
  artlhsL[ARTL_ART_field_list_12_720] = ARTL_ART_field_list_12;
  artKindOfs[ARTL_ART_field_list_12_720] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_field_list_12_720] = true;
  artLabelInternalStrings[ARTL_ART_field_list_12_722] = "field_list_12 ::= # .";
  artLabelStrings[ARTL_ART_field_list_12_722] = "";
  artlhsL[ARTL_ART_field_list_12_722] = ARTL_ART_field_list_12;
  artKindOfs[ARTL_ART_field_list_12_722] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_12_722] = true;
  arteoR_pL[ARTL_ART_field_list_12_722] = true;
  artPopD[ARTL_ART_field_list_12_722] = true;
  artLabelInternalStrings[ARTL_ART_field_list_12_724] = "field_list_12 ::= . fixed_part ";
  artLabelStrings[ARTL_ART_field_list_12_724] = "";
  artlhsL[ARTL_ART_field_list_12_724] = ARTL_ART_field_list_12;
  artKindOfs[ARTL_ART_field_list_12_724] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_list_12_726] = "field_list_12 ::= fixed_part .";
  artLabelStrings[ARTL_ART_field_list_12_726] = "";
  artlhsL[ARTL_ART_field_list_12_726] = ARTL_ART_field_list_12;
  artSlotInstanceOfs[ARTL_ART_field_list_12_726] = ARTL_ART_fixed_part;
  artKindOfs[ARTL_ART_field_list_12_726] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_12_726] = true;
  arteoR_pL[ARTL_ART_field_list_12_726] = true;
  artPopD[ARTL_ART_field_list_12_726] = true;
}

public void artTableInitialiser_ART_field_list_13() {
  artLabelInternalStrings[ARTL_ART_field_list_13] = "field_list_13";
  artLabelStrings[ARTL_ART_field_list_13] = "field_list_13";
  artKindOfs[ARTL_ART_field_list_13] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_field_list_13_758] = "field_list_13 ::= . # ";
  artLabelStrings[ARTL_ART_field_list_13_758] = "";
  artlhsL[ARTL_ART_field_list_13_758] = ARTL_ART_field_list_13;
  artKindOfs[ARTL_ART_field_list_13_758] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_field_list_13_758] = true;
  artLabelInternalStrings[ARTL_ART_field_list_13_760] = "field_list_13 ::= # .";
  artLabelStrings[ARTL_ART_field_list_13_760] = "";
  artlhsL[ARTL_ART_field_list_13_760] = ARTL_ART_field_list_13;
  artKindOfs[ARTL_ART_field_list_13_760] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_13_760] = true;
  arteoR_pL[ARTL_ART_field_list_13_760] = true;
  artPopD[ARTL_ART_field_list_13_760] = true;
  artLabelInternalStrings[ARTL_ART_field_list_13_762] = "field_list_13 ::= . ';'  ";
  artLabelStrings[ARTL_ART_field_list_13_762] = "";
  artlhsL[ARTL_ART_field_list_13_762] = ARTL_ART_field_list_13;
  artKindOfs[ARTL_ART_field_list_13_762] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_field_list_13_762] = true;
  artLabelInternalStrings[ARTL_ART_field_list_13_763] = "field_list_13 ::= ';'  ";
  artLabelStrings[ARTL_ART_field_list_13_763] = "";
  artlhsL[ARTL_ART_field_list_13_763] = ARTL_ART_field_list_13;
  artPopD[ARTL_ART_field_list_13_763] = true;
  artLabelInternalStrings[ARTL_ART_field_list_13_764] = "field_list_13 ::= ';'  .";
  artLabelStrings[ARTL_ART_field_list_13_764] = "";
  artlhsL[ARTL_ART_field_list_13_764] = ARTL_ART_field_list_13;
  artKindOfs[ARTL_ART_field_list_13_764] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_list_13_764] = true;
  arteoR_pL[ARTL_ART_field_list_13_764] = true;
  artPopD[ARTL_ART_field_list_13_764] = true;
}

public void artTableInitialiser_ART_field_specifier() {
  artLabelInternalStrings[ARTL_ART_field_specifier] = "field_specifier";
  artLabelStrings[ARTL_ART_field_specifier] = "field_specifier";
  artKindOfs[ARTL_ART_field_specifier] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_field_specifier_674] = "field_specifier ::= . field_ID ";
  artLabelStrings[ARTL_ART_field_specifier_674] = "";
  artlhsL[ARTL_ART_field_specifier_674] = ARTL_ART_field_specifier;
  artKindOfs[ARTL_ART_field_specifier_674] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_field_specifier_676] = "field_specifier ::= field_ID .";
  artLabelStrings[ARTL_ART_field_specifier_676] = "";
  artlhsL[ARTL_ART_field_specifier_676] = ARTL_ART_field_specifier;
  artSlotInstanceOfs[ARTL_ART_field_specifier_676] = ARTL_ART_field_ID;
  artKindOfs[ARTL_ART_field_specifier_676] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_field_specifier_676] = true;
  arteoR_pL[ARTL_ART_field_specifier_676] = true;
  artPopD[ARTL_ART_field_specifier_676] = true;
}

public void artTableInitialiser_ART_file_type() {
  artLabelInternalStrings[ARTL_ART_file_type] = "file_type";
  artLabelStrings[ARTL_ART_file_type] = "file_type";
  artKindOfs[ARTL_ART_file_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_file_type_766] = "file_type ::= . 'file'  'of'  component_type ";
  artLabelStrings[ARTL_ART_file_type_766] = "";
  artlhsL[ARTL_ART_file_type_766] = ARTL_ART_file_type;
  artKindOfs[ARTL_ART_file_type_766] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_file_type_767] = "file_type ::= 'file'  'of'  component_type ";
  artLabelStrings[ARTL_ART_file_type_767] = "";
  artlhsL[ARTL_ART_file_type_767] = ARTL_ART_file_type;
  artLabelInternalStrings[ARTL_ART_file_type_768] = "file_type ::= 'file'  . 'of'  component_type ";
  artLabelStrings[ARTL_ART_file_type_768] = "";
  artlhsL[ARTL_ART_file_type_768] = ARTL_ART_file_type;
  artKindOfs[ARTL_ART_file_type_768] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_file_type_768] = true;
  artLabelInternalStrings[ARTL_ART_file_type_769] = "file_type ::= 'file'  'of'  component_type ";
  artLabelStrings[ARTL_ART_file_type_769] = "";
  artlhsL[ARTL_ART_file_type_769] = ARTL_ART_file_type;
  artLabelInternalStrings[ARTL_ART_file_type_770] = "file_type ::= 'file'  'of'  . component_type ";
  artLabelStrings[ARTL_ART_file_type_770] = "";
  artlhsL[ARTL_ART_file_type_770] = ARTL_ART_file_type;
  artKindOfs[ARTL_ART_file_type_770] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_file_type_772] = "file_type ::= 'file'  'of'  component_type .";
  artLabelStrings[ARTL_ART_file_type_772] = "";
  artlhsL[ARTL_ART_file_type_772] = ARTL_ART_file_type;
  artSlotInstanceOfs[ARTL_ART_file_type_772] = ARTL_ART_component_type;
  artKindOfs[ARTL_ART_file_type_772] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_file_type_772] = true;
  arteoR_pL[ARTL_ART_file_type_772] = true;
  artPopD[ARTL_ART_file_type_772] = true;
}

public void artTableInitialiser_ART_final_value() {
  artLabelInternalStrings[ARTL_ART_final_value] = "final_value";
  artLabelStrings[ARTL_ART_final_value] = "final_value";
  artKindOfs[ARTL_ART_final_value] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_final_value_774] = "final_value ::= . expression ";
  artLabelStrings[ARTL_ART_final_value_774] = "";
  artlhsL[ARTL_ART_final_value_774] = ARTL_ART_final_value;
  artKindOfs[ARTL_ART_final_value_774] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_final_value_776] = "final_value ::= expression .";
  artLabelStrings[ARTL_ART_final_value_776] = "";
  artlhsL[ARTL_ART_final_value_776] = ARTL_ART_final_value;
  artSlotInstanceOfs[ARTL_ART_final_value_776] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_final_value_776] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_final_value_776] = true;
  arteoR_pL[ARTL_ART_final_value_776] = true;
  artPopD[ARTL_ART_final_value_776] = true;
}

public void artTableInitialiser_ART_fixed_part() {
  artLabelInternalStrings[ARTL_ART_fixed_part] = "fixed_part";
  artLabelStrings[ARTL_ART_fixed_part] = "fixed_part";
  artKindOfs[ARTL_ART_fixed_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_fixed_part_728] = "fixed_part ::= . record_section ";
  artLabelStrings[ARTL_ART_fixed_part_728] = "";
  artlhsL[ARTL_ART_fixed_part_728] = ARTL_ART_fixed_part;
  artKindOfs[ARTL_ART_fixed_part_728] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_fixed_part_730] = "fixed_part ::= record_section .";
  artLabelStrings[ARTL_ART_fixed_part_730] = "";
  artlhsL[ARTL_ART_fixed_part_730] = ARTL_ART_fixed_part;
  artSlotInstanceOfs[ARTL_ART_fixed_part_730] = ARTL_ART_record_section;
  artKindOfs[ARTL_ART_fixed_part_730] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_fixed_part_730] = true;
  arteoR_pL[ARTL_ART_fixed_part_730] = true;
  artPopD[ARTL_ART_fixed_part_730] = true;
  artLabelInternalStrings[ARTL_ART_fixed_part_732] = "fixed_part ::= . fixed_part ';'  record_section ";
  artLabelStrings[ARTL_ART_fixed_part_732] = "";
  artlhsL[ARTL_ART_fixed_part_732] = ARTL_ART_fixed_part;
  artKindOfs[ARTL_ART_fixed_part_732] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_fixed_part_734] = "fixed_part ::= fixed_part . ';'  record_section ";
  artLabelStrings[ARTL_ART_fixed_part_734] = "";
  artlhsL[ARTL_ART_fixed_part_734] = ARTL_ART_fixed_part;
  artSlotInstanceOfs[ARTL_ART_fixed_part_734] = ARTL_ART_fixed_part;
  artKindOfs[ARTL_ART_fixed_part_734] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_fixed_part_734] = true;
  artLabelInternalStrings[ARTL_ART_fixed_part_735] = "fixed_part ::= fixed_part ';'  record_section ";
  artLabelStrings[ARTL_ART_fixed_part_735] = "";
  artlhsL[ARTL_ART_fixed_part_735] = ARTL_ART_fixed_part;
  artLabelInternalStrings[ARTL_ART_fixed_part_736] = "fixed_part ::= fixed_part ';'  . record_section ";
  artLabelStrings[ARTL_ART_fixed_part_736] = "";
  artlhsL[ARTL_ART_fixed_part_736] = ARTL_ART_fixed_part;
  artKindOfs[ARTL_ART_fixed_part_736] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_fixed_part_738] = "fixed_part ::= fixed_part ';'  record_section .";
  artLabelStrings[ARTL_ART_fixed_part_738] = "";
  artlhsL[ARTL_ART_fixed_part_738] = ARTL_ART_fixed_part;
  artSlotInstanceOfs[ARTL_ART_fixed_part_738] = ARTL_ART_record_section;
  artKindOfs[ARTL_ART_fixed_part_738] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_fixed_part_738] = true;
  arteoR_pL[ARTL_ART_fixed_part_738] = true;
  artPopD[ARTL_ART_fixed_part_738] = true;
}

public void artTableInitialiser_ART_for_statement() {
  artLabelInternalStrings[ARTL_ART_for_statement] = "for_statement";
  artLabelStrings[ARTL_ART_for_statement] = "for_statement";
  artKindOfs[ARTL_ART_for_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_for_statement_786] = "for_statement ::= . 'for'  control_variable ':='  initial_value for_statement_14 final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_786] = "";
  artlhsL[ARTL_ART_for_statement_786] = ARTL_ART_for_statement;
  artKindOfs[ARTL_ART_for_statement_786] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_for_statement_787] = "for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_787] = "";
  artlhsL[ARTL_ART_for_statement_787] = ARTL_ART_for_statement;
  artLabelInternalStrings[ARTL_ART_for_statement_788] = "for_statement ::= 'for'  . control_variable ':='  initial_value for_statement_14 final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_788] = "";
  artlhsL[ARTL_ART_for_statement_788] = ARTL_ART_for_statement;
  artKindOfs[ARTL_ART_for_statement_788] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_for_statement_788] = true;
  artLabelInternalStrings[ARTL_ART_for_statement_790] = "for_statement ::= 'for'  control_variable . ':='  initial_value for_statement_14 final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_790] = "";
  artlhsL[ARTL_ART_for_statement_790] = ARTL_ART_for_statement;
  artSlotInstanceOfs[ARTL_ART_for_statement_790] = ARTL_ART_control_variable;
  artKindOfs[ARTL_ART_for_statement_790] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_for_statement_791] = "for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_791] = "";
  artlhsL[ARTL_ART_for_statement_791] = ARTL_ART_for_statement;
  artLabelInternalStrings[ARTL_ART_for_statement_792] = "for_statement ::= 'for'  control_variable ':='  . initial_value for_statement_14 final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_792] = "";
  artlhsL[ARTL_ART_for_statement_792] = ARTL_ART_for_statement;
  artKindOfs[ARTL_ART_for_statement_792] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_for_statement_794] = "for_statement ::= 'for'  control_variable ':='  initial_value . for_statement_14 final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_794] = "";
  artlhsL[ARTL_ART_for_statement_794] = ARTL_ART_for_statement;
  artSlotInstanceOfs[ARTL_ART_for_statement_794] = ARTL_ART_initial_value;
  artKindOfs[ARTL_ART_for_statement_794] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_for_statement_796] = "for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 . final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_796] = "";
  artlhsL[ARTL_ART_for_statement_796] = ARTL_ART_for_statement;
  artSlotInstanceOfs[ARTL_ART_for_statement_796] = ARTL_ART_for_statement_14;
  artKindOfs[ARTL_ART_for_statement_796] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_for_statement_798] = "for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value . 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_798] = "";
  artlhsL[ARTL_ART_for_statement_798] = ARTL_ART_for_statement;
  artSlotInstanceOfs[ARTL_ART_for_statement_798] = ARTL_ART_final_value;
  artKindOfs[ARTL_ART_for_statement_798] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_for_statement_799] = "for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value 'do'  statement ";
  artLabelStrings[ARTL_ART_for_statement_799] = "";
  artlhsL[ARTL_ART_for_statement_799] = ARTL_ART_for_statement;
  artLabelInternalStrings[ARTL_ART_for_statement_800] = "for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value 'do'  . statement ";
  artLabelStrings[ARTL_ART_for_statement_800] = "";
  artlhsL[ARTL_ART_for_statement_800] = ARTL_ART_for_statement;
  artKindOfs[ARTL_ART_for_statement_800] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_for_statement_802] = "for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value 'do'  statement .";
  artLabelStrings[ARTL_ART_for_statement_802] = "";
  artlhsL[ARTL_ART_for_statement_802] = ARTL_ART_for_statement;
  artSlotInstanceOfs[ARTL_ART_for_statement_802] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_for_statement_802] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_for_statement_802] = true;
  arteoR_pL[ARTL_ART_for_statement_802] = true;
  artPopD[ARTL_ART_for_statement_802] = true;
}

public void artTableInitialiser_ART_for_statement_14() {
  artLabelInternalStrings[ARTL_ART_for_statement_14] = "for_statement_14";
  artLabelStrings[ARTL_ART_for_statement_14] = "for_statement_14";
  artKindOfs[ARTL_ART_for_statement_14] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_for_statement_14_808] = "for_statement_14 ::= . 'to'  ";
  artLabelStrings[ARTL_ART_for_statement_14_808] = "";
  artlhsL[ARTL_ART_for_statement_14_808] = ARTL_ART_for_statement_14;
  artKindOfs[ARTL_ART_for_statement_14_808] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_for_statement_14_808] = true;
  artLabelInternalStrings[ARTL_ART_for_statement_14_809] = "for_statement_14 ::= 'to'  ";
  artLabelStrings[ARTL_ART_for_statement_14_809] = "";
  artlhsL[ARTL_ART_for_statement_14_809] = ARTL_ART_for_statement_14;
  artPopD[ARTL_ART_for_statement_14_809] = true;
  artLabelInternalStrings[ARTL_ART_for_statement_14_810] = "for_statement_14 ::= 'to'  .";
  artLabelStrings[ARTL_ART_for_statement_14_810] = "";
  artlhsL[ARTL_ART_for_statement_14_810] = ARTL_ART_for_statement_14;
  artKindOfs[ARTL_ART_for_statement_14_810] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_for_statement_14_810] = true;
  arteoR_pL[ARTL_ART_for_statement_14_810] = true;
  artPopD[ARTL_ART_for_statement_14_810] = true;
  artLabelInternalStrings[ARTL_ART_for_statement_14_812] = "for_statement_14 ::= . 'downto'  ";
  artLabelStrings[ARTL_ART_for_statement_14_812] = "";
  artlhsL[ARTL_ART_for_statement_14_812] = ARTL_ART_for_statement_14;
  artKindOfs[ARTL_ART_for_statement_14_812] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_for_statement_14_812] = true;
  artLabelInternalStrings[ARTL_ART_for_statement_14_813] = "for_statement_14 ::= 'downto'  ";
  artLabelStrings[ARTL_ART_for_statement_14_813] = "";
  artlhsL[ARTL_ART_for_statement_14_813] = ARTL_ART_for_statement_14;
  artPopD[ARTL_ART_for_statement_14_813] = true;
  artLabelInternalStrings[ARTL_ART_for_statement_14_814] = "for_statement_14 ::= 'downto'  .";
  artLabelStrings[ARTL_ART_for_statement_14_814] = "";
  artlhsL[ARTL_ART_for_statement_14_814] = ARTL_ART_for_statement_14;
  artKindOfs[ARTL_ART_for_statement_14_814] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_for_statement_14_814] = true;
  arteoR_pL[ARTL_ART_for_statement_14_814] = true;
  artPopD[ARTL_ART_for_statement_14_814] = true;
}

public void artTableInitialiser_ART_formal_parameter_list() {
  artLabelInternalStrings[ARTL_ART_formal_parameter_list] = "formal_parameter_list";
  artLabelStrings[ARTL_ART_formal_parameter_list] = "formal_parameter_list";
  artKindOfs[ARTL_ART_formal_parameter_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_816] = "formal_parameter_list ::= . '('  formal_parameter_section formal_parameter_list_15 ')'  ";
  artLabelStrings[ARTL_ART_formal_parameter_list_816] = "";
  artlhsL[ARTL_ART_formal_parameter_list_816] = ARTL_ART_formal_parameter_list;
  artKindOfs[ARTL_ART_formal_parameter_list_816] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_817] = "formal_parameter_list ::= '('  formal_parameter_section formal_parameter_list_15 ')'  ";
  artLabelStrings[ARTL_ART_formal_parameter_list_817] = "";
  artlhsL[ARTL_ART_formal_parameter_list_817] = ARTL_ART_formal_parameter_list;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_818] = "formal_parameter_list ::= '('  . formal_parameter_section formal_parameter_list_15 ')'  ";
  artLabelStrings[ARTL_ART_formal_parameter_list_818] = "";
  artlhsL[ARTL_ART_formal_parameter_list_818] = ARTL_ART_formal_parameter_list;
  artKindOfs[ARTL_ART_formal_parameter_list_818] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_formal_parameter_list_818] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_820] = "formal_parameter_list ::= '('  formal_parameter_section . formal_parameter_list_15 ')'  ";
  artLabelStrings[ARTL_ART_formal_parameter_list_820] = "";
  artlhsL[ARTL_ART_formal_parameter_list_820] = ARTL_ART_formal_parameter_list;
  artSlotInstanceOfs[ARTL_ART_formal_parameter_list_820] = ARTL_ART_formal_parameter_section;
  artKindOfs[ARTL_ART_formal_parameter_list_820] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_822] = "formal_parameter_list ::= '('  formal_parameter_section formal_parameter_list_15 . ')'  ";
  artLabelStrings[ARTL_ART_formal_parameter_list_822] = "";
  artlhsL[ARTL_ART_formal_parameter_list_822] = ARTL_ART_formal_parameter_list;
  artSlotInstanceOfs[ARTL_ART_formal_parameter_list_822] = ARTL_ART_formal_parameter_list_15;
  artKindOfs[ARTL_ART_formal_parameter_list_822] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_formal_parameter_list_822] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_823] = "formal_parameter_list ::= '('  formal_parameter_section formal_parameter_list_15 ')'  ";
  artLabelStrings[ARTL_ART_formal_parameter_list_823] = "";
  artlhsL[ARTL_ART_formal_parameter_list_823] = ARTL_ART_formal_parameter_list;
  artPopD[ARTL_ART_formal_parameter_list_823] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_824] = "formal_parameter_list ::= '('  formal_parameter_section formal_parameter_list_15 ')'  .";
  artLabelStrings[ARTL_ART_formal_parameter_list_824] = "";
  artlhsL[ARTL_ART_formal_parameter_list_824] = ARTL_ART_formal_parameter_list;
  artKindOfs[ARTL_ART_formal_parameter_list_824] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_formal_parameter_list_824] = true;
  arteoR_pL[ARTL_ART_formal_parameter_list_824] = true;
  artPopD[ARTL_ART_formal_parameter_list_824] = true;
}

public void artTableInitialiser_ART_formal_parameter_list_15() {
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_15] = "formal_parameter_list_15";
  artLabelStrings[ARTL_ART_formal_parameter_list_15] = "formal_parameter_list_15";
  artKindOfs[ARTL_ART_formal_parameter_list_15] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_15_842] = "formal_parameter_list_15 ::= . # ";
  artLabelStrings[ARTL_ART_formal_parameter_list_15_842] = "";
  artlhsL[ARTL_ART_formal_parameter_list_15_842] = ARTL_ART_formal_parameter_list_15;
  artKindOfs[ARTL_ART_formal_parameter_list_15_842] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_formal_parameter_list_15_842] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_15_844] = "formal_parameter_list_15 ::= # .";
  artLabelStrings[ARTL_ART_formal_parameter_list_15_844] = "";
  artlhsL[ARTL_ART_formal_parameter_list_15_844] = ARTL_ART_formal_parameter_list_15;
  artKindOfs[ARTL_ART_formal_parameter_list_15_844] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_formal_parameter_list_15_844] = true;
  arteoR_pL[ARTL_ART_formal_parameter_list_15_844] = true;
  artPopD[ARTL_ART_formal_parameter_list_15_844] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_15_846] = "formal_parameter_list_15 ::= . formal_parameter_list_15 ';'  formal_parameter_section ";
  artLabelStrings[ARTL_ART_formal_parameter_list_15_846] = "";
  artlhsL[ARTL_ART_formal_parameter_list_15_846] = ARTL_ART_formal_parameter_list_15;
  artKindOfs[ARTL_ART_formal_parameter_list_15_846] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_15_848] = "formal_parameter_list_15 ::= formal_parameter_list_15 . ';'  formal_parameter_section ";
  artLabelStrings[ARTL_ART_formal_parameter_list_15_848] = "";
  artlhsL[ARTL_ART_formal_parameter_list_15_848] = ARTL_ART_formal_parameter_list_15;
  artSlotInstanceOfs[ARTL_ART_formal_parameter_list_15_848] = ARTL_ART_formal_parameter_list_15;
  artKindOfs[ARTL_ART_formal_parameter_list_15_848] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_formal_parameter_list_15_848] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_15_849] = "formal_parameter_list_15 ::= formal_parameter_list_15 ';'  formal_parameter_section ";
  artLabelStrings[ARTL_ART_formal_parameter_list_15_849] = "";
  artlhsL[ARTL_ART_formal_parameter_list_15_849] = ARTL_ART_formal_parameter_list_15;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_15_850] = "formal_parameter_list_15 ::= formal_parameter_list_15 ';'  . formal_parameter_section ";
  artLabelStrings[ARTL_ART_formal_parameter_list_15_850] = "";
  artlhsL[ARTL_ART_formal_parameter_list_15_850] = ARTL_ART_formal_parameter_list_15;
  artKindOfs[ARTL_ART_formal_parameter_list_15_850] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_formal_parameter_list_15_852] = "formal_parameter_list_15 ::= formal_parameter_list_15 ';'  formal_parameter_section .";
  artLabelStrings[ARTL_ART_formal_parameter_list_15_852] = "";
  artlhsL[ARTL_ART_formal_parameter_list_15_852] = ARTL_ART_formal_parameter_list_15;
  artSlotInstanceOfs[ARTL_ART_formal_parameter_list_15_852] = ARTL_ART_formal_parameter_section;
  artKindOfs[ARTL_ART_formal_parameter_list_15_852] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_formal_parameter_list_15_852] = true;
  arteoR_pL[ARTL_ART_formal_parameter_list_15_852] = true;
  artPopD[ARTL_ART_formal_parameter_list_15_852] = true;
}

public void artTableInitialiser_ART_formal_parameter_section() {
  artLabelInternalStrings[ARTL_ART_formal_parameter_section] = "formal_parameter_section";
  artLabelStrings[ARTL_ART_formal_parameter_section] = "formal_parameter_section";
  artKindOfs[ARTL_ART_formal_parameter_section] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_formal_parameter_section_826] = "formal_parameter_section ::= . value_parameter_specification ";
  artLabelStrings[ARTL_ART_formal_parameter_section_826] = "";
  artlhsL[ARTL_ART_formal_parameter_section_826] = ARTL_ART_formal_parameter_section;
  artKindOfs[ARTL_ART_formal_parameter_section_826] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_formal_parameter_section_828] = "formal_parameter_section ::= value_parameter_specification .";
  artLabelStrings[ARTL_ART_formal_parameter_section_828] = "";
  artlhsL[ARTL_ART_formal_parameter_section_828] = ARTL_ART_formal_parameter_section;
  artSlotInstanceOfs[ARTL_ART_formal_parameter_section_828] = ARTL_ART_value_parameter_specification;
  artKindOfs[ARTL_ART_formal_parameter_section_828] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_formal_parameter_section_828] = true;
  arteoR_pL[ARTL_ART_formal_parameter_section_828] = true;
  artPopD[ARTL_ART_formal_parameter_section_828] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_section_830] = "formal_parameter_section ::= . variable_parameter_specification ";
  artLabelStrings[ARTL_ART_formal_parameter_section_830] = "";
  artlhsL[ARTL_ART_formal_parameter_section_830] = ARTL_ART_formal_parameter_section;
  artKindOfs[ARTL_ART_formal_parameter_section_830] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_formal_parameter_section_832] = "formal_parameter_section ::= variable_parameter_specification .";
  artLabelStrings[ARTL_ART_formal_parameter_section_832] = "";
  artlhsL[ARTL_ART_formal_parameter_section_832] = ARTL_ART_formal_parameter_section;
  artSlotInstanceOfs[ARTL_ART_formal_parameter_section_832] = ARTL_ART_variable_parameter_specification;
  artKindOfs[ARTL_ART_formal_parameter_section_832] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_formal_parameter_section_832] = true;
  arteoR_pL[ARTL_ART_formal_parameter_section_832] = true;
  artPopD[ARTL_ART_formal_parameter_section_832] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_section_834] = "formal_parameter_section ::= . procedural_parameter_specification ";
  artLabelStrings[ARTL_ART_formal_parameter_section_834] = "";
  artlhsL[ARTL_ART_formal_parameter_section_834] = ARTL_ART_formal_parameter_section;
  artKindOfs[ARTL_ART_formal_parameter_section_834] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_formal_parameter_section_836] = "formal_parameter_section ::= procedural_parameter_specification .";
  artLabelStrings[ARTL_ART_formal_parameter_section_836] = "";
  artlhsL[ARTL_ART_formal_parameter_section_836] = ARTL_ART_formal_parameter_section;
  artSlotInstanceOfs[ARTL_ART_formal_parameter_section_836] = ARTL_ART_procedural_parameter_specification;
  artKindOfs[ARTL_ART_formal_parameter_section_836] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_formal_parameter_section_836] = true;
  arteoR_pL[ARTL_ART_formal_parameter_section_836] = true;
  artPopD[ARTL_ART_formal_parameter_section_836] = true;
  artLabelInternalStrings[ARTL_ART_formal_parameter_section_838] = "formal_parameter_section ::= . functional_parameter_specification ";
  artLabelStrings[ARTL_ART_formal_parameter_section_838] = "";
  artlhsL[ARTL_ART_formal_parameter_section_838] = ARTL_ART_formal_parameter_section;
  artKindOfs[ARTL_ART_formal_parameter_section_838] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_formal_parameter_section_840] = "formal_parameter_section ::= functional_parameter_specification .";
  artLabelStrings[ARTL_ART_formal_parameter_section_840] = "";
  artlhsL[ARTL_ART_formal_parameter_section_840] = ARTL_ART_formal_parameter_section;
  artSlotInstanceOfs[ARTL_ART_formal_parameter_section_840] = ARTL_ART_functional_parameter_specification;
  artKindOfs[ARTL_ART_formal_parameter_section_840] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_formal_parameter_section_840] = true;
  arteoR_pL[ARTL_ART_formal_parameter_section_840] = true;
  artPopD[ARTL_ART_formal_parameter_section_840] = true;
}

public void artTableInitialiser_ART_fractional_part() {
  artLabelInternalStrings[ARTL_ART_fractional_part] = "fractional_part";
  artLabelStrings[ARTL_ART_fractional_part] = "fractional_part";
  artKindOfs[ARTL_ART_fractional_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_fractional_part_880] = "fractional_part ::= . digit_sequence ";
  artLabelStrings[ARTL_ART_fractional_part_880] = "";
  artlhsL[ARTL_ART_fractional_part_880] = ARTL_ART_fractional_part;
  artKindOfs[ARTL_ART_fractional_part_880] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_fractional_part_882] = "fractional_part ::= digit_sequence .";
  artLabelStrings[ARTL_ART_fractional_part_882] = "";
  artlhsL[ARTL_ART_fractional_part_882] = ARTL_ART_fractional_part;
  artSlotInstanceOfs[ARTL_ART_fractional_part_882] = ARTL_ART_digit_sequence;
  artKindOfs[ARTL_ART_fractional_part_882] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_fractional_part_882] = true;
  arteoR_pL[ARTL_ART_fractional_part_882] = true;
  artPopD[ARTL_ART_fractional_part_882] = true;
}

public void artTableInitialiser_ART_function_ID() {
  artLabelInternalStrings[ARTL_ART_function_ID] = "function_ID";
  artLabelStrings[ARTL_ART_function_ID] = "function_ID";
  artKindOfs[ARTL_ART_function_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_function_ID_144] = "function_ID ::= . 'function_ID'  ";
  artLabelStrings[ARTL_ART_function_ID_144] = "";
  artlhsL[ARTL_ART_function_ID_144] = ARTL_ART_function_ID;
  artKindOfs[ARTL_ART_function_ID_144] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_function_ID_144] = true;
  artLabelInternalStrings[ARTL_ART_function_ID_145] = "function_ID ::= 'function_ID'  ";
  artLabelStrings[ARTL_ART_function_ID_145] = "";
  artlhsL[ARTL_ART_function_ID_145] = ARTL_ART_function_ID;
  artPopD[ARTL_ART_function_ID_145] = true;
  artLabelInternalStrings[ARTL_ART_function_ID_146] = "function_ID ::= 'function_ID'  .";
  artLabelStrings[ARTL_ART_function_ID_146] = "";
  artlhsL[ARTL_ART_function_ID_146] = ARTL_ART_function_ID;
  artKindOfs[ARTL_ART_function_ID_146] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_ID_146] = true;
  arteoR_pL[ARTL_ART_function_ID_146] = true;
  artPopD[ARTL_ART_function_ID_146] = true;
}

public void artTableInitialiser_ART_function_block() {
  artLabelInternalStrings[ARTL_ART_function_block] = "function_block";
  artLabelStrings[ARTL_ART_function_block] = "function_block";
  artKindOfs[ARTL_ART_function_block] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_function_block_884] = "function_block ::= . block ";
  artLabelStrings[ARTL_ART_function_block_884] = "";
  artlhsL[ARTL_ART_function_block_884] = ARTL_ART_function_block;
  artKindOfs[ARTL_ART_function_block_884] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_block_886] = "function_block ::= block .";
  artLabelStrings[ARTL_ART_function_block_886] = "";
  artlhsL[ARTL_ART_function_block_886] = ARTL_ART_function_block;
  artSlotInstanceOfs[ARTL_ART_function_block_886] = ARTL_ART_block;
  artKindOfs[ARTL_ART_function_block_886] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_block_886] = true;
  arteoR_pL[ARTL_ART_function_block_886] = true;
  artPopD[ARTL_ART_function_block_886] = true;
}

public void artTableInitialiser_ART_function_declaration() {
  artLabelInternalStrings[ARTL_ART_function_declaration] = "function_declaration";
  artLabelStrings[ARTL_ART_function_declaration] = "function_declaration";
  artKindOfs[ARTL_ART_function_declaration] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_function_declaration_888] = "function_declaration ::= . function_heading ';'  directive ";
  artLabelStrings[ARTL_ART_function_declaration_888] = "";
  artlhsL[ARTL_ART_function_declaration_888] = ARTL_ART_function_declaration;
  artKindOfs[ARTL_ART_function_declaration_888] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_declaration_890] = "function_declaration ::= function_heading . ';'  directive ";
  artLabelStrings[ARTL_ART_function_declaration_890] = "";
  artlhsL[ARTL_ART_function_declaration_890] = ARTL_ART_function_declaration;
  artSlotInstanceOfs[ARTL_ART_function_declaration_890] = ARTL_ART_function_heading;
  artKindOfs[ARTL_ART_function_declaration_890] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_function_declaration_890] = true;
  artLabelInternalStrings[ARTL_ART_function_declaration_891] = "function_declaration ::= function_heading ';'  directive ";
  artLabelStrings[ARTL_ART_function_declaration_891] = "";
  artlhsL[ARTL_ART_function_declaration_891] = ARTL_ART_function_declaration;
  artLabelInternalStrings[ARTL_ART_function_declaration_892] = "function_declaration ::= function_heading ';'  . directive ";
  artLabelStrings[ARTL_ART_function_declaration_892] = "";
  artlhsL[ARTL_ART_function_declaration_892] = ARTL_ART_function_declaration;
  artKindOfs[ARTL_ART_function_declaration_892] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_declaration_894] = "function_declaration ::= function_heading ';'  directive .";
  artLabelStrings[ARTL_ART_function_declaration_894] = "";
  artlhsL[ARTL_ART_function_declaration_894] = ARTL_ART_function_declaration;
  artSlotInstanceOfs[ARTL_ART_function_declaration_894] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_function_declaration_894] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_declaration_894] = true;
  arteoR_pL[ARTL_ART_function_declaration_894] = true;
  artPopD[ARTL_ART_function_declaration_894] = true;
  artLabelInternalStrings[ARTL_ART_function_declaration_896] = "function_declaration ::= . function_identification ';'  function_block ";
  artLabelStrings[ARTL_ART_function_declaration_896] = "";
  artlhsL[ARTL_ART_function_declaration_896] = ARTL_ART_function_declaration;
  artKindOfs[ARTL_ART_function_declaration_896] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_declaration_898] = "function_declaration ::= function_identification . ';'  function_block ";
  artLabelStrings[ARTL_ART_function_declaration_898] = "";
  artlhsL[ARTL_ART_function_declaration_898] = ARTL_ART_function_declaration;
  artSlotInstanceOfs[ARTL_ART_function_declaration_898] = ARTL_ART_function_identification;
  artKindOfs[ARTL_ART_function_declaration_898] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_function_declaration_898] = true;
  artLabelInternalStrings[ARTL_ART_function_declaration_899] = "function_declaration ::= function_identification ';'  function_block ";
  artLabelStrings[ARTL_ART_function_declaration_899] = "";
  artlhsL[ARTL_ART_function_declaration_899] = ARTL_ART_function_declaration;
  artLabelInternalStrings[ARTL_ART_function_declaration_900] = "function_declaration ::= function_identification ';'  . function_block ";
  artLabelStrings[ARTL_ART_function_declaration_900] = "";
  artlhsL[ARTL_ART_function_declaration_900] = ARTL_ART_function_declaration;
  artKindOfs[ARTL_ART_function_declaration_900] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_declaration_902] = "function_declaration ::= function_identification ';'  function_block .";
  artLabelStrings[ARTL_ART_function_declaration_902] = "";
  artlhsL[ARTL_ART_function_declaration_902] = ARTL_ART_function_declaration;
  artSlotInstanceOfs[ARTL_ART_function_declaration_902] = ARTL_ART_function_block;
  artKindOfs[ARTL_ART_function_declaration_902] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_declaration_902] = true;
  arteoR_pL[ARTL_ART_function_declaration_902] = true;
  artPopD[ARTL_ART_function_declaration_902] = true;
  artLabelInternalStrings[ARTL_ART_function_declaration_904] = "function_declaration ::= . function_heading ';'  function_block ";
  artLabelStrings[ARTL_ART_function_declaration_904] = "";
  artlhsL[ARTL_ART_function_declaration_904] = ARTL_ART_function_declaration;
  artKindOfs[ARTL_ART_function_declaration_904] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_declaration_906] = "function_declaration ::= function_heading . ';'  function_block ";
  artLabelStrings[ARTL_ART_function_declaration_906] = "";
  artlhsL[ARTL_ART_function_declaration_906] = ARTL_ART_function_declaration;
  artSlotInstanceOfs[ARTL_ART_function_declaration_906] = ARTL_ART_function_heading;
  artKindOfs[ARTL_ART_function_declaration_906] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_function_declaration_906] = true;
  artLabelInternalStrings[ARTL_ART_function_declaration_907] = "function_declaration ::= function_heading ';'  function_block ";
  artLabelStrings[ARTL_ART_function_declaration_907] = "";
  artlhsL[ARTL_ART_function_declaration_907] = ARTL_ART_function_declaration;
  artLabelInternalStrings[ARTL_ART_function_declaration_908] = "function_declaration ::= function_heading ';'  . function_block ";
  artLabelStrings[ARTL_ART_function_declaration_908] = "";
  artlhsL[ARTL_ART_function_declaration_908] = ARTL_ART_function_declaration;
  artKindOfs[ARTL_ART_function_declaration_908] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_declaration_910] = "function_declaration ::= function_heading ';'  function_block .";
  artLabelStrings[ARTL_ART_function_declaration_910] = "";
  artlhsL[ARTL_ART_function_declaration_910] = ARTL_ART_function_declaration;
  artSlotInstanceOfs[ARTL_ART_function_declaration_910] = ARTL_ART_function_block;
  artKindOfs[ARTL_ART_function_declaration_910] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_declaration_910] = true;
  arteoR_pL[ARTL_ART_function_declaration_910] = true;
  artPopD[ARTL_ART_function_declaration_910] = true;
}

public void artTableInitialiser_ART_function_designator() {
  artLabelInternalStrings[ARTL_ART_function_designator] = "function_designator";
  artLabelStrings[ARTL_ART_function_designator] = "function_designator";
  artKindOfs[ARTL_ART_function_designator] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_function_designator_660] = "function_designator ::= . function_ID function_designator_16 ";
  artLabelStrings[ARTL_ART_function_designator_660] = "";
  artlhsL[ARTL_ART_function_designator_660] = ARTL_ART_function_designator;
  artKindOfs[ARTL_ART_function_designator_660] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_designator_662] = "function_designator ::= function_ID . function_designator_16 ";
  artLabelStrings[ARTL_ART_function_designator_662] = "";
  artlhsL[ARTL_ART_function_designator_662] = ARTL_ART_function_designator;
  artSlotInstanceOfs[ARTL_ART_function_designator_662] = ARTL_ART_function_ID;
  artKindOfs[ARTL_ART_function_designator_662] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_function_designator_662] = true;
  artLabelInternalStrings[ARTL_ART_function_designator_664] = "function_designator ::= function_ID function_designator_16 .";
  artLabelStrings[ARTL_ART_function_designator_664] = "";
  artlhsL[ARTL_ART_function_designator_664] = ARTL_ART_function_designator;
  artSlotInstanceOfs[ARTL_ART_function_designator_664] = ARTL_ART_function_designator_16;
  artKindOfs[ARTL_ART_function_designator_664] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_designator_664] = true;
  arteoR_pL[ARTL_ART_function_designator_664] = true;
  artPopD[ARTL_ART_function_designator_664] = true;
}

public void artTableInitialiser_ART_function_designator_16() {
  artLabelInternalStrings[ARTL_ART_function_designator_16] = "function_designator_16";
  artLabelStrings[ARTL_ART_function_designator_16] = "function_designator_16";
  artKindOfs[ARTL_ART_function_designator_16] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_function_designator_16_930] = "function_designator_16 ::= . # ";
  artLabelStrings[ARTL_ART_function_designator_16_930] = "";
  artlhsL[ARTL_ART_function_designator_16_930] = ARTL_ART_function_designator_16;
  artKindOfs[ARTL_ART_function_designator_16_930] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_function_designator_16_930] = true;
  artLabelInternalStrings[ARTL_ART_function_designator_16_932] = "function_designator_16 ::= # .";
  artLabelStrings[ARTL_ART_function_designator_16_932] = "";
  artlhsL[ARTL_ART_function_designator_16_932] = ARTL_ART_function_designator_16;
  artKindOfs[ARTL_ART_function_designator_16_932] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_designator_16_932] = true;
  arteoR_pL[ARTL_ART_function_designator_16_932] = true;
  artPopD[ARTL_ART_function_designator_16_932] = true;
  artLabelInternalStrings[ARTL_ART_function_designator_16_934] = "function_designator_16 ::= . actual_parameter_list ";
  artLabelStrings[ARTL_ART_function_designator_16_934] = "";
  artlhsL[ARTL_ART_function_designator_16_934] = ARTL_ART_function_designator_16;
  artKindOfs[ARTL_ART_function_designator_16_934] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_designator_16_936] = "function_designator_16 ::= actual_parameter_list .";
  artLabelStrings[ARTL_ART_function_designator_16_936] = "";
  artlhsL[ARTL_ART_function_designator_16_936] = ARTL_ART_function_designator_16;
  artSlotInstanceOfs[ARTL_ART_function_designator_16_936] = ARTL_ART_actual_parameter_list;
  artKindOfs[ARTL_ART_function_designator_16_936] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_designator_16_936] = true;
  arteoR_pL[ARTL_ART_function_designator_16_936] = true;
  artPopD[ARTL_ART_function_designator_16_936] = true;
}

public void artTableInitialiser_ART_function_heading() {
  artLabelInternalStrings[ARTL_ART_function_heading] = "function_heading";
  artLabelStrings[ARTL_ART_function_heading] = "function_heading";
  artKindOfs[ARTL_ART_function_heading] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_function_heading_912] = "function_heading ::= . 'function'  ID function_heading_17 ':'  result_type ";
  artLabelStrings[ARTL_ART_function_heading_912] = "";
  artlhsL[ARTL_ART_function_heading_912] = ARTL_ART_function_heading;
  artKindOfs[ARTL_ART_function_heading_912] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_heading_913] = "function_heading ::= 'function'  ID function_heading_17 ':'  result_type ";
  artLabelStrings[ARTL_ART_function_heading_913] = "";
  artlhsL[ARTL_ART_function_heading_913] = ARTL_ART_function_heading;
  artLabelInternalStrings[ARTL_ART_function_heading_914] = "function_heading ::= 'function'  . ID function_heading_17 ':'  result_type ";
  artLabelStrings[ARTL_ART_function_heading_914] = "";
  artlhsL[ARTL_ART_function_heading_914] = ARTL_ART_function_heading;
  artKindOfs[ARTL_ART_function_heading_914] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_function_heading_914] = true;
  artLabelInternalStrings[ARTL_ART_function_heading_916] = "function_heading ::= 'function'  ID . function_heading_17 ':'  result_type ";
  artLabelStrings[ARTL_ART_function_heading_916] = "";
  artlhsL[ARTL_ART_function_heading_916] = ARTL_ART_function_heading;
  artSlotInstanceOfs[ARTL_ART_function_heading_916] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_function_heading_916] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_heading_918] = "function_heading ::= 'function'  ID function_heading_17 . ':'  result_type ";
  artLabelStrings[ARTL_ART_function_heading_918] = "";
  artlhsL[ARTL_ART_function_heading_918] = ARTL_ART_function_heading;
  artSlotInstanceOfs[ARTL_ART_function_heading_918] = ARTL_ART_function_heading_17;
  artKindOfs[ARTL_ART_function_heading_918] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_heading_919] = "function_heading ::= 'function'  ID function_heading_17 ':'  result_type ";
  artLabelStrings[ARTL_ART_function_heading_919] = "";
  artlhsL[ARTL_ART_function_heading_919] = ARTL_ART_function_heading;
  artLabelInternalStrings[ARTL_ART_function_heading_920] = "function_heading ::= 'function'  ID function_heading_17 ':'  . result_type ";
  artLabelStrings[ARTL_ART_function_heading_920] = "";
  artlhsL[ARTL_ART_function_heading_920] = ARTL_ART_function_heading;
  artKindOfs[ARTL_ART_function_heading_920] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_heading_922] = "function_heading ::= 'function'  ID function_heading_17 ':'  result_type .";
  artLabelStrings[ARTL_ART_function_heading_922] = "";
  artlhsL[ARTL_ART_function_heading_922] = ARTL_ART_function_heading;
  artSlotInstanceOfs[ARTL_ART_function_heading_922] = ARTL_ART_result_type;
  artKindOfs[ARTL_ART_function_heading_922] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_heading_922] = true;
  arteoR_pL[ARTL_ART_function_heading_922] = true;
  artPopD[ARTL_ART_function_heading_922] = true;
}

public void artTableInitialiser_ART_function_heading_17() {
  artLabelInternalStrings[ARTL_ART_function_heading_17] = "function_heading_17";
  artLabelStrings[ARTL_ART_function_heading_17] = "function_heading_17";
  artKindOfs[ARTL_ART_function_heading_17] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_function_heading_17_938] = "function_heading_17 ::= . # ";
  artLabelStrings[ARTL_ART_function_heading_17_938] = "";
  artlhsL[ARTL_ART_function_heading_17_938] = ARTL_ART_function_heading_17;
  artKindOfs[ARTL_ART_function_heading_17_938] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_function_heading_17_938] = true;
  artLabelInternalStrings[ARTL_ART_function_heading_17_940] = "function_heading_17 ::= # .";
  artLabelStrings[ARTL_ART_function_heading_17_940] = "";
  artlhsL[ARTL_ART_function_heading_17_940] = ARTL_ART_function_heading_17;
  artKindOfs[ARTL_ART_function_heading_17_940] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_heading_17_940] = true;
  arteoR_pL[ARTL_ART_function_heading_17_940] = true;
  artPopD[ARTL_ART_function_heading_17_940] = true;
  artLabelInternalStrings[ARTL_ART_function_heading_17_942] = "function_heading_17 ::= . formal_parameter_list ";
  artLabelStrings[ARTL_ART_function_heading_17_942] = "";
  artlhsL[ARTL_ART_function_heading_17_942] = ARTL_ART_function_heading_17;
  artKindOfs[ARTL_ART_function_heading_17_942] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_heading_17_944] = "function_heading_17 ::= formal_parameter_list .";
  artLabelStrings[ARTL_ART_function_heading_17_944] = "";
  artlhsL[ARTL_ART_function_heading_17_944] = ARTL_ART_function_heading_17;
  artSlotInstanceOfs[ARTL_ART_function_heading_17_944] = ARTL_ART_formal_parameter_list;
  artKindOfs[ARTL_ART_function_heading_17_944] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_heading_17_944] = true;
  arteoR_pL[ARTL_ART_function_heading_17_944] = true;
  artPopD[ARTL_ART_function_heading_17_944] = true;
}

public void artTableInitialiser_ART_function_identification() {
  artLabelInternalStrings[ARTL_ART_function_identification] = "function_identification";
  artLabelStrings[ARTL_ART_function_identification] = "function_identification";
  artKindOfs[ARTL_ART_function_identification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_function_identification_924] = "function_identification ::= . 'function'  function_ID ";
  artLabelStrings[ARTL_ART_function_identification_924] = "";
  artlhsL[ARTL_ART_function_identification_924] = ARTL_ART_function_identification;
  artKindOfs[ARTL_ART_function_identification_924] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_function_identification_925] = "function_identification ::= 'function'  function_ID ";
  artLabelStrings[ARTL_ART_function_identification_925] = "";
  artlhsL[ARTL_ART_function_identification_925] = ARTL_ART_function_identification;
  artLabelInternalStrings[ARTL_ART_function_identification_926] = "function_identification ::= 'function'  . function_ID ";
  artLabelStrings[ARTL_ART_function_identification_926] = "";
  artlhsL[ARTL_ART_function_identification_926] = ARTL_ART_function_identification;
  artKindOfs[ARTL_ART_function_identification_926] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_function_identification_926] = true;
  artLabelInternalStrings[ARTL_ART_function_identification_928] = "function_identification ::= 'function'  function_ID .";
  artLabelStrings[ARTL_ART_function_identification_928] = "";
  artlhsL[ARTL_ART_function_identification_928] = ARTL_ART_function_identification;
  artSlotInstanceOfs[ARTL_ART_function_identification_928] = ARTL_ART_function_ID;
  artKindOfs[ARTL_ART_function_identification_928] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_function_identification_928] = true;
  arteoR_pL[ARTL_ART_function_identification_928] = true;
  artPopD[ARTL_ART_function_identification_928] = true;
}

public void artTableInitialiser_ART_functional_parameter_specification() {
  artLabelInternalStrings[ARTL_ART_functional_parameter_specification] = "functional_parameter_specification";
  artLabelStrings[ARTL_ART_functional_parameter_specification] = "functional_parameter_specification";
  artKindOfs[ARTL_ART_functional_parameter_specification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_functional_parameter_specification_876] = "functional_parameter_specification ::= . function_heading ";
  artLabelStrings[ARTL_ART_functional_parameter_specification_876] = "";
  artlhsL[ARTL_ART_functional_parameter_specification_876] = ARTL_ART_functional_parameter_specification;
  artKindOfs[ARTL_ART_functional_parameter_specification_876] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_functional_parameter_specification_878] = "functional_parameter_specification ::= function_heading .";
  artLabelStrings[ARTL_ART_functional_parameter_specification_878] = "";
  artlhsL[ARTL_ART_functional_parameter_specification_878] = ARTL_ART_functional_parameter_specification;
  artSlotInstanceOfs[ARTL_ART_functional_parameter_specification_878] = ARTL_ART_function_heading;
  artKindOfs[ARTL_ART_functional_parameter_specification_878] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_functional_parameter_specification_878] = true;
  arteoR_pL[ARTL_ART_functional_parameter_specification_878] = true;
  artPopD[ARTL_ART_functional_parameter_specification_878] = true;
}

public void artTableInitialiser_ART_goto_statement() {
  artLabelInternalStrings[ARTL_ART_goto_statement] = "goto_statement";
  artLabelStrings[ARTL_ART_goto_statement] = "goto_statement";
  artKindOfs[ARTL_ART_goto_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_goto_statement_950] = "goto_statement ::= . 'goto'  label ";
  artLabelStrings[ARTL_ART_goto_statement_950] = "";
  artlhsL[ARTL_ART_goto_statement_950] = ARTL_ART_goto_statement;
  artKindOfs[ARTL_ART_goto_statement_950] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_goto_statement_951] = "goto_statement ::= 'goto'  label ";
  artLabelStrings[ARTL_ART_goto_statement_951] = "";
  artlhsL[ARTL_ART_goto_statement_951] = ARTL_ART_goto_statement;
  artLabelInternalStrings[ARTL_ART_goto_statement_952] = "goto_statement ::= 'goto'  . label ";
  artLabelStrings[ARTL_ART_goto_statement_952] = "";
  artlhsL[ARTL_ART_goto_statement_952] = ARTL_ART_goto_statement;
  artKindOfs[ARTL_ART_goto_statement_952] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_goto_statement_952] = true;
  artLabelInternalStrings[ARTL_ART_goto_statement_954] = "goto_statement ::= 'goto'  label .";
  artLabelStrings[ARTL_ART_goto_statement_954] = "";
  artlhsL[ARTL_ART_goto_statement_954] = ARTL_ART_goto_statement;
  artSlotInstanceOfs[ARTL_ART_goto_statement_954] = ARTL_ART_label;
  artKindOfs[ARTL_ART_goto_statement_954] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_goto_statement_954] = true;
  arteoR_pL[ARTL_ART_goto_statement_954] = true;
  artPopD[ARTL_ART_goto_statement_954] = true;
}

public void artTableInitialiser_ART_if_statement() {
  artLabelInternalStrings[ARTL_ART_if_statement] = "if_statement";
  artLabelStrings[ARTL_ART_if_statement] = "if_statement";
  artKindOfs[ARTL_ART_if_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_if_statement_362] = "if_statement ::= . 'if'  Boolean_expression 'then'  statement if_statement_19 ";
  artLabelStrings[ARTL_ART_if_statement_362] = "";
  artlhsL[ARTL_ART_if_statement_362] = ARTL_ART_if_statement;
  artKindOfs[ARTL_ART_if_statement_362] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_if_statement_363] = "if_statement ::= 'if'  Boolean_expression 'then'  statement if_statement_19 ";
  artLabelStrings[ARTL_ART_if_statement_363] = "";
  artlhsL[ARTL_ART_if_statement_363] = ARTL_ART_if_statement;
  artLabelInternalStrings[ARTL_ART_if_statement_364] = "if_statement ::= 'if'  . Boolean_expression 'then'  statement if_statement_19 ";
  artLabelStrings[ARTL_ART_if_statement_364] = "";
  artlhsL[ARTL_ART_if_statement_364] = ARTL_ART_if_statement;
  artKindOfs[ARTL_ART_if_statement_364] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_if_statement_364] = true;
  artLabelInternalStrings[ARTL_ART_if_statement_366] = "if_statement ::= 'if'  Boolean_expression . 'then'  statement if_statement_19 ";
  artLabelStrings[ARTL_ART_if_statement_366] = "";
  artlhsL[ARTL_ART_if_statement_366] = ARTL_ART_if_statement;
  artSlotInstanceOfs[ARTL_ART_if_statement_366] = ARTL_ART_Boolean_expression;
  artKindOfs[ARTL_ART_if_statement_366] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_if_statement_367] = "if_statement ::= 'if'  Boolean_expression 'then'  statement if_statement_19 ";
  artLabelStrings[ARTL_ART_if_statement_367] = "";
  artlhsL[ARTL_ART_if_statement_367] = ARTL_ART_if_statement;
  artLabelInternalStrings[ARTL_ART_if_statement_368] = "if_statement ::= 'if'  Boolean_expression 'then'  . statement if_statement_19 ";
  artLabelStrings[ARTL_ART_if_statement_368] = "";
  artlhsL[ARTL_ART_if_statement_368] = ARTL_ART_if_statement;
  artKindOfs[ARTL_ART_if_statement_368] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_if_statement_370] = "if_statement ::= 'if'  Boolean_expression 'then'  statement . if_statement_19 ";
  artLabelStrings[ARTL_ART_if_statement_370] = "";
  artlhsL[ARTL_ART_if_statement_370] = ARTL_ART_if_statement;
  artSlotInstanceOfs[ARTL_ART_if_statement_370] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_if_statement_370] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_if_statement_372] = "if_statement ::= 'if'  Boolean_expression 'then'  statement if_statement_19 .";
  artLabelStrings[ARTL_ART_if_statement_372] = "";
  artlhsL[ARTL_ART_if_statement_372] = ARTL_ART_if_statement;
  artSlotInstanceOfs[ARTL_ART_if_statement_372] = ARTL_ART_if_statement_19;
  artKindOfs[ARTL_ART_if_statement_372] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_if_statement_372] = true;
  arteoR_pL[ARTL_ART_if_statement_372] = true;
  artPopD[ARTL_ART_if_statement_372] = true;
}

public void artTableInitialiser_ART_if_statement_19() {
  artLabelInternalStrings[ARTL_ART_if_statement_19] = "if_statement_19";
  artLabelStrings[ARTL_ART_if_statement_19] = "if_statement_19";
  artKindOfs[ARTL_ART_if_statement_19] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_if_statement_19_972] = "if_statement_19 ::= . # ";
  artLabelStrings[ARTL_ART_if_statement_19_972] = "";
  artlhsL[ARTL_ART_if_statement_19_972] = ARTL_ART_if_statement_19;
  artKindOfs[ARTL_ART_if_statement_19_972] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_if_statement_19_972] = true;
  artLabelInternalStrings[ARTL_ART_if_statement_19_974] = "if_statement_19 ::= # .";
  artLabelStrings[ARTL_ART_if_statement_19_974] = "";
  artlhsL[ARTL_ART_if_statement_19_974] = ARTL_ART_if_statement_19;
  artKindOfs[ARTL_ART_if_statement_19_974] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_if_statement_19_974] = true;
  arteoR_pL[ARTL_ART_if_statement_19_974] = true;
  artPopD[ARTL_ART_if_statement_19_974] = true;
  artLabelInternalStrings[ARTL_ART_if_statement_19_976] = "if_statement_19 ::= . else_part ";
  artLabelStrings[ARTL_ART_if_statement_19_976] = "";
  artlhsL[ARTL_ART_if_statement_19_976] = ARTL_ART_if_statement_19;
  artKindOfs[ARTL_ART_if_statement_19_976] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_if_statement_19_978] = "if_statement_19 ::= else_part .";
  artLabelStrings[ARTL_ART_if_statement_19_978] = "";
  artlhsL[ARTL_ART_if_statement_19_978] = ARTL_ART_if_statement_19;
  artSlotInstanceOfs[ARTL_ART_if_statement_19_978] = ARTL_ART_else_part;
  artKindOfs[ARTL_ART_if_statement_19_978] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_if_statement_19_978] = true;
  arteoR_pL[ARTL_ART_if_statement_19_978] = true;
  artPopD[ARTL_ART_if_statement_19_978] = true;
}

public void artTableInitialiser_ART_index_expression() {
  artLabelInternalStrings[ARTL_ART_index_expression] = "index_expression";
  artLabelStrings[ARTL_ART_index_expression] = "index_expression";
  artKindOfs[ARTL_ART_index_expression] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_index_expression_980] = "index_expression ::= . expression ";
  artLabelStrings[ARTL_ART_index_expression_980] = "";
  artlhsL[ARTL_ART_index_expression_980] = ARTL_ART_index_expression;
  artKindOfs[ARTL_ART_index_expression_980] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_index_expression_982] = "index_expression ::= expression .";
  artLabelStrings[ARTL_ART_index_expression_982] = "";
  artlhsL[ARTL_ART_index_expression_982] = ARTL_ART_index_expression;
  artSlotInstanceOfs[ARTL_ART_index_expression_982] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_index_expression_982] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_index_expression_982] = true;
  arteoR_pL[ARTL_ART_index_expression_982] = true;
  artPopD[ARTL_ART_index_expression_982] = true;
}

public void artTableInitialiser_ART_index_type() {
  artLabelInternalStrings[ARTL_ART_index_type] = "index_type";
  artLabelStrings[ARTL_ART_index_type] = "index_type";
  artKindOfs[ARTL_ART_index_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_index_type_94] = "index_type ::= . ordinal_type ";
  artLabelStrings[ARTL_ART_index_type_94] = "";
  artlhsL[ARTL_ART_index_type_94] = ARTL_ART_index_type;
  artKindOfs[ARTL_ART_index_type_94] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_index_type_96] = "index_type ::= ordinal_type .";
  artLabelStrings[ARTL_ART_index_type_96] = "";
  artlhsL[ARTL_ART_index_type_96] = ARTL_ART_index_type;
  artSlotInstanceOfs[ARTL_ART_index_type_96] = ARTL_ART_ordinal_type;
  artKindOfs[ARTL_ART_index_type_96] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_index_type_96] = true;
  arteoR_pL[ARTL_ART_index_type_96] = true;
  artPopD[ARTL_ART_index_type_96] = true;
}

public void artTableInitialiser_ART_index_type_specification() {
  artLabelInternalStrings[ARTL_ART_index_type_specification] = "index_type_specification";
  artLabelStrings[ARTL_ART_index_type_specification] = "index_type_specification";
  artKindOfs[ARTL_ART_index_type_specification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_index_type_specification_984] = "index_type_specification ::= . ID '..'  ID ':'  ordinal_type_ID ";
  artLabelStrings[ARTL_ART_index_type_specification_984] = "";
  artlhsL[ARTL_ART_index_type_specification_984] = ARTL_ART_index_type_specification;
  artKindOfs[ARTL_ART_index_type_specification_984] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_index_type_specification_986] = "index_type_specification ::= ID . '..'  ID ':'  ordinal_type_ID ";
  artLabelStrings[ARTL_ART_index_type_specification_986] = "";
  artlhsL[ARTL_ART_index_type_specification_986] = ARTL_ART_index_type_specification;
  artSlotInstanceOfs[ARTL_ART_index_type_specification_986] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_index_type_specification_986] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_index_type_specification_986] = true;
  artLabelInternalStrings[ARTL_ART_index_type_specification_987] = "index_type_specification ::= ID '..'  ID ':'  ordinal_type_ID ";
  artLabelStrings[ARTL_ART_index_type_specification_987] = "";
  artlhsL[ARTL_ART_index_type_specification_987] = ARTL_ART_index_type_specification;
  artLabelInternalStrings[ARTL_ART_index_type_specification_988] = "index_type_specification ::= ID '..'  . ID ':'  ordinal_type_ID ";
  artLabelStrings[ARTL_ART_index_type_specification_988] = "";
  artlhsL[ARTL_ART_index_type_specification_988] = ARTL_ART_index_type_specification;
  artKindOfs[ARTL_ART_index_type_specification_988] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_index_type_specification_990] = "index_type_specification ::= ID '..'  ID . ':'  ordinal_type_ID ";
  artLabelStrings[ARTL_ART_index_type_specification_990] = "";
  artlhsL[ARTL_ART_index_type_specification_990] = ARTL_ART_index_type_specification;
  artSlotInstanceOfs[ARTL_ART_index_type_specification_990] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_index_type_specification_990] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_index_type_specification_991] = "index_type_specification ::= ID '..'  ID ':'  ordinal_type_ID ";
  artLabelStrings[ARTL_ART_index_type_specification_991] = "";
  artlhsL[ARTL_ART_index_type_specification_991] = ARTL_ART_index_type_specification;
  artLabelInternalStrings[ARTL_ART_index_type_specification_992] = "index_type_specification ::= ID '..'  ID ':'  . ordinal_type_ID ";
  artLabelStrings[ARTL_ART_index_type_specification_992] = "";
  artlhsL[ARTL_ART_index_type_specification_992] = ARTL_ART_index_type_specification;
  artKindOfs[ARTL_ART_index_type_specification_992] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_index_type_specification_994] = "index_type_specification ::= ID '..'  ID ':'  ordinal_type_ID .";
  artLabelStrings[ARTL_ART_index_type_specification_994] = "";
  artlhsL[ARTL_ART_index_type_specification_994] = ARTL_ART_index_type_specification;
  artSlotInstanceOfs[ARTL_ART_index_type_specification_994] = ARTL_ART_ordinal_type_ID;
  artKindOfs[ARTL_ART_index_type_specification_994] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_index_type_specification_994] = true;
  arteoR_pL[ARTL_ART_index_type_specification_994] = true;
  artPopD[ARTL_ART_index_type_specification_994] = true;
}

public void artTableInitialiser_ART_indexed_variable() {
  artLabelInternalStrings[ARTL_ART_indexed_variable] = "indexed_variable";
  artLabelStrings[ARTL_ART_indexed_variable] = "indexed_variable";
  artKindOfs[ARTL_ART_indexed_variable] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_indexed_variable_316] = "indexed_variable ::= . variable_access '['  index_expression indexed_variable_20 ']'  ";
  artLabelStrings[ARTL_ART_indexed_variable_316] = "";
  artlhsL[ARTL_ART_indexed_variable_316] = ARTL_ART_indexed_variable;
  artKindOfs[ARTL_ART_indexed_variable_316] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_indexed_variable_318] = "indexed_variable ::= variable_access . '['  index_expression indexed_variable_20 ']'  ";
  artLabelStrings[ARTL_ART_indexed_variable_318] = "";
  artlhsL[ARTL_ART_indexed_variable_318] = ARTL_ART_indexed_variable;
  artSlotInstanceOfs[ARTL_ART_indexed_variable_318] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_indexed_variable_318] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_indexed_variable_318] = true;
  artLabelInternalStrings[ARTL_ART_indexed_variable_319] = "indexed_variable ::= variable_access '['  index_expression indexed_variable_20 ']'  ";
  artLabelStrings[ARTL_ART_indexed_variable_319] = "";
  artlhsL[ARTL_ART_indexed_variable_319] = ARTL_ART_indexed_variable;
  artLabelInternalStrings[ARTL_ART_indexed_variable_320] = "indexed_variable ::= variable_access '['  . index_expression indexed_variable_20 ']'  ";
  artLabelStrings[ARTL_ART_indexed_variable_320] = "";
  artlhsL[ARTL_ART_indexed_variable_320] = ARTL_ART_indexed_variable;
  artKindOfs[ARTL_ART_indexed_variable_320] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_indexed_variable_322] = "indexed_variable ::= variable_access '['  index_expression . indexed_variable_20 ']'  ";
  artLabelStrings[ARTL_ART_indexed_variable_322] = "";
  artlhsL[ARTL_ART_indexed_variable_322] = ARTL_ART_indexed_variable;
  artSlotInstanceOfs[ARTL_ART_indexed_variable_322] = ARTL_ART_index_expression;
  artKindOfs[ARTL_ART_indexed_variable_322] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_indexed_variable_324] = "indexed_variable ::= variable_access '['  index_expression indexed_variable_20 . ']'  ";
  artLabelStrings[ARTL_ART_indexed_variable_324] = "";
  artlhsL[ARTL_ART_indexed_variable_324] = ARTL_ART_indexed_variable;
  artSlotInstanceOfs[ARTL_ART_indexed_variable_324] = ARTL_ART_indexed_variable_20;
  artKindOfs[ARTL_ART_indexed_variable_324] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_indexed_variable_324] = true;
  artLabelInternalStrings[ARTL_ART_indexed_variable_325] = "indexed_variable ::= variable_access '['  index_expression indexed_variable_20 ']'  ";
  artLabelStrings[ARTL_ART_indexed_variable_325] = "";
  artlhsL[ARTL_ART_indexed_variable_325] = ARTL_ART_indexed_variable;
  artPopD[ARTL_ART_indexed_variable_325] = true;
  artLabelInternalStrings[ARTL_ART_indexed_variable_326] = "indexed_variable ::= variable_access '['  index_expression indexed_variable_20 ']'  .";
  artLabelStrings[ARTL_ART_indexed_variable_326] = "";
  artlhsL[ARTL_ART_indexed_variable_326] = ARTL_ART_indexed_variable;
  artKindOfs[ARTL_ART_indexed_variable_326] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_indexed_variable_326] = true;
  arteoR_pL[ARTL_ART_indexed_variable_326] = true;
  artPopD[ARTL_ART_indexed_variable_326] = true;
}

public void artTableInitialiser_ART_indexed_variable_20() {
  artLabelInternalStrings[ARTL_ART_indexed_variable_20] = "indexed_variable_20";
  artLabelStrings[ARTL_ART_indexed_variable_20] = "indexed_variable_20";
  artKindOfs[ARTL_ART_indexed_variable_20] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_indexed_variable_20_1000] = "indexed_variable_20 ::= . # ";
  artLabelStrings[ARTL_ART_indexed_variable_20_1000] = "";
  artlhsL[ARTL_ART_indexed_variable_20_1000] = ARTL_ART_indexed_variable_20;
  artKindOfs[ARTL_ART_indexed_variable_20_1000] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_indexed_variable_20_1000] = true;
  artLabelInternalStrings[ARTL_ART_indexed_variable_20_1002] = "indexed_variable_20 ::= # .";
  artLabelStrings[ARTL_ART_indexed_variable_20_1002] = "";
  artlhsL[ARTL_ART_indexed_variable_20_1002] = ARTL_ART_indexed_variable_20;
  artKindOfs[ARTL_ART_indexed_variable_20_1002] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_indexed_variable_20_1002] = true;
  arteoR_pL[ARTL_ART_indexed_variable_20_1002] = true;
  artPopD[ARTL_ART_indexed_variable_20_1002] = true;
  artLabelInternalStrings[ARTL_ART_indexed_variable_20_1004] = "indexed_variable_20 ::= . indexed_variable_20 ','  index_expression ";
  artLabelStrings[ARTL_ART_indexed_variable_20_1004] = "";
  artlhsL[ARTL_ART_indexed_variable_20_1004] = ARTL_ART_indexed_variable_20;
  artKindOfs[ARTL_ART_indexed_variable_20_1004] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_indexed_variable_20_1006] = "indexed_variable_20 ::= indexed_variable_20 . ','  index_expression ";
  artLabelStrings[ARTL_ART_indexed_variable_20_1006] = "";
  artlhsL[ARTL_ART_indexed_variable_20_1006] = ARTL_ART_indexed_variable_20;
  artSlotInstanceOfs[ARTL_ART_indexed_variable_20_1006] = ARTL_ART_indexed_variable_20;
  artKindOfs[ARTL_ART_indexed_variable_20_1006] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_indexed_variable_20_1006] = true;
  artLabelInternalStrings[ARTL_ART_indexed_variable_20_1007] = "indexed_variable_20 ::= indexed_variable_20 ','  index_expression ";
  artLabelStrings[ARTL_ART_indexed_variable_20_1007] = "";
  artlhsL[ARTL_ART_indexed_variable_20_1007] = ARTL_ART_indexed_variable_20;
  artLabelInternalStrings[ARTL_ART_indexed_variable_20_1008] = "indexed_variable_20 ::= indexed_variable_20 ','  . index_expression ";
  artLabelStrings[ARTL_ART_indexed_variable_20_1008] = "";
  artlhsL[ARTL_ART_indexed_variable_20_1008] = ARTL_ART_indexed_variable_20;
  artKindOfs[ARTL_ART_indexed_variable_20_1008] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_indexed_variable_20_1010] = "indexed_variable_20 ::= indexed_variable_20 ','  index_expression .";
  artLabelStrings[ARTL_ART_indexed_variable_20_1010] = "";
  artlhsL[ARTL_ART_indexed_variable_20_1010] = ARTL_ART_indexed_variable_20;
  artSlotInstanceOfs[ARTL_ART_indexed_variable_20_1010] = ARTL_ART_index_expression;
  artKindOfs[ARTL_ART_indexed_variable_20_1010] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_indexed_variable_20_1010] = true;
  arteoR_pL[ARTL_ART_indexed_variable_20_1010] = true;
  artPopD[ARTL_ART_indexed_variable_20_1010] = true;
}

public void artTableInitialiser_ART_initial_value() {
  artLabelInternalStrings[ARTL_ART_initial_value] = "initial_value";
  artLabelStrings[ARTL_ART_initial_value] = "initial_value";
  artKindOfs[ARTL_ART_initial_value] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_initial_value_804] = "initial_value ::= . expression ";
  artLabelStrings[ARTL_ART_initial_value_804] = "";
  artlhsL[ARTL_ART_initial_value_804] = ARTL_ART_initial_value;
  artKindOfs[ARTL_ART_initial_value_804] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_initial_value_806] = "initial_value ::= expression .";
  artLabelStrings[ARTL_ART_initial_value_806] = "";
  artlhsL[ARTL_ART_initial_value_806] = ARTL_ART_initial_value;
  artSlotInstanceOfs[ARTL_ART_initial_value_806] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_initial_value_806] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_initial_value_806] = true;
  arteoR_pL[ARTL_ART_initial_value_806] = true;
  artPopD[ARTL_ART_initial_value_806] = true;
}

public void artTableInitialiser_ART_label() {
  artLabelInternalStrings[ARTL_ART_label] = "label";
  artLabelStrings[ARTL_ART_label] = "label";
  artKindOfs[ARTL_ART_label] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_label_956] = "label ::= . digit_sequence ";
  artLabelStrings[ARTL_ART_label_956] = "";
  artlhsL[ARTL_ART_label_956] = ARTL_ART_label;
  artKindOfs[ARTL_ART_label_956] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_label_958] = "label ::= digit_sequence .";
  artLabelStrings[ARTL_ART_label_958] = "";
  artlhsL[ARTL_ART_label_958] = ARTL_ART_label;
  artSlotInstanceOfs[ARTL_ART_label_958] = ARTL_ART_digit_sequence;
  artKindOfs[ARTL_ART_label_958] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_label_958] = true;
  arteoR_pL[ARTL_ART_label_958] = true;
  artPopD[ARTL_ART_label_958] = true;
}

public void artTableInitialiser_ART_label_declaration_part() {
  artLabelInternalStrings[ARTL_ART_label_declaration_part] = "label_declaration_part";
  artLabelStrings[ARTL_ART_label_declaration_part] = "label_declaration_part";
  artKindOfs[ARTL_ART_label_declaration_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_174] = "label_declaration_part ::= . label_declaration_part_21 ";
  artLabelStrings[ARTL_ART_label_declaration_part_174] = "";
  artlhsL[ARTL_ART_label_declaration_part_174] = ARTL_ART_label_declaration_part;
  artKindOfs[ARTL_ART_label_declaration_part_174] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_176] = "label_declaration_part ::= label_declaration_part_21 .";
  artLabelStrings[ARTL_ART_label_declaration_part_176] = "";
  artlhsL[ARTL_ART_label_declaration_part_176] = ARTL_ART_label_declaration_part;
  artSlotInstanceOfs[ARTL_ART_label_declaration_part_176] = ARTL_ART_label_declaration_part_21;
  artKindOfs[ARTL_ART_label_declaration_part_176] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_label_declaration_part_176] = true;
  arteoR_pL[ARTL_ART_label_declaration_part_176] = true;
  artPopD[ARTL_ART_label_declaration_part_176] = true;
}

public void artTableInitialiser_ART_label_declaration_part_21() {
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21] = "label_declaration_part_21";
  artLabelStrings[ARTL_ART_label_declaration_part_21] = "label_declaration_part_21";
  artKindOfs[ARTL_ART_label_declaration_part_21] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1012] = "label_declaration_part_21 ::= . # ";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1012] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1012] = ARTL_ART_label_declaration_part_21;
  artKindOfs[ARTL_ART_label_declaration_part_21_1012] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_label_declaration_part_21_1012] = true;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1014] = "label_declaration_part_21 ::= # .";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1014] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1014] = ARTL_ART_label_declaration_part_21;
  artKindOfs[ARTL_ART_label_declaration_part_21_1014] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_label_declaration_part_21_1014] = true;
  arteoR_pL[ARTL_ART_label_declaration_part_21_1014] = true;
  artPopD[ARTL_ART_label_declaration_part_21_1014] = true;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1016] = "label_declaration_part_21 ::= . 'label'  label label_declaration_part_22 ';'  ";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1016] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1016] = ARTL_ART_label_declaration_part_21;
  artKindOfs[ARTL_ART_label_declaration_part_21_1016] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1017] = "label_declaration_part_21 ::= 'label'  label label_declaration_part_22 ';'  ";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1017] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1017] = ARTL_ART_label_declaration_part_21;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1018] = "label_declaration_part_21 ::= 'label'  . label label_declaration_part_22 ';'  ";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1018] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1018] = ARTL_ART_label_declaration_part_21;
  artKindOfs[ARTL_ART_label_declaration_part_21_1018] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_label_declaration_part_21_1018] = true;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1020] = "label_declaration_part_21 ::= 'label'  label . label_declaration_part_22 ';'  ";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1020] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1020] = ARTL_ART_label_declaration_part_21;
  artSlotInstanceOfs[ARTL_ART_label_declaration_part_21_1020] = ARTL_ART_label;
  artKindOfs[ARTL_ART_label_declaration_part_21_1020] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1022] = "label_declaration_part_21 ::= 'label'  label label_declaration_part_22 . ';'  ";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1022] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1022] = ARTL_ART_label_declaration_part_21;
  artSlotInstanceOfs[ARTL_ART_label_declaration_part_21_1022] = ARTL_ART_label_declaration_part_22;
  artKindOfs[ARTL_ART_label_declaration_part_21_1022] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_label_declaration_part_21_1022] = true;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1023] = "label_declaration_part_21 ::= 'label'  label label_declaration_part_22 ';'  ";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1023] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1023] = ARTL_ART_label_declaration_part_21;
  artPopD[ARTL_ART_label_declaration_part_21_1023] = true;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_21_1024] = "label_declaration_part_21 ::= 'label'  label label_declaration_part_22 ';'  .";
  artLabelStrings[ARTL_ART_label_declaration_part_21_1024] = "";
  artlhsL[ARTL_ART_label_declaration_part_21_1024] = ARTL_ART_label_declaration_part_21;
  artKindOfs[ARTL_ART_label_declaration_part_21_1024] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_label_declaration_part_21_1024] = true;
  arteoR_pL[ARTL_ART_label_declaration_part_21_1024] = true;
  artPopD[ARTL_ART_label_declaration_part_21_1024] = true;
}

public void artTableInitialiser_ART_label_declaration_part_22() {
  artLabelInternalStrings[ARTL_ART_label_declaration_part_22] = "label_declaration_part_22";
  artLabelStrings[ARTL_ART_label_declaration_part_22] = "label_declaration_part_22";
  artKindOfs[ARTL_ART_label_declaration_part_22] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_22_1026] = "label_declaration_part_22 ::= . # ";
  artLabelStrings[ARTL_ART_label_declaration_part_22_1026] = "";
  artlhsL[ARTL_ART_label_declaration_part_22_1026] = ARTL_ART_label_declaration_part_22;
  artKindOfs[ARTL_ART_label_declaration_part_22_1026] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_label_declaration_part_22_1026] = true;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_22_1028] = "label_declaration_part_22 ::= # .";
  artLabelStrings[ARTL_ART_label_declaration_part_22_1028] = "";
  artlhsL[ARTL_ART_label_declaration_part_22_1028] = ARTL_ART_label_declaration_part_22;
  artKindOfs[ARTL_ART_label_declaration_part_22_1028] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_label_declaration_part_22_1028] = true;
  arteoR_pL[ARTL_ART_label_declaration_part_22_1028] = true;
  artPopD[ARTL_ART_label_declaration_part_22_1028] = true;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_22_1030] = "label_declaration_part_22 ::= . label_declaration_part_22 ','  label ";
  artLabelStrings[ARTL_ART_label_declaration_part_22_1030] = "";
  artlhsL[ARTL_ART_label_declaration_part_22_1030] = ARTL_ART_label_declaration_part_22;
  artKindOfs[ARTL_ART_label_declaration_part_22_1030] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_22_1032] = "label_declaration_part_22 ::= label_declaration_part_22 . ','  label ";
  artLabelStrings[ARTL_ART_label_declaration_part_22_1032] = "";
  artlhsL[ARTL_ART_label_declaration_part_22_1032] = ARTL_ART_label_declaration_part_22;
  artSlotInstanceOfs[ARTL_ART_label_declaration_part_22_1032] = ARTL_ART_label_declaration_part_22;
  artKindOfs[ARTL_ART_label_declaration_part_22_1032] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_label_declaration_part_22_1032] = true;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_22_1033] = "label_declaration_part_22 ::= label_declaration_part_22 ','  label ";
  artLabelStrings[ARTL_ART_label_declaration_part_22_1033] = "";
  artlhsL[ARTL_ART_label_declaration_part_22_1033] = ARTL_ART_label_declaration_part_22;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_22_1034] = "label_declaration_part_22 ::= label_declaration_part_22 ','  . label ";
  artLabelStrings[ARTL_ART_label_declaration_part_22_1034] = "";
  artlhsL[ARTL_ART_label_declaration_part_22_1034] = ARTL_ART_label_declaration_part_22;
  artKindOfs[ARTL_ART_label_declaration_part_22_1034] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_label_declaration_part_22_1036] = "label_declaration_part_22 ::= label_declaration_part_22 ','  label .";
  artLabelStrings[ARTL_ART_label_declaration_part_22_1036] = "";
  artlhsL[ARTL_ART_label_declaration_part_22_1036] = ARTL_ART_label_declaration_part_22;
  artSlotInstanceOfs[ARTL_ART_label_declaration_part_22_1036] = ARTL_ART_label;
  artKindOfs[ARTL_ART_label_declaration_part_22_1036] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_label_declaration_part_22_1036] = true;
  arteoR_pL[ARTL_ART_label_declaration_part_22_1036] = true;
  artPopD[ARTL_ART_label_declaration_part_22_1036] = true;
}

public void artTableInitialiser_ART_letter() {
  artLabelInternalStrings[ARTL_ART_letter] = "letter";
  artLabelStrings[ARTL_ART_letter] = "letter";
  artKindOfs[ARTL_ART_letter] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_letter_1038] = "letter ::= . 'letter'  ";
  artLabelStrings[ARTL_ART_letter_1038] = "";
  artlhsL[ARTL_ART_letter_1038] = ARTL_ART_letter;
  artKindOfs[ARTL_ART_letter_1038] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_letter_1038] = true;
  artLabelInternalStrings[ARTL_ART_letter_1039] = "letter ::= 'letter'  ";
  artLabelStrings[ARTL_ART_letter_1039] = "";
  artlhsL[ARTL_ART_letter_1039] = ARTL_ART_letter;
  artPopD[ARTL_ART_letter_1039] = true;
  artLabelInternalStrings[ARTL_ART_letter_1040] = "letter ::= 'letter'  .";
  artLabelStrings[ARTL_ART_letter_1040] = "";
  artlhsL[ARTL_ART_letter_1040] = ARTL_ART_letter;
  artKindOfs[ARTL_ART_letter_1040] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_letter_1040] = true;
  arteoR_pL[ARTL_ART_letter_1040] = true;
  artPopD[ARTL_ART_letter_1040] = true;
}

public void artTableInitialiser_ART_member_designator() {
  artLabelInternalStrings[ARTL_ART_member_designator] = "member_designator";
  artLabelStrings[ARTL_ART_member_designator] = "member_designator";
  artKindOfs[ARTL_ART_member_designator] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_member_designator_1042] = "member_designator ::= . expression member_designator_23 ";
  artLabelStrings[ARTL_ART_member_designator_1042] = "";
  artlhsL[ARTL_ART_member_designator_1042] = ARTL_ART_member_designator;
  artKindOfs[ARTL_ART_member_designator_1042] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_member_designator_1044] = "member_designator ::= expression . member_designator_23 ";
  artLabelStrings[ARTL_ART_member_designator_1044] = "";
  artlhsL[ARTL_ART_member_designator_1044] = ARTL_ART_member_designator;
  artSlotInstanceOfs[ARTL_ART_member_designator_1044] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_member_designator_1044] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_member_designator_1044] = true;
  artLabelInternalStrings[ARTL_ART_member_designator_1046] = "member_designator ::= expression member_designator_23 .";
  artLabelStrings[ARTL_ART_member_designator_1046] = "";
  artlhsL[ARTL_ART_member_designator_1046] = ARTL_ART_member_designator;
  artSlotInstanceOfs[ARTL_ART_member_designator_1046] = ARTL_ART_member_designator_23;
  artKindOfs[ARTL_ART_member_designator_1046] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_member_designator_1046] = true;
  arteoR_pL[ARTL_ART_member_designator_1046] = true;
  artPopD[ARTL_ART_member_designator_1046] = true;
}

public void artTableInitialiser_ART_member_designator_23() {
  artLabelInternalStrings[ARTL_ART_member_designator_23] = "member_designator_23";
  artLabelStrings[ARTL_ART_member_designator_23] = "member_designator_23";
  artKindOfs[ARTL_ART_member_designator_23] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_member_designator_23_1048] = "member_designator_23 ::= . # ";
  artLabelStrings[ARTL_ART_member_designator_23_1048] = "";
  artlhsL[ARTL_ART_member_designator_23_1048] = ARTL_ART_member_designator_23;
  artKindOfs[ARTL_ART_member_designator_23_1048] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_member_designator_23_1048] = true;
  artLabelInternalStrings[ARTL_ART_member_designator_23_1050] = "member_designator_23 ::= # .";
  artLabelStrings[ARTL_ART_member_designator_23_1050] = "";
  artlhsL[ARTL_ART_member_designator_23_1050] = ARTL_ART_member_designator_23;
  artKindOfs[ARTL_ART_member_designator_23_1050] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_member_designator_23_1050] = true;
  arteoR_pL[ARTL_ART_member_designator_23_1050] = true;
  artPopD[ARTL_ART_member_designator_23_1050] = true;
  artLabelInternalStrings[ARTL_ART_member_designator_23_1052] = "member_designator_23 ::= . member_designator_23 '..'  expression ";
  artLabelStrings[ARTL_ART_member_designator_23_1052] = "";
  artlhsL[ARTL_ART_member_designator_23_1052] = ARTL_ART_member_designator_23;
  artKindOfs[ARTL_ART_member_designator_23_1052] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_member_designator_23_1054] = "member_designator_23 ::= member_designator_23 . '..'  expression ";
  artLabelStrings[ARTL_ART_member_designator_23_1054] = "";
  artlhsL[ARTL_ART_member_designator_23_1054] = ARTL_ART_member_designator_23;
  artSlotInstanceOfs[ARTL_ART_member_designator_23_1054] = ARTL_ART_member_designator_23;
  artKindOfs[ARTL_ART_member_designator_23_1054] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_member_designator_23_1054] = true;
  artLabelInternalStrings[ARTL_ART_member_designator_23_1055] = "member_designator_23 ::= member_designator_23 '..'  expression ";
  artLabelStrings[ARTL_ART_member_designator_23_1055] = "";
  artlhsL[ARTL_ART_member_designator_23_1055] = ARTL_ART_member_designator_23;
  artLabelInternalStrings[ARTL_ART_member_designator_23_1056] = "member_designator_23 ::= member_designator_23 '..'  . expression ";
  artLabelStrings[ARTL_ART_member_designator_23_1056] = "";
  artlhsL[ARTL_ART_member_designator_23_1056] = ARTL_ART_member_designator_23;
  artKindOfs[ARTL_ART_member_designator_23_1056] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_member_designator_23_1058] = "member_designator_23 ::= member_designator_23 '..'  expression .";
  artLabelStrings[ARTL_ART_member_designator_23_1058] = "";
  artlhsL[ARTL_ART_member_designator_23_1058] = ARTL_ART_member_designator_23;
  artSlotInstanceOfs[ARTL_ART_member_designator_23_1058] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_member_designator_23_1058] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_member_designator_23_1058] = true;
  arteoR_pL[ARTL_ART_member_designator_23_1058] = true;
  artPopD[ARTL_ART_member_designator_23_1058] = true;
}

public void artTableInitialiser_ART_multiplying_operator() {
  artLabelInternalStrings[ARTL_ART_multiplying_operator] = "multiplying_operator";
  artLabelStrings[ARTL_ART_multiplying_operator] = "multiplying_operator";
  artKindOfs[ARTL_ART_multiplying_operator] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1060] = "multiplying_operator ::= . '*'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1060] = "";
  artlhsL[ARTL_ART_multiplying_operator_1060] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1060] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_multiplying_operator_1060] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1061] = "multiplying_operator ::= '*'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1061] = "";
  artlhsL[ARTL_ART_multiplying_operator_1061] = ARTL_ART_multiplying_operator;
  artPopD[ARTL_ART_multiplying_operator_1061] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1062] = "multiplying_operator ::= '*'  .";
  artLabelStrings[ARTL_ART_multiplying_operator_1062] = "";
  artlhsL[ARTL_ART_multiplying_operator_1062] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1062] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_multiplying_operator_1062] = true;
  arteoR_pL[ARTL_ART_multiplying_operator_1062] = true;
  artPopD[ARTL_ART_multiplying_operator_1062] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1064] = "multiplying_operator ::= . '/'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1064] = "";
  artlhsL[ARTL_ART_multiplying_operator_1064] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1064] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_multiplying_operator_1064] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1065] = "multiplying_operator ::= '/'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1065] = "";
  artlhsL[ARTL_ART_multiplying_operator_1065] = ARTL_ART_multiplying_operator;
  artPopD[ARTL_ART_multiplying_operator_1065] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1066] = "multiplying_operator ::= '/'  .";
  artLabelStrings[ARTL_ART_multiplying_operator_1066] = "";
  artlhsL[ARTL_ART_multiplying_operator_1066] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1066] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_multiplying_operator_1066] = true;
  arteoR_pL[ARTL_ART_multiplying_operator_1066] = true;
  artPopD[ARTL_ART_multiplying_operator_1066] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1068] = "multiplying_operator ::= . 'div'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1068] = "";
  artlhsL[ARTL_ART_multiplying_operator_1068] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1068] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_multiplying_operator_1068] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1069] = "multiplying_operator ::= 'div'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1069] = "";
  artlhsL[ARTL_ART_multiplying_operator_1069] = ARTL_ART_multiplying_operator;
  artPopD[ARTL_ART_multiplying_operator_1069] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1070] = "multiplying_operator ::= 'div'  .";
  artLabelStrings[ARTL_ART_multiplying_operator_1070] = "";
  artlhsL[ARTL_ART_multiplying_operator_1070] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1070] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_multiplying_operator_1070] = true;
  arteoR_pL[ARTL_ART_multiplying_operator_1070] = true;
  artPopD[ARTL_ART_multiplying_operator_1070] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1072] = "multiplying_operator ::= . 'mod'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1072] = "";
  artlhsL[ARTL_ART_multiplying_operator_1072] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1072] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_multiplying_operator_1072] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1073] = "multiplying_operator ::= 'mod'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1073] = "";
  artlhsL[ARTL_ART_multiplying_operator_1073] = ARTL_ART_multiplying_operator;
  artPopD[ARTL_ART_multiplying_operator_1073] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1074] = "multiplying_operator ::= 'mod'  .";
  artLabelStrings[ARTL_ART_multiplying_operator_1074] = "";
  artlhsL[ARTL_ART_multiplying_operator_1074] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1074] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_multiplying_operator_1074] = true;
  arteoR_pL[ARTL_ART_multiplying_operator_1074] = true;
  artPopD[ARTL_ART_multiplying_operator_1074] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1076] = "multiplying_operator ::= . 'and'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1076] = "";
  artlhsL[ARTL_ART_multiplying_operator_1076] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1076] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_multiplying_operator_1076] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1077] = "multiplying_operator ::= 'and'  ";
  artLabelStrings[ARTL_ART_multiplying_operator_1077] = "";
  artlhsL[ARTL_ART_multiplying_operator_1077] = ARTL_ART_multiplying_operator;
  artPopD[ARTL_ART_multiplying_operator_1077] = true;
  artLabelInternalStrings[ARTL_ART_multiplying_operator_1078] = "multiplying_operator ::= 'and'  .";
  artLabelStrings[ARTL_ART_multiplying_operator_1078] = "";
  artlhsL[ARTL_ART_multiplying_operator_1078] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_multiplying_operator_1078] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_multiplying_operator_1078] = true;
  arteoR_pL[ARTL_ART_multiplying_operator_1078] = true;
  artPopD[ARTL_ART_multiplying_operator_1078] = true;
}

public void artTableInitialiser_ART_new_ordinal_type() {
  artLabelInternalStrings[ARTL_ART_new_ordinal_type] = "new_ordinal_type";
  artLabelStrings[ARTL_ART_new_ordinal_type] = "new_ordinal_type";
  artKindOfs[ARTL_ART_new_ordinal_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_new_ordinal_type_1080] = "new_ordinal_type ::= . enumerated_type ";
  artLabelStrings[ARTL_ART_new_ordinal_type_1080] = "";
  artlhsL[ARTL_ART_new_ordinal_type_1080] = ARTL_ART_new_ordinal_type;
  artKindOfs[ARTL_ART_new_ordinal_type_1080] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_new_ordinal_type_1082] = "new_ordinal_type ::= enumerated_type .";
  artLabelStrings[ARTL_ART_new_ordinal_type_1082] = "";
  artlhsL[ARTL_ART_new_ordinal_type_1082] = ARTL_ART_new_ordinal_type;
  artSlotInstanceOfs[ARTL_ART_new_ordinal_type_1082] = ARTL_ART_enumerated_type;
  artKindOfs[ARTL_ART_new_ordinal_type_1082] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_ordinal_type_1082] = true;
  arteoR_pL[ARTL_ART_new_ordinal_type_1082] = true;
  artPopD[ARTL_ART_new_ordinal_type_1082] = true;
  artLabelInternalStrings[ARTL_ART_new_ordinal_type_1084] = "new_ordinal_type ::= . subrange_type ";
  artLabelStrings[ARTL_ART_new_ordinal_type_1084] = "";
  artlhsL[ARTL_ART_new_ordinal_type_1084] = ARTL_ART_new_ordinal_type;
  artKindOfs[ARTL_ART_new_ordinal_type_1084] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_new_ordinal_type_1086] = "new_ordinal_type ::= subrange_type .";
  artLabelStrings[ARTL_ART_new_ordinal_type_1086] = "";
  artlhsL[ARTL_ART_new_ordinal_type_1086] = ARTL_ART_new_ordinal_type;
  artSlotInstanceOfs[ARTL_ART_new_ordinal_type_1086] = ARTL_ART_subrange_type;
  artKindOfs[ARTL_ART_new_ordinal_type_1086] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_ordinal_type_1086] = true;
  arteoR_pL[ARTL_ART_new_ordinal_type_1086] = true;
  artPopD[ARTL_ART_new_ordinal_type_1086] = true;
}

public void artTableInitialiser_ART_new_pointer_type() {
  artLabelInternalStrings[ARTL_ART_new_pointer_type] = "new_pointer_type";
  artLabelStrings[ARTL_ART_new_pointer_type] = "new_pointer_type";
  artKindOfs[ARTL_ART_new_pointer_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_new_pointer_type_1096] = "new_pointer_type ::= . '^'  domain_type ";
  artLabelStrings[ARTL_ART_new_pointer_type_1096] = "";
  artlhsL[ARTL_ART_new_pointer_type_1096] = ARTL_ART_new_pointer_type;
  artKindOfs[ARTL_ART_new_pointer_type_1096] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_new_pointer_type_1097] = "new_pointer_type ::= '^'  domain_type ";
  artLabelStrings[ARTL_ART_new_pointer_type_1097] = "";
  artlhsL[ARTL_ART_new_pointer_type_1097] = ARTL_ART_new_pointer_type;
  artLabelInternalStrings[ARTL_ART_new_pointer_type_1098] = "new_pointer_type ::= '^'  . domain_type ";
  artLabelStrings[ARTL_ART_new_pointer_type_1098] = "";
  artlhsL[ARTL_ART_new_pointer_type_1098] = ARTL_ART_new_pointer_type;
  artKindOfs[ARTL_ART_new_pointer_type_1098] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_new_pointer_type_1098] = true;
  artLabelInternalStrings[ARTL_ART_new_pointer_type_1100] = "new_pointer_type ::= '^'  domain_type .";
  artLabelStrings[ARTL_ART_new_pointer_type_1100] = "";
  artlhsL[ARTL_ART_new_pointer_type_1100] = ARTL_ART_new_pointer_type;
  artSlotInstanceOfs[ARTL_ART_new_pointer_type_1100] = ARTL_ART_domain_type;
  artKindOfs[ARTL_ART_new_pointer_type_1100] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_pointer_type_1100] = true;
  arteoR_pL[ARTL_ART_new_pointer_type_1100] = true;
  artPopD[ARTL_ART_new_pointer_type_1100] = true;
}

public void artTableInitialiser_ART_new_structured_type() {
  artLabelInternalStrings[ARTL_ART_new_structured_type] = "new_structured_type";
  artLabelStrings[ARTL_ART_new_structured_type] = "new_structured_type";
  artKindOfs[ARTL_ART_new_structured_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_new_structured_type_1102] = "new_structured_type ::= . new_structured_type_24 unpacked_structured_type ";
  artLabelStrings[ARTL_ART_new_structured_type_1102] = "";
  artlhsL[ARTL_ART_new_structured_type_1102] = ARTL_ART_new_structured_type;
  artKindOfs[ARTL_ART_new_structured_type_1102] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_new_structured_type_1104] = "new_structured_type ::= new_structured_type_24 . unpacked_structured_type ";
  artLabelStrings[ARTL_ART_new_structured_type_1104] = "";
  artlhsL[ARTL_ART_new_structured_type_1104] = ARTL_ART_new_structured_type;
  artSlotInstanceOfs[ARTL_ART_new_structured_type_1104] = ARTL_ART_new_structured_type_24;
  artKindOfs[ARTL_ART_new_structured_type_1104] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_new_structured_type_1104] = true;
  artLabelInternalStrings[ARTL_ART_new_structured_type_1106] = "new_structured_type ::= new_structured_type_24 unpacked_structured_type .";
  artLabelStrings[ARTL_ART_new_structured_type_1106] = "";
  artlhsL[ARTL_ART_new_structured_type_1106] = ARTL_ART_new_structured_type;
  artSlotInstanceOfs[ARTL_ART_new_structured_type_1106] = ARTL_ART_unpacked_structured_type;
  artKindOfs[ARTL_ART_new_structured_type_1106] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_structured_type_1106] = true;
  arteoR_pL[ARTL_ART_new_structured_type_1106] = true;
  artPopD[ARTL_ART_new_structured_type_1106] = true;
}

public void artTableInitialiser_ART_new_structured_type_24() {
  artLabelInternalStrings[ARTL_ART_new_structured_type_24] = "new_structured_type_24";
  artLabelStrings[ARTL_ART_new_structured_type_24] = "new_structured_type_24";
  artKindOfs[ARTL_ART_new_structured_type_24] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_new_structured_type_24_1108] = "new_structured_type_24 ::= . # ";
  artLabelStrings[ARTL_ART_new_structured_type_24_1108] = "";
  artlhsL[ARTL_ART_new_structured_type_24_1108] = ARTL_ART_new_structured_type_24;
  artKindOfs[ARTL_ART_new_structured_type_24_1108] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_new_structured_type_24_1108] = true;
  artLabelInternalStrings[ARTL_ART_new_structured_type_24_1110] = "new_structured_type_24 ::= # .";
  artLabelStrings[ARTL_ART_new_structured_type_24_1110] = "";
  artlhsL[ARTL_ART_new_structured_type_24_1110] = ARTL_ART_new_structured_type_24;
  artKindOfs[ARTL_ART_new_structured_type_24_1110] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_structured_type_24_1110] = true;
  arteoR_pL[ARTL_ART_new_structured_type_24_1110] = true;
  artPopD[ARTL_ART_new_structured_type_24_1110] = true;
  artLabelInternalStrings[ARTL_ART_new_structured_type_24_1112] = "new_structured_type_24 ::= . 'packed'  ";
  artLabelStrings[ARTL_ART_new_structured_type_24_1112] = "";
  artlhsL[ARTL_ART_new_structured_type_24_1112] = ARTL_ART_new_structured_type_24;
  artKindOfs[ARTL_ART_new_structured_type_24_1112] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_new_structured_type_24_1112] = true;
  artLabelInternalStrings[ARTL_ART_new_structured_type_24_1113] = "new_structured_type_24 ::= 'packed'  ";
  artLabelStrings[ARTL_ART_new_structured_type_24_1113] = "";
  artlhsL[ARTL_ART_new_structured_type_24_1113] = ARTL_ART_new_structured_type_24;
  artPopD[ARTL_ART_new_structured_type_24_1113] = true;
  artLabelInternalStrings[ARTL_ART_new_structured_type_24_1114] = "new_structured_type_24 ::= 'packed'  .";
  artLabelStrings[ARTL_ART_new_structured_type_24_1114] = "";
  artlhsL[ARTL_ART_new_structured_type_24_1114] = ARTL_ART_new_structured_type_24;
  artKindOfs[ARTL_ART_new_structured_type_24_1114] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_structured_type_24_1114] = true;
  arteoR_pL[ARTL_ART_new_structured_type_24_1114] = true;
  artPopD[ARTL_ART_new_structured_type_24_1114] = true;
}

public void artTableInitialiser_ART_new_type() {
  artLabelInternalStrings[ARTL_ART_new_type] = "new_type";
  artLabelStrings[ARTL_ART_new_type] = "new_type";
  artKindOfs[ARTL_ART_new_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_new_type_1132] = "new_type ::= . new_ordinal_type ";
  artLabelStrings[ARTL_ART_new_type_1132] = "";
  artlhsL[ARTL_ART_new_type_1132] = ARTL_ART_new_type;
  artKindOfs[ARTL_ART_new_type_1132] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_new_type_1134] = "new_type ::= new_ordinal_type .";
  artLabelStrings[ARTL_ART_new_type_1134] = "";
  artlhsL[ARTL_ART_new_type_1134] = ARTL_ART_new_type;
  artSlotInstanceOfs[ARTL_ART_new_type_1134] = ARTL_ART_new_ordinal_type;
  artKindOfs[ARTL_ART_new_type_1134] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_type_1134] = true;
  arteoR_pL[ARTL_ART_new_type_1134] = true;
  artPopD[ARTL_ART_new_type_1134] = true;
  artLabelInternalStrings[ARTL_ART_new_type_1136] = "new_type ::= . new_structured_type ";
  artLabelStrings[ARTL_ART_new_type_1136] = "";
  artlhsL[ARTL_ART_new_type_1136] = ARTL_ART_new_type;
  artKindOfs[ARTL_ART_new_type_1136] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_new_type_1138] = "new_type ::= new_structured_type .";
  artLabelStrings[ARTL_ART_new_type_1138] = "";
  artlhsL[ARTL_ART_new_type_1138] = ARTL_ART_new_type;
  artSlotInstanceOfs[ARTL_ART_new_type_1138] = ARTL_ART_new_structured_type;
  artKindOfs[ARTL_ART_new_type_1138] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_type_1138] = true;
  arteoR_pL[ARTL_ART_new_type_1138] = true;
  artPopD[ARTL_ART_new_type_1138] = true;
  artLabelInternalStrings[ARTL_ART_new_type_1140] = "new_type ::= . new_pointer_type ";
  artLabelStrings[ARTL_ART_new_type_1140] = "";
  artlhsL[ARTL_ART_new_type_1140] = ARTL_ART_new_type;
  artKindOfs[ARTL_ART_new_type_1140] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_new_type_1142] = "new_type ::= new_pointer_type .";
  artLabelStrings[ARTL_ART_new_type_1142] = "";
  artlhsL[ARTL_ART_new_type_1142] = ARTL_ART_new_type;
  artSlotInstanceOfs[ARTL_ART_new_type_1142] = ARTL_ART_new_pointer_type;
  artKindOfs[ARTL_ART_new_type_1142] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_new_type_1142] = true;
  arteoR_pL[ARTL_ART_new_type_1142] = true;
  artPopD[ARTL_ART_new_type_1142] = true;
}

public void artTableInitialiser_ART_ordinal_type() {
  artLabelInternalStrings[ARTL_ART_ordinal_type] = "ordinal_type";
  artLabelStrings[ARTL_ART_ordinal_type] = "ordinal_type";
  artKindOfs[ARTL_ART_ordinal_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_ordinal_type_152] = "ordinal_type ::= . new_ordinal_type ";
  artLabelStrings[ARTL_ART_ordinal_type_152] = "";
  artlhsL[ARTL_ART_ordinal_type_152] = ARTL_ART_ordinal_type;
  artKindOfs[ARTL_ART_ordinal_type_152] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_ordinal_type_154] = "ordinal_type ::= new_ordinal_type .";
  artLabelStrings[ARTL_ART_ordinal_type_154] = "";
  artlhsL[ARTL_ART_ordinal_type_154] = ARTL_ART_ordinal_type;
  artSlotInstanceOfs[ARTL_ART_ordinal_type_154] = ARTL_ART_new_ordinal_type;
  artKindOfs[ARTL_ART_ordinal_type_154] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ordinal_type_154] = true;
  arteoR_pL[ARTL_ART_ordinal_type_154] = true;
  artPopD[ARTL_ART_ordinal_type_154] = true;
  artLabelInternalStrings[ARTL_ART_ordinal_type_156] = "ordinal_type ::= . ordinal_type_ID ";
  artLabelStrings[ARTL_ART_ordinal_type_156] = "";
  artlhsL[ARTL_ART_ordinal_type_156] = ARTL_ART_ordinal_type;
  artKindOfs[ARTL_ART_ordinal_type_156] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_ordinal_type_158] = "ordinal_type ::= ordinal_type_ID .";
  artLabelStrings[ARTL_ART_ordinal_type_158] = "";
  artlhsL[ARTL_ART_ordinal_type_158] = ARTL_ART_ordinal_type;
  artSlotInstanceOfs[ARTL_ART_ordinal_type_158] = ARTL_ART_ordinal_type_ID;
  artKindOfs[ARTL_ART_ordinal_type_158] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ordinal_type_158] = true;
  arteoR_pL[ARTL_ART_ordinal_type_158] = true;
  artPopD[ARTL_ART_ordinal_type_158] = true;
}

public void artTableInitialiser_ART_ordinal_type_ID() {
  artLabelInternalStrings[ARTL_ART_ordinal_type_ID] = "ordinal_type_ID";
  artLabelStrings[ARTL_ART_ordinal_type_ID] = "ordinal_type_ID";
  artKindOfs[ARTL_ART_ordinal_type_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_ordinal_type_ID_996] = "ordinal_type_ID ::= . type_ID ";
  artLabelStrings[ARTL_ART_ordinal_type_ID_996] = "";
  artlhsL[ARTL_ART_ordinal_type_ID_996] = ARTL_ART_ordinal_type_ID;
  artKindOfs[ARTL_ART_ordinal_type_ID_996] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_ordinal_type_ID_998] = "ordinal_type_ID ::= type_ID .";
  artLabelStrings[ARTL_ART_ordinal_type_ID_998] = "";
  artlhsL[ARTL_ART_ordinal_type_ID_998] = ARTL_ART_ordinal_type_ID;
  artSlotInstanceOfs[ARTL_ART_ordinal_type_ID_998] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_ordinal_type_ID_998] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ordinal_type_ID_998] = true;
  arteoR_pL[ARTL_ART_ordinal_type_ID_998] = true;
  artPopD[ARTL_ART_ordinal_type_ID_998] = true;
}

public void artTableInitialiser_ART_packed_conformant_array_schema() {
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema] = "packed_conformant_array_schema";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema] = "packed_conformant_array_schema";
  artKindOfs[ARTL_ART_packed_conformant_array_schema] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_408] = "packed_conformant_array_schema ::= . 'packed'  'array'  '['  index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_408] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_408] = ARTL_ART_packed_conformant_array_schema;
  artKindOfs[ARTL_ART_packed_conformant_array_schema_408] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_409] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_409] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_409] = ARTL_ART_packed_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_410] = "packed_conformant_array_schema ::= 'packed'  . 'array'  '['  index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_410] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_410] = ARTL_ART_packed_conformant_array_schema;
  artKindOfs[ARTL_ART_packed_conformant_array_schema_410] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_packed_conformant_array_schema_410] = true;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_411] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_411] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_411] = ARTL_ART_packed_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_412] = "packed_conformant_array_schema ::= 'packed'  'array'  . '['  index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_412] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_412] = ARTL_ART_packed_conformant_array_schema;
  artKindOfs[ARTL_ART_packed_conformant_array_schema_412] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_413] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_413] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_413] = ARTL_ART_packed_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_414] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  . index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_414] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_414] = ARTL_ART_packed_conformant_array_schema;
  artKindOfs[ARTL_ART_packed_conformant_array_schema_414] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_416] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification . ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_416] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_416] = ARTL_ART_packed_conformant_array_schema;
  artSlotInstanceOfs[ARTL_ART_packed_conformant_array_schema_416] = ARTL_ART_index_type_specification;
  artKindOfs[ARTL_ART_packed_conformant_array_schema_416] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_417] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_417] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_417] = ARTL_ART_packed_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_418] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  . 'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_418] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_418] = ARTL_ART_packed_conformant_array_schema;
  artKindOfs[ARTL_ART_packed_conformant_array_schema_418] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_419] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_419] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_419] = ARTL_ART_packed_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_420] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  . type_ID ";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_420] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_420] = ARTL_ART_packed_conformant_array_schema;
  artKindOfs[ARTL_ART_packed_conformant_array_schema_420] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_packed_conformant_array_schema_422] = "packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  type_ID .";
  artLabelStrings[ARTL_ART_packed_conformant_array_schema_422] = "";
  artlhsL[ARTL_ART_packed_conformant_array_schema_422] = ARTL_ART_packed_conformant_array_schema;
  artSlotInstanceOfs[ARTL_ART_packed_conformant_array_schema_422] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_packed_conformant_array_schema_422] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_packed_conformant_array_schema_422] = true;
  arteoR_pL[ARTL_ART_packed_conformant_array_schema_422] = true;
  artPopD[ARTL_ART_packed_conformant_array_schema_422] = true;
}

public void artTableInitialiser_ART_pointer_type() {
  artLabelInternalStrings[ARTL_ART_pointer_type] = "pointer_type";
  artLabelStrings[ARTL_ART_pointer_type] = "pointer_type";
  artKindOfs[ARTL_ART_pointer_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_pointer_type_1144] = "pointer_type ::= . new_pointer_type ";
  artLabelStrings[ARTL_ART_pointer_type_1144] = "";
  artlhsL[ARTL_ART_pointer_type_1144] = ARTL_ART_pointer_type;
  artKindOfs[ARTL_ART_pointer_type_1144] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_pointer_type_1146] = "pointer_type ::= new_pointer_type .";
  artLabelStrings[ARTL_ART_pointer_type_1146] = "";
  artlhsL[ARTL_ART_pointer_type_1146] = ARTL_ART_pointer_type;
  artSlotInstanceOfs[ARTL_ART_pointer_type_1146] = ARTL_ART_new_pointer_type;
  artKindOfs[ARTL_ART_pointer_type_1146] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_pointer_type_1146] = true;
  arteoR_pL[ARTL_ART_pointer_type_1146] = true;
  artPopD[ARTL_ART_pointer_type_1146] = true;
  artLabelInternalStrings[ARTL_ART_pointer_type_1148] = "pointer_type ::= . pointer_type_ID ";
  artLabelStrings[ARTL_ART_pointer_type_1148] = "";
  artlhsL[ARTL_ART_pointer_type_1148] = ARTL_ART_pointer_type;
  artKindOfs[ARTL_ART_pointer_type_1148] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_pointer_type_1150] = "pointer_type ::= pointer_type_ID .";
  artLabelStrings[ARTL_ART_pointer_type_1150] = "";
  artlhsL[ARTL_ART_pointer_type_1150] = ARTL_ART_pointer_type;
  artSlotInstanceOfs[ARTL_ART_pointer_type_1150] = ARTL_ART_pointer_type_ID;
  artKindOfs[ARTL_ART_pointer_type_1150] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_pointer_type_1150] = true;
  arteoR_pL[ARTL_ART_pointer_type_1150] = true;
  artPopD[ARTL_ART_pointer_type_1150] = true;
}

public void artTableInitialiser_ART_pointer_type_ID() {
  artLabelInternalStrings[ARTL_ART_pointer_type_ID] = "pointer_type_ID";
  artLabelStrings[ARTL_ART_pointer_type_ID] = "pointer_type_ID";
  artKindOfs[ARTL_ART_pointer_type_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_pointer_type_ID_1152] = "pointer_type_ID ::= . type_ID ";
  artLabelStrings[ARTL_ART_pointer_type_ID_1152] = "";
  artlhsL[ARTL_ART_pointer_type_ID_1152] = ARTL_ART_pointer_type_ID;
  artKindOfs[ARTL_ART_pointer_type_ID_1152] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_pointer_type_ID_1154] = "pointer_type_ID ::= type_ID .";
  artLabelStrings[ARTL_ART_pointer_type_ID_1154] = "";
  artlhsL[ARTL_ART_pointer_type_ID_1154] = ARTL_ART_pointer_type_ID;
  artSlotInstanceOfs[ARTL_ART_pointer_type_ID_1154] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_pointer_type_ID_1154] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_pointer_type_ID_1154] = true;
  arteoR_pL[ARTL_ART_pointer_type_ID_1154] = true;
  artPopD[ARTL_ART_pointer_type_ID_1154] = true;
}

public void artTableInitialiser_ART_procedural_parameter_specification() {
  artLabelInternalStrings[ARTL_ART_procedural_parameter_specification] = "procedural_parameter_specification";
  artLabelStrings[ARTL_ART_procedural_parameter_specification] = "procedural_parameter_specification";
  artKindOfs[ARTL_ART_procedural_parameter_specification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedural_parameter_specification_872] = "procedural_parameter_specification ::= . procedure_heading ";
  artLabelStrings[ARTL_ART_procedural_parameter_specification_872] = "";
  artlhsL[ARTL_ART_procedural_parameter_specification_872] = ARTL_ART_procedural_parameter_specification;
  artKindOfs[ARTL_ART_procedural_parameter_specification_872] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedural_parameter_specification_874] = "procedural_parameter_specification ::= procedure_heading .";
  artLabelStrings[ARTL_ART_procedural_parameter_specification_874] = "";
  artlhsL[ARTL_ART_procedural_parameter_specification_874] = ARTL_ART_procedural_parameter_specification;
  artSlotInstanceOfs[ARTL_ART_procedural_parameter_specification_874] = ARTL_ART_procedure_heading;
  artKindOfs[ARTL_ART_procedural_parameter_specification_874] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedural_parameter_specification_874] = true;
  arteoR_pL[ARTL_ART_procedural_parameter_specification_874] = true;
  artPopD[ARTL_ART_procedural_parameter_specification_874] = true;
}

public void artTableInitialiser_ART_procedure_ID() {
  artLabelInternalStrings[ARTL_ART_procedure_ID] = "procedure_ID";
  artLabelStrings[ARTL_ART_procedure_ID] = "procedure_ID";
  artKindOfs[ARTL_ART_procedure_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_ID_36] = "procedure_ID ::= . 'procedure_ID'  ";
  artLabelStrings[ARTL_ART_procedure_ID_36] = "";
  artlhsL[ARTL_ART_procedure_ID_36] = ARTL_ART_procedure_ID;
  artKindOfs[ARTL_ART_procedure_ID_36] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_procedure_ID_36] = true;
  artLabelInternalStrings[ARTL_ART_procedure_ID_37] = "procedure_ID ::= 'procedure_ID'  ";
  artLabelStrings[ARTL_ART_procedure_ID_37] = "";
  artlhsL[ARTL_ART_procedure_ID_37] = ARTL_ART_procedure_ID;
  artPopD[ARTL_ART_procedure_ID_37] = true;
  artLabelInternalStrings[ARTL_ART_procedure_ID_38] = "procedure_ID ::= 'procedure_ID'  .";
  artLabelStrings[ARTL_ART_procedure_ID_38] = "";
  artlhsL[ARTL_ART_procedure_ID_38] = ARTL_ART_procedure_ID;
  artKindOfs[ARTL_ART_procedure_ID_38] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_ID_38] = true;
  arteoR_pL[ARTL_ART_procedure_ID_38] = true;
  artPopD[ARTL_ART_procedure_ID_38] = true;
}

public void artTableInitialiser_ART_procedure_and_function_declaration_part() {
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part] = "procedure_and_function_declaration_part";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part] = "procedure_and_function_declaration_part";
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_190] = "procedure_and_function_declaration_part ::= . procedure_and_function_declaration_part_25 ";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_190] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_190] = ARTL_ART_procedure_and_function_declaration_part;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_190] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_192] = "procedure_and_function_declaration_part ::= procedure_and_function_declaration_part_25 .";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_192] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_192] = ARTL_ART_procedure_and_function_declaration_part;
  artSlotInstanceOfs[ARTL_ART_procedure_and_function_declaration_part_192] = ARTL_ART_procedure_and_function_declaration_part_25;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_192] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_and_function_declaration_part_192] = true;
  arteoR_pL[ARTL_ART_procedure_and_function_declaration_part_192] = true;
  artPopD[ARTL_ART_procedure_and_function_declaration_part_192] = true;
}

public void artTableInitialiser_ART_procedure_and_function_declaration_part_25() {
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_25] = "procedure_and_function_declaration_part_25";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_25] = "procedure_and_function_declaration_part_25";
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_25] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_25_1164] = "procedure_and_function_declaration_part_25 ::= . # ";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_25_1164] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_25_1164] = ARTL_ART_procedure_and_function_declaration_part_25;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_25_1164] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_procedure_and_function_declaration_part_25_1164] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_25_1166] = "procedure_and_function_declaration_part_25 ::= # .";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_25_1166] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_25_1166] = ARTL_ART_procedure_and_function_declaration_part_25;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_25_1166] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_and_function_declaration_part_25_1166] = true;
  arteoR_pL[ARTL_ART_procedure_and_function_declaration_part_25_1166] = true;
  artPopD[ARTL_ART_procedure_and_function_declaration_part_25_1166] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_25_1168] = "procedure_and_function_declaration_part_25 ::= . procedure_and_function_declaration_part_25 procedure_and_function_declaration_part_26 ';'  ";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_25_1168] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_25_1168] = ARTL_ART_procedure_and_function_declaration_part_25;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_25_1168] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_25_1170] = "procedure_and_function_declaration_part_25 ::= procedure_and_function_declaration_part_25 . procedure_and_function_declaration_part_26 ';'  ";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_25_1170] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_25_1170] = ARTL_ART_procedure_and_function_declaration_part_25;
  artSlotInstanceOfs[ARTL_ART_procedure_and_function_declaration_part_25_1170] = ARTL_ART_procedure_and_function_declaration_part_25;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_25_1170] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_and_function_declaration_part_25_1170] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_25_1172] = "procedure_and_function_declaration_part_25 ::= procedure_and_function_declaration_part_25 procedure_and_function_declaration_part_26 . ';'  ";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_25_1172] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_25_1172] = ARTL_ART_procedure_and_function_declaration_part_25;
  artSlotInstanceOfs[ARTL_ART_procedure_and_function_declaration_part_25_1172] = ARTL_ART_procedure_and_function_declaration_part_26;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_25_1172] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_procedure_and_function_declaration_part_25_1172] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_25_1173] = "procedure_and_function_declaration_part_25 ::= procedure_and_function_declaration_part_25 procedure_and_function_declaration_part_26 ';'  ";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_25_1173] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_25_1173] = ARTL_ART_procedure_and_function_declaration_part_25;
  artPopD[ARTL_ART_procedure_and_function_declaration_part_25_1173] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_25_1174] = "procedure_and_function_declaration_part_25 ::= procedure_and_function_declaration_part_25 procedure_and_function_declaration_part_26 ';'  .";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_25_1174] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_25_1174] = ARTL_ART_procedure_and_function_declaration_part_25;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_25_1174] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_and_function_declaration_part_25_1174] = true;
  arteoR_pL[ARTL_ART_procedure_and_function_declaration_part_25_1174] = true;
  artPopD[ARTL_ART_procedure_and_function_declaration_part_25_1174] = true;
}

public void artTableInitialiser_ART_procedure_and_function_declaration_part_26() {
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_26] = "procedure_and_function_declaration_part_26";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_26] = "procedure_and_function_declaration_part_26";
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_26] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_26_1176] = "procedure_and_function_declaration_part_26 ::= . procedure_declaration ";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_26_1176] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_26_1176] = ARTL_ART_procedure_and_function_declaration_part_26;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_26_1176] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_26_1178] = "procedure_and_function_declaration_part_26 ::= procedure_declaration .";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_26_1178] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_26_1178] = ARTL_ART_procedure_and_function_declaration_part_26;
  artSlotInstanceOfs[ARTL_ART_procedure_and_function_declaration_part_26_1178] = ARTL_ART_procedure_declaration;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_26_1178] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_and_function_declaration_part_26_1178] = true;
  arteoR_pL[ARTL_ART_procedure_and_function_declaration_part_26_1178] = true;
  artPopD[ARTL_ART_procedure_and_function_declaration_part_26_1178] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_26_1180] = "procedure_and_function_declaration_part_26 ::= . function_declaration ";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_26_1180] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_26_1180] = ARTL_ART_procedure_and_function_declaration_part_26;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_26_1180] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_declaration_part_26_1182] = "procedure_and_function_declaration_part_26 ::= function_declaration .";
  artLabelStrings[ARTL_ART_procedure_and_function_declaration_part_26_1182] = "";
  artlhsL[ARTL_ART_procedure_and_function_declaration_part_26_1182] = ARTL_ART_procedure_and_function_declaration_part_26;
  artSlotInstanceOfs[ARTL_ART_procedure_and_function_declaration_part_26_1182] = ARTL_ART_function_declaration;
  artKindOfs[ARTL_ART_procedure_and_function_declaration_part_26_1182] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_and_function_declaration_part_26_1182] = true;
  arteoR_pL[ARTL_ART_procedure_and_function_declaration_part_26_1182] = true;
  artPopD[ARTL_ART_procedure_and_function_declaration_part_26_1182] = true;
}

public void artTableInitialiser_ART_procedure_and_function_heading_part() {
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part] = "procedure_and_function_heading_part";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part] = "procedure_and_function_heading_part";
  artKindOfs[ARTL_ART_procedure_and_function_heading_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_1208] = "procedure_and_function_heading_part ::= . procedure_and_function_heading_part_27 ';'  ";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_1208] = "";
  artlhsL[ARTL_ART_procedure_and_function_heading_part_1208] = ARTL_ART_procedure_and_function_heading_part;
  artKindOfs[ARTL_ART_procedure_and_function_heading_part_1208] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_1210] = "procedure_and_function_heading_part ::= procedure_and_function_heading_part_27 . ';'  ";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_1210] = "";
  artlhsL[ARTL_ART_procedure_and_function_heading_part_1210] = ARTL_ART_procedure_and_function_heading_part;
  artSlotInstanceOfs[ARTL_ART_procedure_and_function_heading_part_1210] = ARTL_ART_procedure_and_function_heading_part_27;
  artKindOfs[ARTL_ART_procedure_and_function_heading_part_1210] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_and_function_heading_part_1210] = true;
  artPopD[ARTL_ART_procedure_and_function_heading_part_1210] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_1211] = "procedure_and_function_heading_part ::= procedure_and_function_heading_part_27 ';'  ";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_1211] = "";
  artlhsL[ARTL_ART_procedure_and_function_heading_part_1211] = ARTL_ART_procedure_and_function_heading_part;
  artPopD[ARTL_ART_procedure_and_function_heading_part_1211] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_1212] = "procedure_and_function_heading_part ::= procedure_and_function_heading_part_27 ';'  .";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_1212] = "";
  artlhsL[ARTL_ART_procedure_and_function_heading_part_1212] = ARTL_ART_procedure_and_function_heading_part;
  artKindOfs[ARTL_ART_procedure_and_function_heading_part_1212] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_and_function_heading_part_1212] = true;
  arteoR_pL[ARTL_ART_procedure_and_function_heading_part_1212] = true;
  artPopD[ARTL_ART_procedure_and_function_heading_part_1212] = true;
}

public void artTableInitialiser_ART_procedure_and_function_heading_part_27() {
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_27] = "procedure_and_function_heading_part_27";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_27] = "procedure_and_function_heading_part_27";
  artKindOfs[ARTL_ART_procedure_and_function_heading_part_27] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_27_1214] = "procedure_and_function_heading_part_27 ::= . procedure_heading ";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_27_1214] = "";
  artlhsL[ARTL_ART_procedure_and_function_heading_part_27_1214] = ARTL_ART_procedure_and_function_heading_part_27;
  artKindOfs[ARTL_ART_procedure_and_function_heading_part_27_1214] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_27_1216] = "procedure_and_function_heading_part_27 ::= procedure_heading .";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_27_1216] = "";
  artlhsL[ARTL_ART_procedure_and_function_heading_part_27_1216] = ARTL_ART_procedure_and_function_heading_part_27;
  artSlotInstanceOfs[ARTL_ART_procedure_and_function_heading_part_27_1216] = ARTL_ART_procedure_heading;
  artKindOfs[ARTL_ART_procedure_and_function_heading_part_27_1216] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_and_function_heading_part_27_1216] = true;
  arteoR_pL[ARTL_ART_procedure_and_function_heading_part_27_1216] = true;
  artPopD[ARTL_ART_procedure_and_function_heading_part_27_1216] = true;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_27_1218] = "procedure_and_function_heading_part_27 ::= . function_heading ";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_27_1218] = "";
  artlhsL[ARTL_ART_procedure_and_function_heading_part_27_1218] = ARTL_ART_procedure_and_function_heading_part_27;
  artKindOfs[ARTL_ART_procedure_and_function_heading_part_27_1218] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_and_function_heading_part_27_1220] = "procedure_and_function_heading_part_27 ::= function_heading .";
  artLabelStrings[ARTL_ART_procedure_and_function_heading_part_27_1220] = "";
  artlhsL[ARTL_ART_procedure_and_function_heading_part_27_1220] = ARTL_ART_procedure_and_function_heading_part_27;
  artSlotInstanceOfs[ARTL_ART_procedure_and_function_heading_part_27_1220] = ARTL_ART_function_heading;
  artKindOfs[ARTL_ART_procedure_and_function_heading_part_27_1220] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_and_function_heading_part_27_1220] = true;
  arteoR_pL[ARTL_ART_procedure_and_function_heading_part_27_1220] = true;
  artPopD[ARTL_ART_procedure_and_function_heading_part_27_1220] = true;
}

public void artTableInitialiser_ART_procedure_block() {
  artLabelInternalStrings[ARTL_ART_procedure_block] = "procedure_block";
  artLabelStrings[ARTL_ART_procedure_block] = "procedure_block";
  artKindOfs[ARTL_ART_procedure_block] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_block_1222] = "procedure_block ::= . block ";
  artLabelStrings[ARTL_ART_procedure_block_1222] = "";
  artlhsL[ARTL_ART_procedure_block_1222] = ARTL_ART_procedure_block;
  artKindOfs[ARTL_ART_procedure_block_1222] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_block_1224] = "procedure_block ::= block .";
  artLabelStrings[ARTL_ART_procedure_block_1224] = "";
  artlhsL[ARTL_ART_procedure_block_1224] = ARTL_ART_procedure_block;
  artSlotInstanceOfs[ARTL_ART_procedure_block_1224] = ARTL_ART_block;
  artKindOfs[ARTL_ART_procedure_block_1224] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_block_1224] = true;
  arteoR_pL[ARTL_ART_procedure_block_1224] = true;
  artPopD[ARTL_ART_procedure_block_1224] = true;
}

public void artTableInitialiser_ART_procedure_declaration() {
  artLabelInternalStrings[ARTL_ART_procedure_declaration] = "procedure_declaration";
  artLabelStrings[ARTL_ART_procedure_declaration] = "procedure_declaration";
  artKindOfs[ARTL_ART_procedure_declaration] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1184] = "procedure_declaration ::= . procedure_heading ';'  directive ";
  artLabelStrings[ARTL_ART_procedure_declaration_1184] = "";
  artlhsL[ARTL_ART_procedure_declaration_1184] = ARTL_ART_procedure_declaration;
  artKindOfs[ARTL_ART_procedure_declaration_1184] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1186] = "procedure_declaration ::= procedure_heading . ';'  directive ";
  artLabelStrings[ARTL_ART_procedure_declaration_1186] = "";
  artlhsL[ARTL_ART_procedure_declaration_1186] = ARTL_ART_procedure_declaration;
  artSlotInstanceOfs[ARTL_ART_procedure_declaration_1186] = ARTL_ART_procedure_heading;
  artKindOfs[ARTL_ART_procedure_declaration_1186] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_declaration_1186] = true;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1187] = "procedure_declaration ::= procedure_heading ';'  directive ";
  artLabelStrings[ARTL_ART_procedure_declaration_1187] = "";
  artlhsL[ARTL_ART_procedure_declaration_1187] = ARTL_ART_procedure_declaration;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1188] = "procedure_declaration ::= procedure_heading ';'  . directive ";
  artLabelStrings[ARTL_ART_procedure_declaration_1188] = "";
  artlhsL[ARTL_ART_procedure_declaration_1188] = ARTL_ART_procedure_declaration;
  artKindOfs[ARTL_ART_procedure_declaration_1188] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1190] = "procedure_declaration ::= procedure_heading ';'  directive .";
  artLabelStrings[ARTL_ART_procedure_declaration_1190] = "";
  artlhsL[ARTL_ART_procedure_declaration_1190] = ARTL_ART_procedure_declaration;
  artSlotInstanceOfs[ARTL_ART_procedure_declaration_1190] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_procedure_declaration_1190] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_declaration_1190] = true;
  arteoR_pL[ARTL_ART_procedure_declaration_1190] = true;
  artPopD[ARTL_ART_procedure_declaration_1190] = true;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1192] = "procedure_declaration ::= . procedure_identification ';'  procedure_block ";
  artLabelStrings[ARTL_ART_procedure_declaration_1192] = "";
  artlhsL[ARTL_ART_procedure_declaration_1192] = ARTL_ART_procedure_declaration;
  artKindOfs[ARTL_ART_procedure_declaration_1192] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1194] = "procedure_declaration ::= procedure_identification . ';'  procedure_block ";
  artLabelStrings[ARTL_ART_procedure_declaration_1194] = "";
  artlhsL[ARTL_ART_procedure_declaration_1194] = ARTL_ART_procedure_declaration;
  artSlotInstanceOfs[ARTL_ART_procedure_declaration_1194] = ARTL_ART_procedure_identification;
  artKindOfs[ARTL_ART_procedure_declaration_1194] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_declaration_1194] = true;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1195] = "procedure_declaration ::= procedure_identification ';'  procedure_block ";
  artLabelStrings[ARTL_ART_procedure_declaration_1195] = "";
  artlhsL[ARTL_ART_procedure_declaration_1195] = ARTL_ART_procedure_declaration;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1196] = "procedure_declaration ::= procedure_identification ';'  . procedure_block ";
  artLabelStrings[ARTL_ART_procedure_declaration_1196] = "";
  artlhsL[ARTL_ART_procedure_declaration_1196] = ARTL_ART_procedure_declaration;
  artKindOfs[ARTL_ART_procedure_declaration_1196] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1198] = "procedure_declaration ::= procedure_identification ';'  procedure_block .";
  artLabelStrings[ARTL_ART_procedure_declaration_1198] = "";
  artlhsL[ARTL_ART_procedure_declaration_1198] = ARTL_ART_procedure_declaration;
  artSlotInstanceOfs[ARTL_ART_procedure_declaration_1198] = ARTL_ART_procedure_block;
  artKindOfs[ARTL_ART_procedure_declaration_1198] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_declaration_1198] = true;
  arteoR_pL[ARTL_ART_procedure_declaration_1198] = true;
  artPopD[ARTL_ART_procedure_declaration_1198] = true;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1200] = "procedure_declaration ::= . procedure_heading ';'  procedure_block ";
  artLabelStrings[ARTL_ART_procedure_declaration_1200] = "";
  artlhsL[ARTL_ART_procedure_declaration_1200] = ARTL_ART_procedure_declaration;
  artKindOfs[ARTL_ART_procedure_declaration_1200] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1202] = "procedure_declaration ::= procedure_heading . ';'  procedure_block ";
  artLabelStrings[ARTL_ART_procedure_declaration_1202] = "";
  artlhsL[ARTL_ART_procedure_declaration_1202] = ARTL_ART_procedure_declaration;
  artSlotInstanceOfs[ARTL_ART_procedure_declaration_1202] = ARTL_ART_procedure_heading;
  artKindOfs[ARTL_ART_procedure_declaration_1202] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_declaration_1202] = true;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1203] = "procedure_declaration ::= procedure_heading ';'  procedure_block ";
  artLabelStrings[ARTL_ART_procedure_declaration_1203] = "";
  artlhsL[ARTL_ART_procedure_declaration_1203] = ARTL_ART_procedure_declaration;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1204] = "procedure_declaration ::= procedure_heading ';'  . procedure_block ";
  artLabelStrings[ARTL_ART_procedure_declaration_1204] = "";
  artlhsL[ARTL_ART_procedure_declaration_1204] = ARTL_ART_procedure_declaration;
  artKindOfs[ARTL_ART_procedure_declaration_1204] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_declaration_1206] = "procedure_declaration ::= procedure_heading ';'  procedure_block .";
  artLabelStrings[ARTL_ART_procedure_declaration_1206] = "";
  artlhsL[ARTL_ART_procedure_declaration_1206] = ARTL_ART_procedure_declaration;
  artSlotInstanceOfs[ARTL_ART_procedure_declaration_1206] = ARTL_ART_procedure_block;
  artKindOfs[ARTL_ART_procedure_declaration_1206] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_declaration_1206] = true;
  arteoR_pL[ARTL_ART_procedure_declaration_1206] = true;
  artPopD[ARTL_ART_procedure_declaration_1206] = true;
}

public void artTableInitialiser_ART_procedure_heading() {
  artLabelInternalStrings[ARTL_ART_procedure_heading] = "procedure_heading";
  artLabelStrings[ARTL_ART_procedure_heading] = "procedure_heading";
  artKindOfs[ARTL_ART_procedure_heading] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_heading_1156] = "procedure_heading ::= . 'procedure'  ID procedure_heading_28 ";
  artLabelStrings[ARTL_ART_procedure_heading_1156] = "";
  artlhsL[ARTL_ART_procedure_heading_1156] = ARTL_ART_procedure_heading;
  artKindOfs[ARTL_ART_procedure_heading_1156] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_heading_1157] = "procedure_heading ::= 'procedure'  ID procedure_heading_28 ";
  artLabelStrings[ARTL_ART_procedure_heading_1157] = "";
  artlhsL[ARTL_ART_procedure_heading_1157] = ARTL_ART_procedure_heading;
  artLabelInternalStrings[ARTL_ART_procedure_heading_1158] = "procedure_heading ::= 'procedure'  . ID procedure_heading_28 ";
  artLabelStrings[ARTL_ART_procedure_heading_1158] = "";
  artlhsL[ARTL_ART_procedure_heading_1158] = ARTL_ART_procedure_heading;
  artKindOfs[ARTL_ART_procedure_heading_1158] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_heading_1158] = true;
  artLabelInternalStrings[ARTL_ART_procedure_heading_1160] = "procedure_heading ::= 'procedure'  ID . procedure_heading_28 ";
  artLabelStrings[ARTL_ART_procedure_heading_1160] = "";
  artlhsL[ARTL_ART_procedure_heading_1160] = ARTL_ART_procedure_heading;
  artSlotInstanceOfs[ARTL_ART_procedure_heading_1160] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_procedure_heading_1160] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_heading_1162] = "procedure_heading ::= 'procedure'  ID procedure_heading_28 .";
  artLabelStrings[ARTL_ART_procedure_heading_1162] = "";
  artlhsL[ARTL_ART_procedure_heading_1162] = ARTL_ART_procedure_heading;
  artSlotInstanceOfs[ARTL_ART_procedure_heading_1162] = ARTL_ART_procedure_heading_28;
  artKindOfs[ARTL_ART_procedure_heading_1162] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_heading_1162] = true;
  arteoR_pL[ARTL_ART_procedure_heading_1162] = true;
  artPopD[ARTL_ART_procedure_heading_1162] = true;
}

public void artTableInitialiser_ART_procedure_heading_28() {
  artLabelInternalStrings[ARTL_ART_procedure_heading_28] = "procedure_heading_28";
  artLabelStrings[ARTL_ART_procedure_heading_28] = "procedure_heading_28";
  artKindOfs[ARTL_ART_procedure_heading_28] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_heading_28_1232] = "procedure_heading_28 ::= . # ";
  artLabelStrings[ARTL_ART_procedure_heading_28_1232] = "";
  artlhsL[ARTL_ART_procedure_heading_28_1232] = ARTL_ART_procedure_heading_28;
  artKindOfs[ARTL_ART_procedure_heading_28_1232] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_procedure_heading_28_1232] = true;
  artLabelInternalStrings[ARTL_ART_procedure_heading_28_1234] = "procedure_heading_28 ::= # .";
  artLabelStrings[ARTL_ART_procedure_heading_28_1234] = "";
  artlhsL[ARTL_ART_procedure_heading_28_1234] = ARTL_ART_procedure_heading_28;
  artKindOfs[ARTL_ART_procedure_heading_28_1234] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_heading_28_1234] = true;
  arteoR_pL[ARTL_ART_procedure_heading_28_1234] = true;
  artPopD[ARTL_ART_procedure_heading_28_1234] = true;
  artLabelInternalStrings[ARTL_ART_procedure_heading_28_1236] = "procedure_heading_28 ::= . formal_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_heading_28_1236] = "";
  artlhsL[ARTL_ART_procedure_heading_28_1236] = ARTL_ART_procedure_heading_28;
  artKindOfs[ARTL_ART_procedure_heading_28_1236] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_heading_28_1238] = "procedure_heading_28 ::= formal_parameter_list .";
  artLabelStrings[ARTL_ART_procedure_heading_28_1238] = "";
  artlhsL[ARTL_ART_procedure_heading_28_1238] = ARTL_ART_procedure_heading_28;
  artSlotInstanceOfs[ARTL_ART_procedure_heading_28_1238] = ARTL_ART_formal_parameter_list;
  artKindOfs[ARTL_ART_procedure_heading_28_1238] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_heading_28_1238] = true;
  arteoR_pL[ARTL_ART_procedure_heading_28_1238] = true;
  artPopD[ARTL_ART_procedure_heading_28_1238] = true;
}

public void artTableInitialiser_ART_procedure_identification() {
  artLabelInternalStrings[ARTL_ART_procedure_identification] = "procedure_identification";
  artLabelStrings[ARTL_ART_procedure_identification] = "procedure_identification";
  artKindOfs[ARTL_ART_procedure_identification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_identification_1226] = "procedure_identification ::= . 'procedure'  procedure_ID ";
  artLabelStrings[ARTL_ART_procedure_identification_1226] = "";
  artlhsL[ARTL_ART_procedure_identification_1226] = ARTL_ART_procedure_identification;
  artKindOfs[ARTL_ART_procedure_identification_1226] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_identification_1227] = "procedure_identification ::= 'procedure'  procedure_ID ";
  artLabelStrings[ARTL_ART_procedure_identification_1227] = "";
  artlhsL[ARTL_ART_procedure_identification_1227] = ARTL_ART_procedure_identification;
  artLabelInternalStrings[ARTL_ART_procedure_identification_1228] = "procedure_identification ::= 'procedure'  . procedure_ID ";
  artLabelStrings[ARTL_ART_procedure_identification_1228] = "";
  artlhsL[ARTL_ART_procedure_identification_1228] = ARTL_ART_procedure_identification;
  artKindOfs[ARTL_ART_procedure_identification_1228] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_identification_1228] = true;
  artLabelInternalStrings[ARTL_ART_procedure_identification_1230] = "procedure_identification ::= 'procedure'  procedure_ID .";
  artLabelStrings[ARTL_ART_procedure_identification_1230] = "";
  artlhsL[ARTL_ART_procedure_identification_1230] = ARTL_ART_procedure_identification;
  artSlotInstanceOfs[ARTL_ART_procedure_identification_1230] = ARTL_ART_procedure_ID;
  artKindOfs[ARTL_ART_procedure_identification_1230] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_identification_1230] = true;
  arteoR_pL[ARTL_ART_procedure_identification_1230] = true;
  artPopD[ARTL_ART_procedure_identification_1230] = true;
}

public void artTableInitialiser_ART_procedure_statement() {
  artLabelInternalStrings[ARTL_ART_procedure_statement] = "procedure_statement";
  artLabelStrings[ARTL_ART_procedure_statement] = "procedure_statement";
  artKindOfs[ARTL_ART_procedure_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1240] = "procedure_statement ::= . procedure_ID procedure_statement_29 ";
  artLabelStrings[ARTL_ART_procedure_statement_1240] = "";
  artlhsL[ARTL_ART_procedure_statement_1240] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1240] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1242] = "procedure_statement ::= procedure_ID . procedure_statement_29 ";
  artLabelStrings[ARTL_ART_procedure_statement_1242] = "";
  artlhsL[ARTL_ART_procedure_statement_1242] = ARTL_ART_procedure_statement;
  artSlotInstanceOfs[ARTL_ART_procedure_statement_1242] = ARTL_ART_procedure_ID;
  artKindOfs[ARTL_ART_procedure_statement_1242] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_statement_1242] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1244] = "procedure_statement ::= procedure_ID procedure_statement_29 .";
  artLabelStrings[ARTL_ART_procedure_statement_1244] = "";
  artlhsL[ARTL_ART_procedure_statement_1244] = ARTL_ART_procedure_statement;
  artSlotInstanceOfs[ARTL_ART_procedure_statement_1244] = ARTL_ART_procedure_statement_29;
  artKindOfs[ARTL_ART_procedure_statement_1244] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_statement_1244] = true;
  arteoR_pL[ARTL_ART_procedure_statement_1244] = true;
  artPopD[ARTL_ART_procedure_statement_1244] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1246] = "procedure_statement ::= . 'read'  read_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1246] = "";
  artlhsL[ARTL_ART_procedure_statement_1246] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1246] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1247] = "procedure_statement ::= 'read'  read_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1247] = "";
  artlhsL[ARTL_ART_procedure_statement_1247] = ARTL_ART_procedure_statement;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1248] = "procedure_statement ::= 'read'  . read_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1248] = "";
  artlhsL[ARTL_ART_procedure_statement_1248] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1248] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_statement_1248] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1250] = "procedure_statement ::= 'read'  read_parameter_list .";
  artLabelStrings[ARTL_ART_procedure_statement_1250] = "";
  artlhsL[ARTL_ART_procedure_statement_1250] = ARTL_ART_procedure_statement;
  artSlotInstanceOfs[ARTL_ART_procedure_statement_1250] = ARTL_ART_read_parameter_list;
  artKindOfs[ARTL_ART_procedure_statement_1250] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_statement_1250] = true;
  arteoR_pL[ARTL_ART_procedure_statement_1250] = true;
  artPopD[ARTL_ART_procedure_statement_1250] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1252] = "procedure_statement ::= . 'readln'  readln_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1252] = "";
  artlhsL[ARTL_ART_procedure_statement_1252] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1252] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1253] = "procedure_statement ::= 'readln'  readln_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1253] = "";
  artlhsL[ARTL_ART_procedure_statement_1253] = ARTL_ART_procedure_statement;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1254] = "procedure_statement ::= 'readln'  . readln_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1254] = "";
  artlhsL[ARTL_ART_procedure_statement_1254] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1254] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_statement_1254] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1256] = "procedure_statement ::= 'readln'  readln_parameter_list .";
  artLabelStrings[ARTL_ART_procedure_statement_1256] = "";
  artlhsL[ARTL_ART_procedure_statement_1256] = ARTL_ART_procedure_statement;
  artSlotInstanceOfs[ARTL_ART_procedure_statement_1256] = ARTL_ART_readln_parameter_list;
  artKindOfs[ARTL_ART_procedure_statement_1256] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_statement_1256] = true;
  arteoR_pL[ARTL_ART_procedure_statement_1256] = true;
  artPopD[ARTL_ART_procedure_statement_1256] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1258] = "procedure_statement ::= . 'write'  write_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1258] = "";
  artlhsL[ARTL_ART_procedure_statement_1258] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1258] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1259] = "procedure_statement ::= 'write'  write_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1259] = "";
  artlhsL[ARTL_ART_procedure_statement_1259] = ARTL_ART_procedure_statement;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1260] = "procedure_statement ::= 'write'  . write_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1260] = "";
  artlhsL[ARTL_ART_procedure_statement_1260] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1260] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_statement_1260] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1262] = "procedure_statement ::= 'write'  write_parameter_list .";
  artLabelStrings[ARTL_ART_procedure_statement_1262] = "";
  artlhsL[ARTL_ART_procedure_statement_1262] = ARTL_ART_procedure_statement;
  artSlotInstanceOfs[ARTL_ART_procedure_statement_1262] = ARTL_ART_write_parameter_list;
  artKindOfs[ARTL_ART_procedure_statement_1262] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_statement_1262] = true;
  arteoR_pL[ARTL_ART_procedure_statement_1262] = true;
  artPopD[ARTL_ART_procedure_statement_1262] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1264] = "procedure_statement ::= . 'writeln'  writeln_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1264] = "";
  artlhsL[ARTL_ART_procedure_statement_1264] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1264] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1265] = "procedure_statement ::= 'writeln'  writeln_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1265] = "";
  artlhsL[ARTL_ART_procedure_statement_1265] = ARTL_ART_procedure_statement;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1266] = "procedure_statement ::= 'writeln'  . writeln_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_1266] = "";
  artlhsL[ARTL_ART_procedure_statement_1266] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_procedure_statement_1266] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_procedure_statement_1266] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_1268] = "procedure_statement ::= 'writeln'  writeln_parameter_list .";
  artLabelStrings[ARTL_ART_procedure_statement_1268] = "";
  artlhsL[ARTL_ART_procedure_statement_1268] = ARTL_ART_procedure_statement;
  artSlotInstanceOfs[ARTL_ART_procedure_statement_1268] = ARTL_ART_writeln_parameter_list;
  artKindOfs[ARTL_ART_procedure_statement_1268] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_statement_1268] = true;
  arteoR_pL[ARTL_ART_procedure_statement_1268] = true;
  artPopD[ARTL_ART_procedure_statement_1268] = true;
}

public void artTableInitialiser_ART_procedure_statement_29() {
  artLabelInternalStrings[ARTL_ART_procedure_statement_29] = "procedure_statement_29";
  artLabelStrings[ARTL_ART_procedure_statement_29] = "procedure_statement_29";
  artKindOfs[ARTL_ART_procedure_statement_29] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_procedure_statement_29_1270] = "procedure_statement_29 ::= . # ";
  artLabelStrings[ARTL_ART_procedure_statement_29_1270] = "";
  artlhsL[ARTL_ART_procedure_statement_29_1270] = ARTL_ART_procedure_statement_29;
  artKindOfs[ARTL_ART_procedure_statement_29_1270] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_procedure_statement_29_1270] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_29_1272] = "procedure_statement_29 ::= # .";
  artLabelStrings[ARTL_ART_procedure_statement_29_1272] = "";
  artlhsL[ARTL_ART_procedure_statement_29_1272] = ARTL_ART_procedure_statement_29;
  artKindOfs[ARTL_ART_procedure_statement_29_1272] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_statement_29_1272] = true;
  arteoR_pL[ARTL_ART_procedure_statement_29_1272] = true;
  artPopD[ARTL_ART_procedure_statement_29_1272] = true;
  artLabelInternalStrings[ARTL_ART_procedure_statement_29_1274] = "procedure_statement_29 ::= . actual_parameter_list ";
  artLabelStrings[ARTL_ART_procedure_statement_29_1274] = "";
  artlhsL[ARTL_ART_procedure_statement_29_1274] = ARTL_ART_procedure_statement_29;
  artKindOfs[ARTL_ART_procedure_statement_29_1274] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_procedure_statement_29_1276] = "procedure_statement_29 ::= actual_parameter_list .";
  artLabelStrings[ARTL_ART_procedure_statement_29_1276] = "";
  artlhsL[ARTL_ART_procedure_statement_29_1276] = ARTL_ART_procedure_statement_29;
  artSlotInstanceOfs[ARTL_ART_procedure_statement_29_1276] = ARTL_ART_actual_parameter_list;
  artKindOfs[ARTL_ART_procedure_statement_29_1276] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_procedure_statement_29_1276] = true;
  arteoR_pL[ARTL_ART_procedure_statement_29_1276] = true;
  artPopD[ARTL_ART_procedure_statement_29_1276] = true;
}

public void artTableInitialiser_ART_program() {
  artLabelInternalStrings[ARTL_ART_program] = "program";
  artLabelStrings[ARTL_ART_program] = "program";
  artKindOfs[ARTL_ART_program] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_program_2] = "program ::= . program_heading ';'  program_block ";
  artLabelStrings[ARTL_ART_program_2] = "";
  artlhsL[ARTL_ART_program_2] = ARTL_ART_program;
  artKindOfs[ARTL_ART_program_2] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_program_4] = "program ::= program_heading . ';'  program_block ";
  artLabelStrings[ARTL_ART_program_4] = "";
  artlhsL[ARTL_ART_program_4] = ARTL_ART_program;
  artSlotInstanceOfs[ARTL_ART_program_4] = ARTL_ART_program_heading;
  artKindOfs[ARTL_ART_program_4] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_program_4] = true;
  artLabelInternalStrings[ARTL_ART_program_5] = "program ::= program_heading ';'  program_block ";
  artLabelStrings[ARTL_ART_program_5] = "";
  artlhsL[ARTL_ART_program_5] = ARTL_ART_program;
  artLabelInternalStrings[ARTL_ART_program_6] = "program ::= program_heading ';'  . program_block ";
  artLabelStrings[ARTL_ART_program_6] = "";
  artlhsL[ARTL_ART_program_6] = ARTL_ART_program;
  artKindOfs[ARTL_ART_program_6] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_program_8] = "program ::= program_heading ';'  program_block .";
  artLabelStrings[ARTL_ART_program_8] = "";
  artlhsL[ARTL_ART_program_8] = ARTL_ART_program;
  artSlotInstanceOfs[ARTL_ART_program_8] = ARTL_ART_program_block;
  artKindOfs[ARTL_ART_program_8] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_program_8] = true;
  arteoR_pL[ARTL_ART_program_8] = true;
  artPopD[ARTL_ART_program_8] = true;
}

public void artTableInitialiser_ART_program_block() {
  artLabelInternalStrings[ARTL_ART_program_block] = "program_block";
  artLabelStrings[ARTL_ART_program_block] = "program_block";
  artKindOfs[ARTL_ART_program_block] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_program_block_18] = "program_block ::= . block ";
  artLabelStrings[ARTL_ART_program_block_18] = "";
  artlhsL[ARTL_ART_program_block_18] = ARTL_ART_program_block;
  artKindOfs[ARTL_ART_program_block_18] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_program_block_20] = "program_block ::= block .";
  artLabelStrings[ARTL_ART_program_block_20] = "";
  artlhsL[ARTL_ART_program_block_20] = ARTL_ART_program_block;
  artSlotInstanceOfs[ARTL_ART_program_block_20] = ARTL_ART_block;
  artKindOfs[ARTL_ART_program_block_20] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_program_block_20] = true;
  arteoR_pL[ARTL_ART_program_block_20] = true;
  artPopD[ARTL_ART_program_block_20] = true;
}

public void artTableInitialiser_ART_program_heading() {
  artLabelInternalStrings[ARTL_ART_program_heading] = "program_heading";
  artLabelStrings[ARTL_ART_program_heading] = "program_heading";
  artKindOfs[ARTL_ART_program_heading] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_program_heading_10] = "program_heading ::= . 'program'  ID program_heading_30 ";
  artLabelStrings[ARTL_ART_program_heading_10] = "";
  artlhsL[ARTL_ART_program_heading_10] = ARTL_ART_program_heading;
  artKindOfs[ARTL_ART_program_heading_10] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_program_heading_11] = "program_heading ::= 'program'  ID program_heading_30 ";
  artLabelStrings[ARTL_ART_program_heading_11] = "";
  artlhsL[ARTL_ART_program_heading_11] = ARTL_ART_program_heading;
  artLabelInternalStrings[ARTL_ART_program_heading_12] = "program_heading ::= 'program'  . ID program_heading_30 ";
  artLabelStrings[ARTL_ART_program_heading_12] = "";
  artlhsL[ARTL_ART_program_heading_12] = ARTL_ART_program_heading;
  artKindOfs[ARTL_ART_program_heading_12] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_program_heading_12] = true;
  artLabelInternalStrings[ARTL_ART_program_heading_14] = "program_heading ::= 'program'  ID . program_heading_30 ";
  artLabelStrings[ARTL_ART_program_heading_14] = "";
  artlhsL[ARTL_ART_program_heading_14] = ARTL_ART_program_heading;
  artSlotInstanceOfs[ARTL_ART_program_heading_14] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_program_heading_14] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_program_heading_16] = "program_heading ::= 'program'  ID program_heading_30 .";
  artLabelStrings[ARTL_ART_program_heading_16] = "";
  artlhsL[ARTL_ART_program_heading_16] = ARTL_ART_program_heading;
  artSlotInstanceOfs[ARTL_ART_program_heading_16] = ARTL_ART_program_heading_30;
  artKindOfs[ARTL_ART_program_heading_16] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_program_heading_16] = true;
  arteoR_pL[ARTL_ART_program_heading_16] = true;
  artPopD[ARTL_ART_program_heading_16] = true;
}

public void artTableInitialiser_ART_program_heading_30() {
  artLabelInternalStrings[ARTL_ART_program_heading_30] = "program_heading_30";
  artLabelStrings[ARTL_ART_program_heading_30] = "program_heading_30";
  artKindOfs[ARTL_ART_program_heading_30] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_program_heading_30_1306] = "program_heading_30 ::= . # ";
  artLabelStrings[ARTL_ART_program_heading_30_1306] = "";
  artlhsL[ARTL_ART_program_heading_30_1306] = ARTL_ART_program_heading_30;
  artKindOfs[ARTL_ART_program_heading_30_1306] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_program_heading_30_1306] = true;
  artLabelInternalStrings[ARTL_ART_program_heading_30_1308] = "program_heading_30 ::= # .";
  artLabelStrings[ARTL_ART_program_heading_30_1308] = "";
  artlhsL[ARTL_ART_program_heading_30_1308] = ARTL_ART_program_heading_30;
  artKindOfs[ARTL_ART_program_heading_30_1308] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_program_heading_30_1308] = true;
  arteoR_pL[ARTL_ART_program_heading_30_1308] = true;
  artPopD[ARTL_ART_program_heading_30_1308] = true;
  artLabelInternalStrings[ARTL_ART_program_heading_30_1310] = "program_heading_30 ::= . '('  program_parameters ')'  ";
  artLabelStrings[ARTL_ART_program_heading_30_1310] = "";
  artlhsL[ARTL_ART_program_heading_30_1310] = ARTL_ART_program_heading_30;
  artKindOfs[ARTL_ART_program_heading_30_1310] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_program_heading_30_1311] = "program_heading_30 ::= '('  program_parameters ')'  ";
  artLabelStrings[ARTL_ART_program_heading_30_1311] = "";
  artlhsL[ARTL_ART_program_heading_30_1311] = ARTL_ART_program_heading_30;
  artLabelInternalStrings[ARTL_ART_program_heading_30_1312] = "program_heading_30 ::= '('  . program_parameters ')'  ";
  artLabelStrings[ARTL_ART_program_heading_30_1312] = "";
  artlhsL[ARTL_ART_program_heading_30_1312] = ARTL_ART_program_heading_30;
  artKindOfs[ARTL_ART_program_heading_30_1312] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_program_heading_30_1312] = true;
  artLabelInternalStrings[ARTL_ART_program_heading_30_1314] = "program_heading_30 ::= '('  program_parameters . ')'  ";
  artLabelStrings[ARTL_ART_program_heading_30_1314] = "";
  artlhsL[ARTL_ART_program_heading_30_1314] = ARTL_ART_program_heading_30;
  artSlotInstanceOfs[ARTL_ART_program_heading_30_1314] = ARTL_ART_program_parameters;
  artKindOfs[ARTL_ART_program_heading_30_1314] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_program_heading_30_1314] = true;
  artLabelInternalStrings[ARTL_ART_program_heading_30_1315] = "program_heading_30 ::= '('  program_parameters ')'  ";
  artLabelStrings[ARTL_ART_program_heading_30_1315] = "";
  artlhsL[ARTL_ART_program_heading_30_1315] = ARTL_ART_program_heading_30;
  artPopD[ARTL_ART_program_heading_30_1315] = true;
  artLabelInternalStrings[ARTL_ART_program_heading_30_1316] = "program_heading_30 ::= '('  program_parameters ')'  .";
  artLabelStrings[ARTL_ART_program_heading_30_1316] = "";
  artlhsL[ARTL_ART_program_heading_30_1316] = ARTL_ART_program_heading_30;
  artKindOfs[ARTL_ART_program_heading_30_1316] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_program_heading_30_1316] = true;
  arteoR_pL[ARTL_ART_program_heading_30_1316] = true;
  artPopD[ARTL_ART_program_heading_30_1316] = true;
}

public void artTableInitialiser_ART_program_parameters() {
  artLabelInternalStrings[ARTL_ART_program_parameters] = "program_parameters";
  artLabelStrings[ARTL_ART_program_parameters] = "program_parameters";
  artKindOfs[ARTL_ART_program_parameters] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_program_parameters_1318] = "program_parameters ::= . ID_list ";
  artLabelStrings[ARTL_ART_program_parameters_1318] = "";
  artlhsL[ARTL_ART_program_parameters_1318] = ARTL_ART_program_parameters;
  artKindOfs[ARTL_ART_program_parameters_1318] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_program_parameters_1320] = "program_parameters ::= ID_list .";
  artLabelStrings[ARTL_ART_program_parameters_1320] = "";
  artlhsL[ARTL_ART_program_parameters_1320] = ARTL_ART_program_parameters;
  artSlotInstanceOfs[ARTL_ART_program_parameters_1320] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_program_parameters_1320] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_program_parameters_1320] = true;
  arteoR_pL[ARTL_ART_program_parameters_1320] = true;
  artPopD[ARTL_ART_program_parameters_1320] = true;
}

public void artTableInitialiser_ART_read_parameter_list() {
  artLabelInternalStrings[ARTL_ART_read_parameter_list] = "read_parameter_list";
  artLabelStrings[ARTL_ART_read_parameter_list] = "read_parameter_list";
  artKindOfs[ARTL_ART_read_parameter_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_1278] = "read_parameter_list ::= . '('  variable_access read_parameter_list_31 ')'  ";
  artLabelStrings[ARTL_ART_read_parameter_list_1278] = "";
  artlhsL[ARTL_ART_read_parameter_list_1278] = ARTL_ART_read_parameter_list;
  artKindOfs[ARTL_ART_read_parameter_list_1278] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_1279] = "read_parameter_list ::= '('  variable_access read_parameter_list_31 ')'  ";
  artLabelStrings[ARTL_ART_read_parameter_list_1279] = "";
  artlhsL[ARTL_ART_read_parameter_list_1279] = ARTL_ART_read_parameter_list;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_1280] = "read_parameter_list ::= '('  . variable_access read_parameter_list_31 ')'  ";
  artLabelStrings[ARTL_ART_read_parameter_list_1280] = "";
  artlhsL[ARTL_ART_read_parameter_list_1280] = ARTL_ART_read_parameter_list;
  artKindOfs[ARTL_ART_read_parameter_list_1280] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_read_parameter_list_1280] = true;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_1282] = "read_parameter_list ::= '('  variable_access . read_parameter_list_31 ')'  ";
  artLabelStrings[ARTL_ART_read_parameter_list_1282] = "";
  artlhsL[ARTL_ART_read_parameter_list_1282] = ARTL_ART_read_parameter_list;
  artSlotInstanceOfs[ARTL_ART_read_parameter_list_1282] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_read_parameter_list_1282] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_1284] = "read_parameter_list ::= '('  variable_access read_parameter_list_31 . ')'  ";
  artLabelStrings[ARTL_ART_read_parameter_list_1284] = "";
  artlhsL[ARTL_ART_read_parameter_list_1284] = ARTL_ART_read_parameter_list;
  artSlotInstanceOfs[ARTL_ART_read_parameter_list_1284] = ARTL_ART_read_parameter_list_31;
  artKindOfs[ARTL_ART_read_parameter_list_1284] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_read_parameter_list_1284] = true;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_1285] = "read_parameter_list ::= '('  variable_access read_parameter_list_31 ')'  ";
  artLabelStrings[ARTL_ART_read_parameter_list_1285] = "";
  artlhsL[ARTL_ART_read_parameter_list_1285] = ARTL_ART_read_parameter_list;
  artPopD[ARTL_ART_read_parameter_list_1285] = true;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_1286] = "read_parameter_list ::= '('  variable_access read_parameter_list_31 ')'  .";
  artLabelStrings[ARTL_ART_read_parameter_list_1286] = "";
  artlhsL[ARTL_ART_read_parameter_list_1286] = ARTL_ART_read_parameter_list;
  artKindOfs[ARTL_ART_read_parameter_list_1286] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_read_parameter_list_1286] = true;
  arteoR_pL[ARTL_ART_read_parameter_list_1286] = true;
  artPopD[ARTL_ART_read_parameter_list_1286] = true;
}

public void artTableInitialiser_ART_read_parameter_list_31() {
  artLabelInternalStrings[ARTL_ART_read_parameter_list_31] = "read_parameter_list_31";
  artLabelStrings[ARTL_ART_read_parameter_list_31] = "read_parameter_list_31";
  artKindOfs[ARTL_ART_read_parameter_list_31] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_31_1322] = "read_parameter_list_31 ::= . # ";
  artLabelStrings[ARTL_ART_read_parameter_list_31_1322] = "";
  artlhsL[ARTL_ART_read_parameter_list_31_1322] = ARTL_ART_read_parameter_list_31;
  artKindOfs[ARTL_ART_read_parameter_list_31_1322] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_read_parameter_list_31_1322] = true;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_31_1324] = "read_parameter_list_31 ::= # .";
  artLabelStrings[ARTL_ART_read_parameter_list_31_1324] = "";
  artlhsL[ARTL_ART_read_parameter_list_31_1324] = ARTL_ART_read_parameter_list_31;
  artKindOfs[ARTL_ART_read_parameter_list_31_1324] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_read_parameter_list_31_1324] = true;
  arteoR_pL[ARTL_ART_read_parameter_list_31_1324] = true;
  artPopD[ARTL_ART_read_parameter_list_31_1324] = true;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_31_1326] = "read_parameter_list_31 ::= . read_parameter_list_31 ','  variable_access ";
  artLabelStrings[ARTL_ART_read_parameter_list_31_1326] = "";
  artlhsL[ARTL_ART_read_parameter_list_31_1326] = ARTL_ART_read_parameter_list_31;
  artKindOfs[ARTL_ART_read_parameter_list_31_1326] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_31_1328] = "read_parameter_list_31 ::= read_parameter_list_31 . ','  variable_access ";
  artLabelStrings[ARTL_ART_read_parameter_list_31_1328] = "";
  artlhsL[ARTL_ART_read_parameter_list_31_1328] = ARTL_ART_read_parameter_list_31;
  artSlotInstanceOfs[ARTL_ART_read_parameter_list_31_1328] = ARTL_ART_read_parameter_list_31;
  artKindOfs[ARTL_ART_read_parameter_list_31_1328] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_read_parameter_list_31_1328] = true;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_31_1329] = "read_parameter_list_31 ::= read_parameter_list_31 ','  variable_access ";
  artLabelStrings[ARTL_ART_read_parameter_list_31_1329] = "";
  artlhsL[ARTL_ART_read_parameter_list_31_1329] = ARTL_ART_read_parameter_list_31;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_31_1330] = "read_parameter_list_31 ::= read_parameter_list_31 ','  . variable_access ";
  artLabelStrings[ARTL_ART_read_parameter_list_31_1330] = "";
  artlhsL[ARTL_ART_read_parameter_list_31_1330] = ARTL_ART_read_parameter_list_31;
  artKindOfs[ARTL_ART_read_parameter_list_31_1330] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_read_parameter_list_31_1332] = "read_parameter_list_31 ::= read_parameter_list_31 ','  variable_access .";
  artLabelStrings[ARTL_ART_read_parameter_list_31_1332] = "";
  artlhsL[ARTL_ART_read_parameter_list_31_1332] = ARTL_ART_read_parameter_list_31;
  artSlotInstanceOfs[ARTL_ART_read_parameter_list_31_1332] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_read_parameter_list_31_1332] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_read_parameter_list_31_1332] = true;
  arteoR_pL[ARTL_ART_read_parameter_list_31_1332] = true;
  artPopD[ARTL_ART_read_parameter_list_31_1332] = true;
}

public void artTableInitialiser_ART_readln_parameter_list() {
  artLabelInternalStrings[ARTL_ART_readln_parameter_list] = "readln_parameter_list";
  artLabelStrings[ARTL_ART_readln_parameter_list] = "readln_parameter_list";
  artKindOfs[ARTL_ART_readln_parameter_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_1288] = "readln_parameter_list ::= . readln_parameter_list_32 ";
  artLabelStrings[ARTL_ART_readln_parameter_list_1288] = "";
  artlhsL[ARTL_ART_readln_parameter_list_1288] = ARTL_ART_readln_parameter_list;
  artKindOfs[ARTL_ART_readln_parameter_list_1288] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_1290] = "readln_parameter_list ::= readln_parameter_list_32 .";
  artLabelStrings[ARTL_ART_readln_parameter_list_1290] = "";
  artlhsL[ARTL_ART_readln_parameter_list_1290] = ARTL_ART_readln_parameter_list;
  artSlotInstanceOfs[ARTL_ART_readln_parameter_list_1290] = ARTL_ART_readln_parameter_list_32;
  artKindOfs[ARTL_ART_readln_parameter_list_1290] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_readln_parameter_list_1290] = true;
  arteoR_pL[ARTL_ART_readln_parameter_list_1290] = true;
  artPopD[ARTL_ART_readln_parameter_list_1290] = true;
}

public void artTableInitialiser_ART_readln_parameter_list_32() {
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32] = "readln_parameter_list_32";
  artLabelStrings[ARTL_ART_readln_parameter_list_32] = "readln_parameter_list_32";
  artKindOfs[ARTL_ART_readln_parameter_list_32] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1334] = "readln_parameter_list_32 ::= . # ";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1334] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1334] = ARTL_ART_readln_parameter_list_32;
  artKindOfs[ARTL_ART_readln_parameter_list_32_1334] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_readln_parameter_list_32_1334] = true;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1336] = "readln_parameter_list_32 ::= # .";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1336] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1336] = ARTL_ART_readln_parameter_list_32;
  artKindOfs[ARTL_ART_readln_parameter_list_32_1336] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_readln_parameter_list_32_1336] = true;
  arteoR_pL[ARTL_ART_readln_parameter_list_32_1336] = true;
  artPopD[ARTL_ART_readln_parameter_list_32_1336] = true;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1338] = "readln_parameter_list_32 ::= . '('  variable_access readln_parameter_list_33 ')'  ";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1338] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1338] = ARTL_ART_readln_parameter_list_32;
  artKindOfs[ARTL_ART_readln_parameter_list_32_1338] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1339] = "readln_parameter_list_32 ::= '('  variable_access readln_parameter_list_33 ')'  ";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1339] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1339] = ARTL_ART_readln_parameter_list_32;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1340] = "readln_parameter_list_32 ::= '('  . variable_access readln_parameter_list_33 ')'  ";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1340] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1340] = ARTL_ART_readln_parameter_list_32;
  artKindOfs[ARTL_ART_readln_parameter_list_32_1340] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_readln_parameter_list_32_1340] = true;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1342] = "readln_parameter_list_32 ::= '('  variable_access . readln_parameter_list_33 ')'  ";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1342] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1342] = ARTL_ART_readln_parameter_list_32;
  artSlotInstanceOfs[ARTL_ART_readln_parameter_list_32_1342] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_readln_parameter_list_32_1342] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1344] = "readln_parameter_list_32 ::= '('  variable_access readln_parameter_list_33 . ')'  ";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1344] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1344] = ARTL_ART_readln_parameter_list_32;
  artSlotInstanceOfs[ARTL_ART_readln_parameter_list_32_1344] = ARTL_ART_readln_parameter_list_33;
  artKindOfs[ARTL_ART_readln_parameter_list_32_1344] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_readln_parameter_list_32_1344] = true;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1345] = "readln_parameter_list_32 ::= '('  variable_access readln_parameter_list_33 ')'  ";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1345] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1345] = ARTL_ART_readln_parameter_list_32;
  artPopD[ARTL_ART_readln_parameter_list_32_1345] = true;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_32_1346] = "readln_parameter_list_32 ::= '('  variable_access readln_parameter_list_33 ')'  .";
  artLabelStrings[ARTL_ART_readln_parameter_list_32_1346] = "";
  artlhsL[ARTL_ART_readln_parameter_list_32_1346] = ARTL_ART_readln_parameter_list_32;
  artKindOfs[ARTL_ART_readln_parameter_list_32_1346] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_readln_parameter_list_32_1346] = true;
  arteoR_pL[ARTL_ART_readln_parameter_list_32_1346] = true;
  artPopD[ARTL_ART_readln_parameter_list_32_1346] = true;
}

public void artTableInitialiser_ART_readln_parameter_list_33() {
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_33] = "readln_parameter_list_33";
  artLabelStrings[ARTL_ART_readln_parameter_list_33] = "readln_parameter_list_33";
  artKindOfs[ARTL_ART_readln_parameter_list_33] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_33_1348] = "readln_parameter_list_33 ::= . # ";
  artLabelStrings[ARTL_ART_readln_parameter_list_33_1348] = "";
  artlhsL[ARTL_ART_readln_parameter_list_33_1348] = ARTL_ART_readln_parameter_list_33;
  artKindOfs[ARTL_ART_readln_parameter_list_33_1348] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_readln_parameter_list_33_1348] = true;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_33_1350] = "readln_parameter_list_33 ::= # .";
  artLabelStrings[ARTL_ART_readln_parameter_list_33_1350] = "";
  artlhsL[ARTL_ART_readln_parameter_list_33_1350] = ARTL_ART_readln_parameter_list_33;
  artKindOfs[ARTL_ART_readln_parameter_list_33_1350] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_readln_parameter_list_33_1350] = true;
  arteoR_pL[ARTL_ART_readln_parameter_list_33_1350] = true;
  artPopD[ARTL_ART_readln_parameter_list_33_1350] = true;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_33_1352] = "readln_parameter_list_33 ::= . readln_parameter_list_33 ','  variable_access ";
  artLabelStrings[ARTL_ART_readln_parameter_list_33_1352] = "";
  artlhsL[ARTL_ART_readln_parameter_list_33_1352] = ARTL_ART_readln_parameter_list_33;
  artKindOfs[ARTL_ART_readln_parameter_list_33_1352] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_33_1354] = "readln_parameter_list_33 ::= readln_parameter_list_33 . ','  variable_access ";
  artLabelStrings[ARTL_ART_readln_parameter_list_33_1354] = "";
  artlhsL[ARTL_ART_readln_parameter_list_33_1354] = ARTL_ART_readln_parameter_list_33;
  artSlotInstanceOfs[ARTL_ART_readln_parameter_list_33_1354] = ARTL_ART_readln_parameter_list_33;
  artKindOfs[ARTL_ART_readln_parameter_list_33_1354] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_readln_parameter_list_33_1354] = true;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_33_1355] = "readln_parameter_list_33 ::= readln_parameter_list_33 ','  variable_access ";
  artLabelStrings[ARTL_ART_readln_parameter_list_33_1355] = "";
  artlhsL[ARTL_ART_readln_parameter_list_33_1355] = ARTL_ART_readln_parameter_list_33;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_33_1356] = "readln_parameter_list_33 ::= readln_parameter_list_33 ','  . variable_access ";
  artLabelStrings[ARTL_ART_readln_parameter_list_33_1356] = "";
  artlhsL[ARTL_ART_readln_parameter_list_33_1356] = ARTL_ART_readln_parameter_list_33;
  artKindOfs[ARTL_ART_readln_parameter_list_33_1356] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_readln_parameter_list_33_1358] = "readln_parameter_list_33 ::= readln_parameter_list_33 ','  variable_access .";
  artLabelStrings[ARTL_ART_readln_parameter_list_33_1358] = "";
  artlhsL[ARTL_ART_readln_parameter_list_33_1358] = ARTL_ART_readln_parameter_list_33;
  artSlotInstanceOfs[ARTL_ART_readln_parameter_list_33_1358] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_readln_parameter_list_33_1358] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_readln_parameter_list_33_1358] = true;
  arteoR_pL[ARTL_ART_readln_parameter_list_33_1358] = true;
  artPopD[ARTL_ART_readln_parameter_list_33_1358] = true;
}

public void artTableInitialiser_ART_real_type_ID() {
  artLabelInternalStrings[ARTL_ART_real_type_ID] = "real_type_ID";
  artLabelStrings[ARTL_ART_real_type_ID] = "real_type_ID";
  artKindOfs[ARTL_ART_real_type_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_real_type_ID_1360] = "real_type_ID ::= . type_ID ";
  artLabelStrings[ARTL_ART_real_type_ID_1360] = "";
  artlhsL[ARTL_ART_real_type_ID_1360] = ARTL_ART_real_type_ID;
  artKindOfs[ARTL_ART_real_type_ID_1360] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_real_type_ID_1362] = "real_type_ID ::= type_ID .";
  artLabelStrings[ARTL_ART_real_type_ID_1362] = "";
  artlhsL[ARTL_ART_real_type_ID_1362] = ARTL_ART_real_type_ID;
  artSlotInstanceOfs[ARTL_ART_real_type_ID_1362] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_real_type_ID_1362] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_real_type_ID_1362] = true;
  arteoR_pL[ARTL_ART_real_type_ID_1362] = true;
  artPopD[ARTL_ART_real_type_ID_1362] = true;
}

public void artTableInitialiser_ART_record_section() {
  artLabelInternalStrings[ARTL_ART_record_section] = "record_section";
  artLabelStrings[ARTL_ART_record_section] = "record_section";
  artKindOfs[ARTL_ART_record_section] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_record_section_778] = "record_section ::= . ID_list ':'  type_denoter ";
  artLabelStrings[ARTL_ART_record_section_778] = "";
  artlhsL[ARTL_ART_record_section_778] = ARTL_ART_record_section;
  artKindOfs[ARTL_ART_record_section_778] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_record_section_780] = "record_section ::= ID_list . ':'  type_denoter ";
  artLabelStrings[ARTL_ART_record_section_780] = "";
  artlhsL[ARTL_ART_record_section_780] = ARTL_ART_record_section;
  artSlotInstanceOfs[ARTL_ART_record_section_780] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_record_section_780] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_record_section_780] = true;
  artLabelInternalStrings[ARTL_ART_record_section_781] = "record_section ::= ID_list ':'  type_denoter ";
  artLabelStrings[ARTL_ART_record_section_781] = "";
  artlhsL[ARTL_ART_record_section_781] = ARTL_ART_record_section;
  artLabelInternalStrings[ARTL_ART_record_section_782] = "record_section ::= ID_list ':'  . type_denoter ";
  artLabelStrings[ARTL_ART_record_section_782] = "";
  artlhsL[ARTL_ART_record_section_782] = ARTL_ART_record_section;
  artKindOfs[ARTL_ART_record_section_782] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_record_section_784] = "record_section ::= ID_list ':'  type_denoter .";
  artLabelStrings[ARTL_ART_record_section_784] = "";
  artlhsL[ARTL_ART_record_section_784] = ARTL_ART_record_section;
  artSlotInstanceOfs[ARTL_ART_record_section_784] = ARTL_ART_type_denoter;
  artKindOfs[ARTL_ART_record_section_784] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_record_section_784] = true;
  arteoR_pL[ARTL_ART_record_section_784] = true;
  artPopD[ARTL_ART_record_section_784] = true;
}

public void artTableInitialiser_ART_record_type() {
  artLabelInternalStrings[ARTL_ART_record_type] = "record_type";
  artLabelStrings[ARTL_ART_record_type] = "record_type";
  artKindOfs[ARTL_ART_record_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_record_type_1364] = "record_type ::= . 'record'  field_list 'end'  ";
  artLabelStrings[ARTL_ART_record_type_1364] = "";
  artlhsL[ARTL_ART_record_type_1364] = ARTL_ART_record_type;
  artKindOfs[ARTL_ART_record_type_1364] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_record_type_1365] = "record_type ::= 'record'  field_list 'end'  ";
  artLabelStrings[ARTL_ART_record_type_1365] = "";
  artlhsL[ARTL_ART_record_type_1365] = ARTL_ART_record_type;
  artLabelInternalStrings[ARTL_ART_record_type_1366] = "record_type ::= 'record'  . field_list 'end'  ";
  artLabelStrings[ARTL_ART_record_type_1366] = "";
  artlhsL[ARTL_ART_record_type_1366] = ARTL_ART_record_type;
  artKindOfs[ARTL_ART_record_type_1366] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_record_type_1366] = true;
  artLabelInternalStrings[ARTL_ART_record_type_1368] = "record_type ::= 'record'  field_list . 'end'  ";
  artLabelStrings[ARTL_ART_record_type_1368] = "";
  artlhsL[ARTL_ART_record_type_1368] = ARTL_ART_record_type;
  artSlotInstanceOfs[ARTL_ART_record_type_1368] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_record_type_1368] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_record_type_1368] = true;
  artLabelInternalStrings[ARTL_ART_record_type_1369] = "record_type ::= 'record'  field_list 'end'  ";
  artLabelStrings[ARTL_ART_record_type_1369] = "";
  artlhsL[ARTL_ART_record_type_1369] = ARTL_ART_record_type;
  artPopD[ARTL_ART_record_type_1369] = true;
  artLabelInternalStrings[ARTL_ART_record_type_1370] = "record_type ::= 'record'  field_list 'end'  .";
  artLabelStrings[ARTL_ART_record_type_1370] = "";
  artlhsL[ARTL_ART_record_type_1370] = ARTL_ART_record_type;
  artKindOfs[ARTL_ART_record_type_1370] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_record_type_1370] = true;
  arteoR_pL[ARTL_ART_record_type_1370] = true;
  artPopD[ARTL_ART_record_type_1370] = true;
}

public void artTableInitialiser_ART_record_variable_list() {
  artLabelInternalStrings[ARTL_ART_record_variable_list] = "record_variable_list";
  artLabelStrings[ARTL_ART_record_variable_list] = "record_variable_list";
  artKindOfs[ARTL_ART_record_variable_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_record_variable_list_1372] = "record_variable_list ::= . variable_access record_variable_list_34 ";
  artLabelStrings[ARTL_ART_record_variable_list_1372] = "";
  artlhsL[ARTL_ART_record_variable_list_1372] = ARTL_ART_record_variable_list;
  artKindOfs[ARTL_ART_record_variable_list_1372] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_record_variable_list_1374] = "record_variable_list ::= variable_access . record_variable_list_34 ";
  artLabelStrings[ARTL_ART_record_variable_list_1374] = "";
  artlhsL[ARTL_ART_record_variable_list_1374] = ARTL_ART_record_variable_list;
  artSlotInstanceOfs[ARTL_ART_record_variable_list_1374] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_record_variable_list_1374] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_record_variable_list_1374] = true;
  artLabelInternalStrings[ARTL_ART_record_variable_list_1376] = "record_variable_list ::= variable_access record_variable_list_34 .";
  artLabelStrings[ARTL_ART_record_variable_list_1376] = "";
  artlhsL[ARTL_ART_record_variable_list_1376] = ARTL_ART_record_variable_list;
  artSlotInstanceOfs[ARTL_ART_record_variable_list_1376] = ARTL_ART_record_variable_list_34;
  artKindOfs[ARTL_ART_record_variable_list_1376] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_record_variable_list_1376] = true;
  arteoR_pL[ARTL_ART_record_variable_list_1376] = true;
  artPopD[ARTL_ART_record_variable_list_1376] = true;
}

public void artTableInitialiser_ART_record_variable_list_34() {
  artLabelInternalStrings[ARTL_ART_record_variable_list_34] = "record_variable_list_34";
  artLabelStrings[ARTL_ART_record_variable_list_34] = "record_variable_list_34";
  artKindOfs[ARTL_ART_record_variable_list_34] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_record_variable_list_34_1378] = "record_variable_list_34 ::= . # ";
  artLabelStrings[ARTL_ART_record_variable_list_34_1378] = "";
  artlhsL[ARTL_ART_record_variable_list_34_1378] = ARTL_ART_record_variable_list_34;
  artKindOfs[ARTL_ART_record_variable_list_34_1378] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_record_variable_list_34_1378] = true;
  artLabelInternalStrings[ARTL_ART_record_variable_list_34_1380] = "record_variable_list_34 ::= # .";
  artLabelStrings[ARTL_ART_record_variable_list_34_1380] = "";
  artlhsL[ARTL_ART_record_variable_list_34_1380] = ARTL_ART_record_variable_list_34;
  artKindOfs[ARTL_ART_record_variable_list_34_1380] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_record_variable_list_34_1380] = true;
  arteoR_pL[ARTL_ART_record_variable_list_34_1380] = true;
  artPopD[ARTL_ART_record_variable_list_34_1380] = true;
  artLabelInternalStrings[ARTL_ART_record_variable_list_34_1382] = "record_variable_list_34 ::= . record_variable_list_34 ','  variable_access ";
  artLabelStrings[ARTL_ART_record_variable_list_34_1382] = "";
  artlhsL[ARTL_ART_record_variable_list_34_1382] = ARTL_ART_record_variable_list_34;
  artKindOfs[ARTL_ART_record_variable_list_34_1382] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_record_variable_list_34_1384] = "record_variable_list_34 ::= record_variable_list_34 . ','  variable_access ";
  artLabelStrings[ARTL_ART_record_variable_list_34_1384] = "";
  artlhsL[ARTL_ART_record_variable_list_34_1384] = ARTL_ART_record_variable_list_34;
  artSlotInstanceOfs[ARTL_ART_record_variable_list_34_1384] = ARTL_ART_record_variable_list_34;
  artKindOfs[ARTL_ART_record_variable_list_34_1384] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_record_variable_list_34_1384] = true;
  artLabelInternalStrings[ARTL_ART_record_variable_list_34_1385] = "record_variable_list_34 ::= record_variable_list_34 ','  variable_access ";
  artLabelStrings[ARTL_ART_record_variable_list_34_1385] = "";
  artlhsL[ARTL_ART_record_variable_list_34_1385] = ARTL_ART_record_variable_list_34;
  artLabelInternalStrings[ARTL_ART_record_variable_list_34_1386] = "record_variable_list_34 ::= record_variable_list_34 ','  . variable_access ";
  artLabelStrings[ARTL_ART_record_variable_list_34_1386] = "";
  artlhsL[ARTL_ART_record_variable_list_34_1386] = ARTL_ART_record_variable_list_34;
  artKindOfs[ARTL_ART_record_variable_list_34_1386] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_record_variable_list_34_1388] = "record_variable_list_34 ::= record_variable_list_34 ','  variable_access .";
  artLabelStrings[ARTL_ART_record_variable_list_34_1388] = "";
  artlhsL[ARTL_ART_record_variable_list_34_1388] = ARTL_ART_record_variable_list_34;
  artSlotInstanceOfs[ARTL_ART_record_variable_list_34_1388] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_record_variable_list_34_1388] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_record_variable_list_34_1388] = true;
  arteoR_pL[ARTL_ART_record_variable_list_34_1388] = true;
  artPopD[ARTL_ART_record_variable_list_34_1388] = true;
}

public void artTableInitialiser_ART_relational_operator() {
  artLabelInternalStrings[ARTL_ART_relational_operator] = "relational_operator";
  artLabelStrings[ARTL_ART_relational_operator] = "relational_operator";
  artKindOfs[ARTL_ART_relational_operator] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_relational_operator_586] = "relational_operator ::= . '='  ";
  artLabelStrings[ARTL_ART_relational_operator_586] = "";
  artlhsL[ARTL_ART_relational_operator_586] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_586] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_relational_operator_586] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_587] = "relational_operator ::= '='  ";
  artLabelStrings[ARTL_ART_relational_operator_587] = "";
  artlhsL[ARTL_ART_relational_operator_587] = ARTL_ART_relational_operator;
  artPopD[ARTL_ART_relational_operator_587] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_588] = "relational_operator ::= '='  .";
  artLabelStrings[ARTL_ART_relational_operator_588] = "";
  artlhsL[ARTL_ART_relational_operator_588] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_588] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_relational_operator_588] = true;
  arteoR_pL[ARTL_ART_relational_operator_588] = true;
  artPopD[ARTL_ART_relational_operator_588] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_590] = "relational_operator ::= . '<>'  ";
  artLabelStrings[ARTL_ART_relational_operator_590] = "";
  artlhsL[ARTL_ART_relational_operator_590] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_590] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_relational_operator_590] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_591] = "relational_operator ::= '<>'  ";
  artLabelStrings[ARTL_ART_relational_operator_591] = "";
  artlhsL[ARTL_ART_relational_operator_591] = ARTL_ART_relational_operator;
  artPopD[ARTL_ART_relational_operator_591] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_592] = "relational_operator ::= '<>'  .";
  artLabelStrings[ARTL_ART_relational_operator_592] = "";
  artlhsL[ARTL_ART_relational_operator_592] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_592] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_relational_operator_592] = true;
  arteoR_pL[ARTL_ART_relational_operator_592] = true;
  artPopD[ARTL_ART_relational_operator_592] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_594] = "relational_operator ::= . '<'  ";
  artLabelStrings[ARTL_ART_relational_operator_594] = "";
  artlhsL[ARTL_ART_relational_operator_594] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_594] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_relational_operator_594] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_595] = "relational_operator ::= '<'  ";
  artLabelStrings[ARTL_ART_relational_operator_595] = "";
  artlhsL[ARTL_ART_relational_operator_595] = ARTL_ART_relational_operator;
  artPopD[ARTL_ART_relational_operator_595] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_596] = "relational_operator ::= '<'  .";
  artLabelStrings[ARTL_ART_relational_operator_596] = "";
  artlhsL[ARTL_ART_relational_operator_596] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_596] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_relational_operator_596] = true;
  arteoR_pL[ARTL_ART_relational_operator_596] = true;
  artPopD[ARTL_ART_relational_operator_596] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_598] = "relational_operator ::= . '>'  ";
  artLabelStrings[ARTL_ART_relational_operator_598] = "";
  artlhsL[ARTL_ART_relational_operator_598] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_598] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_relational_operator_598] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_599] = "relational_operator ::= '>'  ";
  artLabelStrings[ARTL_ART_relational_operator_599] = "";
  artlhsL[ARTL_ART_relational_operator_599] = ARTL_ART_relational_operator;
  artPopD[ARTL_ART_relational_operator_599] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_600] = "relational_operator ::= '>'  .";
  artLabelStrings[ARTL_ART_relational_operator_600] = "";
  artlhsL[ARTL_ART_relational_operator_600] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_600] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_relational_operator_600] = true;
  arteoR_pL[ARTL_ART_relational_operator_600] = true;
  artPopD[ARTL_ART_relational_operator_600] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_602] = "relational_operator ::= . '<='  ";
  artLabelStrings[ARTL_ART_relational_operator_602] = "";
  artlhsL[ARTL_ART_relational_operator_602] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_602] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_relational_operator_602] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_603] = "relational_operator ::= '<='  ";
  artLabelStrings[ARTL_ART_relational_operator_603] = "";
  artlhsL[ARTL_ART_relational_operator_603] = ARTL_ART_relational_operator;
  artPopD[ARTL_ART_relational_operator_603] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_604] = "relational_operator ::= '<='  .";
  artLabelStrings[ARTL_ART_relational_operator_604] = "";
  artlhsL[ARTL_ART_relational_operator_604] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_604] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_relational_operator_604] = true;
  arteoR_pL[ARTL_ART_relational_operator_604] = true;
  artPopD[ARTL_ART_relational_operator_604] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_606] = "relational_operator ::= . '>='  ";
  artLabelStrings[ARTL_ART_relational_operator_606] = "";
  artlhsL[ARTL_ART_relational_operator_606] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_606] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_relational_operator_606] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_607] = "relational_operator ::= '>='  ";
  artLabelStrings[ARTL_ART_relational_operator_607] = "";
  artlhsL[ARTL_ART_relational_operator_607] = ARTL_ART_relational_operator;
  artPopD[ARTL_ART_relational_operator_607] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_608] = "relational_operator ::= '>='  .";
  artLabelStrings[ARTL_ART_relational_operator_608] = "";
  artlhsL[ARTL_ART_relational_operator_608] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_608] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_relational_operator_608] = true;
  arteoR_pL[ARTL_ART_relational_operator_608] = true;
  artPopD[ARTL_ART_relational_operator_608] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_610] = "relational_operator ::= . 'in'  ";
  artLabelStrings[ARTL_ART_relational_operator_610] = "";
  artlhsL[ARTL_ART_relational_operator_610] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_610] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_relational_operator_610] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_611] = "relational_operator ::= 'in'  ";
  artLabelStrings[ARTL_ART_relational_operator_611] = "";
  artlhsL[ARTL_ART_relational_operator_611] = ARTL_ART_relational_operator;
  artPopD[ARTL_ART_relational_operator_611] = true;
  artLabelInternalStrings[ARTL_ART_relational_operator_612] = "relational_operator ::= 'in'  .";
  artLabelStrings[ARTL_ART_relational_operator_612] = "";
  artlhsL[ARTL_ART_relational_operator_612] = ARTL_ART_relational_operator;
  artKindOfs[ARTL_ART_relational_operator_612] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_relational_operator_612] = true;
  arteoR_pL[ARTL_ART_relational_operator_612] = true;
  artPopD[ARTL_ART_relational_operator_612] = true;
}

public void artTableInitialiser_ART_repeat_statement() {
  artLabelInternalStrings[ARTL_ART_repeat_statement] = "repeat_statement";
  artLabelStrings[ARTL_ART_repeat_statement] = "repeat_statement";
  artKindOfs[ARTL_ART_repeat_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_repeat_statement_1390] = "repeat_statement ::= . 'repeat'  statement_sequence 'until'  Boolean_expression ";
  artLabelStrings[ARTL_ART_repeat_statement_1390] = "";
  artlhsL[ARTL_ART_repeat_statement_1390] = ARTL_ART_repeat_statement;
  artKindOfs[ARTL_ART_repeat_statement_1390] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_repeat_statement_1391] = "repeat_statement ::= 'repeat'  statement_sequence 'until'  Boolean_expression ";
  artLabelStrings[ARTL_ART_repeat_statement_1391] = "";
  artlhsL[ARTL_ART_repeat_statement_1391] = ARTL_ART_repeat_statement;
  artLabelInternalStrings[ARTL_ART_repeat_statement_1392] = "repeat_statement ::= 'repeat'  . statement_sequence 'until'  Boolean_expression ";
  artLabelStrings[ARTL_ART_repeat_statement_1392] = "";
  artlhsL[ARTL_ART_repeat_statement_1392] = ARTL_ART_repeat_statement;
  artKindOfs[ARTL_ART_repeat_statement_1392] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_repeat_statement_1392] = true;
  artLabelInternalStrings[ARTL_ART_repeat_statement_1394] = "repeat_statement ::= 'repeat'  statement_sequence . 'until'  Boolean_expression ";
  artLabelStrings[ARTL_ART_repeat_statement_1394] = "";
  artlhsL[ARTL_ART_repeat_statement_1394] = ARTL_ART_repeat_statement;
  artSlotInstanceOfs[ARTL_ART_repeat_statement_1394] = ARTL_ART_statement_sequence;
  artKindOfs[ARTL_ART_repeat_statement_1394] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_repeat_statement_1395] = "repeat_statement ::= 'repeat'  statement_sequence 'until'  Boolean_expression ";
  artLabelStrings[ARTL_ART_repeat_statement_1395] = "";
  artlhsL[ARTL_ART_repeat_statement_1395] = ARTL_ART_repeat_statement;
  artLabelInternalStrings[ARTL_ART_repeat_statement_1396] = "repeat_statement ::= 'repeat'  statement_sequence 'until'  . Boolean_expression ";
  artLabelStrings[ARTL_ART_repeat_statement_1396] = "";
  artlhsL[ARTL_ART_repeat_statement_1396] = ARTL_ART_repeat_statement;
  artKindOfs[ARTL_ART_repeat_statement_1396] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_repeat_statement_1398] = "repeat_statement ::= 'repeat'  statement_sequence 'until'  Boolean_expression .";
  artLabelStrings[ARTL_ART_repeat_statement_1398] = "";
  artlhsL[ARTL_ART_repeat_statement_1398] = ARTL_ART_repeat_statement;
  artSlotInstanceOfs[ARTL_ART_repeat_statement_1398] = ARTL_ART_Boolean_expression;
  artKindOfs[ARTL_ART_repeat_statement_1398] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_repeat_statement_1398] = true;
  arteoR_pL[ARTL_ART_repeat_statement_1398] = true;
  artPopD[ARTL_ART_repeat_statement_1398] = true;
}

public void artTableInitialiser_ART_repetitive_statement() {
  artLabelInternalStrings[ARTL_ART_repetitive_statement] = "repetitive_statement";
  artLabelStrings[ARTL_ART_repetitive_statement] = "repetitive_statement";
  artKindOfs[ARTL_ART_repetitive_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_repetitive_statement_1400] = "repetitive_statement ::= . repeat_statement ";
  artLabelStrings[ARTL_ART_repetitive_statement_1400] = "";
  artlhsL[ARTL_ART_repetitive_statement_1400] = ARTL_ART_repetitive_statement;
  artKindOfs[ARTL_ART_repetitive_statement_1400] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_repetitive_statement_1402] = "repetitive_statement ::= repeat_statement .";
  artLabelStrings[ARTL_ART_repetitive_statement_1402] = "";
  artlhsL[ARTL_ART_repetitive_statement_1402] = ARTL_ART_repetitive_statement;
  artSlotInstanceOfs[ARTL_ART_repetitive_statement_1402] = ARTL_ART_repeat_statement;
  artKindOfs[ARTL_ART_repetitive_statement_1402] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_repetitive_statement_1402] = true;
  arteoR_pL[ARTL_ART_repetitive_statement_1402] = true;
  artPopD[ARTL_ART_repetitive_statement_1402] = true;
  artLabelInternalStrings[ARTL_ART_repetitive_statement_1404] = "repetitive_statement ::= . while_statement ";
  artLabelStrings[ARTL_ART_repetitive_statement_1404] = "";
  artlhsL[ARTL_ART_repetitive_statement_1404] = ARTL_ART_repetitive_statement;
  artKindOfs[ARTL_ART_repetitive_statement_1404] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_repetitive_statement_1406] = "repetitive_statement ::= while_statement .";
  artLabelStrings[ARTL_ART_repetitive_statement_1406] = "";
  artlhsL[ARTL_ART_repetitive_statement_1406] = ARTL_ART_repetitive_statement;
  artSlotInstanceOfs[ARTL_ART_repetitive_statement_1406] = ARTL_ART_while_statement;
  artKindOfs[ARTL_ART_repetitive_statement_1406] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_repetitive_statement_1406] = true;
  arteoR_pL[ARTL_ART_repetitive_statement_1406] = true;
  artPopD[ARTL_ART_repetitive_statement_1406] = true;
  artLabelInternalStrings[ARTL_ART_repetitive_statement_1408] = "repetitive_statement ::= . for_statement ";
  artLabelStrings[ARTL_ART_repetitive_statement_1408] = "";
  artlhsL[ARTL_ART_repetitive_statement_1408] = ARTL_ART_repetitive_statement;
  artKindOfs[ARTL_ART_repetitive_statement_1408] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_repetitive_statement_1410] = "repetitive_statement ::= for_statement .";
  artLabelStrings[ARTL_ART_repetitive_statement_1410] = "";
  artlhsL[ARTL_ART_repetitive_statement_1410] = ARTL_ART_repetitive_statement;
  artSlotInstanceOfs[ARTL_ART_repetitive_statement_1410] = ARTL_ART_for_statement;
  artKindOfs[ARTL_ART_repetitive_statement_1410] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_repetitive_statement_1410] = true;
  arteoR_pL[ARTL_ART_repetitive_statement_1410] = true;
  artPopD[ARTL_ART_repetitive_statement_1410] = true;
}

public void artTableInitialiser_ART_result_type() {
  artLabelInternalStrings[ARTL_ART_result_type] = "result_type";
  artLabelStrings[ARTL_ART_result_type] = "result_type";
  artKindOfs[ARTL_ART_result_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_result_type_946] = "result_type ::= . simple_type_ID ";
  artLabelStrings[ARTL_ART_result_type_946] = "";
  artlhsL[ARTL_ART_result_type_946] = ARTL_ART_result_type;
  artKindOfs[ARTL_ART_result_type_946] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_result_type_948] = "result_type ::= simple_type_ID .";
  artLabelStrings[ARTL_ART_result_type_948] = "";
  artlhsL[ARTL_ART_result_type_948] = ARTL_ART_result_type;
  artSlotInstanceOfs[ARTL_ART_result_type_948] = ARTL_ART_simple_type_ID;
  artKindOfs[ARTL_ART_result_type_948] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_result_type_948] = true;
  arteoR_pL[ARTL_ART_result_type_948] = true;
  artPopD[ARTL_ART_result_type_948] = true;
}

public void artTableInitialiser_ART_scale_factor() {
  artLabelInternalStrings[ARTL_ART_scale_factor] = "scale_factor";
  artLabelStrings[ARTL_ART_scale_factor] = "scale_factor";
  artKindOfs[ARTL_ART_scale_factor] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_scale_factor_1426] = "scale_factor ::= . signed_integer ";
  artLabelStrings[ARTL_ART_scale_factor_1426] = "";
  artlhsL[ARTL_ART_scale_factor_1426] = ARTL_ART_scale_factor;
  artKindOfs[ARTL_ART_scale_factor_1426] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_scale_factor_1428] = "scale_factor ::= signed_integer .";
  artLabelStrings[ARTL_ART_scale_factor_1428] = "";
  artlhsL[ARTL_ART_scale_factor_1428] = ARTL_ART_scale_factor;
  artSlotInstanceOfs[ARTL_ART_scale_factor_1428] = ARTL_ART_signed_integer;
  artKindOfs[ARTL_ART_scale_factor_1428] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_scale_factor_1428] = true;
  arteoR_pL[ARTL_ART_scale_factor_1428] = true;
  artPopD[ARTL_ART_scale_factor_1428] = true;
}

public void artTableInitialiser_ART_set_constructor() {
  artLabelInternalStrings[ARTL_ART_set_constructor] = "set_constructor";
  artLabelStrings[ARTL_ART_set_constructor] = "set_constructor";
  artKindOfs[ARTL_ART_set_constructor] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_set_constructor_666] = "set_constructor ::= . '['  set_constructor_35 ']'  ";
  artLabelStrings[ARTL_ART_set_constructor_666] = "";
  artlhsL[ARTL_ART_set_constructor_666] = ARTL_ART_set_constructor;
  artKindOfs[ARTL_ART_set_constructor_666] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_set_constructor_667] = "set_constructor ::= '['  set_constructor_35 ']'  ";
  artLabelStrings[ARTL_ART_set_constructor_667] = "";
  artlhsL[ARTL_ART_set_constructor_667] = ARTL_ART_set_constructor;
  artLabelInternalStrings[ARTL_ART_set_constructor_668] = "set_constructor ::= '['  . set_constructor_35 ']'  ";
  artLabelStrings[ARTL_ART_set_constructor_668] = "";
  artlhsL[ARTL_ART_set_constructor_668] = ARTL_ART_set_constructor;
  artKindOfs[ARTL_ART_set_constructor_668] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_set_constructor_668] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_670] = "set_constructor ::= '['  set_constructor_35 . ']'  ";
  artLabelStrings[ARTL_ART_set_constructor_670] = "";
  artlhsL[ARTL_ART_set_constructor_670] = ARTL_ART_set_constructor;
  artSlotInstanceOfs[ARTL_ART_set_constructor_670] = ARTL_ART_set_constructor_35;
  artKindOfs[ARTL_ART_set_constructor_670] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_set_constructor_670] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_671] = "set_constructor ::= '['  set_constructor_35 ']'  ";
  artLabelStrings[ARTL_ART_set_constructor_671] = "";
  artlhsL[ARTL_ART_set_constructor_671] = ARTL_ART_set_constructor;
  artPopD[ARTL_ART_set_constructor_671] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_672] = "set_constructor ::= '['  set_constructor_35 ']'  .";
  artLabelStrings[ARTL_ART_set_constructor_672] = "";
  artlhsL[ARTL_ART_set_constructor_672] = ARTL_ART_set_constructor;
  artKindOfs[ARTL_ART_set_constructor_672] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_set_constructor_672] = true;
  arteoR_pL[ARTL_ART_set_constructor_672] = true;
  artPopD[ARTL_ART_set_constructor_672] = true;
}

public void artTableInitialiser_ART_set_constructor_35() {
  artLabelInternalStrings[ARTL_ART_set_constructor_35] = "set_constructor_35";
  artLabelStrings[ARTL_ART_set_constructor_35] = "set_constructor_35";
  artKindOfs[ARTL_ART_set_constructor_35] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_set_constructor_35_1436] = "set_constructor_35 ::= . # ";
  artLabelStrings[ARTL_ART_set_constructor_35_1436] = "";
  artlhsL[ARTL_ART_set_constructor_35_1436] = ARTL_ART_set_constructor_35;
  artKindOfs[ARTL_ART_set_constructor_35_1436] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_set_constructor_35_1436] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_35_1438] = "set_constructor_35 ::= # .";
  artLabelStrings[ARTL_ART_set_constructor_35_1438] = "";
  artlhsL[ARTL_ART_set_constructor_35_1438] = ARTL_ART_set_constructor_35;
  artKindOfs[ARTL_ART_set_constructor_35_1438] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_set_constructor_35_1438] = true;
  arteoR_pL[ARTL_ART_set_constructor_35_1438] = true;
  artPopD[ARTL_ART_set_constructor_35_1438] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_35_1440] = "set_constructor_35 ::= . member_designator set_constructor_36 ";
  artLabelStrings[ARTL_ART_set_constructor_35_1440] = "";
  artlhsL[ARTL_ART_set_constructor_35_1440] = ARTL_ART_set_constructor_35;
  artKindOfs[ARTL_ART_set_constructor_35_1440] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_set_constructor_35_1442] = "set_constructor_35 ::= member_designator . set_constructor_36 ";
  artLabelStrings[ARTL_ART_set_constructor_35_1442] = "";
  artlhsL[ARTL_ART_set_constructor_35_1442] = ARTL_ART_set_constructor_35;
  artSlotInstanceOfs[ARTL_ART_set_constructor_35_1442] = ARTL_ART_member_designator;
  artKindOfs[ARTL_ART_set_constructor_35_1442] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_set_constructor_35_1442] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_35_1444] = "set_constructor_35 ::= member_designator set_constructor_36 .";
  artLabelStrings[ARTL_ART_set_constructor_35_1444] = "";
  artlhsL[ARTL_ART_set_constructor_35_1444] = ARTL_ART_set_constructor_35;
  artSlotInstanceOfs[ARTL_ART_set_constructor_35_1444] = ARTL_ART_set_constructor_36;
  artKindOfs[ARTL_ART_set_constructor_35_1444] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_set_constructor_35_1444] = true;
  arteoR_pL[ARTL_ART_set_constructor_35_1444] = true;
  artPopD[ARTL_ART_set_constructor_35_1444] = true;
}

public void artTableInitialiser_ART_set_constructor_36() {
  artLabelInternalStrings[ARTL_ART_set_constructor_36] = "set_constructor_36";
  artLabelStrings[ARTL_ART_set_constructor_36] = "set_constructor_36";
  artKindOfs[ARTL_ART_set_constructor_36] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_set_constructor_36_1446] = "set_constructor_36 ::= . # ";
  artLabelStrings[ARTL_ART_set_constructor_36_1446] = "";
  artlhsL[ARTL_ART_set_constructor_36_1446] = ARTL_ART_set_constructor_36;
  artKindOfs[ARTL_ART_set_constructor_36_1446] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_set_constructor_36_1446] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_36_1448] = "set_constructor_36 ::= # .";
  artLabelStrings[ARTL_ART_set_constructor_36_1448] = "";
  artlhsL[ARTL_ART_set_constructor_36_1448] = ARTL_ART_set_constructor_36;
  artKindOfs[ARTL_ART_set_constructor_36_1448] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_set_constructor_36_1448] = true;
  arteoR_pL[ARTL_ART_set_constructor_36_1448] = true;
  artPopD[ARTL_ART_set_constructor_36_1448] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_36_1450] = "set_constructor_36 ::= . set_constructor_36 ','  member_designator ";
  artLabelStrings[ARTL_ART_set_constructor_36_1450] = "";
  artlhsL[ARTL_ART_set_constructor_36_1450] = ARTL_ART_set_constructor_36;
  artKindOfs[ARTL_ART_set_constructor_36_1450] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_set_constructor_36_1452] = "set_constructor_36 ::= set_constructor_36 . ','  member_designator ";
  artLabelStrings[ARTL_ART_set_constructor_36_1452] = "";
  artlhsL[ARTL_ART_set_constructor_36_1452] = ARTL_ART_set_constructor_36;
  artSlotInstanceOfs[ARTL_ART_set_constructor_36_1452] = ARTL_ART_set_constructor_36;
  artKindOfs[ARTL_ART_set_constructor_36_1452] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_set_constructor_36_1452] = true;
  artLabelInternalStrings[ARTL_ART_set_constructor_36_1453] = "set_constructor_36 ::= set_constructor_36 ','  member_designator ";
  artLabelStrings[ARTL_ART_set_constructor_36_1453] = "";
  artlhsL[ARTL_ART_set_constructor_36_1453] = ARTL_ART_set_constructor_36;
  artLabelInternalStrings[ARTL_ART_set_constructor_36_1454] = "set_constructor_36 ::= set_constructor_36 ','  . member_designator ";
  artLabelStrings[ARTL_ART_set_constructor_36_1454] = "";
  artlhsL[ARTL_ART_set_constructor_36_1454] = ARTL_ART_set_constructor_36;
  artKindOfs[ARTL_ART_set_constructor_36_1454] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_set_constructor_36_1456] = "set_constructor_36 ::= set_constructor_36 ','  member_designator .";
  artLabelStrings[ARTL_ART_set_constructor_36_1456] = "";
  artlhsL[ARTL_ART_set_constructor_36_1456] = ARTL_ART_set_constructor_36;
  artSlotInstanceOfs[ARTL_ART_set_constructor_36_1456] = ARTL_ART_member_designator;
  artKindOfs[ARTL_ART_set_constructor_36_1456] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_set_constructor_36_1456] = true;
  arteoR_pL[ARTL_ART_set_constructor_36_1456] = true;
  artPopD[ARTL_ART_set_constructor_36_1456] = true;
}

public void artTableInitialiser_ART_set_type() {
  artLabelInternalStrings[ARTL_ART_set_type] = "set_type";
  artLabelStrings[ARTL_ART_set_type] = "set_type";
  artKindOfs[ARTL_ART_set_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_set_type_1458] = "set_type ::= . 'set'  'of'  base_type ";
  artLabelStrings[ARTL_ART_set_type_1458] = "";
  artlhsL[ARTL_ART_set_type_1458] = ARTL_ART_set_type;
  artKindOfs[ARTL_ART_set_type_1458] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_set_type_1459] = "set_type ::= 'set'  'of'  base_type ";
  artLabelStrings[ARTL_ART_set_type_1459] = "";
  artlhsL[ARTL_ART_set_type_1459] = ARTL_ART_set_type;
  artLabelInternalStrings[ARTL_ART_set_type_1460] = "set_type ::= 'set'  . 'of'  base_type ";
  artLabelStrings[ARTL_ART_set_type_1460] = "";
  artlhsL[ARTL_ART_set_type_1460] = ARTL_ART_set_type;
  artKindOfs[ARTL_ART_set_type_1460] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_set_type_1460] = true;
  artLabelInternalStrings[ARTL_ART_set_type_1461] = "set_type ::= 'set'  'of'  base_type ";
  artLabelStrings[ARTL_ART_set_type_1461] = "";
  artlhsL[ARTL_ART_set_type_1461] = ARTL_ART_set_type;
  artLabelInternalStrings[ARTL_ART_set_type_1462] = "set_type ::= 'set'  'of'  . base_type ";
  artLabelStrings[ARTL_ART_set_type_1462] = "";
  artlhsL[ARTL_ART_set_type_1462] = ARTL_ART_set_type;
  artKindOfs[ARTL_ART_set_type_1462] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_set_type_1464] = "set_type ::= 'set'  'of'  base_type .";
  artLabelStrings[ARTL_ART_set_type_1464] = "";
  artlhsL[ARTL_ART_set_type_1464] = ARTL_ART_set_type;
  artSlotInstanceOfs[ARTL_ART_set_type_1464] = ARTL_ART_base_type;
  artKindOfs[ARTL_ART_set_type_1464] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_set_type_1464] = true;
  arteoR_pL[ARTL_ART_set_type_1464] = true;
  artPopD[ARTL_ART_set_type_1464] = true;
}

public void artTableInitialiser_ART_sign() {
  artLabelInternalStrings[ARTL_ART_sign] = "sign";
  artLabelStrings[ARTL_ART_sign] = "sign";
  artKindOfs[ARTL_ART_sign] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_sign_456] = "sign ::= . '+'  ";
  artLabelStrings[ARTL_ART_sign_456] = "";
  artlhsL[ARTL_ART_sign_456] = ARTL_ART_sign;
  artKindOfs[ARTL_ART_sign_456] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_sign_456] = true;
  artLabelInternalStrings[ARTL_ART_sign_457] = "sign ::= '+'  ";
  artLabelStrings[ARTL_ART_sign_457] = "";
  artlhsL[ARTL_ART_sign_457] = ARTL_ART_sign;
  artPopD[ARTL_ART_sign_457] = true;
  artLabelInternalStrings[ARTL_ART_sign_458] = "sign ::= '+'  .";
  artLabelStrings[ARTL_ART_sign_458] = "";
  artlhsL[ARTL_ART_sign_458] = ARTL_ART_sign;
  artKindOfs[ARTL_ART_sign_458] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_sign_458] = true;
  arteoR_pL[ARTL_ART_sign_458] = true;
  artPopD[ARTL_ART_sign_458] = true;
  artLabelInternalStrings[ARTL_ART_sign_460] = "sign ::= . '-'  ";
  artLabelStrings[ARTL_ART_sign_460] = "";
  artlhsL[ARTL_ART_sign_460] = ARTL_ART_sign;
  artKindOfs[ARTL_ART_sign_460] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_sign_460] = true;
  artLabelInternalStrings[ARTL_ART_sign_461] = "sign ::= '-'  ";
  artLabelStrings[ARTL_ART_sign_461] = "";
  artlhsL[ARTL_ART_sign_461] = ARTL_ART_sign;
  artPopD[ARTL_ART_sign_461] = true;
  artLabelInternalStrings[ARTL_ART_sign_462] = "sign ::= '-'  .";
  artLabelStrings[ARTL_ART_sign_462] = "";
  artlhsL[ARTL_ART_sign_462] = ARTL_ART_sign;
  artKindOfs[ARTL_ART_sign_462] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_sign_462] = true;
  arteoR_pL[ARTL_ART_sign_462] = true;
  artPopD[ARTL_ART_sign_462] = true;
}

public void artTableInitialiser_ART_signed_integer() {
  artLabelInternalStrings[ARTL_ART_signed_integer] = "signed_integer";
  artLabelStrings[ARTL_ART_signed_integer] = "signed_integer";
  artKindOfs[ARTL_ART_signed_integer] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_signed_integer_1430] = "signed_integer ::= . signed_integer_37 unsigned_integer ";
  artLabelStrings[ARTL_ART_signed_integer_1430] = "";
  artlhsL[ARTL_ART_signed_integer_1430] = ARTL_ART_signed_integer;
  artKindOfs[ARTL_ART_signed_integer_1430] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_signed_integer_1432] = "signed_integer ::= signed_integer_37 . unsigned_integer ";
  artLabelStrings[ARTL_ART_signed_integer_1432] = "";
  artlhsL[ARTL_ART_signed_integer_1432] = ARTL_ART_signed_integer;
  artSlotInstanceOfs[ARTL_ART_signed_integer_1432] = ARTL_ART_signed_integer_37;
  artKindOfs[ARTL_ART_signed_integer_1432] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_signed_integer_1432] = true;
  artLabelInternalStrings[ARTL_ART_signed_integer_1434] = "signed_integer ::= signed_integer_37 unsigned_integer .";
  artLabelStrings[ARTL_ART_signed_integer_1434] = "";
  artlhsL[ARTL_ART_signed_integer_1434] = ARTL_ART_signed_integer;
  artSlotInstanceOfs[ARTL_ART_signed_integer_1434] = ARTL_ART_unsigned_integer;
  artKindOfs[ARTL_ART_signed_integer_1434] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_signed_integer_1434] = true;
  arteoR_pL[ARTL_ART_signed_integer_1434] = true;
  artPopD[ARTL_ART_signed_integer_1434] = true;
}

public void artTableInitialiser_ART_signed_integer_37() {
  artLabelInternalStrings[ARTL_ART_signed_integer_37] = "signed_integer_37";
  artLabelStrings[ARTL_ART_signed_integer_37] = "signed_integer_37";
  artKindOfs[ARTL_ART_signed_integer_37] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_signed_integer_37_1466] = "signed_integer_37 ::= . # ";
  artLabelStrings[ARTL_ART_signed_integer_37_1466] = "";
  artlhsL[ARTL_ART_signed_integer_37_1466] = ARTL_ART_signed_integer_37;
  artKindOfs[ARTL_ART_signed_integer_37_1466] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_signed_integer_37_1466] = true;
  artLabelInternalStrings[ARTL_ART_signed_integer_37_1468] = "signed_integer_37 ::= # .";
  artLabelStrings[ARTL_ART_signed_integer_37_1468] = "";
  artlhsL[ARTL_ART_signed_integer_37_1468] = ARTL_ART_signed_integer_37;
  artKindOfs[ARTL_ART_signed_integer_37_1468] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_signed_integer_37_1468] = true;
  arteoR_pL[ARTL_ART_signed_integer_37_1468] = true;
  artPopD[ARTL_ART_signed_integer_37_1468] = true;
  artLabelInternalStrings[ARTL_ART_signed_integer_37_1470] = "signed_integer_37 ::= . sign ";
  artLabelStrings[ARTL_ART_signed_integer_37_1470] = "";
  artlhsL[ARTL_ART_signed_integer_37_1470] = ARTL_ART_signed_integer_37;
  artKindOfs[ARTL_ART_signed_integer_37_1470] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_signed_integer_37_1472] = "signed_integer_37 ::= sign .";
  artLabelStrings[ARTL_ART_signed_integer_37_1472] = "";
  artlhsL[ARTL_ART_signed_integer_37_1472] = ARTL_ART_signed_integer_37;
  artSlotInstanceOfs[ARTL_ART_signed_integer_37_1472] = ARTL_ART_sign;
  artKindOfs[ARTL_ART_signed_integer_37_1472] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_signed_integer_37_1472] = true;
  arteoR_pL[ARTL_ART_signed_integer_37_1472] = true;
  artPopD[ARTL_ART_signed_integer_37_1472] = true;
}

public void artTableInitialiser_ART_signed_number() {
  artLabelInternalStrings[ARTL_ART_signed_number] = "signed_number";
  artLabelStrings[ARTL_ART_signed_number] = "signed_number";
  artKindOfs[ARTL_ART_signed_number] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_signed_number_1478] = "signed_number ::= . signed_integer ";
  artLabelStrings[ARTL_ART_signed_number_1478] = "";
  artlhsL[ARTL_ART_signed_number_1478] = ARTL_ART_signed_number;
  artKindOfs[ARTL_ART_signed_number_1478] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_signed_number_1480] = "signed_number ::= signed_integer .";
  artLabelStrings[ARTL_ART_signed_number_1480] = "";
  artlhsL[ARTL_ART_signed_number_1480] = ARTL_ART_signed_number;
  artSlotInstanceOfs[ARTL_ART_signed_number_1480] = ARTL_ART_signed_integer;
  artKindOfs[ARTL_ART_signed_number_1480] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_signed_number_1480] = true;
  arteoR_pL[ARTL_ART_signed_number_1480] = true;
  artPopD[ARTL_ART_signed_number_1480] = true;
  artLabelInternalStrings[ARTL_ART_signed_number_1482] = "signed_number ::= . signed_real ";
  artLabelStrings[ARTL_ART_signed_number_1482] = "";
  artlhsL[ARTL_ART_signed_number_1482] = ARTL_ART_signed_number;
  artKindOfs[ARTL_ART_signed_number_1482] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_signed_number_1484] = "signed_number ::= signed_real .";
  artLabelStrings[ARTL_ART_signed_number_1484] = "";
  artlhsL[ARTL_ART_signed_number_1484] = ARTL_ART_signed_number;
  artSlotInstanceOfs[ARTL_ART_signed_number_1484] = ARTL_ART_signed_real;
  artKindOfs[ARTL_ART_signed_number_1484] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_signed_number_1484] = true;
  arteoR_pL[ARTL_ART_signed_number_1484] = true;
  artPopD[ARTL_ART_signed_number_1484] = true;
}

public void artTableInitialiser_ART_signed_real() {
  artLabelInternalStrings[ARTL_ART_signed_real] = "signed_real";
  artLabelStrings[ARTL_ART_signed_real] = "signed_real";
  artKindOfs[ARTL_ART_signed_real] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_signed_real_1486] = "signed_real ::= . signed_real_38 unsigned_real ";
  artLabelStrings[ARTL_ART_signed_real_1486] = "";
  artlhsL[ARTL_ART_signed_real_1486] = ARTL_ART_signed_real;
  artKindOfs[ARTL_ART_signed_real_1486] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_signed_real_1488] = "signed_real ::= signed_real_38 . unsigned_real ";
  artLabelStrings[ARTL_ART_signed_real_1488] = "";
  artlhsL[ARTL_ART_signed_real_1488] = ARTL_ART_signed_real;
  artSlotInstanceOfs[ARTL_ART_signed_real_1488] = ARTL_ART_signed_real_38;
  artKindOfs[ARTL_ART_signed_real_1488] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_signed_real_1488] = true;
  artLabelInternalStrings[ARTL_ART_signed_real_1490] = "signed_real ::= signed_real_38 unsigned_real .";
  artLabelStrings[ARTL_ART_signed_real_1490] = "";
  artlhsL[ARTL_ART_signed_real_1490] = ARTL_ART_signed_real;
  artSlotInstanceOfs[ARTL_ART_signed_real_1490] = ARTL_ART_unsigned_real;
  artKindOfs[ARTL_ART_signed_real_1490] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_signed_real_1490] = true;
  arteoR_pL[ARTL_ART_signed_real_1490] = true;
  artPopD[ARTL_ART_signed_real_1490] = true;
}

public void artTableInitialiser_ART_signed_real_38() {
  artLabelInternalStrings[ARTL_ART_signed_real_38] = "signed_real_38";
  artLabelStrings[ARTL_ART_signed_real_38] = "signed_real_38";
  artKindOfs[ARTL_ART_signed_real_38] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_signed_real_38_1492] = "signed_real_38 ::= . # ";
  artLabelStrings[ARTL_ART_signed_real_38_1492] = "";
  artlhsL[ARTL_ART_signed_real_38_1492] = ARTL_ART_signed_real_38;
  artKindOfs[ARTL_ART_signed_real_38_1492] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_signed_real_38_1492] = true;
  artLabelInternalStrings[ARTL_ART_signed_real_38_1494] = "signed_real_38 ::= # .";
  artLabelStrings[ARTL_ART_signed_real_38_1494] = "";
  artlhsL[ARTL_ART_signed_real_38_1494] = ARTL_ART_signed_real_38;
  artKindOfs[ARTL_ART_signed_real_38_1494] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_signed_real_38_1494] = true;
  arteoR_pL[ARTL_ART_signed_real_38_1494] = true;
  artPopD[ARTL_ART_signed_real_38_1494] = true;
  artLabelInternalStrings[ARTL_ART_signed_real_38_1496] = "signed_real_38 ::= . sign ";
  artLabelStrings[ARTL_ART_signed_real_38_1496] = "";
  artlhsL[ARTL_ART_signed_real_38_1496] = ARTL_ART_signed_real_38;
  artKindOfs[ARTL_ART_signed_real_38_1496] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_signed_real_38_1498] = "signed_real_38 ::= sign .";
  artLabelStrings[ARTL_ART_signed_real_38_1498] = "";
  artlhsL[ARTL_ART_signed_real_38_1498] = ARTL_ART_signed_real_38;
  artSlotInstanceOfs[ARTL_ART_signed_real_38_1498] = ARTL_ART_sign;
  artKindOfs[ARTL_ART_signed_real_38_1498] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_signed_real_38_1498] = true;
  arteoR_pL[ARTL_ART_signed_real_38_1498] = true;
  artPopD[ARTL_ART_signed_real_38_1498] = true;
}

public void artTableInitialiser_ART_simple_expression() {
  artLabelInternalStrings[ARTL_ART_simple_expression] = "simple_expression";
  artLabelStrings[ARTL_ART_simple_expression] = "simple_expression";
  artKindOfs[ARTL_ART_simple_expression] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_simple_expression_562] = "simple_expression ::= . term simple_expression_39 ";
  artLabelStrings[ARTL_ART_simple_expression_562] = "";
  artlhsL[ARTL_ART_simple_expression_562] = ARTL_ART_simple_expression;
  artKindOfs[ARTL_ART_simple_expression_562] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_expression_564] = "simple_expression ::= term . simple_expression_39 ";
  artLabelStrings[ARTL_ART_simple_expression_564] = "";
  artlhsL[ARTL_ART_simple_expression_564] = ARTL_ART_simple_expression;
  artSlotInstanceOfs[ARTL_ART_simple_expression_564] = ARTL_ART_term;
  artKindOfs[ARTL_ART_simple_expression_564] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_simple_expression_564] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_566] = "simple_expression ::= term simple_expression_39 .";
  artLabelStrings[ARTL_ART_simple_expression_566] = "";
  artlhsL[ARTL_ART_simple_expression_566] = ARTL_ART_simple_expression;
  artSlotInstanceOfs[ARTL_ART_simple_expression_566] = ARTL_ART_simple_expression_39;
  artKindOfs[ARTL_ART_simple_expression_566] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_expression_566] = true;
  arteoR_pL[ARTL_ART_simple_expression_566] = true;
  artPopD[ARTL_ART_simple_expression_566] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_568] = "simple_expression ::= . sign term simple_expression_40 ";
  artLabelStrings[ARTL_ART_simple_expression_568] = "";
  artlhsL[ARTL_ART_simple_expression_568] = ARTL_ART_simple_expression;
  artKindOfs[ARTL_ART_simple_expression_568] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_expression_570] = "simple_expression ::= sign . term simple_expression_40 ";
  artLabelStrings[ARTL_ART_simple_expression_570] = "";
  artlhsL[ARTL_ART_simple_expression_570] = ARTL_ART_simple_expression;
  artSlotInstanceOfs[ARTL_ART_simple_expression_570] = ARTL_ART_sign;
  artKindOfs[ARTL_ART_simple_expression_570] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_simple_expression_570] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_572] = "simple_expression ::= sign term . simple_expression_40 ";
  artLabelStrings[ARTL_ART_simple_expression_572] = "";
  artlhsL[ARTL_ART_simple_expression_572] = ARTL_ART_simple_expression;
  artSlotInstanceOfs[ARTL_ART_simple_expression_572] = ARTL_ART_term;
  artKindOfs[ARTL_ART_simple_expression_572] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_expression_574] = "simple_expression ::= sign term simple_expression_40 .";
  artLabelStrings[ARTL_ART_simple_expression_574] = "";
  artlhsL[ARTL_ART_simple_expression_574] = ARTL_ART_simple_expression;
  artSlotInstanceOfs[ARTL_ART_simple_expression_574] = ARTL_ART_simple_expression_40;
  artKindOfs[ARTL_ART_simple_expression_574] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_expression_574] = true;
  arteoR_pL[ARTL_ART_simple_expression_574] = true;
  artPopD[ARTL_ART_simple_expression_574] = true;
}

public void artTableInitialiser_ART_simple_expression_39() {
  artLabelInternalStrings[ARTL_ART_simple_expression_39] = "simple_expression_39";
  artLabelStrings[ARTL_ART_simple_expression_39] = "simple_expression_39";
  artKindOfs[ARTL_ART_simple_expression_39] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_simple_expression_39_1510] = "simple_expression_39 ::= . # ";
  artLabelStrings[ARTL_ART_simple_expression_39_1510] = "";
  artlhsL[ARTL_ART_simple_expression_39_1510] = ARTL_ART_simple_expression_39;
  artKindOfs[ARTL_ART_simple_expression_39_1510] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_simple_expression_39_1510] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_39_1512] = "simple_expression_39 ::= # .";
  artLabelStrings[ARTL_ART_simple_expression_39_1512] = "";
  artlhsL[ARTL_ART_simple_expression_39_1512] = ARTL_ART_simple_expression_39;
  artKindOfs[ARTL_ART_simple_expression_39_1512] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_expression_39_1512] = true;
  arteoR_pL[ARTL_ART_simple_expression_39_1512] = true;
  artPopD[ARTL_ART_simple_expression_39_1512] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_39_1514] = "simple_expression_39 ::= . simple_expression_39 adding_operator term ";
  artLabelStrings[ARTL_ART_simple_expression_39_1514] = "";
  artlhsL[ARTL_ART_simple_expression_39_1514] = ARTL_ART_simple_expression_39;
  artKindOfs[ARTL_ART_simple_expression_39_1514] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_expression_39_1516] = "simple_expression_39 ::= simple_expression_39 . adding_operator term ";
  artLabelStrings[ARTL_ART_simple_expression_39_1516] = "";
  artlhsL[ARTL_ART_simple_expression_39_1516] = ARTL_ART_simple_expression_39;
  artSlotInstanceOfs[ARTL_ART_simple_expression_39_1516] = ARTL_ART_simple_expression_39;
  artKindOfs[ARTL_ART_simple_expression_39_1516] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_simple_expression_39_1516] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_39_1518] = "simple_expression_39 ::= simple_expression_39 adding_operator . term ";
  artLabelStrings[ARTL_ART_simple_expression_39_1518] = "";
  artlhsL[ARTL_ART_simple_expression_39_1518] = ARTL_ART_simple_expression_39;
  artSlotInstanceOfs[ARTL_ART_simple_expression_39_1518] = ARTL_ART_adding_operator;
  artKindOfs[ARTL_ART_simple_expression_39_1518] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_expression_39_1520] = "simple_expression_39 ::= simple_expression_39 adding_operator term .";
  artLabelStrings[ARTL_ART_simple_expression_39_1520] = "";
  artlhsL[ARTL_ART_simple_expression_39_1520] = ARTL_ART_simple_expression_39;
  artSlotInstanceOfs[ARTL_ART_simple_expression_39_1520] = ARTL_ART_term;
  artKindOfs[ARTL_ART_simple_expression_39_1520] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_expression_39_1520] = true;
  arteoR_pL[ARTL_ART_simple_expression_39_1520] = true;
  artPopD[ARTL_ART_simple_expression_39_1520] = true;
}

public void artTableInitialiser_ART_simple_expression_40() {
  artLabelInternalStrings[ARTL_ART_simple_expression_40] = "simple_expression_40";
  artLabelStrings[ARTL_ART_simple_expression_40] = "simple_expression_40";
  artKindOfs[ARTL_ART_simple_expression_40] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_simple_expression_40_1522] = "simple_expression_40 ::= . # ";
  artLabelStrings[ARTL_ART_simple_expression_40_1522] = "";
  artlhsL[ARTL_ART_simple_expression_40_1522] = ARTL_ART_simple_expression_40;
  artKindOfs[ARTL_ART_simple_expression_40_1522] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_simple_expression_40_1522] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_40_1524] = "simple_expression_40 ::= # .";
  artLabelStrings[ARTL_ART_simple_expression_40_1524] = "";
  artlhsL[ARTL_ART_simple_expression_40_1524] = ARTL_ART_simple_expression_40;
  artKindOfs[ARTL_ART_simple_expression_40_1524] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_expression_40_1524] = true;
  arteoR_pL[ARTL_ART_simple_expression_40_1524] = true;
  artPopD[ARTL_ART_simple_expression_40_1524] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_40_1526] = "simple_expression_40 ::= . simple_expression_40 adding_operator term ";
  artLabelStrings[ARTL_ART_simple_expression_40_1526] = "";
  artlhsL[ARTL_ART_simple_expression_40_1526] = ARTL_ART_simple_expression_40;
  artKindOfs[ARTL_ART_simple_expression_40_1526] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_expression_40_1528] = "simple_expression_40 ::= simple_expression_40 . adding_operator term ";
  artLabelStrings[ARTL_ART_simple_expression_40_1528] = "";
  artlhsL[ARTL_ART_simple_expression_40_1528] = ARTL_ART_simple_expression_40;
  artSlotInstanceOfs[ARTL_ART_simple_expression_40_1528] = ARTL_ART_simple_expression_40;
  artKindOfs[ARTL_ART_simple_expression_40_1528] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_simple_expression_40_1528] = true;
  artLabelInternalStrings[ARTL_ART_simple_expression_40_1530] = "simple_expression_40 ::= simple_expression_40 adding_operator . term ";
  artLabelStrings[ARTL_ART_simple_expression_40_1530] = "";
  artlhsL[ARTL_ART_simple_expression_40_1530] = ARTL_ART_simple_expression_40;
  artSlotInstanceOfs[ARTL_ART_simple_expression_40_1530] = ARTL_ART_adding_operator;
  artKindOfs[ARTL_ART_simple_expression_40_1530] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_expression_40_1532] = "simple_expression_40 ::= simple_expression_40 adding_operator term .";
  artLabelStrings[ARTL_ART_simple_expression_40_1532] = "";
  artlhsL[ARTL_ART_simple_expression_40_1532] = ARTL_ART_simple_expression_40;
  artSlotInstanceOfs[ARTL_ART_simple_expression_40_1532] = ARTL_ART_term;
  artKindOfs[ARTL_ART_simple_expression_40_1532] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_expression_40_1532] = true;
  arteoR_pL[ARTL_ART_simple_expression_40_1532] = true;
  artPopD[ARTL_ART_simple_expression_40_1532] = true;
}

public void artTableInitialiser_ART_simple_statement() {
  artLabelInternalStrings[ARTL_ART_simple_statement] = "simple_statement";
  artLabelStrings[ARTL_ART_simple_statement] = "simple_statement";
  artKindOfs[ARTL_ART_simple_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_simple_statement_1534] = "simple_statement ::= . simple_statement_41 ";
  artLabelStrings[ARTL_ART_simple_statement_1534] = "";
  artlhsL[ARTL_ART_simple_statement_1534] = ARTL_ART_simple_statement;
  artKindOfs[ARTL_ART_simple_statement_1534] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_statement_1536] = "simple_statement ::= simple_statement_41 .";
  artLabelStrings[ARTL_ART_simple_statement_1536] = "";
  artlhsL[ARTL_ART_simple_statement_1536] = ARTL_ART_simple_statement;
  artSlotInstanceOfs[ARTL_ART_simple_statement_1536] = ARTL_ART_simple_statement_41;
  artKindOfs[ARTL_ART_simple_statement_1536] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_statement_1536] = true;
  arteoR_pL[ARTL_ART_simple_statement_1536] = true;
  artPopD[ARTL_ART_simple_statement_1536] = true;
  artLabelInternalStrings[ARTL_ART_simple_statement_1538] = "simple_statement ::= . procedure_statement ";
  artLabelStrings[ARTL_ART_simple_statement_1538] = "";
  artlhsL[ARTL_ART_simple_statement_1538] = ARTL_ART_simple_statement;
  artKindOfs[ARTL_ART_simple_statement_1538] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_statement_1540] = "simple_statement ::= procedure_statement .";
  artLabelStrings[ARTL_ART_simple_statement_1540] = "";
  artlhsL[ARTL_ART_simple_statement_1540] = ARTL_ART_simple_statement;
  artSlotInstanceOfs[ARTL_ART_simple_statement_1540] = ARTL_ART_procedure_statement;
  artKindOfs[ARTL_ART_simple_statement_1540] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_statement_1540] = true;
  arteoR_pL[ARTL_ART_simple_statement_1540] = true;
  artPopD[ARTL_ART_simple_statement_1540] = true;
  artLabelInternalStrings[ARTL_ART_simple_statement_1542] = "simple_statement ::= . goto_statement ";
  artLabelStrings[ARTL_ART_simple_statement_1542] = "";
  artlhsL[ARTL_ART_simple_statement_1542] = ARTL_ART_simple_statement;
  artKindOfs[ARTL_ART_simple_statement_1542] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_statement_1544] = "simple_statement ::= goto_statement .";
  artLabelStrings[ARTL_ART_simple_statement_1544] = "";
  artlhsL[ARTL_ART_simple_statement_1544] = ARTL_ART_simple_statement;
  artSlotInstanceOfs[ARTL_ART_simple_statement_1544] = ARTL_ART_goto_statement;
  artKindOfs[ARTL_ART_simple_statement_1544] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_statement_1544] = true;
  arteoR_pL[ARTL_ART_simple_statement_1544] = true;
  artPopD[ARTL_ART_simple_statement_1544] = true;
}

public void artTableInitialiser_ART_simple_statement_41() {
  artLabelInternalStrings[ARTL_ART_simple_statement_41] = "simple_statement_41";
  artLabelStrings[ARTL_ART_simple_statement_41] = "simple_statement_41";
  artKindOfs[ARTL_ART_simple_statement_41] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_simple_statement_41_1546] = "simple_statement_41 ::= . # ";
  artLabelStrings[ARTL_ART_simple_statement_41_1546] = "";
  artlhsL[ARTL_ART_simple_statement_41_1546] = ARTL_ART_simple_statement_41;
  artKindOfs[ARTL_ART_simple_statement_41_1546] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_simple_statement_41_1546] = true;
  artLabelInternalStrings[ARTL_ART_simple_statement_41_1548] = "simple_statement_41 ::= # .";
  artLabelStrings[ARTL_ART_simple_statement_41_1548] = "";
  artlhsL[ARTL_ART_simple_statement_41_1548] = ARTL_ART_simple_statement_41;
  artKindOfs[ARTL_ART_simple_statement_41_1548] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_statement_41_1548] = true;
  arteoR_pL[ARTL_ART_simple_statement_41_1548] = true;
  artPopD[ARTL_ART_simple_statement_41_1548] = true;
  artLabelInternalStrings[ARTL_ART_simple_statement_41_1550] = "simple_statement_41 ::= . assignment_statement ";
  artLabelStrings[ARTL_ART_simple_statement_41_1550] = "";
  artlhsL[ARTL_ART_simple_statement_41_1550] = ARTL_ART_simple_statement_41;
  artKindOfs[ARTL_ART_simple_statement_41_1550] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_statement_41_1552] = "simple_statement_41 ::= assignment_statement .";
  artLabelStrings[ARTL_ART_simple_statement_41_1552] = "";
  artlhsL[ARTL_ART_simple_statement_41_1552] = ARTL_ART_simple_statement_41;
  artSlotInstanceOfs[ARTL_ART_simple_statement_41_1552] = ARTL_ART_assignment_statement;
  artKindOfs[ARTL_ART_simple_statement_41_1552] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_statement_41_1552] = true;
  arteoR_pL[ARTL_ART_simple_statement_41_1552] = true;
  artPopD[ARTL_ART_simple_statement_41_1552] = true;
}

public void artTableInitialiser_ART_simple_type() {
  artLabelInternalStrings[ARTL_ART_simple_type] = "simple_type";
  artLabelStrings[ARTL_ART_simple_type] = "simple_type";
  artKindOfs[ARTL_ART_simple_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_simple_type_1554] = "simple_type ::= . ordinal_type ";
  artLabelStrings[ARTL_ART_simple_type_1554] = "";
  artlhsL[ARTL_ART_simple_type_1554] = ARTL_ART_simple_type;
  artKindOfs[ARTL_ART_simple_type_1554] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_type_1556] = "simple_type ::= ordinal_type .";
  artLabelStrings[ARTL_ART_simple_type_1556] = "";
  artlhsL[ARTL_ART_simple_type_1556] = ARTL_ART_simple_type;
  artSlotInstanceOfs[ARTL_ART_simple_type_1556] = ARTL_ART_ordinal_type;
  artKindOfs[ARTL_ART_simple_type_1556] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_type_1556] = true;
  arteoR_pL[ARTL_ART_simple_type_1556] = true;
  artPopD[ARTL_ART_simple_type_1556] = true;
  artLabelInternalStrings[ARTL_ART_simple_type_1558] = "simple_type ::= . real_type_ID ";
  artLabelStrings[ARTL_ART_simple_type_1558] = "";
  artlhsL[ARTL_ART_simple_type_1558] = ARTL_ART_simple_type;
  artKindOfs[ARTL_ART_simple_type_1558] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_type_1560] = "simple_type ::= real_type_ID .";
  artLabelStrings[ARTL_ART_simple_type_1560] = "";
  artlhsL[ARTL_ART_simple_type_1560] = ARTL_ART_simple_type;
  artSlotInstanceOfs[ARTL_ART_simple_type_1560] = ARTL_ART_real_type_ID;
  artKindOfs[ARTL_ART_simple_type_1560] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_type_1560] = true;
  arteoR_pL[ARTL_ART_simple_type_1560] = true;
  artPopD[ARTL_ART_simple_type_1560] = true;
}

public void artTableInitialiser_ART_simple_type_ID() {
  artLabelInternalStrings[ARTL_ART_simple_type_ID] = "simple_type_ID";
  artLabelStrings[ARTL_ART_simple_type_ID] = "simple_type_ID";
  artKindOfs[ARTL_ART_simple_type_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_simple_type_ID_1422] = "simple_type_ID ::= . type_ID ";
  artLabelStrings[ARTL_ART_simple_type_ID_1422] = "";
  artlhsL[ARTL_ART_simple_type_ID_1422] = ARTL_ART_simple_type_ID;
  artKindOfs[ARTL_ART_simple_type_ID_1422] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_simple_type_ID_1424] = "simple_type_ID ::= type_ID .";
  artLabelStrings[ARTL_ART_simple_type_ID_1424] = "";
  artlhsL[ARTL_ART_simple_type_ID_1424] = ARTL_ART_simple_type_ID;
  artSlotInstanceOfs[ARTL_ART_simple_type_ID_1424] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_simple_type_ID_1424] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_simple_type_ID_1424] = true;
  arteoR_pL[ARTL_ART_simple_type_ID_1424] = true;
  artPopD[ARTL_ART_simple_type_ID_1424] = true;
}

public void artTableInitialiser_ART_statement() {
  artLabelInternalStrings[ARTL_ART_statement] = "statement";
  artLabelStrings[ARTL_ART_statement] = "statement";
  artKindOfs[ARTL_ART_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_statement_254] = "statement ::= . statement_42 statement_43 ";
  artLabelStrings[ARTL_ART_statement_254] = "";
  artlhsL[ARTL_ART_statement_254] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_statement_254] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_statement_256] = "statement ::= statement_42 . statement_43 ";
  artLabelStrings[ARTL_ART_statement_256] = "";
  artlhsL[ARTL_ART_statement_256] = ARTL_ART_statement;
  artSlotInstanceOfs[ARTL_ART_statement_256] = ARTL_ART_statement_42;
  artKindOfs[ARTL_ART_statement_256] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_statement_256] = true;
  artLabelInternalStrings[ARTL_ART_statement_258] = "statement ::= statement_42 statement_43 .";
  artLabelStrings[ARTL_ART_statement_258] = "";
  artlhsL[ARTL_ART_statement_258] = ARTL_ART_statement;
  artSlotInstanceOfs[ARTL_ART_statement_258] = ARTL_ART_statement_43;
  artKindOfs[ARTL_ART_statement_258] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_258] = true;
  arteoR_pL[ARTL_ART_statement_258] = true;
  artPopD[ARTL_ART_statement_258] = true;
}

public void artTableInitialiser_ART_statement_42() {
  artLabelInternalStrings[ARTL_ART_statement_42] = "statement_42";
  artLabelStrings[ARTL_ART_statement_42] = "statement_42";
  artKindOfs[ARTL_ART_statement_42] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_statement_42_1562] = "statement_42 ::= . # ";
  artLabelStrings[ARTL_ART_statement_42_1562] = "";
  artlhsL[ARTL_ART_statement_42_1562] = ARTL_ART_statement_42;
  artKindOfs[ARTL_ART_statement_42_1562] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_statement_42_1562] = true;
  artLabelInternalStrings[ARTL_ART_statement_42_1564] = "statement_42 ::= # .";
  artLabelStrings[ARTL_ART_statement_42_1564] = "";
  artlhsL[ARTL_ART_statement_42_1564] = ARTL_ART_statement_42;
  artKindOfs[ARTL_ART_statement_42_1564] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_42_1564] = true;
  arteoR_pL[ARTL_ART_statement_42_1564] = true;
  artPopD[ARTL_ART_statement_42_1564] = true;
  artLabelInternalStrings[ARTL_ART_statement_42_1566] = "statement_42 ::= . label ':'  ";
  artLabelStrings[ARTL_ART_statement_42_1566] = "";
  artlhsL[ARTL_ART_statement_42_1566] = ARTL_ART_statement_42;
  artKindOfs[ARTL_ART_statement_42_1566] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_statement_42_1568] = "statement_42 ::= label . ':'  ";
  artLabelStrings[ARTL_ART_statement_42_1568] = "";
  artlhsL[ARTL_ART_statement_42_1568] = ARTL_ART_statement_42;
  artSlotInstanceOfs[ARTL_ART_statement_42_1568] = ARTL_ART_label;
  artKindOfs[ARTL_ART_statement_42_1568] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_statement_42_1568] = true;
  artPopD[ARTL_ART_statement_42_1568] = true;
  artLabelInternalStrings[ARTL_ART_statement_42_1569] = "statement_42 ::= label ':'  ";
  artLabelStrings[ARTL_ART_statement_42_1569] = "";
  artlhsL[ARTL_ART_statement_42_1569] = ARTL_ART_statement_42;
  artPopD[ARTL_ART_statement_42_1569] = true;
  artLabelInternalStrings[ARTL_ART_statement_42_1570] = "statement_42 ::= label ':'  .";
  artLabelStrings[ARTL_ART_statement_42_1570] = "";
  artlhsL[ARTL_ART_statement_42_1570] = ARTL_ART_statement_42;
  artKindOfs[ARTL_ART_statement_42_1570] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_42_1570] = true;
  arteoR_pL[ARTL_ART_statement_42_1570] = true;
  artPopD[ARTL_ART_statement_42_1570] = true;
}

public void artTableInitialiser_ART_statement_43() {
  artLabelInternalStrings[ARTL_ART_statement_43] = "statement_43";
  artLabelStrings[ARTL_ART_statement_43] = "statement_43";
  artKindOfs[ARTL_ART_statement_43] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_statement_43_1572] = "statement_43 ::= . simple_statement ";
  artLabelStrings[ARTL_ART_statement_43_1572] = "";
  artlhsL[ARTL_ART_statement_43_1572] = ARTL_ART_statement_43;
  artKindOfs[ARTL_ART_statement_43_1572] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_statement_43_1574] = "statement_43 ::= simple_statement .";
  artLabelStrings[ARTL_ART_statement_43_1574] = "";
  artlhsL[ARTL_ART_statement_43_1574] = ARTL_ART_statement_43;
  artSlotInstanceOfs[ARTL_ART_statement_43_1574] = ARTL_ART_simple_statement;
  artKindOfs[ARTL_ART_statement_43_1574] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_43_1574] = true;
  arteoR_pL[ARTL_ART_statement_43_1574] = true;
  artPopD[ARTL_ART_statement_43_1574] = true;
  artLabelInternalStrings[ARTL_ART_statement_43_1576] = "statement_43 ::= . structured_statement ";
  artLabelStrings[ARTL_ART_statement_43_1576] = "";
  artlhsL[ARTL_ART_statement_43_1576] = ARTL_ART_statement_43;
  artKindOfs[ARTL_ART_statement_43_1576] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_statement_43_1578] = "statement_43 ::= structured_statement .";
  artLabelStrings[ARTL_ART_statement_43_1578] = "";
  artlhsL[ARTL_ART_statement_43_1578] = ARTL_ART_statement_43;
  artSlotInstanceOfs[ARTL_ART_statement_43_1578] = ARTL_ART_structured_statement;
  artKindOfs[ARTL_ART_statement_43_1578] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_43_1578] = true;
  arteoR_pL[ARTL_ART_statement_43_1578] = true;
  artPopD[ARTL_ART_statement_43_1578] = true;
}

public void artTableInitialiser_ART_statement_part() {
  artLabelInternalStrings[ARTL_ART_statement_part] = "statement_part";
  artLabelStrings[ARTL_ART_statement_part] = "statement_part";
  artKindOfs[ARTL_ART_statement_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_statement_part_194] = "statement_part ::= . compound_statement ";
  artLabelStrings[ARTL_ART_statement_part_194] = "";
  artlhsL[ARTL_ART_statement_part_194] = ARTL_ART_statement_part;
  artKindOfs[ARTL_ART_statement_part_194] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_statement_part_196] = "statement_part ::= compound_statement .";
  artLabelStrings[ARTL_ART_statement_part_196] = "";
  artlhsL[ARTL_ART_statement_part_196] = ARTL_ART_statement_part;
  artSlotInstanceOfs[ARTL_ART_statement_part_196] = ARTL_ART_compound_statement;
  artKindOfs[ARTL_ART_statement_part_196] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_part_196] = true;
  arteoR_pL[ARTL_ART_statement_part_196] = true;
  artPopD[ARTL_ART_statement_part_196] = true;
}

public void artTableInitialiser_ART_statement_sequence() {
  artLabelInternalStrings[ARTL_ART_statement_sequence] = "statement_sequence";
  artLabelStrings[ARTL_ART_statement_sequence] = "statement_sequence";
  artKindOfs[ARTL_ART_statement_sequence] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_statement_sequence_348] = "statement_sequence ::= . statement statement_sequence_44 ";
  artLabelStrings[ARTL_ART_statement_sequence_348] = "";
  artlhsL[ARTL_ART_statement_sequence_348] = ARTL_ART_statement_sequence;
  artKindOfs[ARTL_ART_statement_sequence_348] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_statement_sequence_350] = "statement_sequence ::= statement . statement_sequence_44 ";
  artLabelStrings[ARTL_ART_statement_sequence_350] = "";
  artlhsL[ARTL_ART_statement_sequence_350] = ARTL_ART_statement_sequence;
  artSlotInstanceOfs[ARTL_ART_statement_sequence_350] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_statement_sequence_350] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_statement_sequence_350] = true;
  artLabelInternalStrings[ARTL_ART_statement_sequence_352] = "statement_sequence ::= statement statement_sequence_44 .";
  artLabelStrings[ARTL_ART_statement_sequence_352] = "";
  artlhsL[ARTL_ART_statement_sequence_352] = ARTL_ART_statement_sequence;
  artSlotInstanceOfs[ARTL_ART_statement_sequence_352] = ARTL_ART_statement_sequence_44;
  artKindOfs[ARTL_ART_statement_sequence_352] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_sequence_352] = true;
  arteoR_pL[ARTL_ART_statement_sequence_352] = true;
  artPopD[ARTL_ART_statement_sequence_352] = true;
}

public void artTableInitialiser_ART_statement_sequence_44() {
  artLabelInternalStrings[ARTL_ART_statement_sequence_44] = "statement_sequence_44";
  artLabelStrings[ARTL_ART_statement_sequence_44] = "statement_sequence_44";
  artKindOfs[ARTL_ART_statement_sequence_44] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_statement_sequence_44_1596] = "statement_sequence_44 ::= . # ";
  artLabelStrings[ARTL_ART_statement_sequence_44_1596] = "";
  artlhsL[ARTL_ART_statement_sequence_44_1596] = ARTL_ART_statement_sequence_44;
  artKindOfs[ARTL_ART_statement_sequence_44_1596] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_statement_sequence_44_1596] = true;
  artLabelInternalStrings[ARTL_ART_statement_sequence_44_1598] = "statement_sequence_44 ::= # .";
  artLabelStrings[ARTL_ART_statement_sequence_44_1598] = "";
  artlhsL[ARTL_ART_statement_sequence_44_1598] = ARTL_ART_statement_sequence_44;
  artKindOfs[ARTL_ART_statement_sequence_44_1598] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_sequence_44_1598] = true;
  arteoR_pL[ARTL_ART_statement_sequence_44_1598] = true;
  artPopD[ARTL_ART_statement_sequence_44_1598] = true;
  artLabelInternalStrings[ARTL_ART_statement_sequence_44_1600] = "statement_sequence_44 ::= . statement_sequence_44 ';'  statement ";
  artLabelStrings[ARTL_ART_statement_sequence_44_1600] = "";
  artlhsL[ARTL_ART_statement_sequence_44_1600] = ARTL_ART_statement_sequence_44;
  artKindOfs[ARTL_ART_statement_sequence_44_1600] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_statement_sequence_44_1602] = "statement_sequence_44 ::= statement_sequence_44 . ';'  statement ";
  artLabelStrings[ARTL_ART_statement_sequence_44_1602] = "";
  artlhsL[ARTL_ART_statement_sequence_44_1602] = ARTL_ART_statement_sequence_44;
  artSlotInstanceOfs[ARTL_ART_statement_sequence_44_1602] = ARTL_ART_statement_sequence_44;
  artKindOfs[ARTL_ART_statement_sequence_44_1602] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_statement_sequence_44_1602] = true;
  artLabelInternalStrings[ARTL_ART_statement_sequence_44_1603] = "statement_sequence_44 ::= statement_sequence_44 ';'  statement ";
  artLabelStrings[ARTL_ART_statement_sequence_44_1603] = "";
  artlhsL[ARTL_ART_statement_sequence_44_1603] = ARTL_ART_statement_sequence_44;
  artLabelInternalStrings[ARTL_ART_statement_sequence_44_1604] = "statement_sequence_44 ::= statement_sequence_44 ';'  . statement ";
  artLabelStrings[ARTL_ART_statement_sequence_44_1604] = "";
  artlhsL[ARTL_ART_statement_sequence_44_1604] = ARTL_ART_statement_sequence_44;
  artKindOfs[ARTL_ART_statement_sequence_44_1604] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_statement_sequence_44_1606] = "statement_sequence_44 ::= statement_sequence_44 ';'  statement .";
  artLabelStrings[ARTL_ART_statement_sequence_44_1606] = "";
  artlhsL[ARTL_ART_statement_sequence_44_1606] = ARTL_ART_statement_sequence_44;
  artSlotInstanceOfs[ARTL_ART_statement_sequence_44_1606] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_statement_sequence_44_1606] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_statement_sequence_44_1606] = true;
  arteoR_pL[ARTL_ART_statement_sequence_44_1606] = true;
  artPopD[ARTL_ART_statement_sequence_44_1606] = true;
}

public void artTableInitialiser_ART_string_character() {
  artLabelInternalStrings[ARTL_ART_string_character] = "string_character";
  artLabelStrings[ARTL_ART_string_character] = "string_character";
  artKindOfs[ARTL_ART_string_character] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_string_character_1608] = "string_character ::= . 'one_of_a_set_of_implementation_defined_characters'  ";
  artLabelStrings[ARTL_ART_string_character_1608] = "";
  artlhsL[ARTL_ART_string_character_1608] = ARTL_ART_string_character;
  artKindOfs[ARTL_ART_string_character_1608] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_string_character_1608] = true;
  artLabelInternalStrings[ARTL_ART_string_character_1609] = "string_character ::= 'one_of_a_set_of_implementation_defined_characters'  ";
  artLabelStrings[ARTL_ART_string_character_1609] = "";
  artlhsL[ARTL_ART_string_character_1609] = ARTL_ART_string_character;
  artPopD[ARTL_ART_string_character_1609] = true;
  artLabelInternalStrings[ARTL_ART_string_character_1610] = "string_character ::= 'one_of_a_set_of_implementation_defined_characters'  .";
  artLabelStrings[ARTL_ART_string_character_1610] = "";
  artlhsL[ARTL_ART_string_character_1610] = ARTL_ART_string_character;
  artKindOfs[ARTL_ART_string_character_1610] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_string_character_1610] = true;
  arteoR_pL[ARTL_ART_string_character_1610] = true;
  artPopD[ARTL_ART_string_character_1610] = true;
}

public void artTableInitialiser_ART_string_element() {
  artLabelInternalStrings[ARTL_ART_string_element] = "string_element";
  artLabelStrings[ARTL_ART_string_element] = "string_element";
  artKindOfs[ARTL_ART_string_element] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_string_element_1612] = "string_element ::= . apostrophe_image ";
  artLabelStrings[ARTL_ART_string_element_1612] = "";
  artlhsL[ARTL_ART_string_element_1612] = ARTL_ART_string_element;
  artKindOfs[ARTL_ART_string_element_1612] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_string_element_1614] = "string_element ::= apostrophe_image .";
  artLabelStrings[ARTL_ART_string_element_1614] = "";
  artlhsL[ARTL_ART_string_element_1614] = ARTL_ART_string_element;
  artSlotInstanceOfs[ARTL_ART_string_element_1614] = ARTL_ART_apostrophe_image;
  artKindOfs[ARTL_ART_string_element_1614] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_string_element_1614] = true;
  arteoR_pL[ARTL_ART_string_element_1614] = true;
  artPopD[ARTL_ART_string_element_1614] = true;
  artLabelInternalStrings[ARTL_ART_string_element_1616] = "string_element ::= . string_character ";
  artLabelStrings[ARTL_ART_string_element_1616] = "";
  artlhsL[ARTL_ART_string_element_1616] = ARTL_ART_string_element;
  artKindOfs[ARTL_ART_string_element_1616] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_string_element_1618] = "string_element ::= string_character .";
  artLabelStrings[ARTL_ART_string_element_1618] = "";
  artlhsL[ARTL_ART_string_element_1618] = ARTL_ART_string_element;
  artSlotInstanceOfs[ARTL_ART_string_element_1618] = ARTL_ART_string_character;
  artKindOfs[ARTL_ART_string_element_1618] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_string_element_1618] = true;
  arteoR_pL[ARTL_ART_string_element_1618] = true;
  artPopD[ARTL_ART_string_element_1618] = true;
}

public void artTableInitialiser_ART_structured_statement() {
  artLabelInternalStrings[ARTL_ART_structured_statement] = "structured_statement";
  artLabelStrings[ARTL_ART_structured_statement] = "structured_statement";
  artKindOfs[ARTL_ART_structured_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_structured_statement_1580] = "structured_statement ::= . compound_statement ";
  artLabelStrings[ARTL_ART_structured_statement_1580] = "";
  artlhsL[ARTL_ART_structured_statement_1580] = ARTL_ART_structured_statement;
  artKindOfs[ARTL_ART_structured_statement_1580] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_structured_statement_1582] = "structured_statement ::= compound_statement .";
  artLabelStrings[ARTL_ART_structured_statement_1582] = "";
  artlhsL[ARTL_ART_structured_statement_1582] = ARTL_ART_structured_statement;
  artSlotInstanceOfs[ARTL_ART_structured_statement_1582] = ARTL_ART_compound_statement;
  artKindOfs[ARTL_ART_structured_statement_1582] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_structured_statement_1582] = true;
  arteoR_pL[ARTL_ART_structured_statement_1582] = true;
  artPopD[ARTL_ART_structured_statement_1582] = true;
  artLabelInternalStrings[ARTL_ART_structured_statement_1584] = "structured_statement ::= . conditional_statement ";
  artLabelStrings[ARTL_ART_structured_statement_1584] = "";
  artlhsL[ARTL_ART_structured_statement_1584] = ARTL_ART_structured_statement;
  artKindOfs[ARTL_ART_structured_statement_1584] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_structured_statement_1586] = "structured_statement ::= conditional_statement .";
  artLabelStrings[ARTL_ART_structured_statement_1586] = "";
  artlhsL[ARTL_ART_structured_statement_1586] = ARTL_ART_structured_statement;
  artSlotInstanceOfs[ARTL_ART_structured_statement_1586] = ARTL_ART_conditional_statement;
  artKindOfs[ARTL_ART_structured_statement_1586] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_structured_statement_1586] = true;
  arteoR_pL[ARTL_ART_structured_statement_1586] = true;
  artPopD[ARTL_ART_structured_statement_1586] = true;
  artLabelInternalStrings[ARTL_ART_structured_statement_1588] = "structured_statement ::= . repetitive_statement ";
  artLabelStrings[ARTL_ART_structured_statement_1588] = "";
  artlhsL[ARTL_ART_structured_statement_1588] = ARTL_ART_structured_statement;
  artKindOfs[ARTL_ART_structured_statement_1588] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_structured_statement_1590] = "structured_statement ::= repetitive_statement .";
  artLabelStrings[ARTL_ART_structured_statement_1590] = "";
  artlhsL[ARTL_ART_structured_statement_1590] = ARTL_ART_structured_statement;
  artSlotInstanceOfs[ARTL_ART_structured_statement_1590] = ARTL_ART_repetitive_statement;
  artKindOfs[ARTL_ART_structured_statement_1590] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_structured_statement_1590] = true;
  arteoR_pL[ARTL_ART_structured_statement_1590] = true;
  artPopD[ARTL_ART_structured_statement_1590] = true;
  artLabelInternalStrings[ARTL_ART_structured_statement_1592] = "structured_statement ::= . with_statement ";
  artLabelStrings[ARTL_ART_structured_statement_1592] = "";
  artlhsL[ARTL_ART_structured_statement_1592] = ARTL_ART_structured_statement;
  artKindOfs[ARTL_ART_structured_statement_1592] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_structured_statement_1594] = "structured_statement ::= with_statement .";
  artLabelStrings[ARTL_ART_structured_statement_1594] = "";
  artlhsL[ARTL_ART_structured_statement_1594] = ARTL_ART_structured_statement;
  artSlotInstanceOfs[ARTL_ART_structured_statement_1594] = ARTL_ART_with_statement;
  artKindOfs[ARTL_ART_structured_statement_1594] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_structured_statement_1594] = true;
  arteoR_pL[ARTL_ART_structured_statement_1594] = true;
  artPopD[ARTL_ART_structured_statement_1594] = true;
}

public void artTableInitialiser_ART_structured_type() {
  artLabelInternalStrings[ARTL_ART_structured_type] = "structured_type";
  artLabelStrings[ARTL_ART_structured_type] = "structured_type";
  artKindOfs[ARTL_ART_structured_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_structured_type_1630] = "structured_type ::= . new_structured_type ";
  artLabelStrings[ARTL_ART_structured_type_1630] = "";
  artlhsL[ARTL_ART_structured_type_1630] = ARTL_ART_structured_type;
  artKindOfs[ARTL_ART_structured_type_1630] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_structured_type_1632] = "structured_type ::= new_structured_type .";
  artLabelStrings[ARTL_ART_structured_type_1632] = "";
  artlhsL[ARTL_ART_structured_type_1632] = ARTL_ART_structured_type;
  artSlotInstanceOfs[ARTL_ART_structured_type_1632] = ARTL_ART_new_structured_type;
  artKindOfs[ARTL_ART_structured_type_1632] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_structured_type_1632] = true;
  arteoR_pL[ARTL_ART_structured_type_1632] = true;
  artPopD[ARTL_ART_structured_type_1632] = true;
  artLabelInternalStrings[ARTL_ART_structured_type_1634] = "structured_type ::= . structured_type_ID ";
  artLabelStrings[ARTL_ART_structured_type_1634] = "";
  artlhsL[ARTL_ART_structured_type_1634] = ARTL_ART_structured_type;
  artKindOfs[ARTL_ART_structured_type_1634] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_structured_type_1636] = "structured_type ::= structured_type_ID .";
  artLabelStrings[ARTL_ART_structured_type_1636] = "";
  artlhsL[ARTL_ART_structured_type_1636] = ARTL_ART_structured_type;
  artSlotInstanceOfs[ARTL_ART_structured_type_1636] = ARTL_ART_structured_type_ID;
  artKindOfs[ARTL_ART_structured_type_1636] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_structured_type_1636] = true;
  arteoR_pL[ARTL_ART_structured_type_1636] = true;
  artPopD[ARTL_ART_structured_type_1636] = true;
}

public void artTableInitialiser_ART_structured_type_ID() {
  artLabelInternalStrings[ARTL_ART_structured_type_ID] = "structured_type_ID";
  artLabelStrings[ARTL_ART_structured_type_ID] = "structured_type_ID";
  artKindOfs[ARTL_ART_structured_type_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_structured_type_ID_1638] = "structured_type_ID ::= . type_ID ";
  artLabelStrings[ARTL_ART_structured_type_ID_1638] = "";
  artlhsL[ARTL_ART_structured_type_ID_1638] = ARTL_ART_structured_type_ID;
  artKindOfs[ARTL_ART_structured_type_ID_1638] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_structured_type_ID_1640] = "structured_type_ID ::= type_ID .";
  artLabelStrings[ARTL_ART_structured_type_ID_1640] = "";
  artlhsL[ARTL_ART_structured_type_ID_1640] = ARTL_ART_structured_type_ID;
  artSlotInstanceOfs[ARTL_ART_structured_type_ID_1640] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_structured_type_ID_1640] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_structured_type_ID_1640] = true;
  arteoR_pL[ARTL_ART_structured_type_ID_1640] = true;
  artPopD[ARTL_ART_structured_type_ID_1640] = true;
}

public void artTableInitialiser_ART_subrange_type() {
  artLabelInternalStrings[ARTL_ART_subrange_type] = "subrange_type";
  artLabelStrings[ARTL_ART_subrange_type] = "subrange_type";
  artKindOfs[ARTL_ART_subrange_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_subrange_type_1088] = "subrange_type ::= . constant '..'  constant ";
  artLabelStrings[ARTL_ART_subrange_type_1088] = "";
  artlhsL[ARTL_ART_subrange_type_1088] = ARTL_ART_subrange_type;
  artKindOfs[ARTL_ART_subrange_type_1088] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_subrange_type_1090] = "subrange_type ::= constant . '..'  constant ";
  artLabelStrings[ARTL_ART_subrange_type_1090] = "";
  artlhsL[ARTL_ART_subrange_type_1090] = ARTL_ART_subrange_type;
  artSlotInstanceOfs[ARTL_ART_subrange_type_1090] = ARTL_ART_constant;
  artKindOfs[ARTL_ART_subrange_type_1090] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_subrange_type_1090] = true;
  artLabelInternalStrings[ARTL_ART_subrange_type_1091] = "subrange_type ::= constant '..'  constant ";
  artLabelStrings[ARTL_ART_subrange_type_1091] = "";
  artlhsL[ARTL_ART_subrange_type_1091] = ARTL_ART_subrange_type;
  artLabelInternalStrings[ARTL_ART_subrange_type_1092] = "subrange_type ::= constant '..'  . constant ";
  artLabelStrings[ARTL_ART_subrange_type_1092] = "";
  artlhsL[ARTL_ART_subrange_type_1092] = ARTL_ART_subrange_type;
  artKindOfs[ARTL_ART_subrange_type_1092] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_subrange_type_1094] = "subrange_type ::= constant '..'  constant .";
  artLabelStrings[ARTL_ART_subrange_type_1094] = "";
  artlhsL[ARTL_ART_subrange_type_1094] = ARTL_ART_subrange_type;
  artSlotInstanceOfs[ARTL_ART_subrange_type_1094] = ARTL_ART_constant;
  artKindOfs[ARTL_ART_subrange_type_1094] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_subrange_type_1094] = true;
  arteoR_pL[ARTL_ART_subrange_type_1094] = true;
  artPopD[ARTL_ART_subrange_type_1094] = true;
}

public void artTableInitialiser_ART_tag_field() {
  artLabelInternalStrings[ARTL_ART_tag_field] = "tag_field";
  artLabelStrings[ARTL_ART_tag_field] = "tag_field";
  artKindOfs[ARTL_ART_tag_field] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_tag_field_1642] = "tag_field ::= . 'tag_field'  ";
  artLabelStrings[ARTL_ART_tag_field_1642] = "";
  artlhsL[ARTL_ART_tag_field_1642] = ARTL_ART_tag_field;
  artKindOfs[ARTL_ART_tag_field_1642] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_tag_field_1642] = true;
  artLabelInternalStrings[ARTL_ART_tag_field_1643] = "tag_field ::= 'tag_field'  ";
  artLabelStrings[ARTL_ART_tag_field_1643] = "";
  artlhsL[ARTL_ART_tag_field_1643] = ARTL_ART_tag_field;
  artPopD[ARTL_ART_tag_field_1643] = true;
  artLabelInternalStrings[ARTL_ART_tag_field_1644] = "tag_field ::= 'tag_field'  .";
  artLabelStrings[ARTL_ART_tag_field_1644] = "";
  artlhsL[ARTL_ART_tag_field_1644] = ARTL_ART_tag_field;
  artKindOfs[ARTL_ART_tag_field_1644] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_tag_field_1644] = true;
  arteoR_pL[ARTL_ART_tag_field_1644] = true;
  artPopD[ARTL_ART_tag_field_1644] = true;
}

public void artTableInitialiser_ART_tag_type() {
  artLabelInternalStrings[ARTL_ART_tag_type] = "tag_type";
  artLabelStrings[ARTL_ART_tag_type] = "tag_type";
  artKindOfs[ARTL_ART_tag_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_tag_type_1646] = "tag_type ::= . ordinal_type_ID ";
  artLabelStrings[ARTL_ART_tag_type_1646] = "";
  artlhsL[ARTL_ART_tag_type_1646] = ARTL_ART_tag_type;
  artKindOfs[ARTL_ART_tag_type_1646] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_tag_type_1648] = "tag_type ::= ordinal_type_ID .";
  artLabelStrings[ARTL_ART_tag_type_1648] = "";
  artlhsL[ARTL_ART_tag_type_1648] = ARTL_ART_tag_type;
  artSlotInstanceOfs[ARTL_ART_tag_type_1648] = ARTL_ART_ordinal_type_ID;
  artKindOfs[ARTL_ART_tag_type_1648] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_tag_type_1648] = true;
  arteoR_pL[ARTL_ART_tag_type_1648] = true;
  artPopD[ARTL_ART_tag_type_1648] = true;
}

public void artTableInitialiser_ART_term() {
  artLabelInternalStrings[ARTL_ART_term] = "term";
  artLabelStrings[ARTL_ART_term] = "term";
  artKindOfs[ARTL_ART_term] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_term_1504] = "term ::= . factor term_45 ";
  artLabelStrings[ARTL_ART_term_1504] = "";
  artlhsL[ARTL_ART_term_1504] = ARTL_ART_term;
  artKindOfs[ARTL_ART_term_1504] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_term_1506] = "term ::= factor . term_45 ";
  artLabelStrings[ARTL_ART_term_1506] = "";
  artlhsL[ARTL_ART_term_1506] = ARTL_ART_term;
  artSlotInstanceOfs[ARTL_ART_term_1506] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_term_1506] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_term_1506] = true;
  artLabelInternalStrings[ARTL_ART_term_1508] = "term ::= factor term_45 .";
  artLabelStrings[ARTL_ART_term_1508] = "";
  artlhsL[ARTL_ART_term_1508] = ARTL_ART_term;
  artSlotInstanceOfs[ARTL_ART_term_1508] = ARTL_ART_term_45;
  artKindOfs[ARTL_ART_term_1508] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_term_1508] = true;
  arteoR_pL[ARTL_ART_term_1508] = true;
  artPopD[ARTL_ART_term_1508] = true;
}

public void artTableInitialiser_ART_term_45() {
  artLabelInternalStrings[ARTL_ART_term_45] = "term_45";
  artLabelStrings[ARTL_ART_term_45] = "term_45";
  artKindOfs[ARTL_ART_term_45] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_term_45_1650] = "term_45 ::= . # ";
  artLabelStrings[ARTL_ART_term_45_1650] = "";
  artlhsL[ARTL_ART_term_45_1650] = ARTL_ART_term_45;
  artKindOfs[ARTL_ART_term_45_1650] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_term_45_1650] = true;
  artLabelInternalStrings[ARTL_ART_term_45_1652] = "term_45 ::= # .";
  artLabelStrings[ARTL_ART_term_45_1652] = "";
  artlhsL[ARTL_ART_term_45_1652] = ARTL_ART_term_45;
  artKindOfs[ARTL_ART_term_45_1652] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_term_45_1652] = true;
  arteoR_pL[ARTL_ART_term_45_1652] = true;
  artPopD[ARTL_ART_term_45_1652] = true;
  artLabelInternalStrings[ARTL_ART_term_45_1654] = "term_45 ::= . term_45 multiplying_operator factor ";
  artLabelStrings[ARTL_ART_term_45_1654] = "";
  artlhsL[ARTL_ART_term_45_1654] = ARTL_ART_term_45;
  artKindOfs[ARTL_ART_term_45_1654] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_term_45_1656] = "term_45 ::= term_45 . multiplying_operator factor ";
  artLabelStrings[ARTL_ART_term_45_1656] = "";
  artlhsL[ARTL_ART_term_45_1656] = ARTL_ART_term_45;
  artSlotInstanceOfs[ARTL_ART_term_45_1656] = ARTL_ART_term_45;
  artKindOfs[ARTL_ART_term_45_1656] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_term_45_1656] = true;
  artLabelInternalStrings[ARTL_ART_term_45_1658] = "term_45 ::= term_45 multiplying_operator . factor ";
  artLabelStrings[ARTL_ART_term_45_1658] = "";
  artlhsL[ARTL_ART_term_45_1658] = ARTL_ART_term_45;
  artSlotInstanceOfs[ARTL_ART_term_45_1658] = ARTL_ART_multiplying_operator;
  artKindOfs[ARTL_ART_term_45_1658] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_term_45_1660] = "term_45 ::= term_45 multiplying_operator factor .";
  artLabelStrings[ARTL_ART_term_45_1660] = "";
  artlhsL[ARTL_ART_term_45_1660] = ARTL_ART_term_45;
  artSlotInstanceOfs[ARTL_ART_term_45_1660] = ARTL_ART_factor;
  artKindOfs[ARTL_ART_term_45_1660] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_term_45_1660] = true;
  arteoR_pL[ARTL_ART_term_45_1660] = true;
  artPopD[ARTL_ART_term_45_1660] = true;
}

public void artTableInitialiser_ART_type_ID() {
  artLabelInternalStrings[ARTL_ART_type_ID] = "type_ID";
  artLabelStrings[ARTL_ART_type_ID] = "type_ID";
  artKindOfs[ARTL_ART_type_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_type_ID_534] = "type_ID ::= . 'type_ID'  ";
  artLabelStrings[ARTL_ART_type_ID_534] = "";
  artlhsL[ARTL_ART_type_ID_534] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_type_ID_534] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_type_ID_534] = true;
  artLabelInternalStrings[ARTL_ART_type_ID_535] = "type_ID ::= 'type_ID'  ";
  artLabelStrings[ARTL_ART_type_ID_535] = "";
  artlhsL[ARTL_ART_type_ID_535] = ARTL_ART_type_ID;
  artPopD[ARTL_ART_type_ID_535] = true;
  artLabelInternalStrings[ARTL_ART_type_ID_536] = "type_ID ::= 'type_ID'  .";
  artLabelStrings[ARTL_ART_type_ID_536] = "";
  artlhsL[ARTL_ART_type_ID_536] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_type_ID_536] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_ID_536] = true;
  arteoR_pL[ARTL_ART_type_ID_536] = true;
  artPopD[ARTL_ART_type_ID_536] = true;
}

public void artTableInitialiser_ART_type_definition() {
  artLabelInternalStrings[ARTL_ART_type_definition] = "type_definition";
  artLabelStrings[ARTL_ART_type_definition] = "type_definition";
  artKindOfs[ARTL_ART_type_definition] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_type_definition_1662] = "type_definition ::= . ID '='  type_denoter ";
  artLabelStrings[ARTL_ART_type_definition_1662] = "";
  artlhsL[ARTL_ART_type_definition_1662] = ARTL_ART_type_definition;
  artKindOfs[ARTL_ART_type_definition_1662] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_definition_1664] = "type_definition ::= ID . '='  type_denoter ";
  artLabelStrings[ARTL_ART_type_definition_1664] = "";
  artlhsL[ARTL_ART_type_definition_1664] = ARTL_ART_type_definition;
  artSlotInstanceOfs[ARTL_ART_type_definition_1664] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_type_definition_1664] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_type_definition_1664] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_1665] = "type_definition ::= ID '='  type_denoter ";
  artLabelStrings[ARTL_ART_type_definition_1665] = "";
  artlhsL[ARTL_ART_type_definition_1665] = ARTL_ART_type_definition;
  artLabelInternalStrings[ARTL_ART_type_definition_1666] = "type_definition ::= ID '='  . type_denoter ";
  artLabelStrings[ARTL_ART_type_definition_1666] = "";
  artlhsL[ARTL_ART_type_definition_1666] = ARTL_ART_type_definition;
  artKindOfs[ARTL_ART_type_definition_1666] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_definition_1668] = "type_definition ::= ID '='  type_denoter .";
  artLabelStrings[ARTL_ART_type_definition_1668] = "";
  artlhsL[ARTL_ART_type_definition_1668] = ARTL_ART_type_definition;
  artSlotInstanceOfs[ARTL_ART_type_definition_1668] = ARTL_ART_type_denoter;
  artKindOfs[ARTL_ART_type_definition_1668] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_definition_1668] = true;
  arteoR_pL[ARTL_ART_type_definition_1668] = true;
  artPopD[ARTL_ART_type_definition_1668] = true;
}

public void artTableInitialiser_ART_type_definition_part() {
  artLabelInternalStrings[ARTL_ART_type_definition_part] = "type_definition_part";
  artLabelStrings[ARTL_ART_type_definition_part] = "type_definition_part";
  artKindOfs[ARTL_ART_type_definition_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_type_definition_part_182] = "type_definition_part ::= . type_definition_part_46 ";
  artLabelStrings[ARTL_ART_type_definition_part_182] = "";
  artlhsL[ARTL_ART_type_definition_part_182] = ARTL_ART_type_definition_part;
  artKindOfs[ARTL_ART_type_definition_part_182] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_definition_part_184] = "type_definition_part ::= type_definition_part_46 .";
  artLabelStrings[ARTL_ART_type_definition_part_184] = "";
  artlhsL[ARTL_ART_type_definition_part_184] = ARTL_ART_type_definition_part;
  artSlotInstanceOfs[ARTL_ART_type_definition_part_184] = ARTL_ART_type_definition_part_46;
  artKindOfs[ARTL_ART_type_definition_part_184] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_definition_part_184] = true;
  arteoR_pL[ARTL_ART_type_definition_part_184] = true;
  artPopD[ARTL_ART_type_definition_part_184] = true;
}

public void artTableInitialiser_ART_type_definition_part_46() {
  artLabelInternalStrings[ARTL_ART_type_definition_part_46] = "type_definition_part_46";
  artLabelStrings[ARTL_ART_type_definition_part_46] = "type_definition_part_46";
  artKindOfs[ARTL_ART_type_definition_part_46] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1670] = "type_definition_part_46 ::= . # ";
  artLabelStrings[ARTL_ART_type_definition_part_46_1670] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1670] = ARTL_ART_type_definition_part_46;
  artKindOfs[ARTL_ART_type_definition_part_46_1670] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_type_definition_part_46_1670] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1672] = "type_definition_part_46 ::= # .";
  artLabelStrings[ARTL_ART_type_definition_part_46_1672] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1672] = ARTL_ART_type_definition_part_46;
  artKindOfs[ARTL_ART_type_definition_part_46_1672] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_definition_part_46_1672] = true;
  arteoR_pL[ARTL_ART_type_definition_part_46_1672] = true;
  artPopD[ARTL_ART_type_definition_part_46_1672] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1674] = "type_definition_part_46 ::= . 'type'  type_definition ';'  type_definition_part_47 ";
  artLabelStrings[ARTL_ART_type_definition_part_46_1674] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1674] = ARTL_ART_type_definition_part_46;
  artKindOfs[ARTL_ART_type_definition_part_46_1674] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1675] = "type_definition_part_46 ::= 'type'  type_definition ';'  type_definition_part_47 ";
  artLabelStrings[ARTL_ART_type_definition_part_46_1675] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1675] = ARTL_ART_type_definition_part_46;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1676] = "type_definition_part_46 ::= 'type'  . type_definition ';'  type_definition_part_47 ";
  artLabelStrings[ARTL_ART_type_definition_part_46_1676] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1676] = ARTL_ART_type_definition_part_46;
  artKindOfs[ARTL_ART_type_definition_part_46_1676] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_type_definition_part_46_1676] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1678] = "type_definition_part_46 ::= 'type'  type_definition . ';'  type_definition_part_47 ";
  artLabelStrings[ARTL_ART_type_definition_part_46_1678] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1678] = ARTL_ART_type_definition_part_46;
  artSlotInstanceOfs[ARTL_ART_type_definition_part_46_1678] = ARTL_ART_type_definition;
  artKindOfs[ARTL_ART_type_definition_part_46_1678] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1679] = "type_definition_part_46 ::= 'type'  type_definition ';'  type_definition_part_47 ";
  artLabelStrings[ARTL_ART_type_definition_part_46_1679] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1679] = ARTL_ART_type_definition_part_46;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1680] = "type_definition_part_46 ::= 'type'  type_definition ';'  . type_definition_part_47 ";
  artLabelStrings[ARTL_ART_type_definition_part_46_1680] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1680] = ARTL_ART_type_definition_part_46;
  artKindOfs[ARTL_ART_type_definition_part_46_1680] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_definition_part_46_1682] = "type_definition_part_46 ::= 'type'  type_definition ';'  type_definition_part_47 .";
  artLabelStrings[ARTL_ART_type_definition_part_46_1682] = "";
  artlhsL[ARTL_ART_type_definition_part_46_1682] = ARTL_ART_type_definition_part_46;
  artSlotInstanceOfs[ARTL_ART_type_definition_part_46_1682] = ARTL_ART_type_definition_part_47;
  artKindOfs[ARTL_ART_type_definition_part_46_1682] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_definition_part_46_1682] = true;
  arteoR_pL[ARTL_ART_type_definition_part_46_1682] = true;
  artPopD[ARTL_ART_type_definition_part_46_1682] = true;
}

public void artTableInitialiser_ART_type_definition_part_47() {
  artLabelInternalStrings[ARTL_ART_type_definition_part_47] = "type_definition_part_47";
  artLabelStrings[ARTL_ART_type_definition_part_47] = "type_definition_part_47";
  artKindOfs[ARTL_ART_type_definition_part_47] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_type_definition_part_47_1684] = "type_definition_part_47 ::= . # ";
  artLabelStrings[ARTL_ART_type_definition_part_47_1684] = "";
  artlhsL[ARTL_ART_type_definition_part_47_1684] = ARTL_ART_type_definition_part_47;
  artKindOfs[ARTL_ART_type_definition_part_47_1684] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_type_definition_part_47_1684] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_part_47_1686] = "type_definition_part_47 ::= # .";
  artLabelStrings[ARTL_ART_type_definition_part_47_1686] = "";
  artlhsL[ARTL_ART_type_definition_part_47_1686] = ARTL_ART_type_definition_part_47;
  artKindOfs[ARTL_ART_type_definition_part_47_1686] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_definition_part_47_1686] = true;
  arteoR_pL[ARTL_ART_type_definition_part_47_1686] = true;
  artPopD[ARTL_ART_type_definition_part_47_1686] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_part_47_1688] = "type_definition_part_47 ::= . type_definition_part_47 type_definition ';'  ";
  artLabelStrings[ARTL_ART_type_definition_part_47_1688] = "";
  artlhsL[ARTL_ART_type_definition_part_47_1688] = ARTL_ART_type_definition_part_47;
  artKindOfs[ARTL_ART_type_definition_part_47_1688] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_definition_part_47_1690] = "type_definition_part_47 ::= type_definition_part_47 . type_definition ';'  ";
  artLabelStrings[ARTL_ART_type_definition_part_47_1690] = "";
  artlhsL[ARTL_ART_type_definition_part_47_1690] = ARTL_ART_type_definition_part_47;
  artSlotInstanceOfs[ARTL_ART_type_definition_part_47_1690] = ARTL_ART_type_definition_part_47;
  artKindOfs[ARTL_ART_type_definition_part_47_1690] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_type_definition_part_47_1690] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_part_47_1692] = "type_definition_part_47 ::= type_definition_part_47 type_definition . ';'  ";
  artLabelStrings[ARTL_ART_type_definition_part_47_1692] = "";
  artlhsL[ARTL_ART_type_definition_part_47_1692] = ARTL_ART_type_definition_part_47;
  artSlotInstanceOfs[ARTL_ART_type_definition_part_47_1692] = ARTL_ART_type_definition;
  artKindOfs[ARTL_ART_type_definition_part_47_1692] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_type_definition_part_47_1692] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_part_47_1693] = "type_definition_part_47 ::= type_definition_part_47 type_definition ';'  ";
  artLabelStrings[ARTL_ART_type_definition_part_47_1693] = "";
  artlhsL[ARTL_ART_type_definition_part_47_1693] = ARTL_ART_type_definition_part_47;
  artPopD[ARTL_ART_type_definition_part_47_1693] = true;
  artLabelInternalStrings[ARTL_ART_type_definition_part_47_1694] = "type_definition_part_47 ::= type_definition_part_47 type_definition ';'  .";
  artLabelStrings[ARTL_ART_type_definition_part_47_1694] = "";
  artlhsL[ARTL_ART_type_definition_part_47_1694] = ARTL_ART_type_definition_part_47;
  artKindOfs[ARTL_ART_type_definition_part_47_1694] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_definition_part_47_1694] = true;
  arteoR_pL[ARTL_ART_type_definition_part_47_1694] = true;
  artPopD[ARTL_ART_type_definition_part_47_1694] = true;
}

public void artTableInitialiser_ART_type_denoter() {
  artLabelInternalStrings[ARTL_ART_type_denoter] = "type_denoter";
  artLabelStrings[ARTL_ART_type_denoter] = "type_denoter";
  artKindOfs[ARTL_ART_type_denoter] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_type_denoter_300] = "type_denoter ::= . type_ID ";
  artLabelStrings[ARTL_ART_type_denoter_300] = "";
  artlhsL[ARTL_ART_type_denoter_300] = ARTL_ART_type_denoter;
  artKindOfs[ARTL_ART_type_denoter_300] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_denoter_302] = "type_denoter ::= type_ID .";
  artLabelStrings[ARTL_ART_type_denoter_302] = "";
  artlhsL[ARTL_ART_type_denoter_302] = ARTL_ART_type_denoter;
  artSlotInstanceOfs[ARTL_ART_type_denoter_302] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_type_denoter_302] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_denoter_302] = true;
  arteoR_pL[ARTL_ART_type_denoter_302] = true;
  artPopD[ARTL_ART_type_denoter_302] = true;
  artLabelInternalStrings[ARTL_ART_type_denoter_304] = "type_denoter ::= . new_type ";
  artLabelStrings[ARTL_ART_type_denoter_304] = "";
  artlhsL[ARTL_ART_type_denoter_304] = ARTL_ART_type_denoter;
  artKindOfs[ARTL_ART_type_denoter_304] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_type_denoter_306] = "type_denoter ::= new_type .";
  artLabelStrings[ARTL_ART_type_denoter_306] = "";
  artlhsL[ARTL_ART_type_denoter_306] = ARTL_ART_type_denoter;
  artSlotInstanceOfs[ARTL_ART_type_denoter_306] = ARTL_ART_new_type;
  artKindOfs[ARTL_ART_type_denoter_306] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_type_denoter_306] = true;
  arteoR_pL[ARTL_ART_type_denoter_306] = true;
  artPopD[ARTL_ART_type_denoter_306] = true;
}

public void artTableInitialiser_ART_unpacked_conformant_array_schema() {
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema] = "unpacked_conformant_array_schema";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema] = "unpacked_conformant_array_schema";
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_424] = "unpacked_conformant_array_schema ::= . 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_424] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_424] = ARTL_ART_unpacked_conformant_array_schema;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_424] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_425] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_425] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_425] = ARTL_ART_unpacked_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_426] = "unpacked_conformant_array_schema ::= 'array'  . '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_426] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_426] = ARTL_ART_unpacked_conformant_array_schema;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_426] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_unpacked_conformant_array_schema_426] = true;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_427] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_427] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_427] = ARTL_ART_unpacked_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_428] = "unpacked_conformant_array_schema ::= 'array'  '['  . index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_428] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_428] = ARTL_ART_unpacked_conformant_array_schema;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_428] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_430] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification . unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_430] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_430] = ARTL_ART_unpacked_conformant_array_schema;
  artSlotInstanceOfs[ARTL_ART_unpacked_conformant_array_schema_430] = ARTL_ART_index_type_specification;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_430] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_432] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 . ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_432] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_432] = ARTL_ART_unpacked_conformant_array_schema;
  artSlotInstanceOfs[ARTL_ART_unpacked_conformant_array_schema_432] = ARTL_ART_unpacked_conformant_array_schema_48;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_432] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_433] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_433] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_433] = ARTL_ART_unpacked_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_434] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  . 'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_434] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_434] = ARTL_ART_unpacked_conformant_array_schema;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_434] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_435] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_435] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_435] = ARTL_ART_unpacked_conformant_array_schema;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_436] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  . unpacked_conformant_array_schema_49 ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_436] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_436] = ARTL_ART_unpacked_conformant_array_schema;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_436] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_438] = "unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 .";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_438] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_438] = ARTL_ART_unpacked_conformant_array_schema;
  artSlotInstanceOfs[ARTL_ART_unpacked_conformant_array_schema_438] = ARTL_ART_unpacked_conformant_array_schema_49;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_438] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_conformant_array_schema_438] = true;
  arteoR_pL[ARTL_ART_unpacked_conformant_array_schema_438] = true;
  artPopD[ARTL_ART_unpacked_conformant_array_schema_438] = true;
}

public void artTableInitialiser_ART_unpacked_conformant_array_schema_48() {
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_48] = "unpacked_conformant_array_schema_48";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_48] = "unpacked_conformant_array_schema_48";
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_48] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_48_1696] = "unpacked_conformant_array_schema_48 ::= . # ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_48_1696] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_48_1696] = ARTL_ART_unpacked_conformant_array_schema_48;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_48_1696] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_unpacked_conformant_array_schema_48_1696] = true;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_48_1698] = "unpacked_conformant_array_schema_48 ::= # .";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_48_1698] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_48_1698] = ARTL_ART_unpacked_conformant_array_schema_48;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_48_1698] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_conformant_array_schema_48_1698] = true;
  arteoR_pL[ARTL_ART_unpacked_conformant_array_schema_48_1698] = true;
  artPopD[ARTL_ART_unpacked_conformant_array_schema_48_1698] = true;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_48_1700] = "unpacked_conformant_array_schema_48 ::= . unpacked_conformant_array_schema_48 ';'  index_type_specification ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_48_1700] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_48_1700] = ARTL_ART_unpacked_conformant_array_schema_48;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_48_1700] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_48_1702] = "unpacked_conformant_array_schema_48 ::= unpacked_conformant_array_schema_48 . ';'  index_type_specification ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_48_1702] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_48_1702] = ARTL_ART_unpacked_conformant_array_schema_48;
  artSlotInstanceOfs[ARTL_ART_unpacked_conformant_array_schema_48_1702] = ARTL_ART_unpacked_conformant_array_schema_48;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_48_1702] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_unpacked_conformant_array_schema_48_1702] = true;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_48_1703] = "unpacked_conformant_array_schema_48 ::= unpacked_conformant_array_schema_48 ';'  index_type_specification ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_48_1703] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_48_1703] = ARTL_ART_unpacked_conformant_array_schema_48;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_48_1704] = "unpacked_conformant_array_schema_48 ::= unpacked_conformant_array_schema_48 ';'  . index_type_specification ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_48_1704] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_48_1704] = ARTL_ART_unpacked_conformant_array_schema_48;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_48_1704] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_48_1706] = "unpacked_conformant_array_schema_48 ::= unpacked_conformant_array_schema_48 ';'  index_type_specification .";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_48_1706] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_48_1706] = ARTL_ART_unpacked_conformant_array_schema_48;
  artSlotInstanceOfs[ARTL_ART_unpacked_conformant_array_schema_48_1706] = ARTL_ART_index_type_specification;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_48_1706] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_conformant_array_schema_48_1706] = true;
  arteoR_pL[ARTL_ART_unpacked_conformant_array_schema_48_1706] = true;
  artPopD[ARTL_ART_unpacked_conformant_array_schema_48_1706] = true;
}

public void artTableInitialiser_ART_unpacked_conformant_array_schema_49() {
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_49] = "unpacked_conformant_array_schema_49";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_49] = "unpacked_conformant_array_schema_49";
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_49] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_49_1708] = "unpacked_conformant_array_schema_49 ::= . type_ID ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_49_1708] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_49_1708] = ARTL_ART_unpacked_conformant_array_schema_49;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_49_1708] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_49_1710] = "unpacked_conformant_array_schema_49 ::= type_ID .";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_49_1710] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_49_1710] = ARTL_ART_unpacked_conformant_array_schema_49;
  artSlotInstanceOfs[ARTL_ART_unpacked_conformant_array_schema_49_1710] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_49_1710] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_conformant_array_schema_49_1710] = true;
  arteoR_pL[ARTL_ART_unpacked_conformant_array_schema_49_1710] = true;
  artPopD[ARTL_ART_unpacked_conformant_array_schema_49_1710] = true;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_49_1712] = "unpacked_conformant_array_schema_49 ::= . conformant_array_schema ";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_49_1712] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_49_1712] = ARTL_ART_unpacked_conformant_array_schema_49;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_49_1712] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_conformant_array_schema_49_1714] = "unpacked_conformant_array_schema_49 ::= conformant_array_schema .";
  artLabelStrings[ARTL_ART_unpacked_conformant_array_schema_49_1714] = "";
  artlhsL[ARTL_ART_unpacked_conformant_array_schema_49_1714] = ARTL_ART_unpacked_conformant_array_schema_49;
  artSlotInstanceOfs[ARTL_ART_unpacked_conformant_array_schema_49_1714] = ARTL_ART_conformant_array_schema;
  artKindOfs[ARTL_ART_unpacked_conformant_array_schema_49_1714] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_conformant_array_schema_49_1714] = true;
  arteoR_pL[ARTL_ART_unpacked_conformant_array_schema_49_1714] = true;
  artPopD[ARTL_ART_unpacked_conformant_array_schema_49_1714] = true;
}

public void artTableInitialiser_ART_unpacked_structured_type() {
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type] = "unpacked_structured_type";
  artLabelStrings[ARTL_ART_unpacked_structured_type] = "unpacked_structured_type";
  artKindOfs[ARTL_ART_unpacked_structured_type] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type_1116] = "unpacked_structured_type ::= . array_type ";
  artLabelStrings[ARTL_ART_unpacked_structured_type_1116] = "";
  artlhsL[ARTL_ART_unpacked_structured_type_1116] = ARTL_ART_unpacked_structured_type;
  artKindOfs[ARTL_ART_unpacked_structured_type_1116] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type_1118] = "unpacked_structured_type ::= array_type .";
  artLabelStrings[ARTL_ART_unpacked_structured_type_1118] = "";
  artlhsL[ARTL_ART_unpacked_structured_type_1118] = ARTL_ART_unpacked_structured_type;
  artSlotInstanceOfs[ARTL_ART_unpacked_structured_type_1118] = ARTL_ART_array_type;
  artKindOfs[ARTL_ART_unpacked_structured_type_1118] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_structured_type_1118] = true;
  arteoR_pL[ARTL_ART_unpacked_structured_type_1118] = true;
  artPopD[ARTL_ART_unpacked_structured_type_1118] = true;
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type_1120] = "unpacked_structured_type ::= . record_type ";
  artLabelStrings[ARTL_ART_unpacked_structured_type_1120] = "";
  artlhsL[ARTL_ART_unpacked_structured_type_1120] = ARTL_ART_unpacked_structured_type;
  artKindOfs[ARTL_ART_unpacked_structured_type_1120] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type_1122] = "unpacked_structured_type ::= record_type .";
  artLabelStrings[ARTL_ART_unpacked_structured_type_1122] = "";
  artlhsL[ARTL_ART_unpacked_structured_type_1122] = ARTL_ART_unpacked_structured_type;
  artSlotInstanceOfs[ARTL_ART_unpacked_structured_type_1122] = ARTL_ART_record_type;
  artKindOfs[ARTL_ART_unpacked_structured_type_1122] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_structured_type_1122] = true;
  arteoR_pL[ARTL_ART_unpacked_structured_type_1122] = true;
  artPopD[ARTL_ART_unpacked_structured_type_1122] = true;
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type_1124] = "unpacked_structured_type ::= . set_type ";
  artLabelStrings[ARTL_ART_unpacked_structured_type_1124] = "";
  artlhsL[ARTL_ART_unpacked_structured_type_1124] = ARTL_ART_unpacked_structured_type;
  artKindOfs[ARTL_ART_unpacked_structured_type_1124] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type_1126] = "unpacked_structured_type ::= set_type .";
  artLabelStrings[ARTL_ART_unpacked_structured_type_1126] = "";
  artlhsL[ARTL_ART_unpacked_structured_type_1126] = ARTL_ART_unpacked_structured_type;
  artSlotInstanceOfs[ARTL_ART_unpacked_structured_type_1126] = ARTL_ART_set_type;
  artKindOfs[ARTL_ART_unpacked_structured_type_1126] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_structured_type_1126] = true;
  arteoR_pL[ARTL_ART_unpacked_structured_type_1126] = true;
  artPopD[ARTL_ART_unpacked_structured_type_1126] = true;
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type_1128] = "unpacked_structured_type ::= . file_type ";
  artLabelStrings[ARTL_ART_unpacked_structured_type_1128] = "";
  artlhsL[ARTL_ART_unpacked_structured_type_1128] = ARTL_ART_unpacked_structured_type;
  artKindOfs[ARTL_ART_unpacked_structured_type_1128] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unpacked_structured_type_1130] = "unpacked_structured_type ::= file_type .";
  artLabelStrings[ARTL_ART_unpacked_structured_type_1130] = "";
  artlhsL[ARTL_ART_unpacked_structured_type_1130] = ARTL_ART_unpacked_structured_type;
  artSlotInstanceOfs[ARTL_ART_unpacked_structured_type_1130] = ARTL_ART_file_type;
  artKindOfs[ARTL_ART_unpacked_structured_type_1130] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unpacked_structured_type_1130] = true;
  arteoR_pL[ARTL_ART_unpacked_structured_type_1130] = true;
  artPopD[ARTL_ART_unpacked_structured_type_1130] = true;
}

public void artTableInitialiser_ART_unsigned_constant() {
  artLabelInternalStrings[ARTL_ART_unsigned_constant] = "unsigned_constant";
  artLabelStrings[ARTL_ART_unsigned_constant] = "unsigned_constant";
  artKindOfs[ARTL_ART_unsigned_constant] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_644] = "unsigned_constant ::= . unsigned_number ";
  artLabelStrings[ARTL_ART_unsigned_constant_644] = "";
  artlhsL[ARTL_ART_unsigned_constant_644] = ARTL_ART_unsigned_constant;
  artKindOfs[ARTL_ART_unsigned_constant_644] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_646] = "unsigned_constant ::= unsigned_number .";
  artLabelStrings[ARTL_ART_unsigned_constant_646] = "";
  artlhsL[ARTL_ART_unsigned_constant_646] = ARTL_ART_unsigned_constant;
  artSlotInstanceOfs[ARTL_ART_unsigned_constant_646] = ARTL_ART_unsigned_number;
  artKindOfs[ARTL_ART_unsigned_constant_646] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unsigned_constant_646] = true;
  arteoR_pL[ARTL_ART_unsigned_constant_646] = true;
  artPopD[ARTL_ART_unsigned_constant_646] = true;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_648] = "unsigned_constant ::= . character_string ";
  artLabelStrings[ARTL_ART_unsigned_constant_648] = "";
  artlhsL[ARTL_ART_unsigned_constant_648] = ARTL_ART_unsigned_constant;
  artKindOfs[ARTL_ART_unsigned_constant_648] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_650] = "unsigned_constant ::= character_string .";
  artLabelStrings[ARTL_ART_unsigned_constant_650] = "";
  artlhsL[ARTL_ART_unsigned_constant_650] = ARTL_ART_unsigned_constant;
  artSlotInstanceOfs[ARTL_ART_unsigned_constant_650] = ARTL_ART_character_string;
  artKindOfs[ARTL_ART_unsigned_constant_650] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unsigned_constant_650] = true;
  arteoR_pL[ARTL_ART_unsigned_constant_650] = true;
  artPopD[ARTL_ART_unsigned_constant_650] = true;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_652] = "unsigned_constant ::= . 'nil'  ";
  artLabelStrings[ARTL_ART_unsigned_constant_652] = "";
  artlhsL[ARTL_ART_unsigned_constant_652] = ARTL_ART_unsigned_constant;
  artKindOfs[ARTL_ART_unsigned_constant_652] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_unsigned_constant_652] = true;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_653] = "unsigned_constant ::= 'nil'  ";
  artLabelStrings[ARTL_ART_unsigned_constant_653] = "";
  artlhsL[ARTL_ART_unsigned_constant_653] = ARTL_ART_unsigned_constant;
  artPopD[ARTL_ART_unsigned_constant_653] = true;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_654] = "unsigned_constant ::= 'nil'  .";
  artLabelStrings[ARTL_ART_unsigned_constant_654] = "";
  artlhsL[ARTL_ART_unsigned_constant_654] = ARTL_ART_unsigned_constant;
  artKindOfs[ARTL_ART_unsigned_constant_654] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unsigned_constant_654] = true;
  arteoR_pL[ARTL_ART_unsigned_constant_654] = true;
  artPopD[ARTL_ART_unsigned_constant_654] = true;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_656] = "unsigned_constant ::= . constant_ID ";
  artLabelStrings[ARTL_ART_unsigned_constant_656] = "";
  artlhsL[ARTL_ART_unsigned_constant_656] = ARTL_ART_unsigned_constant;
  artKindOfs[ARTL_ART_unsigned_constant_656] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unsigned_constant_658] = "unsigned_constant ::= constant_ID .";
  artLabelStrings[ARTL_ART_unsigned_constant_658] = "";
  artlhsL[ARTL_ART_unsigned_constant_658] = ARTL_ART_unsigned_constant;
  artSlotInstanceOfs[ARTL_ART_unsigned_constant_658] = ARTL_ART_constant_ID;
  artKindOfs[ARTL_ART_unsigned_constant_658] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unsigned_constant_658] = true;
  arteoR_pL[ARTL_ART_unsigned_constant_658] = true;
  artPopD[ARTL_ART_unsigned_constant_658] = true;
}

public void artTableInitialiser_ART_unsigned_integer() {
  artLabelInternalStrings[ARTL_ART_unsigned_integer] = "unsigned_integer";
  artLabelStrings[ARTL_ART_unsigned_integer] = "unsigned_integer";
  artKindOfs[ARTL_ART_unsigned_integer] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_unsigned_integer_1474] = "unsigned_integer ::= . digit_sequence ";
  artLabelStrings[ARTL_ART_unsigned_integer_1474] = "";
  artlhsL[ARTL_ART_unsigned_integer_1474] = ARTL_ART_unsigned_integer;
  artKindOfs[ARTL_ART_unsigned_integer_1474] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unsigned_integer_1476] = "unsigned_integer ::= digit_sequence .";
  artLabelStrings[ARTL_ART_unsigned_integer_1476] = "";
  artlhsL[ARTL_ART_unsigned_integer_1476] = ARTL_ART_unsigned_integer;
  artSlotInstanceOfs[ARTL_ART_unsigned_integer_1476] = ARTL_ART_digit_sequence;
  artKindOfs[ARTL_ART_unsigned_integer_1476] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unsigned_integer_1476] = true;
  arteoR_pL[ARTL_ART_unsigned_integer_1476] = true;
  artPopD[ARTL_ART_unsigned_integer_1476] = true;
}

public void artTableInitialiser_ART_unsigned_number() {
  artLabelInternalStrings[ARTL_ART_unsigned_number] = "unsigned_number";
  artLabelStrings[ARTL_ART_unsigned_number] = "unsigned_number";
  artKindOfs[ARTL_ART_unsigned_number] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_unsigned_number_464] = "unsigned_number ::= . unsigned_integer ";
  artLabelStrings[ARTL_ART_unsigned_number_464] = "";
  artlhsL[ARTL_ART_unsigned_number_464] = ARTL_ART_unsigned_number;
  artKindOfs[ARTL_ART_unsigned_number_464] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unsigned_number_466] = "unsigned_number ::= unsigned_integer .";
  artLabelStrings[ARTL_ART_unsigned_number_466] = "";
  artlhsL[ARTL_ART_unsigned_number_466] = ARTL_ART_unsigned_number;
  artSlotInstanceOfs[ARTL_ART_unsigned_number_466] = ARTL_ART_unsigned_integer;
  artKindOfs[ARTL_ART_unsigned_number_466] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unsigned_number_466] = true;
  arteoR_pL[ARTL_ART_unsigned_number_466] = true;
  artPopD[ARTL_ART_unsigned_number_466] = true;
  artLabelInternalStrings[ARTL_ART_unsigned_number_468] = "unsigned_number ::= . unsigned_real ";
  artLabelStrings[ARTL_ART_unsigned_number_468] = "";
  artlhsL[ARTL_ART_unsigned_number_468] = ARTL_ART_unsigned_number;
  artKindOfs[ARTL_ART_unsigned_number_468] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_unsigned_number_470] = "unsigned_number ::= unsigned_real .";
  artLabelStrings[ARTL_ART_unsigned_number_470] = "";
  artlhsL[ARTL_ART_unsigned_number_470] = ARTL_ART_unsigned_number;
  artSlotInstanceOfs[ARTL_ART_unsigned_number_470] = ARTL_ART_unsigned_real;
  artKindOfs[ARTL_ART_unsigned_number_470] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unsigned_number_470] = true;
  arteoR_pL[ARTL_ART_unsigned_number_470] = true;
  artPopD[ARTL_ART_unsigned_number_470] = true;
}

public void artTableInitialiser_ART_unsigned_real() {
  artLabelInternalStrings[ARTL_ART_unsigned_real] = "unsigned_real";
  artLabelStrings[ARTL_ART_unsigned_real] = "unsigned_real";
  artKindOfs[ARTL_ART_unsigned_real] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_unsigned_real_1500] = "unsigned_real ::= . 'REAL'  ";
  artLabelStrings[ARTL_ART_unsigned_real_1500] = "";
  artlhsL[ARTL_ART_unsigned_real_1500] = ARTL_ART_unsigned_real;
  artKindOfs[ARTL_ART_unsigned_real_1500] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_unsigned_real_1500] = true;
  artLabelInternalStrings[ARTL_ART_unsigned_real_1501] = "unsigned_real ::= 'REAL'  ";
  artLabelStrings[ARTL_ART_unsigned_real_1501] = "";
  artlhsL[ARTL_ART_unsigned_real_1501] = ARTL_ART_unsigned_real;
  artPopD[ARTL_ART_unsigned_real_1501] = true;
  artLabelInternalStrings[ARTL_ART_unsigned_real_1502] = "unsigned_real ::= 'REAL'  .";
  artLabelStrings[ARTL_ART_unsigned_real_1502] = "";
  artlhsL[ARTL_ART_unsigned_real_1502] = ARTL_ART_unsigned_real;
  artKindOfs[ARTL_ART_unsigned_real_1502] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_unsigned_real_1502] = true;
  arteoR_pL[ARTL_ART_unsigned_real_1502] = true;
  artPopD[ARTL_ART_unsigned_real_1502] = true;
}

public void artTableInitialiser_ART_value_conformant_array_specification() {
  artLabelInternalStrings[ARTL_ART_value_conformant_array_specification] = "value_conformant_array_specification";
  artLabelStrings[ARTL_ART_value_conformant_array_specification] = "value_conformant_array_specification";
  artKindOfs[ARTL_ART_value_conformant_array_specification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_value_conformant_array_specification_382] = "value_conformant_array_specification ::= . ID_list ':'  conformant_array_schema ";
  artLabelStrings[ARTL_ART_value_conformant_array_specification_382] = "";
  artlhsL[ARTL_ART_value_conformant_array_specification_382] = ARTL_ART_value_conformant_array_specification;
  artKindOfs[ARTL_ART_value_conformant_array_specification_382] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_value_conformant_array_specification_384] = "value_conformant_array_specification ::= ID_list . ':'  conformant_array_schema ";
  artLabelStrings[ARTL_ART_value_conformant_array_specification_384] = "";
  artlhsL[ARTL_ART_value_conformant_array_specification_384] = ARTL_ART_value_conformant_array_specification;
  artSlotInstanceOfs[ARTL_ART_value_conformant_array_specification_384] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_value_conformant_array_specification_384] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_value_conformant_array_specification_384] = true;
  artLabelInternalStrings[ARTL_ART_value_conformant_array_specification_385] = "value_conformant_array_specification ::= ID_list ':'  conformant_array_schema ";
  artLabelStrings[ARTL_ART_value_conformant_array_specification_385] = "";
  artlhsL[ARTL_ART_value_conformant_array_specification_385] = ARTL_ART_value_conformant_array_specification;
  artLabelInternalStrings[ARTL_ART_value_conformant_array_specification_386] = "value_conformant_array_specification ::= ID_list ':'  . conformant_array_schema ";
  artLabelStrings[ARTL_ART_value_conformant_array_specification_386] = "";
  artlhsL[ARTL_ART_value_conformant_array_specification_386] = ARTL_ART_value_conformant_array_specification;
  artKindOfs[ARTL_ART_value_conformant_array_specification_386] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_value_conformant_array_specification_388] = "value_conformant_array_specification ::= ID_list ':'  conformant_array_schema .";
  artLabelStrings[ARTL_ART_value_conformant_array_specification_388] = "";
  artlhsL[ARTL_ART_value_conformant_array_specification_388] = ARTL_ART_value_conformant_array_specification;
  artSlotInstanceOfs[ARTL_ART_value_conformant_array_specification_388] = ARTL_ART_conformant_array_schema;
  artKindOfs[ARTL_ART_value_conformant_array_specification_388] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_value_conformant_array_specification_388] = true;
  arteoR_pL[ARTL_ART_value_conformant_array_specification_388] = true;
  artPopD[ARTL_ART_value_conformant_array_specification_388] = true;
}

public void artTableInitialiser_ART_value_parameter_specification() {
  artLabelInternalStrings[ARTL_ART_value_parameter_specification] = "value_parameter_specification";
  artLabelStrings[ARTL_ART_value_parameter_specification] = "value_parameter_specification";
  artKindOfs[ARTL_ART_value_parameter_specification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_value_parameter_specification_854] = "value_parameter_specification ::= . ID_list ':'  type_ID ";
  artLabelStrings[ARTL_ART_value_parameter_specification_854] = "";
  artlhsL[ARTL_ART_value_parameter_specification_854] = ARTL_ART_value_parameter_specification;
  artKindOfs[ARTL_ART_value_parameter_specification_854] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_value_parameter_specification_856] = "value_parameter_specification ::= ID_list . ':'  type_ID ";
  artLabelStrings[ARTL_ART_value_parameter_specification_856] = "";
  artlhsL[ARTL_ART_value_parameter_specification_856] = ARTL_ART_value_parameter_specification;
  artSlotInstanceOfs[ARTL_ART_value_parameter_specification_856] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_value_parameter_specification_856] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_value_parameter_specification_856] = true;
  artLabelInternalStrings[ARTL_ART_value_parameter_specification_857] = "value_parameter_specification ::= ID_list ':'  type_ID ";
  artLabelStrings[ARTL_ART_value_parameter_specification_857] = "";
  artlhsL[ARTL_ART_value_parameter_specification_857] = ARTL_ART_value_parameter_specification;
  artLabelInternalStrings[ARTL_ART_value_parameter_specification_858] = "value_parameter_specification ::= ID_list ':'  . type_ID ";
  artLabelStrings[ARTL_ART_value_parameter_specification_858] = "";
  artlhsL[ARTL_ART_value_parameter_specification_858] = ARTL_ART_value_parameter_specification;
  artKindOfs[ARTL_ART_value_parameter_specification_858] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_value_parameter_specification_860] = "value_parameter_specification ::= ID_list ':'  type_ID .";
  artLabelStrings[ARTL_ART_value_parameter_specification_860] = "";
  artlhsL[ARTL_ART_value_parameter_specification_860] = ARTL_ART_value_parameter_specification;
  artSlotInstanceOfs[ARTL_ART_value_parameter_specification_860] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_value_parameter_specification_860] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_value_parameter_specification_860] = true;
  arteoR_pL[ARTL_ART_value_parameter_specification_860] = true;
  artPopD[ARTL_ART_value_parameter_specification_860] = true;
}

public void artTableInitialiser_ART_variable_ID() {
  artLabelInternalStrings[ARTL_ART_variable_ID] = "variable_ID";
  artLabelStrings[ARTL_ART_variable_ID] = "variable_ID";
  artKindOfs[ARTL_ART_variable_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variable_ID_544] = "variable_ID ::= . 'variable_ID'  ";
  artLabelStrings[ARTL_ART_variable_ID_544] = "";
  artlhsL[ARTL_ART_variable_ID_544] = ARTL_ART_variable_ID;
  artKindOfs[ARTL_ART_variable_ID_544] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_variable_ID_544] = true;
  artLabelInternalStrings[ARTL_ART_variable_ID_545] = "variable_ID ::= 'variable_ID'  ";
  artLabelStrings[ARTL_ART_variable_ID_545] = "";
  artlhsL[ARTL_ART_variable_ID_545] = ARTL_ART_variable_ID;
  artPopD[ARTL_ART_variable_ID_545] = true;
  artLabelInternalStrings[ARTL_ART_variable_ID_546] = "variable_ID ::= 'variable_ID'  .";
  artLabelStrings[ARTL_ART_variable_ID_546] = "";
  artlhsL[ARTL_ART_variable_ID_546] = ARTL_ART_variable_ID;
  artKindOfs[ARTL_ART_variable_ID_546] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_ID_546] = true;
  arteoR_pL[ARTL_ART_variable_ID_546] = true;
  artPopD[ARTL_ART_variable_ID_546] = true;
}

public void artTableInitialiser_ART_variable_access() {
  artLabelInternalStrings[ARTL_ART_variable_access] = "variable_access";
  artLabelStrings[ARTL_ART_variable_access] = "variable_access";
  artKindOfs[ARTL_ART_variable_access] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variable_access_130] = "variable_access ::= . entire_variable ";
  artLabelStrings[ARTL_ART_variable_access_130] = "";
  artlhsL[ARTL_ART_variable_access_130] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_variable_access_130] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_access_132] = "variable_access ::= entire_variable .";
  artLabelStrings[ARTL_ART_variable_access_132] = "";
  artlhsL[ARTL_ART_variable_access_132] = ARTL_ART_variable_access;
  artSlotInstanceOfs[ARTL_ART_variable_access_132] = ARTL_ART_entire_variable;
  artKindOfs[ARTL_ART_variable_access_132] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_access_132] = true;
  arteoR_pL[ARTL_ART_variable_access_132] = true;
  artPopD[ARTL_ART_variable_access_132] = true;
  artLabelInternalStrings[ARTL_ART_variable_access_134] = "variable_access ::= . component_variable ";
  artLabelStrings[ARTL_ART_variable_access_134] = "";
  artlhsL[ARTL_ART_variable_access_134] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_variable_access_134] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_access_136] = "variable_access ::= component_variable .";
  artLabelStrings[ARTL_ART_variable_access_136] = "";
  artlhsL[ARTL_ART_variable_access_136] = ARTL_ART_variable_access;
  artSlotInstanceOfs[ARTL_ART_variable_access_136] = ARTL_ART_component_variable;
  artKindOfs[ARTL_ART_variable_access_136] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_access_136] = true;
  arteoR_pL[ARTL_ART_variable_access_136] = true;
  artPopD[ARTL_ART_variable_access_136] = true;
  artLabelInternalStrings[ARTL_ART_variable_access_138] = "variable_access ::= . variable_access '^'  ";
  artLabelStrings[ARTL_ART_variable_access_138] = "";
  artlhsL[ARTL_ART_variable_access_138] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_variable_access_138] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_access_140] = "variable_access ::= variable_access . '^'  ";
  artLabelStrings[ARTL_ART_variable_access_140] = "";
  artlhsL[ARTL_ART_variable_access_140] = ARTL_ART_variable_access;
  artSlotInstanceOfs[ARTL_ART_variable_access_140] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_variable_access_140] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variable_access_140] = true;
  artPopD[ARTL_ART_variable_access_140] = true;
  artLabelInternalStrings[ARTL_ART_variable_access_141] = "variable_access ::= variable_access '^'  ";
  artLabelStrings[ARTL_ART_variable_access_141] = "";
  artlhsL[ARTL_ART_variable_access_141] = ARTL_ART_variable_access;
  artPopD[ARTL_ART_variable_access_141] = true;
  artLabelInternalStrings[ARTL_ART_variable_access_142] = "variable_access ::= variable_access '^'  .";
  artLabelStrings[ARTL_ART_variable_access_142] = "";
  artlhsL[ARTL_ART_variable_access_142] = ARTL_ART_variable_access;
  artKindOfs[ARTL_ART_variable_access_142] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_access_142] = true;
  arteoR_pL[ARTL_ART_variable_access_142] = true;
  artPopD[ARTL_ART_variable_access_142] = true;
}

public void artTableInitialiser_ART_variable_conformant_array_specification() {
  artLabelInternalStrings[ARTL_ART_variable_conformant_array_specification] = "variable_conformant_array_specification";
  artLabelStrings[ARTL_ART_variable_conformant_array_specification] = "variable_conformant_array_specification";
  artKindOfs[ARTL_ART_variable_conformant_array_specification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variable_conformant_array_specification_390] = "variable_conformant_array_specification ::= . 'var'  ID_list ':'  conformant_array_schema ";
  artLabelStrings[ARTL_ART_variable_conformant_array_specification_390] = "";
  artlhsL[ARTL_ART_variable_conformant_array_specification_390] = ARTL_ART_variable_conformant_array_specification;
  artKindOfs[ARTL_ART_variable_conformant_array_specification_390] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_conformant_array_specification_391] = "variable_conformant_array_specification ::= 'var'  ID_list ':'  conformant_array_schema ";
  artLabelStrings[ARTL_ART_variable_conformant_array_specification_391] = "";
  artlhsL[ARTL_ART_variable_conformant_array_specification_391] = ARTL_ART_variable_conformant_array_specification;
  artLabelInternalStrings[ARTL_ART_variable_conformant_array_specification_392] = "variable_conformant_array_specification ::= 'var'  . ID_list ':'  conformant_array_schema ";
  artLabelStrings[ARTL_ART_variable_conformant_array_specification_392] = "";
  artlhsL[ARTL_ART_variable_conformant_array_specification_392] = ARTL_ART_variable_conformant_array_specification;
  artKindOfs[ARTL_ART_variable_conformant_array_specification_392] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variable_conformant_array_specification_392] = true;
  artLabelInternalStrings[ARTL_ART_variable_conformant_array_specification_394] = "variable_conformant_array_specification ::= 'var'  ID_list . ':'  conformant_array_schema ";
  artLabelStrings[ARTL_ART_variable_conformant_array_specification_394] = "";
  artlhsL[ARTL_ART_variable_conformant_array_specification_394] = ARTL_ART_variable_conformant_array_specification;
  artSlotInstanceOfs[ARTL_ART_variable_conformant_array_specification_394] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_variable_conformant_array_specification_394] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_conformant_array_specification_395] = "variable_conformant_array_specification ::= 'var'  ID_list ':'  conformant_array_schema ";
  artLabelStrings[ARTL_ART_variable_conformant_array_specification_395] = "";
  artlhsL[ARTL_ART_variable_conformant_array_specification_395] = ARTL_ART_variable_conformant_array_specification;
  artLabelInternalStrings[ARTL_ART_variable_conformant_array_specification_396] = "variable_conformant_array_specification ::= 'var'  ID_list ':'  . conformant_array_schema ";
  artLabelStrings[ARTL_ART_variable_conformant_array_specification_396] = "";
  artlhsL[ARTL_ART_variable_conformant_array_specification_396] = ARTL_ART_variable_conformant_array_specification;
  artKindOfs[ARTL_ART_variable_conformant_array_specification_396] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_conformant_array_specification_398] = "variable_conformant_array_specification ::= 'var'  ID_list ':'  conformant_array_schema .";
  artLabelStrings[ARTL_ART_variable_conformant_array_specification_398] = "";
  artlhsL[ARTL_ART_variable_conformant_array_specification_398] = ARTL_ART_variable_conformant_array_specification;
  artSlotInstanceOfs[ARTL_ART_variable_conformant_array_specification_398] = ARTL_ART_conformant_array_schema;
  artKindOfs[ARTL_ART_variable_conformant_array_specification_398] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_conformant_array_specification_398] = true;
  arteoR_pL[ARTL_ART_variable_conformant_array_specification_398] = true;
  artPopD[ARTL_ART_variable_conformant_array_specification_398] = true;
}

public void artTableInitialiser_ART_variable_declaration() {
  artLabelInternalStrings[ARTL_ART_variable_declaration] = "variable_declaration";
  artLabelStrings[ARTL_ART_variable_declaration] = "variable_declaration";
  artKindOfs[ARTL_ART_variable_declaration] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variable_declaration_1716] = "variable_declaration ::= . ID_list ':'  type_denoter ";
  artLabelStrings[ARTL_ART_variable_declaration_1716] = "";
  artlhsL[ARTL_ART_variable_declaration_1716] = ARTL_ART_variable_declaration;
  artKindOfs[ARTL_ART_variable_declaration_1716] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_declaration_1718] = "variable_declaration ::= ID_list . ':'  type_denoter ";
  artLabelStrings[ARTL_ART_variable_declaration_1718] = "";
  artlhsL[ARTL_ART_variable_declaration_1718] = ARTL_ART_variable_declaration;
  artSlotInstanceOfs[ARTL_ART_variable_declaration_1718] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_variable_declaration_1718] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variable_declaration_1718] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_1719] = "variable_declaration ::= ID_list ':'  type_denoter ";
  artLabelStrings[ARTL_ART_variable_declaration_1719] = "";
  artlhsL[ARTL_ART_variable_declaration_1719] = ARTL_ART_variable_declaration;
  artLabelInternalStrings[ARTL_ART_variable_declaration_1720] = "variable_declaration ::= ID_list ':'  . type_denoter ";
  artLabelStrings[ARTL_ART_variable_declaration_1720] = "";
  artlhsL[ARTL_ART_variable_declaration_1720] = ARTL_ART_variable_declaration;
  artKindOfs[ARTL_ART_variable_declaration_1720] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_declaration_1722] = "variable_declaration ::= ID_list ':'  type_denoter .";
  artLabelStrings[ARTL_ART_variable_declaration_1722] = "";
  artlhsL[ARTL_ART_variable_declaration_1722] = ARTL_ART_variable_declaration;
  artSlotInstanceOfs[ARTL_ART_variable_declaration_1722] = ARTL_ART_type_denoter;
  artKindOfs[ARTL_ART_variable_declaration_1722] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_declaration_1722] = true;
  arteoR_pL[ARTL_ART_variable_declaration_1722] = true;
  artPopD[ARTL_ART_variable_declaration_1722] = true;
}

public void artTableInitialiser_ART_variable_declaration_part() {
  artLabelInternalStrings[ARTL_ART_variable_declaration_part] = "variable_declaration_part";
  artLabelStrings[ARTL_ART_variable_declaration_part] = "variable_declaration_part";
  artKindOfs[ARTL_ART_variable_declaration_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_186] = "variable_declaration_part ::= . variable_declaration_part_50 ";
  artLabelStrings[ARTL_ART_variable_declaration_part_186] = "";
  artlhsL[ARTL_ART_variable_declaration_part_186] = ARTL_ART_variable_declaration_part;
  artKindOfs[ARTL_ART_variable_declaration_part_186] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_188] = "variable_declaration_part ::= variable_declaration_part_50 .";
  artLabelStrings[ARTL_ART_variable_declaration_part_188] = "";
  artlhsL[ARTL_ART_variable_declaration_part_188] = ARTL_ART_variable_declaration_part;
  artSlotInstanceOfs[ARTL_ART_variable_declaration_part_188] = ARTL_ART_variable_declaration_part_50;
  artKindOfs[ARTL_ART_variable_declaration_part_188] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_declaration_part_188] = true;
  arteoR_pL[ARTL_ART_variable_declaration_part_188] = true;
  artPopD[ARTL_ART_variable_declaration_part_188] = true;
}

public void artTableInitialiser_ART_variable_declaration_part_50() {
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50] = "variable_declaration_part_50";
  artLabelStrings[ARTL_ART_variable_declaration_part_50] = "variable_declaration_part_50";
  artKindOfs[ARTL_ART_variable_declaration_part_50] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1724] = "variable_declaration_part_50 ::= . # ";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1724] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1724] = ARTL_ART_variable_declaration_part_50;
  artKindOfs[ARTL_ART_variable_declaration_part_50_1724] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_variable_declaration_part_50_1724] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1726] = "variable_declaration_part_50 ::= # .";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1726] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1726] = ARTL_ART_variable_declaration_part_50;
  artKindOfs[ARTL_ART_variable_declaration_part_50_1726] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_declaration_part_50_1726] = true;
  arteoR_pL[ARTL_ART_variable_declaration_part_50_1726] = true;
  artPopD[ARTL_ART_variable_declaration_part_50_1726] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1728] = "variable_declaration_part_50 ::= . 'var'  variable_declaration ';'  variable_declaration_part_51 ";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1728] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1728] = ARTL_ART_variable_declaration_part_50;
  artKindOfs[ARTL_ART_variable_declaration_part_50_1728] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1729] = "variable_declaration_part_50 ::= 'var'  variable_declaration ';'  variable_declaration_part_51 ";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1729] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1729] = ARTL_ART_variable_declaration_part_50;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1730] = "variable_declaration_part_50 ::= 'var'  . variable_declaration ';'  variable_declaration_part_51 ";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1730] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1730] = ARTL_ART_variable_declaration_part_50;
  artKindOfs[ARTL_ART_variable_declaration_part_50_1730] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variable_declaration_part_50_1730] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1732] = "variable_declaration_part_50 ::= 'var'  variable_declaration . ';'  variable_declaration_part_51 ";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1732] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1732] = ARTL_ART_variable_declaration_part_50;
  artSlotInstanceOfs[ARTL_ART_variable_declaration_part_50_1732] = ARTL_ART_variable_declaration;
  artKindOfs[ARTL_ART_variable_declaration_part_50_1732] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1733] = "variable_declaration_part_50 ::= 'var'  variable_declaration ';'  variable_declaration_part_51 ";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1733] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1733] = ARTL_ART_variable_declaration_part_50;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1734] = "variable_declaration_part_50 ::= 'var'  variable_declaration ';'  . variable_declaration_part_51 ";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1734] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1734] = ARTL_ART_variable_declaration_part_50;
  artKindOfs[ARTL_ART_variable_declaration_part_50_1734] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_50_1736] = "variable_declaration_part_50 ::= 'var'  variable_declaration ';'  variable_declaration_part_51 .";
  artLabelStrings[ARTL_ART_variable_declaration_part_50_1736] = "";
  artlhsL[ARTL_ART_variable_declaration_part_50_1736] = ARTL_ART_variable_declaration_part_50;
  artSlotInstanceOfs[ARTL_ART_variable_declaration_part_50_1736] = ARTL_ART_variable_declaration_part_51;
  artKindOfs[ARTL_ART_variable_declaration_part_50_1736] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_declaration_part_50_1736] = true;
  arteoR_pL[ARTL_ART_variable_declaration_part_50_1736] = true;
  artPopD[ARTL_ART_variable_declaration_part_50_1736] = true;
}

public void artTableInitialiser_ART_variable_declaration_part_51() {
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_51] = "variable_declaration_part_51";
  artLabelStrings[ARTL_ART_variable_declaration_part_51] = "variable_declaration_part_51";
  artKindOfs[ARTL_ART_variable_declaration_part_51] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_51_1738] = "variable_declaration_part_51 ::= . # ";
  artLabelStrings[ARTL_ART_variable_declaration_part_51_1738] = "";
  artlhsL[ARTL_ART_variable_declaration_part_51_1738] = ARTL_ART_variable_declaration_part_51;
  artKindOfs[ARTL_ART_variable_declaration_part_51_1738] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_variable_declaration_part_51_1738] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_51_1740] = "variable_declaration_part_51 ::= # .";
  artLabelStrings[ARTL_ART_variable_declaration_part_51_1740] = "";
  artlhsL[ARTL_ART_variable_declaration_part_51_1740] = ARTL_ART_variable_declaration_part_51;
  artKindOfs[ARTL_ART_variable_declaration_part_51_1740] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_declaration_part_51_1740] = true;
  arteoR_pL[ARTL_ART_variable_declaration_part_51_1740] = true;
  artPopD[ARTL_ART_variable_declaration_part_51_1740] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_51_1742] = "variable_declaration_part_51 ::= . variable_declaration_part_51 variable_declaration ';'  ";
  artLabelStrings[ARTL_ART_variable_declaration_part_51_1742] = "";
  artlhsL[ARTL_ART_variable_declaration_part_51_1742] = ARTL_ART_variable_declaration_part_51;
  artKindOfs[ARTL_ART_variable_declaration_part_51_1742] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_51_1744] = "variable_declaration_part_51 ::= variable_declaration_part_51 . variable_declaration ';'  ";
  artLabelStrings[ARTL_ART_variable_declaration_part_51_1744] = "";
  artlhsL[ARTL_ART_variable_declaration_part_51_1744] = ARTL_ART_variable_declaration_part_51;
  artSlotInstanceOfs[ARTL_ART_variable_declaration_part_51_1744] = ARTL_ART_variable_declaration_part_51;
  artKindOfs[ARTL_ART_variable_declaration_part_51_1744] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variable_declaration_part_51_1744] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_51_1746] = "variable_declaration_part_51 ::= variable_declaration_part_51 variable_declaration . ';'  ";
  artLabelStrings[ARTL_ART_variable_declaration_part_51_1746] = "";
  artlhsL[ARTL_ART_variable_declaration_part_51_1746] = ARTL_ART_variable_declaration_part_51;
  artSlotInstanceOfs[ARTL_ART_variable_declaration_part_51_1746] = ARTL_ART_variable_declaration;
  artKindOfs[ARTL_ART_variable_declaration_part_51_1746] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_variable_declaration_part_51_1746] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_51_1747] = "variable_declaration_part_51 ::= variable_declaration_part_51 variable_declaration ';'  ";
  artLabelStrings[ARTL_ART_variable_declaration_part_51_1747] = "";
  artlhsL[ARTL_ART_variable_declaration_part_51_1747] = ARTL_ART_variable_declaration_part_51;
  artPopD[ARTL_ART_variable_declaration_part_51_1747] = true;
  artLabelInternalStrings[ARTL_ART_variable_declaration_part_51_1748] = "variable_declaration_part_51 ::= variable_declaration_part_51 variable_declaration ';'  .";
  artLabelStrings[ARTL_ART_variable_declaration_part_51_1748] = "";
  artlhsL[ARTL_ART_variable_declaration_part_51_1748] = ARTL_ART_variable_declaration_part_51;
  artKindOfs[ARTL_ART_variable_declaration_part_51_1748] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_declaration_part_51_1748] = true;
  arteoR_pL[ARTL_ART_variable_declaration_part_51_1748] = true;
  artPopD[ARTL_ART_variable_declaration_part_51_1748] = true;
}

public void artTableInitialiser_ART_variable_parameter_specification() {
  artLabelInternalStrings[ARTL_ART_variable_parameter_specification] = "variable_parameter_specification";
  artLabelStrings[ARTL_ART_variable_parameter_specification] = "variable_parameter_specification";
  artKindOfs[ARTL_ART_variable_parameter_specification] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variable_parameter_specification_862] = "variable_parameter_specification ::= . 'var'  ID_list ':'  type_ID ";
  artLabelStrings[ARTL_ART_variable_parameter_specification_862] = "";
  artlhsL[ARTL_ART_variable_parameter_specification_862] = ARTL_ART_variable_parameter_specification;
  artKindOfs[ARTL_ART_variable_parameter_specification_862] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_parameter_specification_863] = "variable_parameter_specification ::= 'var'  ID_list ':'  type_ID ";
  artLabelStrings[ARTL_ART_variable_parameter_specification_863] = "";
  artlhsL[ARTL_ART_variable_parameter_specification_863] = ARTL_ART_variable_parameter_specification;
  artLabelInternalStrings[ARTL_ART_variable_parameter_specification_864] = "variable_parameter_specification ::= 'var'  . ID_list ':'  type_ID ";
  artLabelStrings[ARTL_ART_variable_parameter_specification_864] = "";
  artlhsL[ARTL_ART_variable_parameter_specification_864] = ARTL_ART_variable_parameter_specification;
  artKindOfs[ARTL_ART_variable_parameter_specification_864] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variable_parameter_specification_864] = true;
  artLabelInternalStrings[ARTL_ART_variable_parameter_specification_866] = "variable_parameter_specification ::= 'var'  ID_list . ':'  type_ID ";
  artLabelStrings[ARTL_ART_variable_parameter_specification_866] = "";
  artlhsL[ARTL_ART_variable_parameter_specification_866] = ARTL_ART_variable_parameter_specification;
  artSlotInstanceOfs[ARTL_ART_variable_parameter_specification_866] = ARTL_ART_ID_list;
  artKindOfs[ARTL_ART_variable_parameter_specification_866] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_parameter_specification_867] = "variable_parameter_specification ::= 'var'  ID_list ':'  type_ID ";
  artLabelStrings[ARTL_ART_variable_parameter_specification_867] = "";
  artlhsL[ARTL_ART_variable_parameter_specification_867] = ARTL_ART_variable_parameter_specification;
  artLabelInternalStrings[ARTL_ART_variable_parameter_specification_868] = "variable_parameter_specification ::= 'var'  ID_list ':'  . type_ID ";
  artLabelStrings[ARTL_ART_variable_parameter_specification_868] = "";
  artlhsL[ARTL_ART_variable_parameter_specification_868] = ARTL_ART_variable_parameter_specification;
  artKindOfs[ARTL_ART_variable_parameter_specification_868] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variable_parameter_specification_870] = "variable_parameter_specification ::= 'var'  ID_list ':'  type_ID .";
  artLabelStrings[ARTL_ART_variable_parameter_specification_870] = "";
  artlhsL[ARTL_ART_variable_parameter_specification_870] = ARTL_ART_variable_parameter_specification;
  artSlotInstanceOfs[ARTL_ART_variable_parameter_specification_870] = ARTL_ART_type_ID;
  artKindOfs[ARTL_ART_variable_parameter_specification_870] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variable_parameter_specification_870] = true;
  arteoR_pL[ARTL_ART_variable_parameter_specification_870] = true;
  artPopD[ARTL_ART_variable_parameter_specification_870] = true;
}

public void artTableInitialiser_ART_variant() {
  artLabelInternalStrings[ARTL_ART_variant] = "variant";
  artLabelStrings[ARTL_ART_variant] = "variant";
  artKindOfs[ARTL_ART_variant] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variant_1750] = "variant ::= . case_constant_list ':'  '('  field_list ')'  ";
  artLabelStrings[ARTL_ART_variant_1750] = "";
  artlhsL[ARTL_ART_variant_1750] = ARTL_ART_variant;
  artKindOfs[ARTL_ART_variant_1750] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_1752] = "variant ::= case_constant_list . ':'  '('  field_list ')'  ";
  artLabelStrings[ARTL_ART_variant_1752] = "";
  artlhsL[ARTL_ART_variant_1752] = ARTL_ART_variant;
  artSlotInstanceOfs[ARTL_ART_variant_1752] = ARTL_ART_case_constant_list;
  artKindOfs[ARTL_ART_variant_1752] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variant_1752] = true;
  artLabelInternalStrings[ARTL_ART_variant_1753] = "variant ::= case_constant_list ':'  '('  field_list ')'  ";
  artLabelStrings[ARTL_ART_variant_1753] = "";
  artlhsL[ARTL_ART_variant_1753] = ARTL_ART_variant;
  artLabelInternalStrings[ARTL_ART_variant_1754] = "variant ::= case_constant_list ':'  . '('  field_list ')'  ";
  artLabelStrings[ARTL_ART_variant_1754] = "";
  artlhsL[ARTL_ART_variant_1754] = ARTL_ART_variant;
  artKindOfs[ARTL_ART_variant_1754] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_1755] = "variant ::= case_constant_list ':'  '('  field_list ')'  ";
  artLabelStrings[ARTL_ART_variant_1755] = "";
  artlhsL[ARTL_ART_variant_1755] = ARTL_ART_variant;
  artLabelInternalStrings[ARTL_ART_variant_1756] = "variant ::= case_constant_list ':'  '('  . field_list ')'  ";
  artLabelStrings[ARTL_ART_variant_1756] = "";
  artlhsL[ARTL_ART_variant_1756] = ARTL_ART_variant;
  artKindOfs[ARTL_ART_variant_1756] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_1758] = "variant ::= case_constant_list ':'  '('  field_list . ')'  ";
  artLabelStrings[ARTL_ART_variant_1758] = "";
  artlhsL[ARTL_ART_variant_1758] = ARTL_ART_variant;
  artSlotInstanceOfs[ARTL_ART_variant_1758] = ARTL_ART_field_list;
  artKindOfs[ARTL_ART_variant_1758] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_variant_1758] = true;
  artLabelInternalStrings[ARTL_ART_variant_1759] = "variant ::= case_constant_list ':'  '('  field_list ')'  ";
  artLabelStrings[ARTL_ART_variant_1759] = "";
  artlhsL[ARTL_ART_variant_1759] = ARTL_ART_variant;
  artPopD[ARTL_ART_variant_1759] = true;
  artLabelInternalStrings[ARTL_ART_variant_1760] = "variant ::= case_constant_list ':'  '('  field_list ')'  .";
  artLabelStrings[ARTL_ART_variant_1760] = "";
  artlhsL[ARTL_ART_variant_1760] = ARTL_ART_variant;
  artKindOfs[ARTL_ART_variant_1760] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variant_1760] = true;
  arteoR_pL[ARTL_ART_variant_1760] = true;
  artPopD[ARTL_ART_variant_1760] = true;
}

public void artTableInitialiser_ART_variant_part() {
  artLabelInternalStrings[ARTL_ART_variant_part] = "variant_part";
  artLabelStrings[ARTL_ART_variant_part] = "variant_part";
  artKindOfs[ARTL_ART_variant_part] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variant_part_740] = "variant_part ::= . 'case'  variant_selector 'of'  variant ";
  artLabelStrings[ARTL_ART_variant_part_740] = "";
  artlhsL[ARTL_ART_variant_part_740] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_variant_part_740] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_part_741] = "variant_part ::= 'case'  variant_selector 'of'  variant ";
  artLabelStrings[ARTL_ART_variant_part_741] = "";
  artlhsL[ARTL_ART_variant_part_741] = ARTL_ART_variant_part;
  artLabelInternalStrings[ARTL_ART_variant_part_742] = "variant_part ::= 'case'  . variant_selector 'of'  variant ";
  artLabelStrings[ARTL_ART_variant_part_742] = "";
  artlhsL[ARTL_ART_variant_part_742] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_variant_part_742] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variant_part_742] = true;
  artLabelInternalStrings[ARTL_ART_variant_part_744] = "variant_part ::= 'case'  variant_selector . 'of'  variant ";
  artLabelStrings[ARTL_ART_variant_part_744] = "";
  artlhsL[ARTL_ART_variant_part_744] = ARTL_ART_variant_part;
  artSlotInstanceOfs[ARTL_ART_variant_part_744] = ARTL_ART_variant_selector;
  artKindOfs[ARTL_ART_variant_part_744] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_part_745] = "variant_part ::= 'case'  variant_selector 'of'  variant ";
  artLabelStrings[ARTL_ART_variant_part_745] = "";
  artlhsL[ARTL_ART_variant_part_745] = ARTL_ART_variant_part;
  artLabelInternalStrings[ARTL_ART_variant_part_746] = "variant_part ::= 'case'  variant_selector 'of'  . variant ";
  artLabelStrings[ARTL_ART_variant_part_746] = "";
  artlhsL[ARTL_ART_variant_part_746] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_variant_part_746] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_part_748] = "variant_part ::= 'case'  variant_selector 'of'  variant .";
  artLabelStrings[ARTL_ART_variant_part_748] = "";
  artlhsL[ARTL_ART_variant_part_748] = ARTL_ART_variant_part;
  artSlotInstanceOfs[ARTL_ART_variant_part_748] = ARTL_ART_variant;
  artKindOfs[ARTL_ART_variant_part_748] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variant_part_748] = true;
  arteoR_pL[ARTL_ART_variant_part_748] = true;
  artPopD[ARTL_ART_variant_part_748] = true;
  artLabelInternalStrings[ARTL_ART_variant_part_750] = "variant_part ::= . variant_part ';'  variant ";
  artLabelStrings[ARTL_ART_variant_part_750] = "";
  artlhsL[ARTL_ART_variant_part_750] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_variant_part_750] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_part_752] = "variant_part ::= variant_part . ';'  variant ";
  artLabelStrings[ARTL_ART_variant_part_752] = "";
  artlhsL[ARTL_ART_variant_part_752] = ARTL_ART_variant_part;
  artSlotInstanceOfs[ARTL_ART_variant_part_752] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_variant_part_752] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variant_part_752] = true;
  artLabelInternalStrings[ARTL_ART_variant_part_753] = "variant_part ::= variant_part ';'  variant ";
  artLabelStrings[ARTL_ART_variant_part_753] = "";
  artlhsL[ARTL_ART_variant_part_753] = ARTL_ART_variant_part;
  artLabelInternalStrings[ARTL_ART_variant_part_754] = "variant_part ::= variant_part ';'  . variant ";
  artLabelStrings[ARTL_ART_variant_part_754] = "";
  artlhsL[ARTL_ART_variant_part_754] = ARTL_ART_variant_part;
  artKindOfs[ARTL_ART_variant_part_754] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_part_756] = "variant_part ::= variant_part ';'  variant .";
  artLabelStrings[ARTL_ART_variant_part_756] = "";
  artlhsL[ARTL_ART_variant_part_756] = ARTL_ART_variant_part;
  artSlotInstanceOfs[ARTL_ART_variant_part_756] = ARTL_ART_variant;
  artKindOfs[ARTL_ART_variant_part_756] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variant_part_756] = true;
  arteoR_pL[ARTL_ART_variant_part_756] = true;
  artPopD[ARTL_ART_variant_part_756] = true;
}

public void artTableInitialiser_ART_variant_selector() {
  artLabelInternalStrings[ARTL_ART_variant_selector] = "variant_selector";
  artLabelStrings[ARTL_ART_variant_selector] = "variant_selector";
  artKindOfs[ARTL_ART_variant_selector] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variant_selector_1762] = "variant_selector ::= . variant_selector_52 tag_type ";
  artLabelStrings[ARTL_ART_variant_selector_1762] = "";
  artlhsL[ARTL_ART_variant_selector_1762] = ARTL_ART_variant_selector;
  artKindOfs[ARTL_ART_variant_selector_1762] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_selector_1764] = "variant_selector ::= variant_selector_52 . tag_type ";
  artLabelStrings[ARTL_ART_variant_selector_1764] = "";
  artlhsL[ARTL_ART_variant_selector_1764] = ARTL_ART_variant_selector;
  artSlotInstanceOfs[ARTL_ART_variant_selector_1764] = ARTL_ART_variant_selector_52;
  artKindOfs[ARTL_ART_variant_selector_1764] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variant_selector_1764] = true;
  artLabelInternalStrings[ARTL_ART_variant_selector_1766] = "variant_selector ::= variant_selector_52 tag_type .";
  artLabelStrings[ARTL_ART_variant_selector_1766] = "";
  artlhsL[ARTL_ART_variant_selector_1766] = ARTL_ART_variant_selector;
  artSlotInstanceOfs[ARTL_ART_variant_selector_1766] = ARTL_ART_tag_type;
  artKindOfs[ARTL_ART_variant_selector_1766] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variant_selector_1766] = true;
  arteoR_pL[ARTL_ART_variant_selector_1766] = true;
  artPopD[ARTL_ART_variant_selector_1766] = true;
}

public void artTableInitialiser_ART_variant_selector_52() {
  artLabelInternalStrings[ARTL_ART_variant_selector_52] = "variant_selector_52";
  artLabelStrings[ARTL_ART_variant_selector_52] = "variant_selector_52";
  artKindOfs[ARTL_ART_variant_selector_52] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_variant_selector_52_1768] = "variant_selector_52 ::= . # ";
  artLabelStrings[ARTL_ART_variant_selector_52_1768] = "";
  artlhsL[ARTL_ART_variant_selector_52_1768] = ARTL_ART_variant_selector_52;
  artKindOfs[ARTL_ART_variant_selector_52_1768] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_variant_selector_52_1768] = true;
  artLabelInternalStrings[ARTL_ART_variant_selector_52_1770] = "variant_selector_52 ::= # .";
  artLabelStrings[ARTL_ART_variant_selector_52_1770] = "";
  artlhsL[ARTL_ART_variant_selector_52_1770] = ARTL_ART_variant_selector_52;
  artKindOfs[ARTL_ART_variant_selector_52_1770] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variant_selector_52_1770] = true;
  arteoR_pL[ARTL_ART_variant_selector_52_1770] = true;
  artPopD[ARTL_ART_variant_selector_52_1770] = true;
  artLabelInternalStrings[ARTL_ART_variant_selector_52_1772] = "variant_selector_52 ::= . tag_field ':'  ";
  artLabelStrings[ARTL_ART_variant_selector_52_1772] = "";
  artlhsL[ARTL_ART_variant_selector_52_1772] = ARTL_ART_variant_selector_52;
  artKindOfs[ARTL_ART_variant_selector_52_1772] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_variant_selector_52_1774] = "variant_selector_52 ::= tag_field . ':'  ";
  artLabelStrings[ARTL_ART_variant_selector_52_1774] = "";
  artlhsL[ARTL_ART_variant_selector_52_1774] = ARTL_ART_variant_selector_52;
  artSlotInstanceOfs[ARTL_ART_variant_selector_52_1774] = ARTL_ART_tag_field;
  artKindOfs[ARTL_ART_variant_selector_52_1774] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_variant_selector_52_1774] = true;
  artPopD[ARTL_ART_variant_selector_52_1774] = true;
  artLabelInternalStrings[ARTL_ART_variant_selector_52_1775] = "variant_selector_52 ::= tag_field ':'  ";
  artLabelStrings[ARTL_ART_variant_selector_52_1775] = "";
  artlhsL[ARTL_ART_variant_selector_52_1775] = ARTL_ART_variant_selector_52;
  artPopD[ARTL_ART_variant_selector_52_1775] = true;
  artLabelInternalStrings[ARTL_ART_variant_selector_52_1776] = "variant_selector_52 ::= tag_field ':'  .";
  artLabelStrings[ARTL_ART_variant_selector_52_1776] = "";
  artlhsL[ARTL_ART_variant_selector_52_1776] = ARTL_ART_variant_selector_52;
  artKindOfs[ARTL_ART_variant_selector_52_1776] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_variant_selector_52_1776] = true;
  arteoR_pL[ARTL_ART_variant_selector_52_1776] = true;
  artPopD[ARTL_ART_variant_selector_52_1776] = true;
}

public void artTableInitialiser_ART_while_statement() {
  artLabelInternalStrings[ARTL_ART_while_statement] = "while_statement";
  artLabelStrings[ARTL_ART_while_statement] = "while_statement";
  artKindOfs[ARTL_ART_while_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_while_statement_1412] = "while_statement ::= . 'while'  Boolean_expression 'do'  statement ";
  artLabelStrings[ARTL_ART_while_statement_1412] = "";
  artlhsL[ARTL_ART_while_statement_1412] = ARTL_ART_while_statement;
  artKindOfs[ARTL_ART_while_statement_1412] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_while_statement_1413] = "while_statement ::= 'while'  Boolean_expression 'do'  statement ";
  artLabelStrings[ARTL_ART_while_statement_1413] = "";
  artlhsL[ARTL_ART_while_statement_1413] = ARTL_ART_while_statement;
  artLabelInternalStrings[ARTL_ART_while_statement_1414] = "while_statement ::= 'while'  . Boolean_expression 'do'  statement ";
  artLabelStrings[ARTL_ART_while_statement_1414] = "";
  artlhsL[ARTL_ART_while_statement_1414] = ARTL_ART_while_statement;
  artKindOfs[ARTL_ART_while_statement_1414] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_while_statement_1414] = true;
  artLabelInternalStrings[ARTL_ART_while_statement_1416] = "while_statement ::= 'while'  Boolean_expression . 'do'  statement ";
  artLabelStrings[ARTL_ART_while_statement_1416] = "";
  artlhsL[ARTL_ART_while_statement_1416] = ARTL_ART_while_statement;
  artSlotInstanceOfs[ARTL_ART_while_statement_1416] = ARTL_ART_Boolean_expression;
  artKindOfs[ARTL_ART_while_statement_1416] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_while_statement_1417] = "while_statement ::= 'while'  Boolean_expression 'do'  statement ";
  artLabelStrings[ARTL_ART_while_statement_1417] = "";
  artlhsL[ARTL_ART_while_statement_1417] = ARTL_ART_while_statement;
  artLabelInternalStrings[ARTL_ART_while_statement_1418] = "while_statement ::= 'while'  Boolean_expression 'do'  . statement ";
  artLabelStrings[ARTL_ART_while_statement_1418] = "";
  artlhsL[ARTL_ART_while_statement_1418] = ARTL_ART_while_statement;
  artKindOfs[ARTL_ART_while_statement_1418] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_while_statement_1420] = "while_statement ::= 'while'  Boolean_expression 'do'  statement .";
  artLabelStrings[ARTL_ART_while_statement_1420] = "";
  artlhsL[ARTL_ART_while_statement_1420] = ARTL_ART_while_statement;
  artSlotInstanceOfs[ARTL_ART_while_statement_1420] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_while_statement_1420] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_while_statement_1420] = true;
  arteoR_pL[ARTL_ART_while_statement_1420] = true;
  artPopD[ARTL_ART_while_statement_1420] = true;
}

public void artTableInitialiser_ART_with_statement() {
  artLabelInternalStrings[ARTL_ART_with_statement] = "with_statement";
  artLabelStrings[ARTL_ART_with_statement] = "with_statement";
  artKindOfs[ARTL_ART_with_statement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_with_statement_1620] = "with_statement ::= . 'with'  record_variable_list 'do'  statement ";
  artLabelStrings[ARTL_ART_with_statement_1620] = "";
  artlhsL[ARTL_ART_with_statement_1620] = ARTL_ART_with_statement;
  artKindOfs[ARTL_ART_with_statement_1620] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_with_statement_1621] = "with_statement ::= 'with'  record_variable_list 'do'  statement ";
  artLabelStrings[ARTL_ART_with_statement_1621] = "";
  artlhsL[ARTL_ART_with_statement_1621] = ARTL_ART_with_statement;
  artLabelInternalStrings[ARTL_ART_with_statement_1622] = "with_statement ::= 'with'  . record_variable_list 'do'  statement ";
  artLabelStrings[ARTL_ART_with_statement_1622] = "";
  artlhsL[ARTL_ART_with_statement_1622] = ARTL_ART_with_statement;
  artKindOfs[ARTL_ART_with_statement_1622] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_with_statement_1622] = true;
  artLabelInternalStrings[ARTL_ART_with_statement_1624] = "with_statement ::= 'with'  record_variable_list . 'do'  statement ";
  artLabelStrings[ARTL_ART_with_statement_1624] = "";
  artlhsL[ARTL_ART_with_statement_1624] = ARTL_ART_with_statement;
  artSlotInstanceOfs[ARTL_ART_with_statement_1624] = ARTL_ART_record_variable_list;
  artKindOfs[ARTL_ART_with_statement_1624] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_with_statement_1625] = "with_statement ::= 'with'  record_variable_list 'do'  statement ";
  artLabelStrings[ARTL_ART_with_statement_1625] = "";
  artlhsL[ARTL_ART_with_statement_1625] = ARTL_ART_with_statement;
  artLabelInternalStrings[ARTL_ART_with_statement_1626] = "with_statement ::= 'with'  record_variable_list 'do'  . statement ";
  artLabelStrings[ARTL_ART_with_statement_1626] = "";
  artlhsL[ARTL_ART_with_statement_1626] = ARTL_ART_with_statement;
  artKindOfs[ARTL_ART_with_statement_1626] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_with_statement_1628] = "with_statement ::= 'with'  record_variable_list 'do'  statement .";
  artLabelStrings[ARTL_ART_with_statement_1628] = "";
  artlhsL[ARTL_ART_with_statement_1628] = ARTL_ART_with_statement;
  artSlotInstanceOfs[ARTL_ART_with_statement_1628] = ARTL_ART_statement;
  artKindOfs[ARTL_ART_with_statement_1628] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_with_statement_1628] = true;
  arteoR_pL[ARTL_ART_with_statement_1628] = true;
  artPopD[ARTL_ART_with_statement_1628] = true;
}

public void artTableInitialiser_ART_write_parameter() {
  artLabelInternalStrings[ARTL_ART_write_parameter] = "write_parameter";
  artLabelStrings[ARTL_ART_write_parameter] = "write_parameter";
  artKindOfs[ARTL_ART_write_parameter] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_write_parameter_1778] = "write_parameter ::= . expression write_parameter_53 ";
  artLabelStrings[ARTL_ART_write_parameter_1778] = "";
  artlhsL[ARTL_ART_write_parameter_1778] = ARTL_ART_write_parameter;
  artKindOfs[ARTL_ART_write_parameter_1778] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_write_parameter_1780] = "write_parameter ::= expression . write_parameter_53 ";
  artLabelStrings[ARTL_ART_write_parameter_1780] = "";
  artlhsL[ARTL_ART_write_parameter_1780] = ARTL_ART_write_parameter;
  artSlotInstanceOfs[ARTL_ART_write_parameter_1780] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_write_parameter_1780] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_write_parameter_1780] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_1782] = "write_parameter ::= expression write_parameter_53 .";
  artLabelStrings[ARTL_ART_write_parameter_1782] = "";
  artlhsL[ARTL_ART_write_parameter_1782] = ARTL_ART_write_parameter;
  artSlotInstanceOfs[ARTL_ART_write_parameter_1782] = ARTL_ART_write_parameter_53;
  artKindOfs[ARTL_ART_write_parameter_1782] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_write_parameter_1782] = true;
  arteoR_pL[ARTL_ART_write_parameter_1782] = true;
  artPopD[ARTL_ART_write_parameter_1782] = true;
}

public void artTableInitialiser_ART_write_parameter_53() {
  artLabelInternalStrings[ARTL_ART_write_parameter_53] = "write_parameter_53";
  artLabelStrings[ARTL_ART_write_parameter_53] = "write_parameter_53";
  artKindOfs[ARTL_ART_write_parameter_53] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_write_parameter_53_1784] = "write_parameter_53 ::= . # ";
  artLabelStrings[ARTL_ART_write_parameter_53_1784] = "";
  artlhsL[ARTL_ART_write_parameter_53_1784] = ARTL_ART_write_parameter_53;
  artKindOfs[ARTL_ART_write_parameter_53_1784] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_write_parameter_53_1784] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_53_1786] = "write_parameter_53 ::= # .";
  artLabelStrings[ARTL_ART_write_parameter_53_1786] = "";
  artlhsL[ARTL_ART_write_parameter_53_1786] = ARTL_ART_write_parameter_53;
  artKindOfs[ARTL_ART_write_parameter_53_1786] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_write_parameter_53_1786] = true;
  arteoR_pL[ARTL_ART_write_parameter_53_1786] = true;
  artPopD[ARTL_ART_write_parameter_53_1786] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_53_1788] = "write_parameter_53 ::= . ':'  expression write_parameter_54 ";
  artLabelStrings[ARTL_ART_write_parameter_53_1788] = "";
  artlhsL[ARTL_ART_write_parameter_53_1788] = ARTL_ART_write_parameter_53;
  artKindOfs[ARTL_ART_write_parameter_53_1788] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_write_parameter_53_1789] = "write_parameter_53 ::= ':'  expression write_parameter_54 ";
  artLabelStrings[ARTL_ART_write_parameter_53_1789] = "";
  artlhsL[ARTL_ART_write_parameter_53_1789] = ARTL_ART_write_parameter_53;
  artLabelInternalStrings[ARTL_ART_write_parameter_53_1790] = "write_parameter_53 ::= ':'  . expression write_parameter_54 ";
  artLabelStrings[ARTL_ART_write_parameter_53_1790] = "";
  artlhsL[ARTL_ART_write_parameter_53_1790] = ARTL_ART_write_parameter_53;
  artKindOfs[ARTL_ART_write_parameter_53_1790] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_write_parameter_53_1790] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_53_1792] = "write_parameter_53 ::= ':'  expression . write_parameter_54 ";
  artLabelStrings[ARTL_ART_write_parameter_53_1792] = "";
  artlhsL[ARTL_ART_write_parameter_53_1792] = ARTL_ART_write_parameter_53;
  artSlotInstanceOfs[ARTL_ART_write_parameter_53_1792] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_write_parameter_53_1792] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_write_parameter_53_1794] = "write_parameter_53 ::= ':'  expression write_parameter_54 .";
  artLabelStrings[ARTL_ART_write_parameter_53_1794] = "";
  artlhsL[ARTL_ART_write_parameter_53_1794] = ARTL_ART_write_parameter_53;
  artSlotInstanceOfs[ARTL_ART_write_parameter_53_1794] = ARTL_ART_write_parameter_54;
  artKindOfs[ARTL_ART_write_parameter_53_1794] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_write_parameter_53_1794] = true;
  arteoR_pL[ARTL_ART_write_parameter_53_1794] = true;
  artPopD[ARTL_ART_write_parameter_53_1794] = true;
}

public void artTableInitialiser_ART_write_parameter_54() {
  artLabelInternalStrings[ARTL_ART_write_parameter_54] = "write_parameter_54";
  artLabelStrings[ARTL_ART_write_parameter_54] = "write_parameter_54";
  artKindOfs[ARTL_ART_write_parameter_54] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_write_parameter_54_1796] = "write_parameter_54 ::= . # ";
  artLabelStrings[ARTL_ART_write_parameter_54_1796] = "";
  artlhsL[ARTL_ART_write_parameter_54_1796] = ARTL_ART_write_parameter_54;
  artKindOfs[ARTL_ART_write_parameter_54_1796] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_write_parameter_54_1796] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_54_1798] = "write_parameter_54 ::= # .";
  artLabelStrings[ARTL_ART_write_parameter_54_1798] = "";
  artlhsL[ARTL_ART_write_parameter_54_1798] = ARTL_ART_write_parameter_54;
  artKindOfs[ARTL_ART_write_parameter_54_1798] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_write_parameter_54_1798] = true;
  arteoR_pL[ARTL_ART_write_parameter_54_1798] = true;
  artPopD[ARTL_ART_write_parameter_54_1798] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_54_1800] = "write_parameter_54 ::= . ':'  expression ";
  artLabelStrings[ARTL_ART_write_parameter_54_1800] = "";
  artlhsL[ARTL_ART_write_parameter_54_1800] = ARTL_ART_write_parameter_54;
  artKindOfs[ARTL_ART_write_parameter_54_1800] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_write_parameter_54_1801] = "write_parameter_54 ::= ':'  expression ";
  artLabelStrings[ARTL_ART_write_parameter_54_1801] = "";
  artlhsL[ARTL_ART_write_parameter_54_1801] = ARTL_ART_write_parameter_54;
  artLabelInternalStrings[ARTL_ART_write_parameter_54_1802] = "write_parameter_54 ::= ':'  . expression ";
  artLabelStrings[ARTL_ART_write_parameter_54_1802] = "";
  artlhsL[ARTL_ART_write_parameter_54_1802] = ARTL_ART_write_parameter_54;
  artKindOfs[ARTL_ART_write_parameter_54_1802] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_write_parameter_54_1802] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_54_1804] = "write_parameter_54 ::= ':'  expression .";
  artLabelStrings[ARTL_ART_write_parameter_54_1804] = "";
  artlhsL[ARTL_ART_write_parameter_54_1804] = ARTL_ART_write_parameter_54;
  artSlotInstanceOfs[ARTL_ART_write_parameter_54_1804] = ARTL_ART_expression;
  artKindOfs[ARTL_ART_write_parameter_54_1804] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_write_parameter_54_1804] = true;
  arteoR_pL[ARTL_ART_write_parameter_54_1804] = true;
  artPopD[ARTL_ART_write_parameter_54_1804] = true;
}

public void artTableInitialiser_ART_write_parameter_list() {
  artLabelInternalStrings[ARTL_ART_write_parameter_list] = "write_parameter_list";
  artLabelStrings[ARTL_ART_write_parameter_list] = "write_parameter_list";
  artKindOfs[ARTL_ART_write_parameter_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_1292] = "write_parameter_list ::= . '('  write_parameter write_parameter_list_57 ')'  ";
  artLabelStrings[ARTL_ART_write_parameter_list_1292] = "";
  artlhsL[ARTL_ART_write_parameter_list_1292] = ARTL_ART_write_parameter_list;
  artKindOfs[ARTL_ART_write_parameter_list_1292] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_1293] = "write_parameter_list ::= '('  write_parameter write_parameter_list_57 ')'  ";
  artLabelStrings[ARTL_ART_write_parameter_list_1293] = "";
  artlhsL[ARTL_ART_write_parameter_list_1293] = ARTL_ART_write_parameter_list;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_1294] = "write_parameter_list ::= '('  . write_parameter write_parameter_list_57 ')'  ";
  artLabelStrings[ARTL_ART_write_parameter_list_1294] = "";
  artlhsL[ARTL_ART_write_parameter_list_1294] = ARTL_ART_write_parameter_list;
  artKindOfs[ARTL_ART_write_parameter_list_1294] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_write_parameter_list_1294] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_1296] = "write_parameter_list ::= '('  write_parameter . write_parameter_list_57 ')'  ";
  artLabelStrings[ARTL_ART_write_parameter_list_1296] = "";
  artlhsL[ARTL_ART_write_parameter_list_1296] = ARTL_ART_write_parameter_list;
  artSlotInstanceOfs[ARTL_ART_write_parameter_list_1296] = ARTL_ART_write_parameter;
  artKindOfs[ARTL_ART_write_parameter_list_1296] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_1298] = "write_parameter_list ::= '('  write_parameter write_parameter_list_57 . ')'  ";
  artLabelStrings[ARTL_ART_write_parameter_list_1298] = "";
  artlhsL[ARTL_ART_write_parameter_list_1298] = ARTL_ART_write_parameter_list;
  artSlotInstanceOfs[ARTL_ART_write_parameter_list_1298] = ARTL_ART_write_parameter_list_57;
  artKindOfs[ARTL_ART_write_parameter_list_1298] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_write_parameter_list_1298] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_1299] = "write_parameter_list ::= '('  write_parameter write_parameter_list_57 ')'  ";
  artLabelStrings[ARTL_ART_write_parameter_list_1299] = "";
  artlhsL[ARTL_ART_write_parameter_list_1299] = ARTL_ART_write_parameter_list;
  artPopD[ARTL_ART_write_parameter_list_1299] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_1300] = "write_parameter_list ::= '('  write_parameter write_parameter_list_57 ')'  .";
  artLabelStrings[ARTL_ART_write_parameter_list_1300] = "";
  artlhsL[ARTL_ART_write_parameter_list_1300] = ARTL_ART_write_parameter_list;
  artKindOfs[ARTL_ART_write_parameter_list_1300] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_write_parameter_list_1300] = true;
  arteoR_pL[ARTL_ART_write_parameter_list_1300] = true;
  artPopD[ARTL_ART_write_parameter_list_1300] = true;
}

public void artTableInitialiser_ART_write_parameter_list_57() {
  artLabelInternalStrings[ARTL_ART_write_parameter_list_57] = "write_parameter_list_57";
  artLabelStrings[ARTL_ART_write_parameter_list_57] = "write_parameter_list_57";
  artKindOfs[ARTL_ART_write_parameter_list_57] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_57_1832] = "write_parameter_list_57 ::= . # ";
  artLabelStrings[ARTL_ART_write_parameter_list_57_1832] = "";
  artlhsL[ARTL_ART_write_parameter_list_57_1832] = ARTL_ART_write_parameter_list_57;
  artKindOfs[ARTL_ART_write_parameter_list_57_1832] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_write_parameter_list_57_1832] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_57_1834] = "write_parameter_list_57 ::= # .";
  artLabelStrings[ARTL_ART_write_parameter_list_57_1834] = "";
  artlhsL[ARTL_ART_write_parameter_list_57_1834] = ARTL_ART_write_parameter_list_57;
  artKindOfs[ARTL_ART_write_parameter_list_57_1834] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_write_parameter_list_57_1834] = true;
  arteoR_pL[ARTL_ART_write_parameter_list_57_1834] = true;
  artPopD[ARTL_ART_write_parameter_list_57_1834] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_57_1836] = "write_parameter_list_57 ::= . write_parameter_list_57 ','  write_parameter ";
  artLabelStrings[ARTL_ART_write_parameter_list_57_1836] = "";
  artlhsL[ARTL_ART_write_parameter_list_57_1836] = ARTL_ART_write_parameter_list_57;
  artKindOfs[ARTL_ART_write_parameter_list_57_1836] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_57_1838] = "write_parameter_list_57 ::= write_parameter_list_57 . ','  write_parameter ";
  artLabelStrings[ARTL_ART_write_parameter_list_57_1838] = "";
  artlhsL[ARTL_ART_write_parameter_list_57_1838] = ARTL_ART_write_parameter_list_57;
  artSlotInstanceOfs[ARTL_ART_write_parameter_list_57_1838] = ARTL_ART_write_parameter_list_57;
  artKindOfs[ARTL_ART_write_parameter_list_57_1838] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_write_parameter_list_57_1838] = true;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_57_1839] = "write_parameter_list_57 ::= write_parameter_list_57 ','  write_parameter ";
  artLabelStrings[ARTL_ART_write_parameter_list_57_1839] = "";
  artlhsL[ARTL_ART_write_parameter_list_57_1839] = ARTL_ART_write_parameter_list_57;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_57_1840] = "write_parameter_list_57 ::= write_parameter_list_57 ','  . write_parameter ";
  artLabelStrings[ARTL_ART_write_parameter_list_57_1840] = "";
  artlhsL[ARTL_ART_write_parameter_list_57_1840] = ARTL_ART_write_parameter_list_57;
  artKindOfs[ARTL_ART_write_parameter_list_57_1840] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_write_parameter_list_57_1842] = "write_parameter_list_57 ::= write_parameter_list_57 ','  write_parameter .";
  artLabelStrings[ARTL_ART_write_parameter_list_57_1842] = "";
  artlhsL[ARTL_ART_write_parameter_list_57_1842] = ARTL_ART_write_parameter_list_57;
  artSlotInstanceOfs[ARTL_ART_write_parameter_list_57_1842] = ARTL_ART_write_parameter;
  artKindOfs[ARTL_ART_write_parameter_list_57_1842] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_write_parameter_list_57_1842] = true;
  arteoR_pL[ARTL_ART_write_parameter_list_57_1842] = true;
  artPopD[ARTL_ART_write_parameter_list_57_1842] = true;
}

public void artTableInitialiser_ART_writeln_parameter_list() {
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list] = "writeln_parameter_list";
  artLabelStrings[ARTL_ART_writeln_parameter_list] = "writeln_parameter_list";
  artKindOfs[ARTL_ART_writeln_parameter_list] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_1302] = "writeln_parameter_list ::= . writeln_parameter_list_55 ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_1302] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_1302] = ARTL_ART_writeln_parameter_list;
  artKindOfs[ARTL_ART_writeln_parameter_list_1302] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_1304] = "writeln_parameter_list ::= writeln_parameter_list_55 .";
  artLabelStrings[ARTL_ART_writeln_parameter_list_1304] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_1304] = ARTL_ART_writeln_parameter_list;
  artSlotInstanceOfs[ARTL_ART_writeln_parameter_list_1304] = ARTL_ART_writeln_parameter_list_55;
  artKindOfs[ARTL_ART_writeln_parameter_list_1304] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_writeln_parameter_list_1304] = true;
  arteoR_pL[ARTL_ART_writeln_parameter_list_1304] = true;
  artPopD[ARTL_ART_writeln_parameter_list_1304] = true;
}

public void artTableInitialiser_ART_writeln_parameter_list_55() {
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55] = "writeln_parameter_list_55";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55] = "writeln_parameter_list_55";
  artKindOfs[ARTL_ART_writeln_parameter_list_55] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1806] = "writeln_parameter_list_55 ::= . # ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1806] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1806] = ARTL_ART_writeln_parameter_list_55;
  artKindOfs[ARTL_ART_writeln_parameter_list_55_1806] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_writeln_parameter_list_55_1806] = true;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1808] = "writeln_parameter_list_55 ::= # .";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1808] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1808] = ARTL_ART_writeln_parameter_list_55;
  artKindOfs[ARTL_ART_writeln_parameter_list_55_1808] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_writeln_parameter_list_55_1808] = true;
  arteoR_pL[ARTL_ART_writeln_parameter_list_55_1808] = true;
  artPopD[ARTL_ART_writeln_parameter_list_55_1808] = true;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1810] = "writeln_parameter_list_55 ::= . '('  write_parameter writeln_parameter_list_56 ')'  ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1810] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1810] = ARTL_ART_writeln_parameter_list_55;
  artKindOfs[ARTL_ART_writeln_parameter_list_55_1810] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1811] = "writeln_parameter_list_55 ::= '('  write_parameter writeln_parameter_list_56 ')'  ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1811] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1811] = ARTL_ART_writeln_parameter_list_55;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1812] = "writeln_parameter_list_55 ::= '('  . write_parameter writeln_parameter_list_56 ')'  ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1812] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1812] = ARTL_ART_writeln_parameter_list_55;
  artKindOfs[ARTL_ART_writeln_parameter_list_55_1812] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_writeln_parameter_list_55_1812] = true;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1814] = "writeln_parameter_list_55 ::= '('  write_parameter . writeln_parameter_list_56 ')'  ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1814] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1814] = ARTL_ART_writeln_parameter_list_55;
  artSlotInstanceOfs[ARTL_ART_writeln_parameter_list_55_1814] = ARTL_ART_write_parameter;
  artKindOfs[ARTL_ART_writeln_parameter_list_55_1814] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1816] = "writeln_parameter_list_55 ::= '('  write_parameter writeln_parameter_list_56 . ')'  ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1816] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1816] = ARTL_ART_writeln_parameter_list_55;
  artSlotInstanceOfs[ARTL_ART_writeln_parameter_list_55_1816] = ARTL_ART_writeln_parameter_list_56;
  artKindOfs[ARTL_ART_writeln_parameter_list_55_1816] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_writeln_parameter_list_55_1816] = true;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1817] = "writeln_parameter_list_55 ::= '('  write_parameter writeln_parameter_list_56 ')'  ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1817] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1817] = ARTL_ART_writeln_parameter_list_55;
  artPopD[ARTL_ART_writeln_parameter_list_55_1817] = true;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_55_1818] = "writeln_parameter_list_55 ::= '('  write_parameter writeln_parameter_list_56 ')'  .";
  artLabelStrings[ARTL_ART_writeln_parameter_list_55_1818] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_55_1818] = ARTL_ART_writeln_parameter_list_55;
  artKindOfs[ARTL_ART_writeln_parameter_list_55_1818] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_writeln_parameter_list_55_1818] = true;
  arteoR_pL[ARTL_ART_writeln_parameter_list_55_1818] = true;
  artPopD[ARTL_ART_writeln_parameter_list_55_1818] = true;
}

public void artTableInitialiser_ART_writeln_parameter_list_56() {
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_56] = "writeln_parameter_list_56";
  artLabelStrings[ARTL_ART_writeln_parameter_list_56] = "writeln_parameter_list_56";
  artKindOfs[ARTL_ART_writeln_parameter_list_56] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_56_1820] = "writeln_parameter_list_56 ::= . # ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_56_1820] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_56_1820] = ARTL_ART_writeln_parameter_list_56;
  artKindOfs[ARTL_ART_writeln_parameter_list_56_1820] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_writeln_parameter_list_56_1820] = true;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_56_1822] = "writeln_parameter_list_56 ::= # .";
  artLabelStrings[ARTL_ART_writeln_parameter_list_56_1822] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_56_1822] = ARTL_ART_writeln_parameter_list_56;
  artKindOfs[ARTL_ART_writeln_parameter_list_56_1822] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_writeln_parameter_list_56_1822] = true;
  arteoR_pL[ARTL_ART_writeln_parameter_list_56_1822] = true;
  artPopD[ARTL_ART_writeln_parameter_list_56_1822] = true;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_56_1824] = "writeln_parameter_list_56 ::= . writeln_parameter_list_56 ','  write_parameter ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_56_1824] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_56_1824] = ARTL_ART_writeln_parameter_list_56;
  artKindOfs[ARTL_ART_writeln_parameter_list_56_1824] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_56_1826] = "writeln_parameter_list_56 ::= writeln_parameter_list_56 . ','  write_parameter ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_56_1826] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_56_1826] = ARTL_ART_writeln_parameter_list_56;
  artSlotInstanceOfs[ARTL_ART_writeln_parameter_list_56_1826] = ARTL_ART_writeln_parameter_list_56;
  artKindOfs[ARTL_ART_writeln_parameter_list_56_1826] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_writeln_parameter_list_56_1826] = true;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_56_1827] = "writeln_parameter_list_56 ::= writeln_parameter_list_56 ','  write_parameter ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_56_1827] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_56_1827] = ARTL_ART_writeln_parameter_list_56;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_56_1828] = "writeln_parameter_list_56 ::= writeln_parameter_list_56 ','  . write_parameter ";
  artLabelStrings[ARTL_ART_writeln_parameter_list_56_1828] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_56_1828] = ARTL_ART_writeln_parameter_list_56;
  artKindOfs[ARTL_ART_writeln_parameter_list_56_1828] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_writeln_parameter_list_56_1830] = "writeln_parameter_list_56 ::= writeln_parameter_list_56 ','  write_parameter .";
  artLabelStrings[ARTL_ART_writeln_parameter_list_56_1830] = "";
  artlhsL[ARTL_ART_writeln_parameter_list_56_1830] = ARTL_ART_writeln_parameter_list_56;
  artSlotInstanceOfs[ARTL_ART_writeln_parameter_list_56_1830] = ARTL_ART_write_parameter;
  artKindOfs[ARTL_ART_writeln_parameter_list_56_1830] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_writeln_parameter_list_56_1830] = true;
  arteoR_pL[ARTL_ART_writeln_parameter_list_56_1830] = true;
  artPopD[ARTL_ART_writeln_parameter_list_56_1830] = true;
}

public void artTableInitialise() {
  artLabelInternalStrings = new String[ARTX_LABEL_EXTENT + 1];
  artLabelStrings = new String[ARTX_LABEL_EXTENT + 1];
  artLabelInternalStrings[ARTL_EOS] = "ART$";
  artLabelStrings[ARTL_EOS] = " EOS $";
  artLabelInternalStrings[ARTX_DESPATCH] = "ARTX_DESPATCH";
  artLabelStrings[ARTX_DESPATCH] = " DESPATCH";
  artLabelInternalStrings[ARTL_DUMMY] = "ARTL_DUMMY";
  artLabelStrings[ARTL_DUMMY] = " DUMMY";
  artLabelInternalStrings[ARTX_LABEL_EXTENT] = "!!ILLEGAL!!";
  artLabelStrings[ARTX_LABEL_EXTENT] = " ILLEGAL";
  artLabelStrings[ARTL_EPSILON] = "#";
  artLabelInternalStrings[ARTL_EPSILON] = "#";

  artTerminalRequiresWhiteSpace = new boolean[ARTL_EPSILON];
  artInitialiseBooleanArray(artTerminalRequiresWhiteSpace, 0, ARTL_EPSILON, false);

  artTerminalCaseInsensitive = new boolean[ARTL_EPSILON];
  artInitialiseBooleanArray(artTerminalCaseInsensitive, 0, ARTL_EPSILON, false);

  artlhsL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artlhsL, 0, ARTX_LABEL_EXTENT);
  artlhsL[ARTX_DESPATCH] = ARTX_DESPATCH;

  artKindOfs = new int[ARTX_LABEL_EXTENT + 1];
  artKindOfs[ARTL_EOS] = ARTK_EOS;
  artKindOfs[ARTL_EPSILON] = ARTK_EPSILON;

  artHigher = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artLonger = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artShorter = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artPreSlots = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artPreSlots, 0, ARTX_LABEL_EXTENT);

  artPostSlots = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artPostSlots, 0, ARTX_LABEL_EXTENT);

  artInstanceOfs = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artInstanceOfs, 0, ARTX_LABEL_EXTENT);

  artSlotInstanceOfs = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artSlotInstanceOfs, 0, ARTX_LABEL_EXTENT);

  artUserNameOfs = new int[ARTX_LABEL_EXTENT + 1];

  artGathers = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artGathers, 0, ARTX_LABEL_EXTENT);

  artFolds = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artFolds, 0, ARTX_LABEL_EXTENT, 0);

  artpL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artpL, 0, ARTX_LABEL_EXTENT);

  artaL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artaL, 0, ARTX_LABEL_EXTENT);

  artcolonL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artcolonL, 0, ARTX_LABEL_EXTENT);

  arteoOPL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoOPL, 0, ARTX_LABEL_EXTENT, false);

  artfiRL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artfiRL, 0, ARTX_LABEL_EXTENT, false);

  artfiPCL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artfiPCL, 0, ARTX_LABEL_EXTENT, false);

  arteoRL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoRL, 0, ARTX_LABEL_EXTENT, false);

  arteoR_pL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoR_pL, 0, ARTX_LABEL_EXTENT, false);

  artPopD = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artPopD, 0, ARTX_LABEL_EXTENT, false);

  artLabelStrings[ARTTB_SIMPLE_WHITESPACE] = "SIMPLE_WHITESPACE";
  artLabelInternalStrings[ARTTB_SIMPLE_WHITESPACE] = "&SIMPLE_WHITESPACE";
  artKindOfs[ARTTB_SIMPLE_WHITESPACE] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_SIMPLE_WHITESPACE] = true;
  artLabelStrings[ARTTS__LPAR] = "(";
  artLabelInternalStrings[ARTTS__LPAR] = "'('";
  artKindOfs[ARTTS__LPAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LPAR] = true;
  artLabelStrings[ARTTS__RPAR] = ")";
  artLabelInternalStrings[ARTTS__RPAR] = "')'";
  artKindOfs[ARTTS__RPAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__RPAR] = true;
  artLabelStrings[ARTTS__STAR] = "*";
  artLabelInternalStrings[ARTTS__STAR] = "'*'";
  artKindOfs[ARTTS__STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__STAR] = true;
  artLabelStrings[ARTTS__PLUS] = "+";
  artLabelInternalStrings[ARTTS__PLUS] = "'+'";
  artKindOfs[ARTTS__PLUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PLUS] = true;
  artLabelStrings[ARTTS__COMMA] = ",";
  artLabelInternalStrings[ARTTS__COMMA] = "','";
  artKindOfs[ARTTS__COMMA] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COMMA] = true;
  artLabelStrings[ARTTS__MINUS] = "-";
  artLabelInternalStrings[ARTTS__MINUS] = "'-'";
  artKindOfs[ARTTS__MINUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS] = true;
  artLabelStrings[ARTTS__PERIOD] = ".";
  artLabelInternalStrings[ARTTS__PERIOD] = "'.'";
  artKindOfs[ARTTS__PERIOD] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIOD] = true;
  artLabelStrings[ARTTS__PERIOD_PERIOD] = "..";
  artLabelInternalStrings[ARTTS__PERIOD_PERIOD] = "'..'";
  artKindOfs[ARTTS__PERIOD_PERIOD] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIOD_PERIOD] = true;
  artLabelStrings[ARTTS__SLASH] = "/";
  artLabelInternalStrings[ARTTS__SLASH] = "'/'";
  artKindOfs[ARTTS__SLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SLASH] = true;
  artLabelStrings[ARTTS__COLON] = ":";
  artLabelInternalStrings[ARTTS__COLON] = "':'";
  artKindOfs[ARTTS__COLON] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COLON] = true;
  artLabelStrings[ARTTS__COLON_EQUAL] = ":=";
  artLabelInternalStrings[ARTTS__COLON_EQUAL] = "':='";
  artKindOfs[ARTTS__COLON_EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COLON_EQUAL] = true;
  artLabelStrings[ARTTS__SEMICOLON] = ";";
  artLabelInternalStrings[ARTTS__SEMICOLON] = "';'";
  artKindOfs[ARTTS__SEMICOLON] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SEMICOLON] = true;
  artLabelStrings[ARTTS__LT] = "<";
  artLabelInternalStrings[ARTTS__LT] = "'<'";
  artKindOfs[ARTTS__LT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LT] = true;
  artLabelStrings[ARTTS__LT_EQUAL] = "<=";
  artLabelInternalStrings[ARTTS__LT_EQUAL] = "'<='";
  artKindOfs[ARTTS__LT_EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LT_EQUAL] = true;
  artLabelStrings[ARTTS__LT_GT] = "<>";
  artLabelInternalStrings[ARTTS__LT_GT] = "'<>'";
  artKindOfs[ARTTS__LT_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LT_GT] = true;
  artLabelStrings[ARTTS__EQUAL] = "=";
  artLabelInternalStrings[ARTTS__EQUAL] = "'='";
  artKindOfs[ARTTS__EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__EQUAL] = true;
  artLabelStrings[ARTTS__GT] = ">";
  artLabelInternalStrings[ARTTS__GT] = "'>'";
  artKindOfs[ARTTS__GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__GT] = true;
  artLabelStrings[ARTTS__GT_EQUAL] = ">=";
  artLabelInternalStrings[ARTTS__GT_EQUAL] = "'>='";
  artKindOfs[ARTTS__GT_EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__GT_EQUAL] = true;
  artLabelStrings[ARTTS_ID] = "ID";
  artLabelInternalStrings[ARTTS_ID] = "'ID'";
  artKindOfs[ARTTS_ID] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_ID] = true;
  artLabelStrings[ARTTS_INTEGER] = "INTEGER";
  artLabelInternalStrings[ARTTS_INTEGER] = "'INTEGER'";
  artKindOfs[ARTTS_INTEGER] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_INTEGER] = true;
  artLabelStrings[ARTTS_REAL] = "REAL";
  artLabelInternalStrings[ARTTS_REAL] = "'REAL'";
  artKindOfs[ARTTS_REAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_REAL] = true;
  artLabelStrings[ARTTS_STRING] = "STRING";
  artLabelInternalStrings[ARTTS_STRING] = "'STRING'";
  artKindOfs[ARTTS_STRING] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_STRING] = true;
  artLabelStrings[ARTTS__LBRACK] = "[";
  artLabelInternalStrings[ARTTS__LBRACK] = "'['";
  artKindOfs[ARTTS__LBRACK] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LBRACK] = true;
  artLabelStrings[ARTTS__BACKSLASH_DBLQUOTE] = "\\\"";
  artLabelInternalStrings[ARTTS__BACKSLASH_DBLQUOTE] = "'\\\"'";
  artKindOfs[ARTTS__BACKSLASH_DBLQUOTE] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BACKSLASH_DBLQUOTE] = true;
  artLabelStrings[ARTTS__RBRACK] = "]";
  artLabelInternalStrings[ARTTS__RBRACK] = "']'";
  artKindOfs[ARTTS__RBRACK] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__RBRACK] = true;
  artLabelStrings[ARTTS__UPARROW] = "^";
  artLabelInternalStrings[ARTTS__UPARROW] = "'^'";
  artKindOfs[ARTTS__UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW] = true;
  artLabelStrings[ARTTS_and] = "and";
  artLabelInternalStrings[ARTTS_and] = "'and'";
  artKindOfs[ARTTS_and] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_and] = true;
  artLabelStrings[ARTTS_array] = "array";
  artLabelInternalStrings[ARTTS_array] = "'array'";
  artKindOfs[ARTTS_array] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_array] = true;
  artLabelStrings[ARTTS_begin] = "begin";
  artLabelInternalStrings[ARTTS_begin] = "'begin'";
  artKindOfs[ARTTS_begin] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_begin] = true;
  artLabelStrings[ARTTS_case] = "case";
  artLabelInternalStrings[ARTTS_case] = "'case'";
  artKindOfs[ARTTS_case] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_case] = true;
  artLabelStrings[ARTTS_const] = "const";
  artLabelInternalStrings[ARTTS_const] = "'const'";
  artKindOfs[ARTTS_const] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_const] = true;
  artLabelStrings[ARTTS_constant_ID] = "constant_ID";
  artLabelInternalStrings[ARTTS_constant_ID] = "'constant_ID'";
  artKindOfs[ARTTS_constant_ID] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_constant_ID] = true;
  artLabelStrings[ARTTS_digit] = "digit";
  artLabelInternalStrings[ARTTS_digit] = "'digit'";
  artKindOfs[ARTTS_digit] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_digit] = true;
  artLabelStrings[ARTTS_div] = "div";
  artLabelInternalStrings[ARTTS_div] = "'div'";
  artKindOfs[ARTTS_div] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_div] = true;
  artLabelStrings[ARTTS_do] = "do";
  artLabelInternalStrings[ARTTS_do] = "'do'";
  artKindOfs[ARTTS_do] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_do] = true;
  artLabelStrings[ARTTS_downto] = "downto";
  artLabelInternalStrings[ARTTS_downto] = "'downto'";
  artKindOfs[ARTTS_downto] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_downto] = true;
  artLabelStrings[ARTTS_else] = "else";
  artLabelInternalStrings[ARTTS_else] = "'else'";
  artKindOfs[ARTTS_else] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_else] = true;
  artLabelStrings[ARTTS_end] = "end";
  artLabelInternalStrings[ARTTS_end] = "'end'";
  artKindOfs[ARTTS_end] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_end] = true;
  artLabelStrings[ARTTS_field_ID] = "field_ID";
  artLabelInternalStrings[ARTTS_field_ID] = "'field_ID'";
  artKindOfs[ARTTS_field_ID] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_field_ID] = true;
  artLabelStrings[ARTTS_field_designator_ID] = "field_designator_ID";
  artLabelInternalStrings[ARTTS_field_designator_ID] = "'field_designator_ID'";
  artKindOfs[ARTTS_field_designator_ID] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_field_designator_ID] = true;
  artLabelStrings[ARTTS_file] = "file";
  artLabelInternalStrings[ARTTS_file] = "'file'";
  artKindOfs[ARTTS_file] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_file] = true;
  artLabelStrings[ARTTS_for] = "for";
  artLabelInternalStrings[ARTTS_for] = "'for'";
  artKindOfs[ARTTS_for] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_for] = true;
  artLabelStrings[ARTTS_function] = "function";
  artLabelInternalStrings[ARTTS_function] = "'function'";
  artKindOfs[ARTTS_function] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_function] = true;
  artLabelStrings[ARTTS_function_ID] = "function_ID";
  artLabelInternalStrings[ARTTS_function_ID] = "'function_ID'";
  artKindOfs[ARTTS_function_ID] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_function_ID] = true;
  artLabelStrings[ARTTS_goto] = "goto";
  artLabelInternalStrings[ARTTS_goto] = "'goto'";
  artKindOfs[ARTTS_goto] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_goto] = true;
  artLabelStrings[ARTTS_if] = "if";
  artLabelInternalStrings[ARTTS_if] = "'if'";
  artKindOfs[ARTTS_if] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_if] = true;
  artLabelStrings[ARTTS_in] = "in";
  artLabelInternalStrings[ARTTS_in] = "'in'";
  artKindOfs[ARTTS_in] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_in] = true;
  artLabelStrings[ARTTS_label] = "label";
  artLabelInternalStrings[ARTTS_label] = "'label'";
  artKindOfs[ARTTS_label] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_label] = true;
  artLabelStrings[ARTTS_letter] = "letter";
  artLabelInternalStrings[ARTTS_letter] = "'letter'";
  artKindOfs[ARTTS_letter] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_letter] = true;
  artLabelStrings[ARTTS_mod] = "mod";
  artLabelInternalStrings[ARTTS_mod] = "'mod'";
  artKindOfs[ARTTS_mod] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_mod] = true;
  artLabelStrings[ARTTS_nil] = "nil";
  artLabelInternalStrings[ARTTS_nil] = "'nil'";
  artKindOfs[ARTTS_nil] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_nil] = true;
  artLabelStrings[ARTTS_not] = "not";
  artLabelInternalStrings[ARTTS_not] = "'not'";
  artKindOfs[ARTTS_not] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_not] = true;
  artLabelStrings[ARTTS_of] = "of";
  artLabelInternalStrings[ARTTS_of] = "'of'";
  artKindOfs[ARTTS_of] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_of] = true;
  artLabelStrings[ARTTS_one_of_a_set_of_implementation_defined_characters] = "one_of_a_set_of_implementation_defined_characters";
  artLabelInternalStrings[ARTTS_one_of_a_set_of_implementation_defined_characters] = "'one_of_a_set_of_implementation_defined_characters'";
  artKindOfs[ARTTS_one_of_a_set_of_implementation_defined_characters] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_one_of_a_set_of_implementation_defined_characters] = true;
  artLabelStrings[ARTTS_or] = "or";
  artLabelInternalStrings[ARTTS_or] = "'or'";
  artKindOfs[ARTTS_or] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_or] = true;
  artLabelStrings[ARTTS_packed] = "packed";
  artLabelInternalStrings[ARTTS_packed] = "'packed'";
  artKindOfs[ARTTS_packed] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_packed] = true;
  artLabelStrings[ARTTS_procedure] = "procedure";
  artLabelInternalStrings[ARTTS_procedure] = "'procedure'";
  artKindOfs[ARTTS_procedure] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_procedure] = true;
  artLabelStrings[ARTTS_procedure_ID] = "procedure_ID";
  artLabelInternalStrings[ARTTS_procedure_ID] = "'procedure_ID'";
  artKindOfs[ARTTS_procedure_ID] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_procedure_ID] = true;
  artLabelStrings[ARTTS_program] = "program";
  artLabelInternalStrings[ARTTS_program] = "'program'";
  artKindOfs[ARTTS_program] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_program] = true;
  artLabelStrings[ARTTS_read] = "read";
  artLabelInternalStrings[ARTTS_read] = "'read'";
  artKindOfs[ARTTS_read] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_read] = true;
  artLabelStrings[ARTTS_readln] = "readln";
  artLabelInternalStrings[ARTTS_readln] = "'readln'";
  artKindOfs[ARTTS_readln] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_readln] = true;
  artLabelStrings[ARTTS_record] = "record";
  artLabelInternalStrings[ARTTS_record] = "'record'";
  artKindOfs[ARTTS_record] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_record] = true;
  artLabelStrings[ARTTS_repeat] = "repeat";
  artLabelInternalStrings[ARTTS_repeat] = "'repeat'";
  artKindOfs[ARTTS_repeat] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_repeat] = true;
  artLabelStrings[ARTTS_set] = "set";
  artLabelInternalStrings[ARTTS_set] = "'set'";
  artKindOfs[ARTTS_set] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_set] = true;
  artLabelStrings[ARTTS_tag_field] = "tag_field";
  artLabelInternalStrings[ARTTS_tag_field] = "'tag_field'";
  artKindOfs[ARTTS_tag_field] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tag_field] = true;
  artLabelStrings[ARTTS_then] = "then";
  artLabelInternalStrings[ARTTS_then] = "'then'";
  artKindOfs[ARTTS_then] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_then] = true;
  artLabelStrings[ARTTS_to] = "to";
  artLabelInternalStrings[ARTTS_to] = "'to'";
  artKindOfs[ARTTS_to] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_to] = true;
  artLabelStrings[ARTTS_type] = "type";
  artLabelInternalStrings[ARTTS_type] = "'type'";
  artKindOfs[ARTTS_type] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_type] = true;
  artLabelStrings[ARTTS_type_ID] = "type_ID";
  artLabelInternalStrings[ARTTS_type_ID] = "'type_ID'";
  artKindOfs[ARTTS_type_ID] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_type_ID] = true;
  artLabelStrings[ARTTS_until] = "until";
  artLabelInternalStrings[ARTTS_until] = "'until'";
  artKindOfs[ARTTS_until] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_until] = true;
  artLabelStrings[ARTTS_var] = "var";
  artLabelInternalStrings[ARTTS_var] = "'var'";
  artKindOfs[ARTTS_var] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_var] = true;
  artLabelStrings[ARTTS_variable_ID] = "variable_ID";
  artLabelInternalStrings[ARTTS_variable_ID] = "'variable_ID'";
  artKindOfs[ARTTS_variable_ID] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_variable_ID] = true;
  artLabelStrings[ARTTS_while] = "while";
  artLabelInternalStrings[ARTTS_while] = "'while'";
  artKindOfs[ARTTS_while] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_while] = true;
  artLabelStrings[ARTTS_with] = "with";
  artLabelInternalStrings[ARTTS_with] = "'with'";
  artKindOfs[ARTTS_with] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_with] = true;
  artLabelStrings[ARTTS_write] = "write";
  artLabelInternalStrings[ARTTS_write] = "'write'";
  artKindOfs[ARTTS_write] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_write] = true;
  artLabelStrings[ARTTS_writeln] = "writeln";
  artLabelInternalStrings[ARTTS_writeln] = "'writeln'";
  artKindOfs[ARTTS_writeln] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_writeln] = true;
  artTableInitialiser_ART_Boolean_expression();
  artTableInitialiser_ART_ID();
  artTableInitialiser_ART_ID_list();
  artTableInitialiser_ART_ID_list_18();
  artTableInitialiser_ART_actual_parameter();
  artTableInitialiser_ART_actual_parameter_list();
  artTableInitialiser_ART_actual_parameter_list_1();
  artTableInitialiser_ART_adding_operator();
  artTableInitialiser_ART_apostrophe_image();
  artTableInitialiser_ART_array_type();
  artTableInitialiser_ART_array_type_2();
  artTableInitialiser_ART_assignment_statement();
  artTableInitialiser_ART_assignment_statement_3();
  artTableInitialiser_ART_base_type();
  artTableInitialiser_ART_block();
  artTableInitialiser_ART_bound_ID();
  artTableInitialiser_ART_case_constant();
  artTableInitialiser_ART_case_constant_list();
  artTableInitialiser_ART_case_constant_list_4();
  artTableInitialiser_ART_case_index();
  artTableInitialiser_ART_case_list_element();
  artTableInitialiser_ART_case_statement();
  artTableInitialiser_ART_case_statement_5();
  artTableInitialiser_ART_case_statement_6();
  artTableInitialiser_ART_character_string();
  artTableInitialiser_ART_component_type();
  artTableInitialiser_ART_component_variable();
  artTableInitialiser_ART_compound_statement();
  artTableInitialiser_ART_conditional_statement();
  artTableInitialiser_ART_conformant_array_parameter_specification();
  artTableInitialiser_ART_conformant_array_schema();
  artTableInitialiser_ART_constant();
  artTableInitialiser_ART_constant_7();
  artTableInitialiser_ART_constant_8();
  artTableInitialiser_ART_constant_ID();
  artTableInitialiser_ART_constant_definition();
  artTableInitialiser_ART_constant_definition_part();
  artTableInitialiser_ART_constant_definition_part_10();
  artTableInitialiser_ART_constant_definition_part_9();
  artTableInitialiser_ART_control_variable();
  artTableInitialiser_ART_digit();
  artTableInitialiser_ART_digit_sequence();
  artTableInitialiser_ART_directive();
  artTableInitialiser_ART_domain_type();
  artTableInitialiser_ART_else_part();
  artTableInitialiser_ART_entire_variable();
  artTableInitialiser_ART_enumerated_type();
  artTableInitialiser_ART_expression();
  artTableInitialiser_ART_expression_11();
  artTableInitialiser_ART_factor();
  artTableInitialiser_ART_field_ID();
  artTableInitialiser_ART_field_designator();
  artTableInitialiser_ART_field_designator_ID();
  artTableInitialiser_ART_field_list();
  artTableInitialiser_ART_field_list_12();
  artTableInitialiser_ART_field_list_13();
  artTableInitialiser_ART_field_specifier();
  artTableInitialiser_ART_file_type();
  artTableInitialiser_ART_final_value();
  artTableInitialiser_ART_fixed_part();
  artTableInitialiser_ART_for_statement();
  artTableInitialiser_ART_for_statement_14();
  artTableInitialiser_ART_formal_parameter_list();
  artTableInitialiser_ART_formal_parameter_list_15();
  artTableInitialiser_ART_formal_parameter_section();
  artTableInitialiser_ART_fractional_part();
  artTableInitialiser_ART_function_ID();
  artTableInitialiser_ART_function_block();
  artTableInitialiser_ART_function_declaration();
  artTableInitialiser_ART_function_designator();
  artTableInitialiser_ART_function_designator_16();
  artTableInitialiser_ART_function_heading();
  artTableInitialiser_ART_function_heading_17();
  artTableInitialiser_ART_function_identification();
  artTableInitialiser_ART_functional_parameter_specification();
  artTableInitialiser_ART_goto_statement();
  artTableInitialiser_ART_if_statement();
  artTableInitialiser_ART_if_statement_19();
  artTableInitialiser_ART_index_expression();
  artTableInitialiser_ART_index_type();
  artTableInitialiser_ART_index_type_specification();
  artTableInitialiser_ART_indexed_variable();
  artTableInitialiser_ART_indexed_variable_20();
  artTableInitialiser_ART_initial_value();
  artTableInitialiser_ART_label();
  artTableInitialiser_ART_label_declaration_part();
  artTableInitialiser_ART_label_declaration_part_21();
  artTableInitialiser_ART_label_declaration_part_22();
  artTableInitialiser_ART_letter();
  artTableInitialiser_ART_member_designator();
  artTableInitialiser_ART_member_designator_23();
  artTableInitialiser_ART_multiplying_operator();
  artTableInitialiser_ART_new_ordinal_type();
  artTableInitialiser_ART_new_pointer_type();
  artTableInitialiser_ART_new_structured_type();
  artTableInitialiser_ART_new_structured_type_24();
  artTableInitialiser_ART_new_type();
  artTableInitialiser_ART_ordinal_type();
  artTableInitialiser_ART_ordinal_type_ID();
  artTableInitialiser_ART_packed_conformant_array_schema();
  artTableInitialiser_ART_pointer_type();
  artTableInitialiser_ART_pointer_type_ID();
  artTableInitialiser_ART_procedural_parameter_specification();
  artTableInitialiser_ART_procedure_ID();
  artTableInitialiser_ART_procedure_and_function_declaration_part();
  artTableInitialiser_ART_procedure_and_function_declaration_part_25();
  artTableInitialiser_ART_procedure_and_function_declaration_part_26();
  artTableInitialiser_ART_procedure_and_function_heading_part();
  artTableInitialiser_ART_procedure_and_function_heading_part_27();
  artTableInitialiser_ART_procedure_block();
  artTableInitialiser_ART_procedure_declaration();
  artTableInitialiser_ART_procedure_heading();
  artTableInitialiser_ART_procedure_heading_28();
  artTableInitialiser_ART_procedure_identification();
  artTableInitialiser_ART_procedure_statement();
  artTableInitialiser_ART_procedure_statement_29();
  artTableInitialiser_ART_program();
  artTableInitialiser_ART_program_block();
  artTableInitialiser_ART_program_heading();
  artTableInitialiser_ART_program_heading_30();
  artTableInitialiser_ART_program_parameters();
  artTableInitialiser_ART_read_parameter_list();
  artTableInitialiser_ART_read_parameter_list_31();
  artTableInitialiser_ART_readln_parameter_list();
  artTableInitialiser_ART_readln_parameter_list_32();
  artTableInitialiser_ART_readln_parameter_list_33();
  artTableInitialiser_ART_real_type_ID();
  artTableInitialiser_ART_record_section();
  artTableInitialiser_ART_record_type();
  artTableInitialiser_ART_record_variable_list();
  artTableInitialiser_ART_record_variable_list_34();
  artTableInitialiser_ART_relational_operator();
  artTableInitialiser_ART_repeat_statement();
  artTableInitialiser_ART_repetitive_statement();
  artTableInitialiser_ART_result_type();
  artTableInitialiser_ART_scale_factor();
  artTableInitialiser_ART_set_constructor();
  artTableInitialiser_ART_set_constructor_35();
  artTableInitialiser_ART_set_constructor_36();
  artTableInitialiser_ART_set_type();
  artTableInitialiser_ART_sign();
  artTableInitialiser_ART_signed_integer();
  artTableInitialiser_ART_signed_integer_37();
  artTableInitialiser_ART_signed_number();
  artTableInitialiser_ART_signed_real();
  artTableInitialiser_ART_signed_real_38();
  artTableInitialiser_ART_simple_expression();
  artTableInitialiser_ART_simple_expression_39();
  artTableInitialiser_ART_simple_expression_40();
  artTableInitialiser_ART_simple_statement();
  artTableInitialiser_ART_simple_statement_41();
  artTableInitialiser_ART_simple_type();
  artTableInitialiser_ART_simple_type_ID();
  artTableInitialiser_ART_statement();
  artTableInitialiser_ART_statement_42();
  artTableInitialiser_ART_statement_43();
  artTableInitialiser_ART_statement_part();
  artTableInitialiser_ART_statement_sequence();
  artTableInitialiser_ART_statement_sequence_44();
  artTableInitialiser_ART_string_character();
  artTableInitialiser_ART_string_element();
  artTableInitialiser_ART_structured_statement();
  artTableInitialiser_ART_structured_type();
  artTableInitialiser_ART_structured_type_ID();
  artTableInitialiser_ART_subrange_type();
  artTableInitialiser_ART_tag_field();
  artTableInitialiser_ART_tag_type();
  artTableInitialiser_ART_term();
  artTableInitialiser_ART_term_45();
  artTableInitialiser_ART_type_ID();
  artTableInitialiser_ART_type_definition();
  artTableInitialiser_ART_type_definition_part();
  artTableInitialiser_ART_type_definition_part_46();
  artTableInitialiser_ART_type_definition_part_47();
  artTableInitialiser_ART_type_denoter();
  artTableInitialiser_ART_unpacked_conformant_array_schema();
  artTableInitialiser_ART_unpacked_conformant_array_schema_48();
  artTableInitialiser_ART_unpacked_conformant_array_schema_49();
  artTableInitialiser_ART_unpacked_structured_type();
  artTableInitialiser_ART_unsigned_constant();
  artTableInitialiser_ART_unsigned_integer();
  artTableInitialiser_ART_unsigned_number();
  artTableInitialiser_ART_unsigned_real();
  artTableInitialiser_ART_value_conformant_array_specification();
  artTableInitialiser_ART_value_parameter_specification();
  artTableInitialiser_ART_variable_ID();
  artTableInitialiser_ART_variable_access();
  artTableInitialiser_ART_variable_conformant_array_specification();
  artTableInitialiser_ART_variable_declaration();
  artTableInitialiser_ART_variable_declaration_part();
  artTableInitialiser_ART_variable_declaration_part_50();
  artTableInitialiser_ART_variable_declaration_part_51();
  artTableInitialiser_ART_variable_parameter_specification();
  artTableInitialiser_ART_variant();
  artTableInitialiser_ART_variant_part();
  artTableInitialiser_ART_variant_selector();
  artTableInitialiser_ART_variant_selector_52();
  artTableInitialiser_ART_while_statement();
  artTableInitialiser_ART_with_statement();
  artTableInitialiser_ART_write_parameter();
  artTableInitialiser_ART_write_parameter_53();
  artTableInitialiser_ART_write_parameter_54();
  artTableInitialiser_ART_write_parameter_list();
  artTableInitialiser_ART_write_parameter_list_57();
  artTableInitialiser_ART_writeln_parameter_list();
  artTableInitialiser_ART_writeln_parameter_list_55();
  artTableInitialiser_ART_writeln_parameter_list_56();
}

public ARTGeneratedParser(ARTLexerV3 artLexer) {
  this(null, artLexer);
}

public ARTGeneratedParser(ARTGrammar artGrammar, ARTLexerV3 artLexer) {
  super(artGrammar, artLexer);
  artParserKind = "GLL Gen";
  artFirstTerminalLabel = ARTTS__LPAR;
  artFirstUnusedLabel = ARTX_LABEL_EXTENT + 1;
  artSetExtent = 286;
  ARTL_EOS = ARTX_EOS;
  ARTL_EPSILON = ARTX_EPSILON;
  ARTL_DUMMY = ARTX_DUMMY;
  artGrammarKind = ARTModeGrammarKind.BNF;
  artDefaultStartSymbolLabel = ARTL_ART_program;
  artBuildDirectives = "ARTDirectives [inputs=[], inputFilenames=[], directives={suppressPopGuard=false, tweLexicalisations=false, algorithmMode=gllGeneratorPool, tweLongest=false, tweSegments=false, sppfShortest=false, termWrite=false, tweCounts=false, clusteredGSS=false, twePrint=false, rewriteDisable=false, tweAmbiguityClasses=false, sppfAmbiguityAnalysis=false, rewriteConfiguration=false, outputDirectory=., inputCounts=false, twePriority=false, treeShow=false, tweRecursive=false, rewritePostorder=false, rewriteContractum=true, parseCounts=false, predictivePops=false, suppressProductionGuard=false, sppfDead=false, twePrintFull=false, input=0, tweExtents=false, suppressSemantics=false, despatchMode=fragment, treePrintLevel=3, sppfShowFull=false, treePrint=false, sppfChooseCounts=false, log=1, tweDump=false, sppfCycleDetect=false, sppfCountSentences=false, parserName=ARTGeneratedParser, rewriteResume=true, inputPrint=false, lexerName=ARTGeneratedLexer, trace=false, tweTokenWrite=false, tweDead=false, tweShortest=false, rewritePure=true, tweSelectOne=false, smlCycleBreak=false, termPrint=false, suppressTestRepeat=false, rewritePreorder=false, sppfAmbiguityAnalysisFull=false, tweFromSPPF=false, actionSuppress=false, tweLexicalisationsQuick=false, sppfPriority=false, sppfShow=false, rewriteOneStep=false, namespace=, sppfSelectOne=false, FIFODescriptors=false, sppfOrderedLongest=false, verbosity=0, sppfLongest=false, gssShow=false}]";
  artFIFODescriptors = false;
  artSetInitialise();
  artTableInitialise();
}

public void ARTRD_Boolean_expression(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*Boolean_expression ::= expression .*/
    case ARTL_ART_Boolean_expression_200: 
            ARTRD_Boolean_expression(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ID ::= 'ID'  .*/
    case ARTL_ART_ID_208: 
            ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_ID_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ID_list ::= ID ID_list_18 .*/
    case ARTL_ART_ID_list_560: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID_list_18(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_ID_list_18(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ID_list_18 ::= # .*/
    case ARTL_ART_ID_list_18_962: 
            ARTRD_ID_list_18(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ID_list_18 ::= ID_list_18 ','  . ID */
    case ARTL_ART_ID_list_18_968: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID_list_18(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*ID_list_18 ::= ID_list_18 ','  ID .*/
    case ARTL_ART_ID_list_18_970: 
            ARTRD_ID_list_18(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_actual_parameter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*actual_parameter ::= expression .*/
    case ARTL_ART_actual_parameter_24: 
            ARTRD_actual_parameter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*actual_parameter ::= procedure_ID .*/
    case ARTL_ART_actual_parameter_28: 
            ARTRD_actual_parameter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_actual_parameter_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*actual_parameter_list ::= '('  actual_parameter . actual_parameter_list_1 ')'  */
    case ARTL_ART_actual_parameter_list_44: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_actual_parameter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*actual_parameter_list ::= '('  actual_parameter actual_parameter_list_1 . ')'  */
    case ARTL_ART_actual_parameter_list_46: 
      ARTRD_actual_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_actual_parameter_list_1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*actual_parameter_list ::= '('  actual_parameter actual_parameter_list_1 ')'  .*/
    case ARTL_ART_actual_parameter_list_48: 
            ARTRD_actual_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_actual_parameter_list_1(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*actual_parameter_list_1 ::= # .*/
    case ARTL_ART_actual_parameter_list_1_52: 
            ARTRD_actual_parameter_list_1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*actual_parameter_list_1 ::= actual_parameter_list_1 ','  . actual_parameter */
    case ARTL_ART_actual_parameter_list_1_58: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_actual_parameter_list_1(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*actual_parameter_list_1 ::= actual_parameter_list_1 ','  actual_parameter .*/
    case ARTL_ART_actual_parameter_list_1_60: 
            ARTRD_actual_parameter_list_1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_actual_parameter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_adding_operator(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*adding_operator ::= '+'  .*/
    case ARTL_ART_adding_operator_64: 
            ARTRD_adding_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*adding_operator ::= '-'  .*/
    case ARTL_ART_adding_operator_68: 
            ARTRD_adding_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*adding_operator ::= 'or'  .*/
    case ARTL_ART_adding_operator_72: 
            ARTRD_adding_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_apostrophe_image(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*apostrophe_image ::= '\"'  .*/
    case ARTL_ART_apostrophe_image_76: 
            ARTRD_apostrophe_image(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_array_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*array_type ::= 'array'  '['  . index_type array_type_2 ']'  'of'  component_type */
    case ARTL_ART_array_type_82: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*array_type ::= 'array'  '['  index_type . array_type_2 ']'  'of'  component_type */
    case ARTL_ART_array_type_84: 
      ARTRD_array_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_index_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*array_type ::= 'array'  '['  index_type array_type_2 . ']'  'of'  component_type */
    case ARTL_ART_array_type_86: 
      ARTRD_array_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_array_type_2(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*array_type ::= 'array'  '['  index_type array_type_2 ']'  . 'of'  component_type */
    case ARTL_ART_array_type_88: 
      ARTRD_array_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*array_type ::= 'array'  '['  index_type array_type_2 ']'  'of'  . component_type */
    case ARTL_ART_array_type_90: 
      ARTRD_array_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*array_type ::= 'array'  '['  index_type array_type_2 ']'  'of'  component_type .*/
    case ARTL_ART_array_type_92: 
            ARTRD_array_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_component_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_array_type_2(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*array_type_2 ::= # .*/
    case ARTL_ART_array_type_2_100: 
            ARTRD_array_type_2(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*array_type_2 ::= array_type_2 ','  . index_type */
    case ARTL_ART_array_type_2_106: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_array_type_2(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*array_type_2 ::= array_type_2 ','  index_type .*/
    case ARTL_ART_array_type_2_108: 
            ARTRD_array_type_2(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_index_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_assignment_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*assignment_statement ::= assignment_statement_3 ':='  . expression */
    case ARTL_ART_assignment_statement_118: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_assignment_statement_3(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*assignment_statement ::= assignment_statement_3 ':='  expression .*/
    case ARTL_ART_assignment_statement_120: 
            ARTRD_assignment_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_assignment_statement_3(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*assignment_statement_3 ::= variable_access .*/
    case ARTL_ART_assignment_statement_3_124: 
            ARTRD_assignment_statement_3(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*assignment_statement_3 ::= function_ID .*/
    case ARTL_ART_assignment_statement_3_128: 
            ARTRD_assignment_statement_3(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_base_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*base_type ::= ordinal_type .*/
    case ARTL_ART_base_type_150: 
            ARTRD_base_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ordinal_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_block(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*block ::= label_declaration_part constant_definition_part . type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part */
    case ARTL_ART_block_164: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_label_declaration_part(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant_definition_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*block ::= label_declaration_part constant_definition_part type_definition_part . variable_declaration_part procedure_and_function_declaration_part statement_part */
    case ARTL_ART_block_166: 
      ARTRD_block(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_definition_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part . procedure_and_function_declaration_part statement_part */
    case ARTL_ART_block_168: 
      ARTRD_block(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_declaration_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part . statement_part */
    case ARTL_ART_block_170: 
      ARTRD_block(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_and_function_declaration_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part .*/
    case ARTL_ART_block_172: 
            ARTRD_block(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_bound_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*bound_ID ::= ID .*/
    case ARTL_ART_bound_ID_204: 
            ARTRD_bound_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_case_constant(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*case_constant ::= constant .*/
    case ARTL_ART_case_constant_212: 
            ARTRD_case_constant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_case_constant_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*case_constant_list ::= case_constant case_constant_list_4 .*/
    case ARTL_ART_case_constant_list_228: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_case_constant(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_case_constant_list_4(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_case_constant_list_4(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*case_constant_list_4 ::= # .*/
    case ARTL_ART_case_constant_list_4_232: 
            ARTRD_case_constant_list_4(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*case_constant_list_4 ::= case_constant_list_4 ','  . case_constant */
    case ARTL_ART_case_constant_list_4_238: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_case_constant_list_4(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*case_constant_list_4 ::= case_constant_list_4 ','  case_constant .*/
    case ARTL_ART_case_constant_list_4_240: 
            ARTRD_case_constant_list_4(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_case_constant(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_case_index(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*case_index ::= expression .*/
    case ARTL_ART_case_index_244: 
            ARTRD_case_index(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_case_list_element(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*case_list_element ::= case_constant_list ':'  . statement */
    case ARTL_ART_case_list_element_250: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_case_constant_list(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*case_list_element ::= case_constant_list ':'  statement .*/
    case ARTL_ART_case_list_element_252: 
            ARTRD_case_list_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_case_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*case_statement ::= 'case'  case_index . 'of'  case_list_element case_statement_5 case_statement_6 'end'  */
    case ARTL_ART_case_statement_264: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_case_index(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*case_statement ::= 'case'  case_index 'of'  . case_list_element case_statement_5 case_statement_6 'end'  */
    case ARTL_ART_case_statement_266: 
      ARTRD_case_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*case_statement ::= 'case'  case_index 'of'  case_list_element . case_statement_5 case_statement_6 'end'  */
    case ARTL_ART_case_statement_268: 
      ARTRD_case_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_case_list_element(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 . case_statement_6 'end'  */
    case ARTL_ART_case_statement_270: 
      ARTRD_case_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_case_statement_5(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 case_statement_6 . 'end'  */
    case ARTL_ART_case_statement_272: 
      ARTRD_case_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_case_statement_6(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*case_statement ::= 'case'  case_index 'of'  case_list_element case_statement_5 case_statement_6 'end'  .*/
    case ARTL_ART_case_statement_274: 
            ARTRD_case_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_case_statement_5(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*case_statement_5 ::= # .*/
    case ARTL_ART_case_statement_5_278: 
            ARTRD_case_statement_5(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*case_statement_5 ::= case_statement_5 ';'  . case_list_element */
    case ARTL_ART_case_statement_5_284: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_case_statement_5(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*case_statement_5 ::= case_statement_5 ';'  case_list_element .*/
    case ARTL_ART_case_statement_5_286: 
            ARTRD_case_statement_5(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_case_list_element(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_case_statement_6(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*case_statement_6 ::= # .*/
    case ARTL_ART_case_statement_6_290: 
            ARTRD_case_statement_6(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*case_statement_6 ::= ';'  .*/
    case ARTL_ART_case_statement_6_294: 
            ARTRD_case_statement_6(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_character_string(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*character_string ::= 'STRING'  .*/
    case ARTL_ART_character_string_298: 
            ARTRD_character_string(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_component_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*component_type ::= type_denoter .*/
    case ARTL_ART_component_type_112: 
            ARTRD_component_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_denoter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_component_variable(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*component_variable ::= indexed_variable .*/
    case ARTL_ART_component_variable_310: 
            ARTRD_component_variable(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_indexed_variable(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*component_variable ::= field_designator .*/
    case ARTL_ART_component_variable_314: 
            ARTRD_component_variable(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_field_designator(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_compound_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*compound_statement ::= 'begin'  statement_sequence . 'end'  */
    case ARTL_ART_compound_statement_344: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement_sequence(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*compound_statement ::= 'begin'  statement_sequence 'end'  .*/
    case ARTL_ART_compound_statement_346: 
            ARTRD_compound_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_conditional_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*conditional_statement ::= if_statement .*/
    case ARTL_ART_conditional_statement_356: 
            ARTRD_conditional_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_if_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*conditional_statement ::= case_statement .*/
    case ARTL_ART_conditional_statement_360: 
            ARTRD_conditional_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_case_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_conformant_array_parameter_specification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*conformant_array_parameter_specification ::= value_conformant_array_specification .*/
    case ARTL_ART_conformant_array_parameter_specification_376: 
            ARTRD_conformant_array_parameter_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_value_conformant_array_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*conformant_array_parameter_specification ::= variable_conformant_array_specification .*/
    case ARTL_ART_conformant_array_parameter_specification_380: 
            ARTRD_conformant_array_parameter_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_conformant_array_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_conformant_array_schema(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*conformant_array_schema ::= packed_conformant_array_schema .*/
    case ARTL_ART_conformant_array_schema_402: 
            ARTRD_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_packed_conformant_array_schema(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*conformant_array_schema ::= unpacked_conformant_array_schema .*/
    case ARTL_ART_conformant_array_schema_406: 
            ARTRD_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unpacked_conformant_array_schema(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_constant(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*constant ::= constant_7 constant_8 .*/
    case ARTL_ART_constant_218: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_constant_7(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant_8(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*constant ::= character_string .*/
    case ARTL_ART_constant_222: 
            ARTRD_constant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_character_string(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_constant_7(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*constant_7 ::= # .*/
    case ARTL_ART_constant_7_442: 
            ARTRD_constant_7(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*constant_7 ::= sign .*/
    case ARTL_ART_constant_7_446: 
            ARTRD_constant_7(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_sign(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_constant_8(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*constant_8 ::= unsigned_number .*/
    case ARTL_ART_constant_8_450: 
            ARTRD_constant_8(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unsigned_number(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*constant_8 ::= constant_ID .*/
    case ARTL_ART_constant_8_454: 
            ARTRD_constant_8(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_constant_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*constant_ID ::= 'constant_ID'  .*/
    case ARTL_ART_constant_ID_474: 
            ARTRD_constant_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_constant_definition(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*constant_definition ::= ID '='  . constant */
    case ARTL_ART_constant_definition_480: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*constant_definition ::= ID '='  constant .*/
    case ARTL_ART_constant_definition_482: 
            ARTRD_constant_definition(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_constant_definition_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*constant_definition_part ::= constant_definition_part_9 .*/
    case ARTL_ART_constant_definition_part_180: 
            ARTRD_constant_definition_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant_definition_part_9(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_constant_definition_part_10(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*constant_definition_part_10 ::= # .*/
    case ARTL_ART_constant_definition_part_10_500: 
            ARTRD_constant_definition_part_10(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*constant_definition_part_10 ::= constant_definition_part_10 constant_definition . ';'  */
    case ARTL_ART_constant_definition_part_10_506: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_constant_definition_part_10(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant_definition(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*constant_definition_part_10 ::= constant_definition_part_10 constant_definition ';'  .*/
    case ARTL_ART_constant_definition_part_10_508: 
            ARTRD_constant_definition_part_10(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_constant_definition_part_9(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*constant_definition_part_9 ::= # .*/
    case ARTL_ART_constant_definition_part_9_486: 
            ARTRD_constant_definition_part_9(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*constant_definition_part_9 ::= 'const'  constant_definition . ';'  constant_definition_part_10 */
    case ARTL_ART_constant_definition_part_9_492: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant_definition(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*constant_definition_part_9 ::= 'const'  constant_definition ';'  . constant_definition_part_10 */
    case ARTL_ART_constant_definition_part_9_494: 
      ARTRD_constant_definition_part_9(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*constant_definition_part_9 ::= 'const'  constant_definition ';'  constant_definition_part_10 .*/
    case ARTL_ART_constant_definition_part_9_496: 
            ARTRD_constant_definition_part_9(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant_definition_part_10(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_control_variable(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*control_variable ::= entire_variable .*/
    case ARTL_ART_control_variable_512: 
            ARTRD_control_variable(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_entire_variable(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_digit(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*digit ::= 'digit'  .*/
    case ARTL_ART_digit_520: 
            ARTRD_digit(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_digit_sequence(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*digit_sequence ::= 'INTEGER'  .*/
    case ARTL_ART_digit_sequence_524: 
            ARTRD_digit_sequence(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_directive(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*directive ::= 'ID'  .*/
    case ARTL_ART_directive_528: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_domain_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*domain_type ::= type_ID .*/
    case ARTL_ART_domain_type_532: 
            ARTRD_domain_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_else_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*else_part ::= 'else'  statement .*/
    case ARTL_ART_else_part_542: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_entire_variable(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*entire_variable ::= variable_ID .*/
    case ARTL_ART_entire_variable_516: 
            ARTRD_entire_variable(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_enumerated_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*enumerated_type ::= '('  ID_list . ')'  */
    case ARTL_ART_enumerated_type_552: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*enumerated_type ::= '('  ID_list ')'  .*/
    case ARTL_ART_enumerated_type_554: 
            ARTRD_enumerated_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_expression(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*expression ::= simple_expression expression_11 .*/
    case ARTL_ART_expression_34: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_simple_expression(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression_11(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_expression_11(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*expression_11 ::= # .*/
    case ARTL_ART_expression_11_578: 
            ARTRD_expression_11(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*expression_11 ::= relational_operator simple_expression .*/
    case ARTL_ART_expression_11_584: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_relational_operator(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_simple_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_factor(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*factor ::= variable_access .*/
    case ARTL_ART_factor_616: 
            ARTRD_factor(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*factor ::= unsigned_constant .*/
    case ARTL_ART_factor_620: 
            ARTRD_factor(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unsigned_constant(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*factor ::= function_designator .*/
    case ARTL_ART_factor_624: 
            ARTRD_factor(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_designator(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*factor ::= set_constructor .*/
    case ARTL_ART_factor_628: 
            ARTRD_factor(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_set_constructor(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*factor ::= '('  expression . ')'  */
    case ARTL_ART_factor_634: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*factor ::= '('  expression ')'  .*/
    case ARTL_ART_factor_636: 
            ARTRD_factor(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*factor ::= 'not'  factor .*/
    case ARTL_ART_factor_642: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_factor(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_field_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*field_ID ::= 'field_ID'  .*/
    case ARTL_ART_field_ID_684: 
            ARTRD_field_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_field_designator(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*field_designator ::= variable_access '.'  . field_specifier */
    case ARTL_ART_field_designator_332: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*field_designator ::= variable_access '.'  field_specifier .*/
    case ARTL_ART_field_designator_334: 
            ARTRD_field_designator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_field_specifier(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*field_designator ::= field_designator_ID .*/
    case ARTL_ART_field_designator_338: 
            ARTRD_field_designator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_field_designator_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_field_designator_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*field_designator_ID ::= 'field_designator_ID'  .*/
    case ARTL_ART_field_designator_ID_680: 
            ARTRD_field_designator_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_field_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*field_list ::= field_list_12 .*/
    case ARTL_ART_field_list_688: 
            ARTRD_field_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_field_list_12(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*field_list ::= fixed_part ';'  .*/
    case ARTL_ART_field_list_694: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_fixed_part(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*field_list ::= fixed_part ';'  . variant_part */
    case ARTL_ART_field_list_700: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_fixed_part(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*field_list ::= fixed_part ';'  variant_part .*/
    case ARTL_ART_field_list_702: 
            ARTRD_field_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variant_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*field_list ::= fixed_part ';'  . variant_part ';'  */
    case ARTL_ART_field_list_708: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_fixed_part(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*field_list ::= fixed_part ';'  variant_part . ';'  */
    case ARTL_ART_field_list_710: 
      ARTRD_field_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variant_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*field_list ::= fixed_part ';'  variant_part ';'  .*/
    case ARTL_ART_field_list_712: 
            ARTRD_field_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*field_list ::= variant_part field_list_13 .*/
    case ARTL_ART_field_list_718: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_variant_part(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_field_list_13(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_field_list_12(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*field_list_12 ::= # .*/
    case ARTL_ART_field_list_12_722: 
            ARTRD_field_list_12(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*field_list_12 ::= fixed_part .*/
    case ARTL_ART_field_list_12_726: 
            ARTRD_field_list_12(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_fixed_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_field_list_13(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*field_list_13 ::= # .*/
    case ARTL_ART_field_list_13_760: 
            ARTRD_field_list_13(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*field_list_13 ::= ';'  .*/
    case ARTL_ART_field_list_13_764: 
            ARTRD_field_list_13(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_field_specifier(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*field_specifier ::= field_ID .*/
    case ARTL_ART_field_specifier_676: 
            ARTRD_field_specifier(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_field_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_file_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*file_type ::= 'file'  'of'  . component_type */
    case ARTL_ART_file_type_770: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*file_type ::= 'file'  'of'  component_type .*/
    case ARTL_ART_file_type_772: 
            ARTRD_file_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_component_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_final_value(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*final_value ::= expression .*/
    case ARTL_ART_final_value_776: 
            ARTRD_final_value(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_fixed_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*fixed_part ::= record_section .*/
    case ARTL_ART_fixed_part_730: 
            ARTRD_fixed_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_record_section(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*fixed_part ::= fixed_part ';'  . record_section */
    case ARTL_ART_fixed_part_736: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_fixed_part(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*fixed_part ::= fixed_part ';'  record_section .*/
    case ARTL_ART_fixed_part_738: 
            ARTRD_fixed_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_record_section(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_for_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*for_statement ::= 'for'  control_variable . ':='  initial_value for_statement_14 final_value 'do'  statement */
    case ARTL_ART_for_statement_790: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_control_variable(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*for_statement ::= 'for'  control_variable ':='  . initial_value for_statement_14 final_value 'do'  statement */
    case ARTL_ART_for_statement_792: 
      ARTRD_for_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*for_statement ::= 'for'  control_variable ':='  initial_value . for_statement_14 final_value 'do'  statement */
    case ARTL_ART_for_statement_794: 
      ARTRD_for_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_initial_value(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 . final_value 'do'  statement */
    case ARTL_ART_for_statement_796: 
      ARTRD_for_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_for_statement_14(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value . 'do'  statement */
    case ARTL_ART_for_statement_798: 
      ARTRD_for_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_final_value(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value 'do'  . statement */
    case ARTL_ART_for_statement_800: 
      ARTRD_for_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*for_statement ::= 'for'  control_variable ':='  initial_value for_statement_14 final_value 'do'  statement .*/
    case ARTL_ART_for_statement_802: 
            ARTRD_for_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_for_statement_14(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*for_statement_14 ::= 'to'  .*/
    case ARTL_ART_for_statement_14_810: 
            ARTRD_for_statement_14(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*for_statement_14 ::= 'downto'  .*/
    case ARTL_ART_for_statement_14_814: 
            ARTRD_for_statement_14(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_formal_parameter_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*formal_parameter_list ::= '('  formal_parameter_section . formal_parameter_list_15 ')'  */
    case ARTL_ART_formal_parameter_list_820: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_formal_parameter_section(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*formal_parameter_list ::= '('  formal_parameter_section formal_parameter_list_15 . ')'  */
    case ARTL_ART_formal_parameter_list_822: 
      ARTRD_formal_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_formal_parameter_list_15(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*formal_parameter_list ::= '('  formal_parameter_section formal_parameter_list_15 ')'  .*/
    case ARTL_ART_formal_parameter_list_824: 
            ARTRD_formal_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_formal_parameter_list_15(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*formal_parameter_list_15 ::= # .*/
    case ARTL_ART_formal_parameter_list_15_844: 
            ARTRD_formal_parameter_list_15(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*formal_parameter_list_15 ::= formal_parameter_list_15 ';'  . formal_parameter_section */
    case ARTL_ART_formal_parameter_list_15_850: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_formal_parameter_list_15(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*formal_parameter_list_15 ::= formal_parameter_list_15 ';'  formal_parameter_section .*/
    case ARTL_ART_formal_parameter_list_15_852: 
            ARTRD_formal_parameter_list_15(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_formal_parameter_section(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_formal_parameter_section(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*formal_parameter_section ::= value_parameter_specification .*/
    case ARTL_ART_formal_parameter_section_828: 
            ARTRD_formal_parameter_section(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_value_parameter_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*formal_parameter_section ::= variable_parameter_specification .*/
    case ARTL_ART_formal_parameter_section_832: 
            ARTRD_formal_parameter_section(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_parameter_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*formal_parameter_section ::= procedural_parameter_specification .*/
    case ARTL_ART_formal_parameter_section_836: 
            ARTRD_formal_parameter_section(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedural_parameter_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*formal_parameter_section ::= functional_parameter_specification .*/
    case ARTL_ART_formal_parameter_section_840: 
            ARTRD_formal_parameter_section(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_functional_parameter_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_fractional_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*fractional_part ::= digit_sequence .*/
    case ARTL_ART_fractional_part_882: 
            ARTRD_fractional_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_digit_sequence(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_function_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*function_ID ::= 'function_ID'  .*/
    case ARTL_ART_function_ID_146: 
            ARTRD_function_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_function_block(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*function_block ::= block .*/
    case ARTL_ART_function_block_886: 
            ARTRD_function_block(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_block(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_function_declaration(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*function_declaration ::= function_heading ';'  . directive */
    case ARTL_ART_function_declaration_892: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_function_heading(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*function_declaration ::= function_heading ';'  directive .*/
    case ARTL_ART_function_declaration_894: 
            ARTRD_function_declaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_directive(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*function_declaration ::= function_identification ';'  . function_block */
    case ARTL_ART_function_declaration_900: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_function_identification(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*function_declaration ::= function_identification ';'  function_block .*/
    case ARTL_ART_function_declaration_902: 
            ARTRD_function_declaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_block(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*function_declaration ::= function_heading ';'  . function_block */
    case ARTL_ART_function_declaration_908: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_function_heading(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*function_declaration ::= function_heading ';'  function_block .*/
    case ARTL_ART_function_declaration_910: 
            ARTRD_function_declaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_block(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_function_designator(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*function_designator ::= function_ID function_designator_16 .*/
    case ARTL_ART_function_designator_664: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_function_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_designator_16(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_function_designator_16(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*function_designator_16 ::= # .*/
    case ARTL_ART_function_designator_16_932: 
            ARTRD_function_designator_16(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*function_designator_16 ::= actual_parameter_list .*/
    case ARTL_ART_function_designator_16_936: 
            ARTRD_function_designator_16(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_actual_parameter_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_function_heading(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*function_heading ::= 'function'  ID . function_heading_17 ':'  result_type */
    case ARTL_ART_function_heading_916: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*function_heading ::= 'function'  ID function_heading_17 . ':'  result_type */
    case ARTL_ART_function_heading_918: 
      ARTRD_function_heading(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_heading_17(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*function_heading ::= 'function'  ID function_heading_17 ':'  . result_type */
    case ARTL_ART_function_heading_920: 
      ARTRD_function_heading(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*function_heading ::= 'function'  ID function_heading_17 ':'  result_type .*/
    case ARTL_ART_function_heading_922: 
            ARTRD_function_heading(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_result_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_function_heading_17(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*function_heading_17 ::= # .*/
    case ARTL_ART_function_heading_17_940: 
            ARTRD_function_heading_17(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*function_heading_17 ::= formal_parameter_list .*/
    case ARTL_ART_function_heading_17_944: 
            ARTRD_function_heading_17(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_formal_parameter_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_function_identification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*function_identification ::= 'function'  function_ID .*/
    case ARTL_ART_function_identification_928: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_functional_parameter_specification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*functional_parameter_specification ::= function_heading .*/
    case ARTL_ART_functional_parameter_specification_878: 
            ARTRD_functional_parameter_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_heading(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_goto_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*goto_statement ::= 'goto'  label .*/
    case ARTL_ART_goto_statement_954: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_label(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_if_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*if_statement ::= 'if'  Boolean_expression . 'then'  statement if_statement_19 */
    case ARTL_ART_if_statement_366: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_Boolean_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*if_statement ::= 'if'  Boolean_expression 'then'  . statement if_statement_19 */
    case ARTL_ART_if_statement_368: 
      ARTRD_if_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*if_statement ::= 'if'  Boolean_expression 'then'  statement . if_statement_19 */
    case ARTL_ART_if_statement_370: 
      ARTRD_if_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*if_statement ::= 'if'  Boolean_expression 'then'  statement if_statement_19 .*/
    case ARTL_ART_if_statement_372: 
            ARTRD_if_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_if_statement_19(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_if_statement_19(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*if_statement_19 ::= # .*/
    case ARTL_ART_if_statement_19_974: 
            ARTRD_if_statement_19(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*if_statement_19 ::= else_part .*/
    case ARTL_ART_if_statement_19_978: 
            ARTRD_if_statement_19(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_else_part(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_index_expression(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*index_expression ::= expression .*/
    case ARTL_ART_index_expression_982: 
            ARTRD_index_expression(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_index_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*index_type ::= ordinal_type .*/
    case ARTL_ART_index_type_96: 
            ARTRD_index_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ordinal_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_index_type_specification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*index_type_specification ::= ID '..'  . ID ':'  ordinal_type_ID */
    case ARTL_ART_index_type_specification_988: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*index_type_specification ::= ID '..'  ID . ':'  ordinal_type_ID */
    case ARTL_ART_index_type_specification_990: 
      ARTRD_index_type_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*index_type_specification ::= ID '..'  ID ':'  . ordinal_type_ID */
    case ARTL_ART_index_type_specification_992: 
      ARTRD_index_type_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*index_type_specification ::= ID '..'  ID ':'  ordinal_type_ID .*/
    case ARTL_ART_index_type_specification_994: 
            ARTRD_index_type_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ordinal_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_indexed_variable(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*indexed_variable ::= variable_access '['  . index_expression indexed_variable_20 ']'  */
    case ARTL_ART_indexed_variable_320: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*indexed_variable ::= variable_access '['  index_expression . indexed_variable_20 ']'  */
    case ARTL_ART_indexed_variable_322: 
      ARTRD_indexed_variable(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_index_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*indexed_variable ::= variable_access '['  index_expression indexed_variable_20 . ']'  */
    case ARTL_ART_indexed_variable_324: 
      ARTRD_indexed_variable(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_indexed_variable_20(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*indexed_variable ::= variable_access '['  index_expression indexed_variable_20 ']'  .*/
    case ARTL_ART_indexed_variable_326: 
            ARTRD_indexed_variable(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_indexed_variable_20(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*indexed_variable_20 ::= # .*/
    case ARTL_ART_indexed_variable_20_1002: 
            ARTRD_indexed_variable_20(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*indexed_variable_20 ::= indexed_variable_20 ','  . index_expression */
    case ARTL_ART_indexed_variable_20_1008: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_indexed_variable_20(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*indexed_variable_20 ::= indexed_variable_20 ','  index_expression .*/
    case ARTL_ART_indexed_variable_20_1010: 
            ARTRD_indexed_variable_20(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_index_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_initial_value(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*initial_value ::= expression .*/
    case ARTL_ART_initial_value_806: 
            ARTRD_initial_value(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_label(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*label ::= digit_sequence .*/
    case ARTL_ART_label_958: 
            ARTRD_label(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_digit_sequence(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_label_declaration_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*label_declaration_part ::= label_declaration_part_21 .*/
    case ARTL_ART_label_declaration_part_176: 
            ARTRD_label_declaration_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_label_declaration_part_21(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_label_declaration_part_21(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*label_declaration_part_21 ::= # .*/
    case ARTL_ART_label_declaration_part_21_1014: 
            ARTRD_label_declaration_part_21(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*label_declaration_part_21 ::= 'label'  label . label_declaration_part_22 ';'  */
    case ARTL_ART_label_declaration_part_21_1020: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_label(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*label_declaration_part_21 ::= 'label'  label label_declaration_part_22 . ';'  */
    case ARTL_ART_label_declaration_part_21_1022: 
      ARTRD_label_declaration_part_21(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_label_declaration_part_22(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*label_declaration_part_21 ::= 'label'  label label_declaration_part_22 ';'  .*/
    case ARTL_ART_label_declaration_part_21_1024: 
            ARTRD_label_declaration_part_21(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_label_declaration_part_22(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*label_declaration_part_22 ::= # .*/
    case ARTL_ART_label_declaration_part_22_1028: 
            ARTRD_label_declaration_part_22(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*label_declaration_part_22 ::= label_declaration_part_22 ','  . label */
    case ARTL_ART_label_declaration_part_22_1034: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_label_declaration_part_22(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*label_declaration_part_22 ::= label_declaration_part_22 ','  label .*/
    case ARTL_ART_label_declaration_part_22_1036: 
            ARTRD_label_declaration_part_22(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_label(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_letter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*letter ::= 'letter'  .*/
    case ARTL_ART_letter_1040: 
            ARTRD_letter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_member_designator(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*member_designator ::= expression member_designator_23 .*/
    case ARTL_ART_member_designator_1046: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_member_designator_23(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_member_designator_23(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*member_designator_23 ::= # .*/
    case ARTL_ART_member_designator_23_1050: 
            ARTRD_member_designator_23(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*member_designator_23 ::= member_designator_23 '..'  . expression */
    case ARTL_ART_member_designator_23_1056: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_member_designator_23(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*member_designator_23 ::= member_designator_23 '..'  expression .*/
    case ARTL_ART_member_designator_23_1058: 
            ARTRD_member_designator_23(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_multiplying_operator(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*multiplying_operator ::= '*'  .*/
    case ARTL_ART_multiplying_operator_1062: 
            ARTRD_multiplying_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*multiplying_operator ::= '/'  .*/
    case ARTL_ART_multiplying_operator_1066: 
            ARTRD_multiplying_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*multiplying_operator ::= 'div'  .*/
    case ARTL_ART_multiplying_operator_1070: 
            ARTRD_multiplying_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*multiplying_operator ::= 'mod'  .*/
    case ARTL_ART_multiplying_operator_1074: 
            ARTRD_multiplying_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*multiplying_operator ::= 'and'  .*/
    case ARTL_ART_multiplying_operator_1078: 
            ARTRD_multiplying_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_new_ordinal_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*new_ordinal_type ::= enumerated_type .*/
    case ARTL_ART_new_ordinal_type_1082: 
            ARTRD_new_ordinal_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_enumerated_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*new_ordinal_type ::= subrange_type .*/
    case ARTL_ART_new_ordinal_type_1086: 
            ARTRD_new_ordinal_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_subrange_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_new_pointer_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*new_pointer_type ::= '^'  domain_type .*/
    case ARTL_ART_new_pointer_type_1100: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_domain_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_new_structured_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*new_structured_type ::= new_structured_type_24 unpacked_structured_type .*/
    case ARTL_ART_new_structured_type_1106: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_new_structured_type_24(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unpacked_structured_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_new_structured_type_24(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*new_structured_type_24 ::= # .*/
    case ARTL_ART_new_structured_type_24_1110: 
            ARTRD_new_structured_type_24(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*new_structured_type_24 ::= 'packed'  .*/
    case ARTL_ART_new_structured_type_24_1114: 
            ARTRD_new_structured_type_24(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_new_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*new_type ::= new_ordinal_type .*/
    case ARTL_ART_new_type_1134: 
            ARTRD_new_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_new_ordinal_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*new_type ::= new_structured_type .*/
    case ARTL_ART_new_type_1138: 
            ARTRD_new_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_new_structured_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*new_type ::= new_pointer_type .*/
    case ARTL_ART_new_type_1142: 
            ARTRD_new_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_new_pointer_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_ordinal_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ordinal_type ::= new_ordinal_type .*/
    case ARTL_ART_ordinal_type_154: 
            ARTRD_ordinal_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_new_ordinal_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*ordinal_type ::= ordinal_type_ID .*/
    case ARTL_ART_ordinal_type_158: 
            ARTRD_ordinal_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ordinal_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_ordinal_type_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ordinal_type_ID ::= type_ID .*/
    case ARTL_ART_ordinal_type_ID_998: 
            ARTRD_ordinal_type_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_packed_conformant_array_schema(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*packed_conformant_array_schema ::= 'packed'  'array'  . '['  index_type_specification ']'  'of'  type_ID */
    case ARTL_ART_packed_conformant_array_schema_412: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*packed_conformant_array_schema ::= 'packed'  'array'  '['  . index_type_specification ']'  'of'  type_ID */
    case ARTL_ART_packed_conformant_array_schema_414: 
      ARTRD_packed_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification . ']'  'of'  type_ID */
    case ARTL_ART_packed_conformant_array_schema_416: 
      ARTRD_packed_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_index_type_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  . 'of'  type_ID */
    case ARTL_ART_packed_conformant_array_schema_418: 
      ARTRD_packed_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  . type_ID */
    case ARTL_ART_packed_conformant_array_schema_420: 
      ARTRD_packed_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*packed_conformant_array_schema ::= 'packed'  'array'  '['  index_type_specification ']'  'of'  type_ID .*/
    case ARTL_ART_packed_conformant_array_schema_422: 
            ARTRD_packed_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_pointer_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*pointer_type ::= new_pointer_type .*/
    case ARTL_ART_pointer_type_1146: 
            ARTRD_pointer_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_new_pointer_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*pointer_type ::= pointer_type_ID .*/
    case ARTL_ART_pointer_type_1150: 
            ARTRD_pointer_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_pointer_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_pointer_type_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*pointer_type_ID ::= type_ID .*/
    case ARTL_ART_pointer_type_ID_1154: 
            ARTRD_pointer_type_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedural_parameter_specification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedural_parameter_specification ::= procedure_heading .*/
    case ARTL_ART_procedural_parameter_specification_874: 
            ARTRD_procedural_parameter_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_heading(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_ID ::= 'procedure_ID'  .*/
    case ARTL_ART_procedure_ID_38: 
            ARTRD_procedure_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_procedure_and_function_declaration_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_and_function_declaration_part ::= procedure_and_function_declaration_part_25 .*/
    case ARTL_ART_procedure_and_function_declaration_part_192: 
            ARTRD_procedure_and_function_declaration_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_and_function_declaration_part_25(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_and_function_declaration_part_25(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_and_function_declaration_part_25 ::= # .*/
    case ARTL_ART_procedure_and_function_declaration_part_25_1166: 
            ARTRD_procedure_and_function_declaration_part_25(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*procedure_and_function_declaration_part_25 ::= procedure_and_function_declaration_part_25 procedure_and_function_declaration_part_26 . ';'  */
    case ARTL_ART_procedure_and_function_declaration_part_25_1172: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_procedure_and_function_declaration_part_25(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_and_function_declaration_part_26(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_and_function_declaration_part_25 ::= procedure_and_function_declaration_part_25 procedure_and_function_declaration_part_26 ';'  .*/
    case ARTL_ART_procedure_and_function_declaration_part_25_1174: 
            ARTRD_procedure_and_function_declaration_part_25(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_procedure_and_function_declaration_part_26(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_and_function_declaration_part_26 ::= procedure_declaration .*/
    case ARTL_ART_procedure_and_function_declaration_part_26_1178: 
            ARTRD_procedure_and_function_declaration_part_26(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_declaration(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_and_function_declaration_part_26 ::= function_declaration .*/
    case ARTL_ART_procedure_and_function_declaration_part_26_1182: 
            ARTRD_procedure_and_function_declaration_part_26(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_declaration(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_and_function_heading_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_and_function_heading_part ::= procedure_and_function_heading_part_27 ';'  .*/
    case ARTL_ART_procedure_and_function_heading_part_1212: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_procedure_and_function_heading_part_27(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_procedure_and_function_heading_part_27(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_and_function_heading_part_27 ::= procedure_heading .*/
    case ARTL_ART_procedure_and_function_heading_part_27_1216: 
            ARTRD_procedure_and_function_heading_part_27(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_heading(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_and_function_heading_part_27 ::= function_heading .*/
    case ARTL_ART_procedure_and_function_heading_part_27_1220: 
            ARTRD_procedure_and_function_heading_part_27(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_function_heading(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_block(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_block ::= block .*/
    case ARTL_ART_procedure_block_1224: 
            ARTRD_procedure_block(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_block(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_declaration(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_declaration ::= procedure_heading ';'  . directive */
    case ARTL_ART_procedure_declaration_1188: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_procedure_heading(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*procedure_declaration ::= procedure_heading ';'  directive .*/
    case ARTL_ART_procedure_declaration_1190: 
            ARTRD_procedure_declaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_directive(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_declaration ::= procedure_identification ';'  . procedure_block */
    case ARTL_ART_procedure_declaration_1196: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_procedure_identification(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*procedure_declaration ::= procedure_identification ';'  procedure_block .*/
    case ARTL_ART_procedure_declaration_1198: 
            ARTRD_procedure_declaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_block(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_declaration ::= procedure_heading ';'  . procedure_block */
    case ARTL_ART_procedure_declaration_1204: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_procedure_heading(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*procedure_declaration ::= procedure_heading ';'  procedure_block .*/
    case ARTL_ART_procedure_declaration_1206: 
            ARTRD_procedure_declaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_block(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_heading(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_heading ::= 'procedure'  ID . procedure_heading_28 */
    case ARTL_ART_procedure_heading_1160: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_heading ::= 'procedure'  ID procedure_heading_28 .*/
    case ARTL_ART_procedure_heading_1162: 
            ARTRD_procedure_heading(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_heading_28(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_heading_28(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_heading_28 ::= # .*/
    case ARTL_ART_procedure_heading_28_1234: 
            ARTRD_procedure_heading_28(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*procedure_heading_28 ::= formal_parameter_list .*/
    case ARTL_ART_procedure_heading_28_1238: 
            ARTRD_procedure_heading_28(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_formal_parameter_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_identification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_identification ::= 'procedure'  procedure_ID .*/
    case ARTL_ART_procedure_identification_1230: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_statement ::= procedure_ID procedure_statement_29 .*/
    case ARTL_ART_procedure_statement_1244: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_procedure_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_statement_29(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_statement ::= 'read'  read_parameter_list .*/
    case ARTL_ART_procedure_statement_1250: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_read_parameter_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_statement ::= 'readln'  readln_parameter_list .*/
    case ARTL_ART_procedure_statement_1256: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_readln_parameter_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_statement ::= 'write'  write_parameter_list .*/
    case ARTL_ART_procedure_statement_1262: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_write_parameter_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*procedure_statement ::= 'writeln'  writeln_parameter_list .*/
    case ARTL_ART_procedure_statement_1268: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_writeln_parameter_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_procedure_statement_29(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*procedure_statement_29 ::= # .*/
    case ARTL_ART_procedure_statement_29_1272: 
            ARTRD_procedure_statement_29(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*procedure_statement_29 ::= actual_parameter_list .*/
    case ARTL_ART_procedure_statement_29_1276: 
            ARTRD_procedure_statement_29(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_actual_parameter_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_program(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*program ::= program_heading ';'  . program_block */
    case ARTL_ART_program_6: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_program_heading(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*program ::= program_heading ';'  program_block .*/
    case ARTL_ART_program_8: 
            ARTRD_program(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_program_block(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_program_block(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*program_block ::= block .*/
    case ARTL_ART_program_block_20: 
            ARTRD_program_block(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_block(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_program_heading(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*program_heading ::= 'program'  ID . program_heading_30 */
    case ARTL_ART_program_heading_14: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*program_heading ::= 'program'  ID program_heading_30 .*/
    case ARTL_ART_program_heading_16: 
            ARTRD_program_heading(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_program_heading_30(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_program_heading_30(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*program_heading_30 ::= # .*/
    case ARTL_ART_program_heading_30_1308: 
            ARTRD_program_heading_30(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*program_heading_30 ::= '('  program_parameters . ')'  */
    case ARTL_ART_program_heading_30_1314: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_program_parameters(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*program_heading_30 ::= '('  program_parameters ')'  .*/
    case ARTL_ART_program_heading_30_1316: 
            ARTRD_program_heading_30(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_program_parameters(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*program_parameters ::= ID_list .*/
    case ARTL_ART_program_parameters_1320: 
            ARTRD_program_parameters(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_read_parameter_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*read_parameter_list ::= '('  variable_access . read_parameter_list_31 ')'  */
    case ARTL_ART_read_parameter_list_1282: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*read_parameter_list ::= '('  variable_access read_parameter_list_31 . ')'  */
    case ARTL_ART_read_parameter_list_1284: 
      ARTRD_read_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_read_parameter_list_31(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*read_parameter_list ::= '('  variable_access read_parameter_list_31 ')'  .*/
    case ARTL_ART_read_parameter_list_1286: 
            ARTRD_read_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_read_parameter_list_31(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*read_parameter_list_31 ::= # .*/
    case ARTL_ART_read_parameter_list_31_1324: 
            ARTRD_read_parameter_list_31(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*read_parameter_list_31 ::= read_parameter_list_31 ','  . variable_access */
    case ARTL_ART_read_parameter_list_31_1330: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_read_parameter_list_31(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*read_parameter_list_31 ::= read_parameter_list_31 ','  variable_access .*/
    case ARTL_ART_read_parameter_list_31_1332: 
            ARTRD_read_parameter_list_31(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_readln_parameter_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*readln_parameter_list ::= readln_parameter_list_32 .*/
    case ARTL_ART_readln_parameter_list_1290: 
            ARTRD_readln_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_readln_parameter_list_32(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_readln_parameter_list_32(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*readln_parameter_list_32 ::= # .*/
    case ARTL_ART_readln_parameter_list_32_1336: 
            ARTRD_readln_parameter_list_32(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*readln_parameter_list_32 ::= '('  variable_access . readln_parameter_list_33 ')'  */
    case ARTL_ART_readln_parameter_list_32_1342: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*readln_parameter_list_32 ::= '('  variable_access readln_parameter_list_33 . ')'  */
    case ARTL_ART_readln_parameter_list_32_1344: 
      ARTRD_readln_parameter_list_32(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_readln_parameter_list_33(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*readln_parameter_list_32 ::= '('  variable_access readln_parameter_list_33 ')'  .*/
    case ARTL_ART_readln_parameter_list_32_1346: 
            ARTRD_readln_parameter_list_32(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_readln_parameter_list_33(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*readln_parameter_list_33 ::= # .*/
    case ARTL_ART_readln_parameter_list_33_1350: 
            ARTRD_readln_parameter_list_33(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*readln_parameter_list_33 ::= readln_parameter_list_33 ','  . variable_access */
    case ARTL_ART_readln_parameter_list_33_1356: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_readln_parameter_list_33(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*readln_parameter_list_33 ::= readln_parameter_list_33 ','  variable_access .*/
    case ARTL_ART_readln_parameter_list_33_1358: 
            ARTRD_readln_parameter_list_33(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_real_type_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*real_type_ID ::= type_ID .*/
    case ARTL_ART_real_type_ID_1362: 
            ARTRD_real_type_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_record_section(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*record_section ::= ID_list ':'  . type_denoter */
    case ARTL_ART_record_section_782: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID_list(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*record_section ::= ID_list ':'  type_denoter .*/
    case ARTL_ART_record_section_784: 
            ARTRD_record_section(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_denoter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_record_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*record_type ::= 'record'  field_list . 'end'  */
    case ARTL_ART_record_type_1368: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_field_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*record_type ::= 'record'  field_list 'end'  .*/
    case ARTL_ART_record_type_1370: 
            ARTRD_record_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_record_variable_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*record_variable_list ::= variable_access record_variable_list_34 .*/
    case ARTL_ART_record_variable_list_1376: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_record_variable_list_34(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_record_variable_list_34(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*record_variable_list_34 ::= # .*/
    case ARTL_ART_record_variable_list_34_1380: 
            ARTRD_record_variable_list_34(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*record_variable_list_34 ::= record_variable_list_34 ','  . variable_access */
    case ARTL_ART_record_variable_list_34_1386: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_record_variable_list_34(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*record_variable_list_34 ::= record_variable_list_34 ','  variable_access .*/
    case ARTL_ART_record_variable_list_34_1388: 
            ARTRD_record_variable_list_34(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_relational_operator(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*relational_operator ::= '='  .*/
    case ARTL_ART_relational_operator_588: 
            ARTRD_relational_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*relational_operator ::= '<>'  .*/
    case ARTL_ART_relational_operator_592: 
            ARTRD_relational_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*relational_operator ::= '<'  .*/
    case ARTL_ART_relational_operator_596: 
            ARTRD_relational_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*relational_operator ::= '>'  .*/
    case ARTL_ART_relational_operator_600: 
            ARTRD_relational_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*relational_operator ::= '<='  .*/
    case ARTL_ART_relational_operator_604: 
            ARTRD_relational_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*relational_operator ::= '>='  .*/
    case ARTL_ART_relational_operator_608: 
            ARTRD_relational_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*relational_operator ::= 'in'  .*/
    case ARTL_ART_relational_operator_612: 
            ARTRD_relational_operator(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_repeat_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*repeat_statement ::= 'repeat'  statement_sequence . 'until'  Boolean_expression */
    case ARTL_ART_repeat_statement_1394: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement_sequence(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*repeat_statement ::= 'repeat'  statement_sequence 'until'  . Boolean_expression */
    case ARTL_ART_repeat_statement_1396: 
      ARTRD_repeat_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*repeat_statement ::= 'repeat'  statement_sequence 'until'  Boolean_expression .*/
    case ARTL_ART_repeat_statement_1398: 
            ARTRD_repeat_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_Boolean_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_repetitive_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*repetitive_statement ::= repeat_statement .*/
    case ARTL_ART_repetitive_statement_1402: 
            ARTRD_repetitive_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_repeat_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*repetitive_statement ::= while_statement .*/
    case ARTL_ART_repetitive_statement_1406: 
            ARTRD_repetitive_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_while_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*repetitive_statement ::= for_statement .*/
    case ARTL_ART_repetitive_statement_1410: 
            ARTRD_repetitive_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_for_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_result_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*result_type ::= simple_type_ID .*/
    case ARTL_ART_result_type_948: 
            ARTRD_result_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_simple_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_scale_factor(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*scale_factor ::= signed_integer .*/
    case ARTL_ART_scale_factor_1428: 
            ARTRD_scale_factor(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_signed_integer(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_set_constructor(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*set_constructor ::= '['  set_constructor_35 . ']'  */
    case ARTL_ART_set_constructor_670: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_set_constructor_35(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*set_constructor ::= '['  set_constructor_35 ']'  .*/
    case ARTL_ART_set_constructor_672: 
            ARTRD_set_constructor(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_set_constructor_35(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*set_constructor_35 ::= # .*/
    case ARTL_ART_set_constructor_35_1438: 
            ARTRD_set_constructor_35(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*set_constructor_35 ::= member_designator set_constructor_36 .*/
    case ARTL_ART_set_constructor_35_1444: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_member_designator(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_set_constructor_36(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_set_constructor_36(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*set_constructor_36 ::= # .*/
    case ARTL_ART_set_constructor_36_1448: 
            ARTRD_set_constructor_36(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*set_constructor_36 ::= set_constructor_36 ','  . member_designator */
    case ARTL_ART_set_constructor_36_1454: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_set_constructor_36(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*set_constructor_36 ::= set_constructor_36 ','  member_designator .*/
    case ARTL_ART_set_constructor_36_1456: 
            ARTRD_set_constructor_36(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_member_designator(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_set_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*set_type ::= 'set'  'of'  . base_type */
    case ARTL_ART_set_type_1462: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*set_type ::= 'set'  'of'  base_type .*/
    case ARTL_ART_set_type_1464: 
            ARTRD_set_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_base_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_sign(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*sign ::= '+'  .*/
    case ARTL_ART_sign_458: 
            ARTRD_sign(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*sign ::= '-'  .*/
    case ARTL_ART_sign_462: 
            ARTRD_sign(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_signed_integer(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*signed_integer ::= signed_integer_37 unsigned_integer .*/
    case ARTL_ART_signed_integer_1434: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_signed_integer_37(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unsigned_integer(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_signed_integer_37(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*signed_integer_37 ::= # .*/
    case ARTL_ART_signed_integer_37_1468: 
            ARTRD_signed_integer_37(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*signed_integer_37 ::= sign .*/
    case ARTL_ART_signed_integer_37_1472: 
            ARTRD_signed_integer_37(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_sign(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_signed_number(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*signed_number ::= signed_integer .*/
    case ARTL_ART_signed_number_1480: 
            ARTRD_signed_number(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_signed_integer(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*signed_number ::= signed_real .*/
    case ARTL_ART_signed_number_1484: 
            ARTRD_signed_number(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_signed_real(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_signed_real(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*signed_real ::= signed_real_38 unsigned_real .*/
    case ARTL_ART_signed_real_1490: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_signed_real_38(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unsigned_real(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_signed_real_38(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*signed_real_38 ::= # .*/
    case ARTL_ART_signed_real_38_1494: 
            ARTRD_signed_real_38(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*signed_real_38 ::= sign .*/
    case ARTL_ART_signed_real_38_1498: 
            ARTRD_signed_real_38(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_sign(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_simple_expression(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*simple_expression ::= term simple_expression_39 .*/
    case ARTL_ART_simple_expression_566: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_term(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_simple_expression_39(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*simple_expression ::= sign term . simple_expression_40 */
    case ARTL_ART_simple_expression_572: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_sign(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_term(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*simple_expression ::= sign term simple_expression_40 .*/
    case ARTL_ART_simple_expression_574: 
            ARTRD_simple_expression(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_simple_expression_40(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_simple_expression_39(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*simple_expression_39 ::= # .*/
    case ARTL_ART_simple_expression_39_1512: 
            ARTRD_simple_expression_39(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*simple_expression_39 ::= simple_expression_39 adding_operator . term */
    case ARTL_ART_simple_expression_39_1518: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_simple_expression_39(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_adding_operator(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*simple_expression_39 ::= simple_expression_39 adding_operator term .*/
    case ARTL_ART_simple_expression_39_1520: 
            ARTRD_simple_expression_39(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_term(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_simple_expression_40(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*simple_expression_40 ::= # .*/
    case ARTL_ART_simple_expression_40_1524: 
            ARTRD_simple_expression_40(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*simple_expression_40 ::= simple_expression_40 adding_operator . term */
    case ARTL_ART_simple_expression_40_1530: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_simple_expression_40(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_adding_operator(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*simple_expression_40 ::= simple_expression_40 adding_operator term .*/
    case ARTL_ART_simple_expression_40_1532: 
            ARTRD_simple_expression_40(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_term(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_simple_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*simple_statement ::= simple_statement_41 .*/
    case ARTL_ART_simple_statement_1536: 
            ARTRD_simple_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_simple_statement_41(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*simple_statement ::= procedure_statement .*/
    case ARTL_ART_simple_statement_1540: 
            ARTRD_simple_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_procedure_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*simple_statement ::= goto_statement .*/
    case ARTL_ART_simple_statement_1544: 
            ARTRD_simple_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_goto_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_simple_statement_41(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*simple_statement_41 ::= # .*/
    case ARTL_ART_simple_statement_41_1548: 
            ARTRD_simple_statement_41(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*simple_statement_41 ::= assignment_statement .*/
    case ARTL_ART_simple_statement_41_1552: 
            ARTRD_simple_statement_41(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_assignment_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_simple_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*simple_type ::= ordinal_type .*/
    case ARTL_ART_simple_type_1556: 
            ARTRD_simple_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ordinal_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*simple_type ::= real_type_ID .*/
    case ARTL_ART_simple_type_1560: 
            ARTRD_simple_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_real_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_simple_type_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*simple_type_ID ::= type_ID .*/
    case ARTL_ART_simple_type_ID_1424: 
            ARTRD_simple_type_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*statement ::= statement_42 statement_43 .*/
    case ARTL_ART_statement_258: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_statement_42(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement_43(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_statement_42(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*statement_42 ::= # .*/
    case ARTL_ART_statement_42_1564: 
            ARTRD_statement_42(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*statement_42 ::= label ':'  .*/
    case ARTL_ART_statement_42_1570: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_label(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_statement_43(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*statement_43 ::= simple_statement .*/
    case ARTL_ART_statement_43_1574: 
            ARTRD_statement_43(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_simple_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*statement_43 ::= structured_statement .*/
    case ARTL_ART_statement_43_1578: 
            ARTRD_statement_43(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_structured_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_statement_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*statement_part ::= compound_statement .*/
    case ARTL_ART_statement_part_196: 
            ARTRD_statement_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_compound_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_statement_sequence(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*statement_sequence ::= statement statement_sequence_44 .*/
    case ARTL_ART_statement_sequence_352: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_statement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement_sequence_44(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_statement_sequence_44(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*statement_sequence_44 ::= # .*/
    case ARTL_ART_statement_sequence_44_1598: 
            ARTRD_statement_sequence_44(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*statement_sequence_44 ::= statement_sequence_44 ';'  . statement */
    case ARTL_ART_statement_sequence_44_1604: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_statement_sequence_44(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*statement_sequence_44 ::= statement_sequence_44 ';'  statement .*/
    case ARTL_ART_statement_sequence_44_1606: 
            ARTRD_statement_sequence_44(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_string_character(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*string_character ::= 'one_of_a_set_of_implementation_defined_characters'  .*/
    case ARTL_ART_string_character_1610: 
            ARTRD_string_character(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_string_element(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*string_element ::= apostrophe_image .*/
    case ARTL_ART_string_element_1614: 
            ARTRD_string_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_apostrophe_image(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*string_element ::= string_character .*/
    case ARTL_ART_string_element_1618: 
            ARTRD_string_element(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_string_character(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_structured_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*structured_statement ::= compound_statement .*/
    case ARTL_ART_structured_statement_1582: 
            ARTRD_structured_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_compound_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*structured_statement ::= conditional_statement .*/
    case ARTL_ART_structured_statement_1586: 
            ARTRD_structured_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_conditional_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*structured_statement ::= repetitive_statement .*/
    case ARTL_ART_structured_statement_1590: 
            ARTRD_structured_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_repetitive_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*structured_statement ::= with_statement .*/
    case ARTL_ART_structured_statement_1594: 
            ARTRD_structured_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_with_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_structured_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*structured_type ::= new_structured_type .*/
    case ARTL_ART_structured_type_1632: 
            ARTRD_structured_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_new_structured_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*structured_type ::= structured_type_ID .*/
    case ARTL_ART_structured_type_1636: 
            ARTRD_structured_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_structured_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_structured_type_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*structured_type_ID ::= type_ID .*/
    case ARTL_ART_structured_type_ID_1640: 
            ARTRD_structured_type_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_subrange_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*subrange_type ::= constant '..'  . constant */
    case ARTL_ART_subrange_type_1092: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_constant(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*subrange_type ::= constant '..'  constant .*/
    case ARTL_ART_subrange_type_1094: 
            ARTRD_subrange_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_tag_field(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*tag_field ::= 'tag_field'  .*/
    case ARTL_ART_tag_field_1644: 
            ARTRD_tag_field(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_tag_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*tag_type ::= ordinal_type_ID .*/
    case ARTL_ART_tag_type_1648: 
            ARTRD_tag_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ordinal_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_term(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*term ::= factor term_45 .*/
    case ARTL_ART_term_1508: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_factor(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_term_45(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_term_45(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*term_45 ::= # .*/
    case ARTL_ART_term_45_1652: 
            ARTRD_term_45(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*term_45 ::= term_45 multiplying_operator . factor */
    case ARTL_ART_term_45_1658: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_term_45(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_multiplying_operator(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*term_45 ::= term_45 multiplying_operator factor .*/
    case ARTL_ART_term_45_1660: 
            ARTRD_term_45(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_factor(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_type_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*type_ID ::= 'type_ID'  .*/
    case ARTL_ART_type_ID_536: 
            ARTRD_type_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_type_definition(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*type_definition ::= ID '='  . type_denoter */
    case ARTL_ART_type_definition_1666: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*type_definition ::= ID '='  type_denoter .*/
    case ARTL_ART_type_definition_1668: 
            ARTRD_type_definition(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_denoter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_type_definition_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*type_definition_part ::= type_definition_part_46 .*/
    case ARTL_ART_type_definition_part_184: 
            ARTRD_type_definition_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_definition_part_46(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_type_definition_part_46(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*type_definition_part_46 ::= # .*/
    case ARTL_ART_type_definition_part_46_1672: 
            ARTRD_type_definition_part_46(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*type_definition_part_46 ::= 'type'  type_definition . ';'  type_definition_part_47 */
    case ARTL_ART_type_definition_part_46_1678: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_definition(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*type_definition_part_46 ::= 'type'  type_definition ';'  . type_definition_part_47 */
    case ARTL_ART_type_definition_part_46_1680: 
      ARTRD_type_definition_part_46(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*type_definition_part_46 ::= 'type'  type_definition ';'  type_definition_part_47 .*/
    case ARTL_ART_type_definition_part_46_1682: 
            ARTRD_type_definition_part_46(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_definition_part_47(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_type_definition_part_47(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*type_definition_part_47 ::= # .*/
    case ARTL_ART_type_definition_part_47_1686: 
            ARTRD_type_definition_part_47(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*type_definition_part_47 ::= type_definition_part_47 type_definition . ';'  */
    case ARTL_ART_type_definition_part_47_1692: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_type_definition_part_47(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_definition(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*type_definition_part_47 ::= type_definition_part_47 type_definition ';'  .*/
    case ARTL_ART_type_definition_part_47_1694: 
            ARTRD_type_definition_part_47(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_type_denoter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*type_denoter ::= type_ID .*/
    case ARTL_ART_type_denoter_302: 
            ARTRD_type_denoter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*type_denoter ::= new_type .*/
    case ARTL_ART_type_denoter_306: 
            ARTRD_type_denoter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_new_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_unpacked_conformant_array_schema(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*unpacked_conformant_array_schema ::= 'array'  '['  . index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 */
    case ARTL_ART_unpacked_conformant_array_schema_428: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification . unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 */
    case ARTL_ART_unpacked_conformant_array_schema_430: 
      ARTRD_unpacked_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_index_type_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 . ']'  'of'  unpacked_conformant_array_schema_49 */
    case ARTL_ART_unpacked_conformant_array_schema_432: 
      ARTRD_unpacked_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unpacked_conformant_array_schema_48(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  . 'of'  unpacked_conformant_array_schema_49 */
    case ARTL_ART_unpacked_conformant_array_schema_434: 
      ARTRD_unpacked_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  . unpacked_conformant_array_schema_49 */
    case ARTL_ART_unpacked_conformant_array_schema_436: 
      ARTRD_unpacked_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*unpacked_conformant_array_schema ::= 'array'  '['  index_type_specification unpacked_conformant_array_schema_48 ']'  'of'  unpacked_conformant_array_schema_49 .*/
    case ARTL_ART_unpacked_conformant_array_schema_438: 
            ARTRD_unpacked_conformant_array_schema(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unpacked_conformant_array_schema_49(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_unpacked_conformant_array_schema_48(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*unpacked_conformant_array_schema_48 ::= # .*/
    case ARTL_ART_unpacked_conformant_array_schema_48_1698: 
            ARTRD_unpacked_conformant_array_schema_48(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*unpacked_conformant_array_schema_48 ::= unpacked_conformant_array_schema_48 ';'  . index_type_specification */
    case ARTL_ART_unpacked_conformant_array_schema_48_1704: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_unpacked_conformant_array_schema_48(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*unpacked_conformant_array_schema_48 ::= unpacked_conformant_array_schema_48 ';'  index_type_specification .*/
    case ARTL_ART_unpacked_conformant_array_schema_48_1706: 
            ARTRD_unpacked_conformant_array_schema_48(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_index_type_specification(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_unpacked_conformant_array_schema_49(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*unpacked_conformant_array_schema_49 ::= type_ID .*/
    case ARTL_ART_unpacked_conformant_array_schema_49_1710: 
            ARTRD_unpacked_conformant_array_schema_49(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unpacked_conformant_array_schema_49 ::= conformant_array_schema .*/
    case ARTL_ART_unpacked_conformant_array_schema_49_1714: 
            ARTRD_unpacked_conformant_array_schema_49(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_conformant_array_schema(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_unpacked_structured_type(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*unpacked_structured_type ::= array_type .*/
    case ARTL_ART_unpacked_structured_type_1118: 
            ARTRD_unpacked_structured_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_array_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unpacked_structured_type ::= record_type .*/
    case ARTL_ART_unpacked_structured_type_1122: 
            ARTRD_unpacked_structured_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_record_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unpacked_structured_type ::= set_type .*/
    case ARTL_ART_unpacked_structured_type_1126: 
            ARTRD_unpacked_structured_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_set_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unpacked_structured_type ::= file_type .*/
    case ARTL_ART_unpacked_structured_type_1130: 
            ARTRD_unpacked_structured_type(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_file_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_unsigned_constant(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*unsigned_constant ::= unsigned_number .*/
    case ARTL_ART_unsigned_constant_646: 
            ARTRD_unsigned_constant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unsigned_number(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unsigned_constant ::= character_string .*/
    case ARTL_ART_unsigned_constant_650: 
            ARTRD_unsigned_constant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_character_string(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unsigned_constant ::= 'nil'  .*/
    case ARTL_ART_unsigned_constant_654: 
            ARTRD_unsigned_constant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*unsigned_constant ::= constant_ID .*/
    case ARTL_ART_unsigned_constant_658: 
            ARTRD_unsigned_constant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_constant_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_unsigned_integer(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*unsigned_integer ::= digit_sequence .*/
    case ARTL_ART_unsigned_integer_1476: 
            ARTRD_unsigned_integer(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_digit_sequence(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_unsigned_number(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*unsigned_number ::= unsigned_integer .*/
    case ARTL_ART_unsigned_number_466: 
            ARTRD_unsigned_number(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unsigned_integer(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*unsigned_number ::= unsigned_real .*/
    case ARTL_ART_unsigned_number_470: 
            ARTRD_unsigned_number(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_unsigned_real(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_unsigned_real(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*unsigned_real ::= 'REAL'  .*/
    case ARTL_ART_unsigned_real_1502: 
            ARTRD_unsigned_real(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_value_conformant_array_specification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*value_conformant_array_specification ::= ID_list ':'  . conformant_array_schema */
    case ARTL_ART_value_conformant_array_specification_386: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID_list(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*value_conformant_array_specification ::= ID_list ':'  conformant_array_schema .*/
    case ARTL_ART_value_conformant_array_specification_388: 
            ARTRD_value_conformant_array_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_conformant_array_schema(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_value_parameter_specification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*value_parameter_specification ::= ID_list ':'  . type_ID */
    case ARTL_ART_value_parameter_specification_858: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID_list(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*value_parameter_specification ::= ID_list ':'  type_ID .*/
    case ARTL_ART_value_parameter_specification_860: 
            ARTRD_value_parameter_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_variable_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variable_ID ::= 'variable_ID'  .*/
    case ARTL_ART_variable_ID_546: 
            ARTRD_variable_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_variable_access(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variable_access ::= entire_variable .*/
    case ARTL_ART_variable_access_132: 
            ARTRD_variable_access(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_entire_variable(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variable_access ::= component_variable .*/
    case ARTL_ART_variable_access_136: 
            ARTRD_variable_access(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_component_variable(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variable_access ::= variable_access '^'  .*/
    case ARTL_ART_variable_access_142: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_variable_access(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_variable_conformant_array_specification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variable_conformant_array_specification ::= 'var'  ID_list . ':'  conformant_array_schema */
    case ARTL_ART_variable_conformant_array_specification_394: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variable_conformant_array_specification ::= 'var'  ID_list ':'  . conformant_array_schema */
    case ARTL_ART_variable_conformant_array_specification_396: 
      ARTRD_variable_conformant_array_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variable_conformant_array_specification ::= 'var'  ID_list ':'  conformant_array_schema .*/
    case ARTL_ART_variable_conformant_array_specification_398: 
            ARTRD_variable_conformant_array_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_conformant_array_schema(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_variable_declaration(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variable_declaration ::= ID_list ':'  . type_denoter */
    case ARTL_ART_variable_declaration_1720: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID_list(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variable_declaration ::= ID_list ':'  type_denoter .*/
    case ARTL_ART_variable_declaration_1722: 
            ARTRD_variable_declaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_denoter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_variable_declaration_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variable_declaration_part ::= variable_declaration_part_50 .*/
    case ARTL_ART_variable_declaration_part_188: 
            ARTRD_variable_declaration_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_declaration_part_50(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_variable_declaration_part_50(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variable_declaration_part_50 ::= # .*/
    case ARTL_ART_variable_declaration_part_50_1726: 
            ARTRD_variable_declaration_part_50(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variable_declaration_part_50 ::= 'var'  variable_declaration . ';'  variable_declaration_part_51 */
    case ARTL_ART_variable_declaration_part_50_1732: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_declaration(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variable_declaration_part_50 ::= 'var'  variable_declaration ';'  . variable_declaration_part_51 */
    case ARTL_ART_variable_declaration_part_50_1734: 
      ARTRD_variable_declaration_part_50(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variable_declaration_part_50 ::= 'var'  variable_declaration ';'  variable_declaration_part_51 .*/
    case ARTL_ART_variable_declaration_part_50_1736: 
            ARTRD_variable_declaration_part_50(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_declaration_part_51(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_variable_declaration_part_51(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variable_declaration_part_51 ::= # .*/
    case ARTL_ART_variable_declaration_part_51_1740: 
            ARTRD_variable_declaration_part_51(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variable_declaration_part_51 ::= variable_declaration_part_51 variable_declaration . ';'  */
    case ARTL_ART_variable_declaration_part_51_1746: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_variable_declaration_part_51(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variable_declaration(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variable_declaration_part_51 ::= variable_declaration_part_51 variable_declaration ';'  .*/
    case ARTL_ART_variable_declaration_part_51_1748: 
            ARTRD_variable_declaration_part_51(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_variable_parameter_specification(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variable_parameter_specification ::= 'var'  ID_list . ':'  type_ID */
    case ARTL_ART_variable_parameter_specification_866: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variable_parameter_specification ::= 'var'  ID_list ':'  . type_ID */
    case ARTL_ART_variable_parameter_specification_868: 
      ARTRD_variable_parameter_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variable_parameter_specification ::= 'var'  ID_list ':'  type_ID .*/
    case ARTL_ART_variable_parameter_specification_870: 
            ARTRD_variable_parameter_specification(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_type_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_variant(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variant ::= case_constant_list ':'  . '('  field_list ')'  */
    case ARTL_ART_variant_1754: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_case_constant_list(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variant ::= case_constant_list ':'  '('  . field_list ')'  */
    case ARTL_ART_variant_1756: 
      ARTRD_variant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variant ::= case_constant_list ':'  '('  field_list . ')'  */
    case ARTL_ART_variant_1758: 
      ARTRD_variant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_field_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variant ::= case_constant_list ':'  '('  field_list ')'  .*/
    case ARTL_ART_variant_1760: 
            ARTRD_variant(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_variant_part(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variant_part ::= 'case'  variant_selector . 'of'  variant */
    case ARTL_ART_variant_part_744: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variant_selector(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variant_part ::= 'case'  variant_selector 'of'  . variant */
    case ARTL_ART_variant_part_746: 
      ARTRD_variant_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variant_part ::= 'case'  variant_selector 'of'  variant .*/
    case ARTL_ART_variant_part_748: 
            ARTRD_variant_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variant(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*variant_part ::= variant_part ';'  . variant */
    case ARTL_ART_variant_part_754: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_variant_part(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variant_part ::= variant_part ';'  variant .*/
    case ARTL_ART_variant_part_756: 
            ARTRD_variant_part(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_variant(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_variant_selector(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variant_selector ::= variant_selector_52 tag_type .*/
    case ARTL_ART_variant_selector_1766: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_variant_selector_52(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_tag_type(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_variant_selector_52(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*variant_selector_52 ::= # .*/
    case ARTL_ART_variant_selector_52_1770: 
            ARTRD_variant_selector_52(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*variant_selector_52 ::= tag_field ':'  .*/
    case ARTL_ART_variant_selector_52_1776: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_tag_field(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_while_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*while_statement ::= 'while'  Boolean_expression . 'do'  statement */
    case ARTL_ART_while_statement_1416: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_Boolean_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*while_statement ::= 'while'  Boolean_expression 'do'  . statement */
    case ARTL_ART_while_statement_1418: 
      ARTRD_while_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*while_statement ::= 'while'  Boolean_expression 'do'  statement .*/
    case ARTL_ART_while_statement_1420: 
            ARTRD_while_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_with_statement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*with_statement ::= 'with'  record_variable_list . 'do'  statement */
    case ARTL_ART_with_statement_1624: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_record_variable_list(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*with_statement ::= 'with'  record_variable_list 'do'  . statement */
    case ARTL_ART_with_statement_1626: 
      ARTRD_with_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*with_statement ::= 'with'  record_variable_list 'do'  statement .*/
    case ARTL_ART_with_statement_1628: 
            ARTRD_with_statement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_statement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_write_parameter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*write_parameter ::= expression write_parameter_53 .*/
    case ARTL_ART_write_parameter_1782: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_write_parameter_53(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_write_parameter_53(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*write_parameter_53 ::= # .*/
    case ARTL_ART_write_parameter_53_1786: 
            ARTRD_write_parameter_53(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*write_parameter_53 ::= ':'  expression . write_parameter_54 */
    case ARTL_ART_write_parameter_53_1792: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*write_parameter_53 ::= ':'  expression write_parameter_54 .*/
    case ARTL_ART_write_parameter_53_1794: 
            ARTRD_write_parameter_53(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_write_parameter_54(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_write_parameter_54(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*write_parameter_54 ::= # .*/
    case ARTL_ART_write_parameter_54_1798: 
            ARTRD_write_parameter_54(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*write_parameter_54 ::= ':'  expression .*/
    case ARTL_ART_write_parameter_54_1804: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_expression(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_write_parameter_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*write_parameter_list ::= '('  write_parameter . write_parameter_list_57 ')'  */
    case ARTL_ART_write_parameter_list_1296: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_write_parameter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*write_parameter_list ::= '('  write_parameter write_parameter_list_57 . ')'  */
    case ARTL_ART_write_parameter_list_1298: 
      ARTRD_write_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_write_parameter_list_57(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*write_parameter_list ::= '('  write_parameter write_parameter_list_57 ')'  .*/
    case ARTL_ART_write_parameter_list_1300: 
            ARTRD_write_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_write_parameter_list_57(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*write_parameter_list_57 ::= # .*/
    case ARTL_ART_write_parameter_list_57_1834: 
            ARTRD_write_parameter_list_57(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*write_parameter_list_57 ::= write_parameter_list_57 ','  . write_parameter */
    case ARTL_ART_write_parameter_list_57_1840: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_write_parameter_list_57(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*write_parameter_list_57 ::= write_parameter_list_57 ','  write_parameter .*/
    case ARTL_ART_write_parameter_list_57_1842: 
            ARTRD_write_parameter_list_57(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_write_parameter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_writeln_parameter_list(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*writeln_parameter_list ::= writeln_parameter_list_55 .*/
    case ARTL_ART_writeln_parameter_list_1304: 
            ARTRD_writeln_parameter_list(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_writeln_parameter_list_55(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_writeln_parameter_list_55(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*writeln_parameter_list_55 ::= # .*/
    case ARTL_ART_writeln_parameter_list_55_1808: 
            ARTRD_writeln_parameter_list_55(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*writeln_parameter_list_55 ::= '('  write_parameter . writeln_parameter_list_56 ')'  */
    case ARTL_ART_writeln_parameter_list_55_1814: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_write_parameter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*writeln_parameter_list_55 ::= '('  write_parameter writeln_parameter_list_56 . ')'  */
    case ARTL_ART_writeln_parameter_list_55_1816: 
      ARTRD_writeln_parameter_list_55(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_writeln_parameter_list_56(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*writeln_parameter_list_55 ::= '('  write_parameter writeln_parameter_list_56 ')'  .*/
    case ARTL_ART_writeln_parameter_list_55_1818: 
            ARTRD_writeln_parameter_list_55(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_writeln_parameter_list_56(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*writeln_parameter_list_56 ::= # .*/
    case ARTL_ART_writeln_parameter_list_56_1822: 
            ARTRD_writeln_parameter_list_56(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*writeln_parameter_list_56 ::= writeln_parameter_list_56 ','  . write_parameter */
    case ARTL_ART_writeln_parameter_list_56_1828: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_writeln_parameter_list_56(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*writeln_parameter_list_56 ::= writeln_parameter_list_56 ','  write_parameter .*/
    case ARTL_ART_writeln_parameter_list_56_1830: 
            ARTRD_writeln_parameter_list_56(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_write_parameter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void artEvaluate(ARTGLLRDTHandle artElement, ARTGLLAttributeBlock artAttributes, ARTGLLRDTVertex artParent, Boolean artWriteable)  {
  switch (artSPPFNodeLabel(artElement.element)) {
    case ARTL_ART_Boolean_expression: ARTRD_Boolean_expression(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_ID: ARTRD_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_ID_list: ARTRD_ID_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_ID_list_18: ARTRD_ID_list_18(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_actual_parameter: ARTRD_actual_parameter(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_actual_parameter_list: ARTRD_actual_parameter_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_actual_parameter_list_1: ARTRD_actual_parameter_list_1(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_adding_operator: ARTRD_adding_operator(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_apostrophe_image: ARTRD_apostrophe_image(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_array_type: ARTRD_array_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_array_type_2: ARTRD_array_type_2(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_assignment_statement: ARTRD_assignment_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_assignment_statement_3: ARTRD_assignment_statement_3(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_base_type: ARTRD_base_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_block: ARTRD_block(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_bound_ID: ARTRD_bound_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_case_constant: ARTRD_case_constant(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_case_constant_list: ARTRD_case_constant_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_case_constant_list_4: ARTRD_case_constant_list_4(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_case_index: ARTRD_case_index(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_case_list_element: ARTRD_case_list_element(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_case_statement: ARTRD_case_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_case_statement_5: ARTRD_case_statement_5(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_case_statement_6: ARTRD_case_statement_6(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_character_string: ARTRD_character_string(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_component_type: ARTRD_component_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_component_variable: ARTRD_component_variable(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_compound_statement: ARTRD_compound_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_conditional_statement: ARTRD_conditional_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_conformant_array_parameter_specification: ARTRD_conformant_array_parameter_specification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_conformant_array_schema: ARTRD_conformant_array_schema(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_constant: ARTRD_constant(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_constant_7: ARTRD_constant_7(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_constant_8: ARTRD_constant_8(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_constant_ID: ARTRD_constant_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_constant_definition: ARTRD_constant_definition(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_constant_definition_part: ARTRD_constant_definition_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_constant_definition_part_10: ARTRD_constant_definition_part_10(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_constant_definition_part_9: ARTRD_constant_definition_part_9(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_control_variable: ARTRD_control_variable(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_digit: ARTRD_digit(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_digit_sequence: ARTRD_digit_sequence(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_directive: ARTRD_directive(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_domain_type: ARTRD_domain_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_else_part: ARTRD_else_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_entire_variable: ARTRD_entire_variable(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_enumerated_type: ARTRD_enumerated_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_expression: ARTRD_expression(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_expression_11: ARTRD_expression_11(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_factor: ARTRD_factor(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_field_ID: ARTRD_field_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_field_designator: ARTRD_field_designator(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_field_designator_ID: ARTRD_field_designator_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_field_list: ARTRD_field_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_field_list_12: ARTRD_field_list_12(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_field_list_13: ARTRD_field_list_13(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_field_specifier: ARTRD_field_specifier(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_file_type: ARTRD_file_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_final_value: ARTRD_final_value(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_fixed_part: ARTRD_fixed_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_for_statement: ARTRD_for_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_for_statement_14: ARTRD_for_statement_14(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_formal_parameter_list: ARTRD_formal_parameter_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_formal_parameter_list_15: ARTRD_formal_parameter_list_15(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_formal_parameter_section: ARTRD_formal_parameter_section(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_fractional_part: ARTRD_fractional_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_function_ID: ARTRD_function_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_function_block: ARTRD_function_block(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_function_declaration: ARTRD_function_declaration(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_function_designator: ARTRD_function_designator(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_function_designator_16: ARTRD_function_designator_16(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_function_heading: ARTRD_function_heading(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_function_heading_17: ARTRD_function_heading_17(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_function_identification: ARTRD_function_identification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_functional_parameter_specification: ARTRD_functional_parameter_specification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_goto_statement: ARTRD_goto_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_if_statement: ARTRD_if_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_if_statement_19: ARTRD_if_statement_19(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_index_expression: ARTRD_index_expression(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_index_type: ARTRD_index_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_index_type_specification: ARTRD_index_type_specification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_indexed_variable: ARTRD_indexed_variable(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_indexed_variable_20: ARTRD_indexed_variable_20(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_initial_value: ARTRD_initial_value(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_label: ARTRD_label(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_label_declaration_part: ARTRD_label_declaration_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_label_declaration_part_21: ARTRD_label_declaration_part_21(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_label_declaration_part_22: ARTRD_label_declaration_part_22(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_letter: ARTRD_letter(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_member_designator: ARTRD_member_designator(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_member_designator_23: ARTRD_member_designator_23(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_multiplying_operator: ARTRD_multiplying_operator(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_new_ordinal_type: ARTRD_new_ordinal_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_new_pointer_type: ARTRD_new_pointer_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_new_structured_type: ARTRD_new_structured_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_new_structured_type_24: ARTRD_new_structured_type_24(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_new_type: ARTRD_new_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_ordinal_type: ARTRD_ordinal_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_ordinal_type_ID: ARTRD_ordinal_type_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_packed_conformant_array_schema: ARTRD_packed_conformant_array_schema(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_pointer_type: ARTRD_pointer_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_pointer_type_ID: ARTRD_pointer_type_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedural_parameter_specification: ARTRD_procedural_parameter_specification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_ID: ARTRD_procedure_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_and_function_declaration_part: ARTRD_procedure_and_function_declaration_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_and_function_declaration_part_25: ARTRD_procedure_and_function_declaration_part_25(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_and_function_declaration_part_26: ARTRD_procedure_and_function_declaration_part_26(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_and_function_heading_part: ARTRD_procedure_and_function_heading_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_and_function_heading_part_27: ARTRD_procedure_and_function_heading_part_27(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_block: ARTRD_procedure_block(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_declaration: ARTRD_procedure_declaration(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_heading: ARTRD_procedure_heading(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_heading_28: ARTRD_procedure_heading_28(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_identification: ARTRD_procedure_identification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_statement: ARTRD_procedure_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_procedure_statement_29: ARTRD_procedure_statement_29(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_program: ARTRD_program(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_program_block: ARTRD_program_block(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_program_heading: ARTRD_program_heading(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_program_heading_30: ARTRD_program_heading_30(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_program_parameters: ARTRD_program_parameters(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_read_parameter_list: ARTRD_read_parameter_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_read_parameter_list_31: ARTRD_read_parameter_list_31(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_readln_parameter_list: ARTRD_readln_parameter_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_readln_parameter_list_32: ARTRD_readln_parameter_list_32(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_readln_parameter_list_33: ARTRD_readln_parameter_list_33(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_real_type_ID: ARTRD_real_type_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_record_section: ARTRD_record_section(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_record_type: ARTRD_record_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_record_variable_list: ARTRD_record_variable_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_record_variable_list_34: ARTRD_record_variable_list_34(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_relational_operator: ARTRD_relational_operator(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_repeat_statement: ARTRD_repeat_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_repetitive_statement: ARTRD_repetitive_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_result_type: ARTRD_result_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_scale_factor: ARTRD_scale_factor(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_set_constructor: ARTRD_set_constructor(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_set_constructor_35: ARTRD_set_constructor_35(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_set_constructor_36: ARTRD_set_constructor_36(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_set_type: ARTRD_set_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_sign: ARTRD_sign(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_signed_integer: ARTRD_signed_integer(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_signed_integer_37: ARTRD_signed_integer_37(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_signed_number: ARTRD_signed_number(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_signed_real: ARTRD_signed_real(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_signed_real_38: ARTRD_signed_real_38(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_simple_expression: ARTRD_simple_expression(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_simple_expression_39: ARTRD_simple_expression_39(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_simple_expression_40: ARTRD_simple_expression_40(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_simple_statement: ARTRD_simple_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_simple_statement_41: ARTRD_simple_statement_41(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_simple_type: ARTRD_simple_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_simple_type_ID: ARTRD_simple_type_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_statement: ARTRD_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_statement_42: ARTRD_statement_42(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_statement_43: ARTRD_statement_43(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_statement_part: ARTRD_statement_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_statement_sequence: ARTRD_statement_sequence(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_statement_sequence_44: ARTRD_statement_sequence_44(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_string_character: ARTRD_string_character(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_string_element: ARTRD_string_element(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_structured_statement: ARTRD_structured_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_structured_type: ARTRD_structured_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_structured_type_ID: ARTRD_structured_type_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_subrange_type: ARTRD_subrange_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_tag_field: ARTRD_tag_field(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_tag_type: ARTRD_tag_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_term: ARTRD_term(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_term_45: ARTRD_term_45(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_type_ID: ARTRD_type_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_type_definition: ARTRD_type_definition(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_type_definition_part: ARTRD_type_definition_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_type_definition_part_46: ARTRD_type_definition_part_46(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_type_definition_part_47: ARTRD_type_definition_part_47(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_type_denoter: ARTRD_type_denoter(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_unpacked_conformant_array_schema: ARTRD_unpacked_conformant_array_schema(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_unpacked_conformant_array_schema_48: ARTRD_unpacked_conformant_array_schema_48(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_unpacked_conformant_array_schema_49: ARTRD_unpacked_conformant_array_schema_49(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_unpacked_structured_type: ARTRD_unpacked_structured_type(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_unsigned_constant: ARTRD_unsigned_constant(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_unsigned_integer: ARTRD_unsigned_integer(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_unsigned_number: ARTRD_unsigned_number(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_unsigned_real: ARTRD_unsigned_real(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_value_conformant_array_specification: ARTRD_value_conformant_array_specification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_value_parameter_specification: ARTRD_value_parameter_specification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variable_ID: ARTRD_variable_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variable_access: ARTRD_variable_access(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variable_conformant_array_specification: ARTRD_variable_conformant_array_specification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variable_declaration: ARTRD_variable_declaration(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variable_declaration_part: ARTRD_variable_declaration_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variable_declaration_part_50: ARTRD_variable_declaration_part_50(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variable_declaration_part_51: ARTRD_variable_declaration_part_51(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variable_parameter_specification: ARTRD_variable_parameter_specification(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variant: ARTRD_variant(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variant_part: ARTRD_variant_part(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variant_selector: ARTRD_variant_selector(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_variant_selector_52: ARTRD_variant_selector_52(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_while_statement: ARTRD_while_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_with_statement: ARTRD_with_statement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_write_parameter: ARTRD_write_parameter(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_write_parameter_53: ARTRD_write_parameter_53(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_write_parameter_54: ARTRD_write_parameter_54(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_write_parameter_list: ARTRD_write_parameter_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_write_parameter_list_57: ARTRD_write_parameter_list_57(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_writeln_parameter_list: ARTRD_writeln_parameter_list(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_writeln_parameter_list_55: ARTRD_writeln_parameter_list_55(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_writeln_parameter_list_56: ARTRD_writeln_parameter_list_56(artElement.element, artParent, artWriteable); break;
  }
}

};
